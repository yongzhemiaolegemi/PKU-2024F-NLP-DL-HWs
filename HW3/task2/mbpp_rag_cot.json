[
    {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
            "assert remove_Occ(\"\",\"l\") == \"\""
        ],
        "def_code": "def remove_Occ(s,ch):",
        "question_1": "Create a Python function to delete the last character of a given string.",
        "answer_1": "def delete_last_char(string):\n    \"\"\"Delete the last character of a given string.\n\n    Args:\n        string (str): The string to remove the last character from. \n\n    Returns:\n        str: The string with the last character removed.\n    \"\"\"\n    return string[:-1]\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    result = delete_last_char(string)\n    print(result)",
        "question_2": "Write a Python code snippet to remove all occurrences of a character from a string.",
        "answer_2": "def remove_char(s, c):\n  return s.replace(c, '')",
        "question_3": "Develop a Python function to remove the last n characters from a given string.",
        "answer_3": "def remove_last_n_characters(str, n):\n  return str[:len(str)-n]",
        "full_code": "\ndef remove_Occ(s, ch):\n    # Step 1: Find the index of the first occurrence of the character 'ch' in the string 's'\n    first_index = s.find(ch)\n    \n    # Step 2: Find the index of the last occurrence of the character 'ch' in the string 's'\n    last_index = s.rfind(ch)\n    \n    # Step 3: Check if the character 'ch' is present in the string 's'\n    if first_index == -1:\n        # If the character is not found, return the original string\n        return s\n    \n    # Step 4: Remove the first occurrence of the character 'ch'\n    # This can be done by slicing the string before the first occurrence and after the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Step 5: Recalculate the index of the last occurrence of the character 'ch'\n    # since the string has changed after removing the first occurrence\n    last_index = s.rfind(ch)\n    \n    # Step 6: Check if the character 'ch' is still present in the string 's'\n    if last_index == -1:\n        # If the character is not found, return the modified string\n        return s\n    \n    # Step 7: Remove the last occurrence of the character 'ch'\n    # This can be done by slicing the string before the last occurrence and after the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    # Step 8: Return the final modified string\n    return s\n\n# Example usage\nif __name__ == '__main__':\n    s = \"abracadabra\"\n    ch = \"a\"\n    result = remove_Occ(s, ch)\n    print(result)  # Output should be \"brcadabr\"\n",
        "pass": "True"
    },
    {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_matrix(M):",
        "question_1": "Write a Python code to sort a 5x5 numpy matrix from the lowest to highest values.",
        "answer_1": "import numpy as np\n\n# The given array\narr = np.array([[8, 2, 6, 7, 4],\n                [7, 9, 5, 4, 6],\n                [2, 3, 7, 1, 4],\n                [5, 8, 4, 9, 6],\n                [4, 7, 8, 2, 1]])\n\n# Sort the array in ascending order\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1]).argsort() # new added line\n\n# Get the sorted array\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1])[sorted_arr].reshape(arr.shape[0], arr.shape[1])\n\nprint(sorted_arr)",
        "question_2": "Optimize the following Python program for sorting a given array in ascending order such that it runs in O(n) time complexity.",
        "answer_2": "def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    less = []\n    equal = []\n    greater = []\n\n    pivot = A[0]\n    for num in A:\n        if num < pivot:\n            less.append(num)\n        elif num == pivot:\n            equal.append(num)\n        elif num > pivot:\n            greater.append(num)\n\n    return sort_array(less) + equal + sort_array(greater)",
        "question_3": "Create a function in Python that takes a list of numbers as an input and sorts them in ascending order.",
        "answer_3": "def sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr",
        "full_code": "\ndef sort_matrix(M):\n    # Step 1: Calculate the sum of each row and store it along with the row index\n    # This will help us to sort the rows based on their sums later\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # Step 2: Sort the rows based on the calculated sums\n    # We use the sorted() function with a custom key to sort by the sum\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Step 3: Extract the sorted rows from the original matrix\n    # We use the sorted indices to get the rows in the correct order\n    sorted_matrix = [M[i] for _, i in sorted_row_sums]\n    \n    # Step 4: Return the sorted matrix\n    return sorted_matrix\n\n# Example usage:\nM = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 1, 1]\n]\n\nsorted_M = sort_matrix(M)\nprint(sorted_M)\n",
        "pass": "True"
    },
    {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef count_common(words):",
        "question_1": "Write a Python program to print out the most common words in a given text.",
        "answer_1": "import collections\n\ndef most_common_words(text):\n    words = text.split()\n    counts = collections.Counter(words)\n    return counts.most_common(10)",
        "question_2": "Create a code in Python that determines the most common words in a given string?",
        "answer_2": "\"\"\"\nAlgorithm to determine the most common words in a given string\n\"\"\"\n\ndef most_common_words(string):\n    # split the string on whitespace\n    words = string.split()\n\n    # create a dictionary to store the count of each word \n    word_count = {}\n\n    # for each word, add it to the dictionary or increment the count \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n\n    # convert the dictionary into a list of tuples (word, count)\n    count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    return count_list[0][0]\n\nif __name__ == '__main__':\n    string = 'Hello world. This is a sentence.'\n    print('The most common word is:', most_common_words(string))",
        "question_3": "Create a Python program to find the most common word in the given string.",
        "answer_3": "def most_common_word(string):\n    string_list = string.split()\n    word_dict = {}\n    for word in string_list:\n        word_dict[word] = word_dict.get(word, 0) + 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_dict.items():\n        if count > max_count:\n            max_count = count\n            most_common_word = word\n    return most_common_word\n\nprint(most_common_word(string))\n# Output: the",
        "full_code": "\nfrom collections import Counter\n\ndef count_common(words):\n    # Step 1: Convert the dictionary values to a list of words\n    # Reasoning: The Counter object from collections module works best with lists or iterables.\n    word_list = list(words.values())\n    \n    # Step 2: Use the Counter to count the frequency of each word\n    # Reasoning: Counter will automatically count the occurrences of each word in the list.\n    word_counts = Counter(word_list)\n    \n    # Step 3: Get the most common words\n    # Reasoning: The most_common method of Counter returns a list of tuples (word, count) sorted by count.\n    most_common_words = word_counts.most_common()\n    \n    # Step 4: Return the most common words\n    # Reasoning: The function should return the list of most common words and their counts.\n    return most_common_words\n\n# Example usage:\n# words = {'a': 'apple', 'b': 'banana', 'c': 'apple', 'd': 'banana', 'e': 'apple'}\n# print(count_common(words))\n# Output: [('apple', 3), ('banana', 2)]\n",
        "pass": "False"
    },
    {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Volume(l,b,h) :",
        "question_1": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_1": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Design a function to calculate the volume of a cube in Python.",
        "answer_3": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "full_code": "\ndef find_Volume(l, b, h):\n    # Step 1: Calculate the area of the triangular base\n    # The formula for the area of a triangle is (1/2) * base * height\n    # Here, 'b' is the base of the triangle and 'h' is the height of the triangle\n    base_area = (1/2) * b * h\n    \n    # Step 2: Calculate the volume of the triangular prism\n    # The formula for the volume of a triangular prism is base_area * length\n    # Here, 'l' is the length of the prism\n    volume = base_area * l\n    \n    # Step 3: Return the calculated volume\n    return volume\n\n# Example usage:\n# print(find_Volume(5, 4, 3))  # This should print the volume of a triangular prism with length 5, base 4, and height 3\n",
        "pass": "True"
    },
    {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef split_lowerstring(text):",
        "question_1": "Generate a Python program to split a given string into uppercase and lowercase letters.",
        "answer_1": "def case_split(string):\n    string_list =list(string)\n    upper_list = []\n    lower_list = []\n    \n    for i in string_list:\n        if i.isupper():\n            upper_list.append(i)\n        else:\n            lower_list.append(i)\n    return ''.join(upper_list), ''.join(lower_list)",
        "question_2": "Write a Python function to split a given string in two parts which are separated by a space.",
        "answer_2": "def split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1]",
        "question_3": "Create a Python program to split a given string into two parts according to a given character.",
        "answer_3": "def split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result)",
        "full_code": "\nimport re\n\ndef split_lowerstring(text):\n    # Step 1: Initialize an empty list to store the parts of the string\n    parts = []\n    \n    # Step 2: Use regular expression to find all lowercase letters in the string\n    # The regex pattern '[a-z]' matches any single lowercase letter\n    matches = re.finditer('[a-z]', text)\n    \n    # Step 3: Iterate through the matches to split the string at each lowercase letter\n    last_index = 0\n    for match in matches:\n        # Step 4: Get the start index of the current lowercase letter\n        start_index = match.start()\n        \n        # Step 5: If the start index is greater than the last index, it means there is a segment to add\n        if start_index > last_index:\n            # Step 6: Append the segment from the last index to the current start index\n            parts.append(text[last_index:start_index])\n        \n        # Step 7: Append the lowercase letter itself\n        parts.append(match.group())\n        \n        # Step 8: Update the last index to the end of the current match\n        last_index = match.end()\n    \n    # Step 9: If there is any remaining part of the string after the last match, append it\n    if last_index < len(text):\n        parts.append(text[last_index:])\n    \n    # Step 10: Return the list of parts\n    return parts\n\n# Example usage:\nresult = split_lowerstring(\"HElloWorld\")\nprint(result)  # Output: ['H', 'E', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\n",
        "pass": "False"
    },
    {
        "task_id": 16,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
        ],
        "def_code": "import re\r\ndef text_lowercase_underscore(text):",
        "question_1": "Generate a list of letters in lowercase using Python.",
        "answer_1": "import string \n\nprint(list(string.ascii_lowercase))",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Write a Python function to invert a string (swap uppercase and lowercase letters).",
        "answer_3": "def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result",
        "full_code": "\nimport re\n\ndef text_lowercase_underscore(text):\n    # Step 1: Define the regular expression pattern to match sequences of lowercase letters joined with an underscore.\n    # The pattern '[a-z]+_[a-z]+' will match one or more lowercase letters followed by an underscore and then one or more lowercase letters.\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Step 2: Use the re.findall() function to find all occurrences of the pattern in the input text.\n    # re.findall() returns a list of all non-overlapping matches in the string.\n    matches = re.findall(pattern, text)\n    \n    # Step 3: Return the list of matches.\n    return matches\n\n# Example usage:\n# text = \"hello_world this_is_a_test another_example\"\n# print(text_lowercase_underscore(text))  # Output: ['hello_world', 'this_is_a_test', 'another_example']\n",
        "pass": "False"
    },
    {
        "task_id": 17,
        "text": "Write a function to find the perimeter of a square.",
        "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_perimeter(a):",
        "question_1": "Construct a Python class for calculating the area and perimeter of a square.",
        "answer_1": "class Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4",
        "question_2": "Write a Python program which takes the length and width of a rectangle as input and returns its perimeter.",
        "answer_2": "def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter)",
        "question_3": "Write a Python function that computes the area of a square using the side length as a parameter.",
        "answer_3": "def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)",
        "full_code": "\ndef square_perimeter(a):\n    # Step 1: Define the function square_perimeter that takes one parameter 'a' which represents the side length of the square.\n    \n    # Step 2: Calculate the perimeter of the square using the formula: perimeter = 4 * side_length\n    perimeter = 4 * a\n    \n    # Step 3: Return the calculated perimeter\n    return perimeter\n\n# Example usage:\n# side_length = 5\n# print(square_perimeter(side_length))  # Output should be 20\n",
        "pass": "True"
    },
    {
        "task_id": 18,
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string):",
        "question_1": "What Python code can you create to remove the second character from a given string?",
        "answer_1": "removed_string = string[:1] + string[2:]\nprint(removed_string) # \"xample\"",
        "question_2": "Write a code in python to remove given character from a given string.",
        "answer_2": "def remove_char(given_string, character):\n    new_string =  given_string.replace(character, \"\")\n    return new_string",
        "question_3": "Write a Python program to remove duplicate characters from a given string.",
        "answer_3": "string = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)",
        "full_code": "\n# Define the function to convert a string to a list of characters\ndef str_to_list(string):\n    # Initialize an empty list to store characters\n    char_list = []\n    # Iterate over each character in the string\n    for char in string:\n        # Append each character to the list\n        char_list.append(char)\n    # Return the list of characters\n    return char_list\n\n# Define the function to remove characters from the first string which are present in the second string\ndef remove_chars(first_string, second_string):\n    # Convert the second string to a list of characters\n    second_string_list = str_to_list(second_string)\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each character in the first string\n    for char in first_string:\n        # Check if the character is not in the second string list\n        if char not in second_string_list:\n            # If not, append the character to the result string\n            result += char\n    # Return the result string\n    return result\n\n# Example usage\nfirst_string = \"Hello World!\"\nsecond_string = \"oe\"\nprint(remove_chars(first_string, second_string))  # Output: \"Hll Wrld!\"\n",
        "pass": "False"
    },
    {
        "task_id": 19,
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_duplicate(arraynums):",
        "question_1": "Write an algorithm in Python to check whether an input array of integers contains duplicates or not.",
        "answer_1": "def check_duplicates(arr):\n    # Create a set to store elements\n    s = set()\n\n    # Iterate through the array and check if element is in set\n    for num in arr:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n\narr = [3, 5, 2, 4, 2]\n\n# Print the result\nif check_duplicates(arr):\n    print('Array contains duplicates')\nelse:\n    print('Array has no duplicates')\n\n// Output: Array contains duplicates",
        "question_2": "Design an algorithm in Python that can identify duplicate items in a given array of integers.",
        "answer_2": "# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)",
        "question_3": "Write a Python program to detect if an array contains any duplicate elements.",
        "answer_3": "def check_duplicates(arr):\n    seen = set()\n    \n    for element in arr:\n        if element in seen:\n            return True\n        else:\n            seen.add(element)\n    return False\n\narr = [3, 5, 8, 1, 2, 3]\nresult = check_duplicates(arr)\nprint(result)",
        "full_code": "\ndef test_duplicate(arraynums):\n    # Step 1: Initialize an empty set to keep track of seen elements\n    seen_elements = set()\n    \n    # Step 2: Iterate through each element in the input array\n    for num in arraynums:\n        # Step 3: Check if the current element is already in the set of seen elements\n        if num in seen_elements:\n            # Step 4: If the element is found in the set, it means we have a duplicate\n            return True\n        else:\n            # Step 5: If the element is not found, add it to the set of seen elements\n            seen_elements.add(num)\n    \n    # Step 6: If the loop completes without finding any duplicates, return False\n    return False\n\n# Example usage:\narraynums = [1, 2, 3, 4, 5, 1]\nresult = test_duplicate(arraynums)\nprint(result)  # Output should be True if there are duplicates, otherwise False\n",
        "pass": "True"
    },
    {
        "task_id": 20,
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert is_woodall(32212254719) == True",
            "assert is_woodall(32212254718) == False",
            "assert is_woodall(159) == True"
        ],
        "def_code": "def is_woodall(x):",
        "question_1": "Write a Python function to check if a string contains only numbers.",
        "answer_1": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_2": "Construct a program in Python to check if a string contains only digits.",
        "answer_2": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False",
        "question_3": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_3": "def contains_number(string):\n    return any(char.isdigit() for char in string)",
        "full_code": "\ndef is_woodall(x):\n    # Step 1: Check if x is a positive integer\n    # Woodall numbers are defined for positive integers only\n    if not isinstance(x, int) or x <= 0:\n        return False\n    \n    # Step 2: Iterate through possible values of n\n    # Woodall numbers are of the form W(n) = n * 2^n - 1\n    # We need to find if there exists an integer n such that n * 2^n - 1 equals x\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current n\n        woodall_number = n * (2 ** n) - 1\n        \n        # Step 3: Check if the calculated Woodall number matches x\n        if woodall_number == x:\n            return True\n        \n        # Step 4: If the calculated Woodall number exceeds x, stop the loop\n        # This is because Woodall numbers are strictly increasing\n        if woodall_number > x:\n            return False\n        \n        # Increment n to check the next Woodall number\n        n += 1\n\n# Example usage:\n# print(is_woodall(7))  # Should return True, since 7 is a Woodall number (1 * 2^1 - 1)\n# print(is_woodall(15)) # Should return False, since 15 is not a Woodall number\n",
        "pass": "True"
    },
    {
        "task_id": 21,
        "text": "Write a function to find m number of multiples of n.",
        "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "test_list": [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiples_of_num(m,n):",
        "question_1": "Optimize the following code in Python to reduce its complexity.",
        "answer_1": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_2": "Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.",
        "answer_2": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res",
        "question_3": "Write a Python program to determine if one number is a multiple of another.",
        "answer_3": "def is_multiple(num1, num2):\n   if (num1 % num2 == 0):\n       print(f'{num1} is a multiple of {num2}')\n   else:\n       print(f'{num1} is not a multiple of {num2}')\n\nis_multiple(32, 8)\n\nOutput:\n32 is a multiple of 8",
        "full_code": "\ndef multiples_of_num(m, n):\n    # Initialize an empty list to store the multiples\n    multiples = []\n    \n    # Start with the first multiple of n, which is n itself\n    current_multiple = n\n    \n    # Loop until we have found m multiples\n    while len(multiples) < m:\n        # Append the current multiple to the list\n        multiples.append(current_multiple)\n        \n        # Move to the next multiple by adding n to the current multiple\n        current_multiple += n\n    \n    # Return the list of multiples\n    return multiples\n\n# Example usage:\n# print(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\n",
        "pass": "True"
    },
    {
        "task_id": 22,
        "text": "Write a function to find the first duplicate element in a given array of integers.",
        "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "test_list": [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_first_duplicate(nums):",
        "question_1": "Design an algorithm in Python that can identify duplicate items in a given array of integers.",
        "answer_1": "# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)",
        "question_2": "Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number.",
        "answer_2": "def find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4",
        "question_3": "Generate a Python function that will accept an array of integers and remove duplicates from the array.",
        "answer_3": "def remove_duplicates(arr):\n new_arr = [] \n for num in arr: \n if num not in new_arr:\n new_arr.append(num) \n return new_arr",
        "full_code": "\ndef find_first_duplicate(nums):\n    # We need to keep track of the numbers we have seen so far.\n    # Using a set is efficient for this purpose because checking if an element is in a set is O(1) on average.\n    seen = set()\n    \n    # Iterate through each number in the array.\n    for num in nums:\n        # If the number is already in the set, it means we have encountered a duplicate.\n        if num in seen:\n            # Return the duplicate number.\n            return num\n        else:\n            # If the number is not in the set, add it to the set.\n            seen.add(num)\n    \n    # If no duplicates are found, return None.\n    return None\n\n# Example usage:\nnums = [2, 3, 3, 1, 4, 2]\nprint(find_first_duplicate(nums))  # Output: 3\n",
        "pass": "False"
    },
    {
        "task_id": 23,
        "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "test_list": [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
        ],
        "def_code": "def maximum_Sum(list1):",
        "question_1": "Optimize a given Python code snippet for faster performance.",
        "answer_1": "def function1(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        sublist_sum = 0\n        for j in range(i, len(list1)):\n            sublist_sum += list1[j]\n            max_sum = max(max_sum, sublist_sum)\n    return max_sum",
        "question_2": "Write a Python function to find the sublist with the maximum sum in a given list.",
        "answer_2": "def max_sum_sublist(list_a):\n start = 0\n end = 0\n max_sum = 0\n \n current_sum = 0\n for i in range(len(list_a)):\n  current_sum += list_a[i]\n  if current_sum < 0:\n   current_sum = 0\n   start = i + 1\n  if current_sum > max_sum:\n   max_sum = current_sum\n   end = i\n \n return list_a[start:end+1]\n \nmax_sum_sublist(list_a)",
        "question_3": "Optimize the following Python function that returns the sum of all the elements in a given list.",
        "answer_3": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total",
        "full_code": "\ndef maximum_Sum(list1):\n    # Initialize a variable to store the maximum sum found\n    max_sum = float('-inf')\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list1:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sublist's sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum\n\n# Example usage:\n# list1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n# print(maximum_Sum(list1))  # Output should be 30\n",
        "pass": "True"
    },
    {
        "task_id": 24,
        "text": "Write a function to convert the given binary number to its decimal equivalent.",
        "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_decimal(binary):",
        "question_1": "Write a Python program to convert a given binary number to decimal.",
        "answer_1": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_2": "Generate a Python program which will convert the given binary number into its equivalent decimal number",
        "answer_2": "def binary_to_decimal(binary):\n  decimal = 0\n  binary = binary[::-1]\n  for i, num in enumerate(binary):\n    if num == '1':\n      decimal += pow(2, i)\n  return decimal",
        "question_3": "Write a Python program to convert a given binary number to a decimal number.",
        "answer_3": "binary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)",
        "full_code": "\ndef binary_to_decimal(binary):\n    # Initialize the decimal result to 0\n    decimal = 0\n    \n    # Reverse the binary string to start from the least significant bit\n    # This is because we want to process each bit starting from the rightmost (least significant) bit\n    binary = binary[::-1]\n    \n    # Iterate over each character in the reversed binary string\n    for i, bit in enumerate(binary):\n        # Check if the current bit is '1'\n        if bit == '1':\n            # If it is '1', add 2 raised to the power of the current index to the decimal result\n            # This is because each '1' in the binary string represents a power of 2, starting from 2^0\n            decimal += 2 ** i\n    \n    # Return the final decimal result\n    return decimal\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 25,
        "text": "Write a python function to find the product of non-repeated elements in a given array.",
        "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "test_list": [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"
        ],
        "def_code": "def find_Product(arr,n):",
        "question_1": "Create an output array from the given input so that each element in the output is the product of all the other element in the same row.",
        "answer_1": "[180, 144, 120]\n\n# Python \ndef get_products(arr):\n    result = []\n    # looping over each row in the array\n    for row in arr:\n        product = 1\n        # calculating product of all elements except the element at current index \n        for i,element in enumerate(row):\n            product *= row[i] if i != 0 else 1\n        \n        # append product to result array\n        result.append(product)\n    return result",
        "question_2": "Write a Python function to calculate the product of elements in a list.",
        "answer_2": "def product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])",
        "question_3": "Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row.",
        "answer_3": "def rowProduct(arr):\n    result = []\n    for row in arr:\n        product = 1\n        for num in row:\n            product = product * num\n        result.append(product)\n\n    return result\n\narr = [[1, 2], [3, 4]]\n\nresult = rowProduct(arr)\nprint(result)",
        "full_code": "\ndef find_Product(arr, n):\n    # Step 1: Create a set to store unique elements\n    unique_elements = set()\n    \n    # Step 2: Initialize the product variable to 1\n    product = 1\n    \n    # Step 3: Iterate through each element in the array\n    for element in arr:\n        # Step 4: Check if the element is not in the set of unique elements\n        if element not in unique_elements:\n            # Step 5: If it's not in the set, add it to the set and multiply it to the product\n            unique_elements.add(element)\n            product *= element\n        else:\n            # Step 6: If it's already in the set, it means it's a repeated element, so we skip it\n            continue\n    \n    # Step 7: Return the final product of non-repeated elements\n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3]\nn = len(arr)\nresult = find_Product(arr, n)\nprint(result)  # Output should be 4, because the product of non-repeated elements (1, 4) is 4\n",
        "pass": "True"
    },
    {
        "task_id": 26,
        "text": "Write a function to check if the given tuple list has all k elements.",
        "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
        ],
        "def_code": "def check_k_elements(test_list, K):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_2": "def element_exists(elem, list_int):\n  return elem in list_int",
        "question_3": "Convert a given list into a list of tuples using Python.",
        "answer_3": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "full_code": "\ndef check_k_elements(test_list, K):\n    # Step 1: Initialize a counter to keep track of the number of elements that match K\n    count = 0\n    \n    # Step 2: Iterate through each tuple in the list\n    for tup in test_list:\n        # Step 3: Check if the first element of the tuple is equal to K\n        if tup[0] == K:\n            # Step 4: If it is, increment the counter\n            count += 1\n    \n    # Step 5: After the loop, check if the counter is equal to the length of the list\n    # If it is, it means all tuples have K as their first element\n    return count == len(test_list)\n\n# Example usage:\n# test_list = [(1, 'a'), (1, 'b'), (1, 'c')]\n# K = 1\n# print(check_k_elements(test_list, K))  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 27,
        "text": "Write a python function to remove all digits from a list of strings.",
        "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "test_list": [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\ndef remove(list):",
        "question_1": "Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string.",
        "answer_1": "def remove_chars_at_indices(str, indices):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i not in indices:\n            new_str += str[i]\n    return new_str\n\nstr = \"Hello World!\"\nindex = [0, 5, 9]\nresult = remove_chars_at_indices(str, index)\nprint(result)",
        "question_2": "Create a function in Python that takes a given number, removes all its digits and returns an integer.",
        "answer_2": "def removeDigits(x):\n    str_x = str(x)\n    without_digits = int(\"\".join([i for i in str_x if not i.isdigit()]))\n    return without_digits\n\nx = 356\nprint(removeDigits(x))",
        "question_3": "Write a Python program to delete all occurrences of a given number from a list",
        "answer_3": "def remove_all(num, lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] != num:\n            result.append(lst[i])\n    return result",
        "full_code": "\nimport re  \n\ndef remove(list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in list:\n        # Use regular expression to remove all digits from the string\n        # The regex pattern '\\d' matches any digit\n        # The sub() function replaces all matches with an empty string\n        cleaned_string = re.sub(r'\\d', '', string)\n        \n        # Append the cleaned string to the result list\n        result.append(cleaned_string)\n    \n    # Return the list of cleaned strings\n    return result\n\n# Example usage:\n# list_of_strings = [\"abc123\", \"45def\", \"6ghi7\"]\n# print(remove(list_of_strings))\n",
        "pass": "True"
    },
    {
        "task_id": 28,
        "text": "Write a python function to find binomial co-efficient.",
        "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "test_list": [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert binomial_Coeff(14,6) == 3003"
        ],
        "def_code": "def binomial_Coeff(n,k):",
        "question_1": "Generate a list of the binomial coefficients for a given value of \"n\" using a Python function.",
        "answer_1": "def binomial_coefficient(n):\n  coefficient = []\n  for k in range(n+1):\n    coefficient.append(int(math.factorial(n) / \n                        (math.factorial(k) * math.factorial(n - k))))\n  return coefficient",
        "question_2": "Given the following Python function, use optimization techniques to reduce the running time of the function.",
        "answer_2": "def functionA_opt(n):\n s = 0\n s = n*(n+1)*(n+2) // 6\n return s",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result",
        "full_code": "\ndef binomial_Coeff(n, k):\n    # Step 1: Initialize the result variable to store the binomial coefficient\n    # The binomial coefficient C(n, k) is defined as n! / (k! * (n-k)!)\n    # We will use a variable 'result' to store the final value\n    result = 1\n\n    # Step 2: Handle the case where k is greater than n\n    # If k is greater than n, the binomial coefficient is 0 by definition\n    if k > n:\n        return 0\n\n    # Step 3: Handle the case where k is 0 or k is equal to n\n    # If k is 0 or k is equal to n, the binomial coefficient is 1 by definition\n    if k == 0 or k == n:\n        return 1\n\n    # Step 4: Use the property of binomial coefficients to optimize the calculation\n    # C(n, k) = C(n, n-k)\n    # This property can be used to reduce the number of multiplications\n    if k > n - k:\n        k = n - k\n\n    # Step 5: Calculate the binomial coefficient using the iterative method\n    # We will iterate from 0 to k-1 and multiply the result by (n-i) and divide by (i+1)\n    # This avoids the need to calculate factorials directly, which is computationally expensive\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n\n    # Step 6: Return the final result\n    return result\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 29,
        "text": "Write a python function to find the element occurring odd number of times.",
        "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "test_list": [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Odd_Occurrence(arr,arr_size):",
        "question_1": "Implement a Python function that takes a list of numbers as an input and counts the number of odd numbers in the list.",
        "answer_1": "def countOddNumbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n    return count\n\ncount = countOddNumbers([2, 3, 5, 7])\nprint(\"Number of odd numbers found: \" + str(count))",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Write a Python program to extract odd elements from a list.",
        "answer_3": "mylist = [2, 3, 4, 5, 6, 7, 8]\n\nodd_list = []\nfor num in mylist:\n    if num % 2 != 0:\n        odd_list.append(num)\n\nprint(odd_list) #[3, 5, 7]",
        "full_code": "\ndef get_Odd_Occurrence(arr, arr_size):\n    # Step 1: Initialize a dictionary to keep track of the count of each element\n    count_dict = {}\n    \n    # Step 2: Iterate through the array to count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            # If the element is already in the dictionary, increment its count\n            count_dict[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count_dict[num] = 1\n    \n    # Step 3: Iterate through the dictionary to find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            # Step 4: Return the element that occurs an odd number of times\n            return key\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nresult = get_Odd_Occurrence(arr, arr_size)\nprint(\"The element occurring odd number of times is:\", result)\n",
        "pass": "True"
    },
    {
        "task_id": 30,
        "text": "Write a python function to count all the substrings starting and ending with same characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "question_1": "Generate an algorithm to count substrings in Python.",
        "answer_1": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "question_2": "Construct a program in Python to find all the possible substrings of a given string.",
        "answer_2": "def find_substrings(string): \n  \n    # Create an empty list to store all the possible substrings\n    substrings = [] \n  \n    # Iterate through each character of the string\n    for i in range(len(string)): \n        for j in range(i, len(string)): \n            substrings.append(string[i: j + 1]) \n  \n    return substrings",
        "question_3": "Create a Python program that finds the longest substring from a given string without repeating characters.",
        "answer_3": "def longestSubstring(str) : \n n = len(str) \n  \n # Create a map of distinct characters \n distinct_char = {}  \n for i in range(n) : \n distinct_char[str[i]] = i \n  \n cur_start = 0\n cur_end = 0\n max_start = 0\n max_end = 0\n max_len = 0\n  \n # Iterate through all characters and check   \n # if it forms a valid substring or not \n for i in range(n) : \n  \n # If character is already present \n if (str[i] in distinct_char) : \n  \n # Reset the cur_end to recent position \n cur_end = i \n  \n # If character is not present in the  \n # already formed substring, then \n # update max_len if required  \n if (cur_end - cur_start + 1 > max_len) : \n max_len = cur_end - cur_start + 1\n max_start = cur_start \n max_end = cur_end \n  \n # Update cur_start for next iteration \n cur_start += 1\n  \n # Store last occurrence of current  \n # character in the map \n distinct_char[str[i]] = i \n  \n print(str[max_start : max_end + 1]) \n  \n# Driver \nstr = \"abcabcbb\"\nlongestSubstring(str) # Prints \"abc\"",
        "full_code": "\ndef check_Equality(s):\n    # Initialize a counter to keep track of the number of valid substrings\n    count = 0\n    \n    # Get the length of the string\n    n = len(s)\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        # For each character, iterate through the rest of the string\n        for j in range(i, n):\n            # Check if the substring starts and ends with the same character\n            if s[i] == s[j]:\n                # If they are the same, increment the counter\n                count += 1\n    \n    # Return the total count of valid substrings\n    return count\n\n# Example usage:\ns = \"abcab\"\nresult = check_Equality(s)\nprint(result)  # Output should be 7 (a, b, c, a, b, aba, bcb)\n",
        "pass": "False"
    },
    {
        "task_id": 31,
        "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "test_list": [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def func(nums, k):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Construct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].",
        "answer_2": "class MaxPQ:\n    def __init__(self, arr = []):\n        self.heap = [0]\n        for item in arr:\n            self.add(item)\n    \n    def add(self, key):\n        self.heap.append(key)\n        self._swim(len(self.heap)-1)\n    \n    def delMax(self):\n        root = self.heap[1]\n        self.heap[1] = self.heap[-1]\n        self.heap.pop()\n        self._sink(1)\n        return root\n    \n    def _swim(self, k):\n        while k > 1 and self.heap[k] > self.heap[k//2]:\n            temp = self.heap[k]\n            self.heap[k] = self.heap[k//2]\n            self.heap[k//2] = temp\n            k = k//2\n    \n    def _sink(self, k):\n        while 2*k <= len(self.heap)-1:\n            j = 2*k\n            if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]:\n                j += 1\n            if self.heap[j] > self.heap[k]:\n                temp = self.heap[j]\n                self.heap[j] = self.heap[k]\n                self.heap[k] = temp\n                k = j\n            else:\n                break\n\npq = MaxPQ([25,2,105,62,12])",
        "question_3": "Write a code to implement a priority queue using a max heap in Python",
        "answer_3": "class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1",
        "full_code": "\ndef func(nums, k):\n    # Step 1: Create a dictionary to count the frequency of each number in the list\n    frequency_dict = {}\n    for num in nums:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Step 2: Use a min-heap to keep track of the top k frequent numbers\n    # We use a min-heap because it allows us to efficiently remove the smallest element\n    # and maintain the top k elements as we iterate through the frequency dictionary\n    import heapq\n    min_heap = []\n    \n    for num, freq in frequency_dict.items():\n        # Step 3: Push the frequency and number as a tuple into the heap\n        # We use negative frequency to simulate a max-heap using a min-heap\n        heapq.heappush(min_heap, (-freq, num))\n    \n    # Step 4: Extract the top k frequent numbers from the heap\n    top_k_frequent = []\n    for _ in range(k):\n        freq, num = heapq.heappop(min_heap)\n        top_k_frequent.append(num)\n    \n    return top_k_frequent\n\n# Example usage:\n# nums = [1, 1, 1, 2, 2, 3]\n# k = 2\n# print(func(nums, k))  # Output should be [1, 2]\n",
        "pass": "False"
    },
    {
        "task_id": 32,
        "text": "Write a python function to find the largest prime factor of a given number.",
        "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "test_list": [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef max_Prime_Factors (n):",
        "question_1": "Optimize the following Python function to calculate the largest prime factor of a given number.",
        "answer_1": "def largest_prime_factor(n):\n    largest_factor = 1\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            largest_factor = i\n            n /= i\n        else:\n            i+=1\n    if n > largest_factor:\n        largest_factor = n\n    return int(largest_factor)\n\nprint(largest_prime_factor(24)) # Output: 3",
        "question_2": "Write a Python program that calculates the largest prime factor of a given number.",
        "answer_2": "def is_prime(num):\n for i in range(2, int(num**0.5) + 1):\n  if num % i == 0:\n   return False\n return True\n\ndef largest_prime_factor(n):\n for i in range(2, n + 1):\n  if n % i == 0 and is_prime(i):\n   lpf = i\n return lpf\n\nprint(largest_prime_factor(60))\n# Output: 5",
        "question_3": "Construct a program in Python that determines the largest prime factor of a number.",
        "answer_3": "def find_largest_prime_factor(number):\n  i = 2\n  while i < number // 2:\n    if number % i == 0:\n      number = number // i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))",
        "full_code": "\nimport math\n\ndef max_Prime_Factors(n):\n    # Step 1: Initialize the largest factor to 1\n    # This will store the largest prime factor found\n    largest_factor = 1\n    \n    # Step 2: Divide the number by 2 until it is no longer divisible by 2\n    # This handles the case where the number is even\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Step 3: Check for odd factors from 3 to the square root of the number\n    # We start from 3 and increment by 2 to skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, update the largest factor and divide n by i\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # Step 4: If n is still greater than 2, then n itself is a prime factor\n    # This handles the case where n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    # Step 5: Return the largest prime factor found\n    return largest_factor\n\n# Example usage:\nprint(max_Prime_Factors(300))  # Output: 5\n",
        "pass": "True"
    },
    {
        "task_id": 33,
        "text": "Write a python function to convert a decimal number to binary number.",
        "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_To_Binary(N):",
        "question_1": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_1": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_2": "Write a Python program to convert a given binary number to decimal.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_3": "Create a python program to convert a decimal to its binary representation",
        "answer_3": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary",
        "full_code": "\ndef decimal_To_Binary(N):\n    # Step 1: Check if the input number is zero\n    # If the number is zero, its binary representation is also zero\n    if N == 0:\n        return \"0\"\n    \n    # Step 2: Initialize an empty string to store the binary representation\n    binary_representation = \"\"\n    \n    # Step 3: Use a loop to convert the decimal number to binary\n    # We will repeatedly divide the number by 2 and store the remainder\n    # The remainders will be the binary digits in reverse order\n    while N > 0:\n        # Step 4: Get the remainder when the number is divided by 2\n        # This remainder is the next binary digit (0 or 1)\n        remainder = N % 2\n        \n        # Step 5: Append the remainder to the binary representation string\n        # Since we are building the binary number from least significant to most significant bit,\n        # we need to prepend the remainder to the string\n        binary_representation = str(remainder) + binary_representation\n        \n        # Step 6: Update the number by performing integer division by 2\n        N = N // 2\n    \n    # Step 7: Return the binary representation string\n    return binary_representation\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef decimal_To_Binary(N):\n    if N == 0:\n        return \"0\"\n    binary_representation = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_representation = str(remainder) + binary_representation\n        N = N // 2\n    return binary_representation\n\"\"\"\n",
        "pass": "False"
    },
    {
        "task_id": 34,
        "text": "Write a python function to find the missing number in a sorted array.",
        "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "test_list": [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_missing(ar,N):",
        "question_1": "Create a Python script to detect any missing numbers in a given sorted array and return the missing numbers.",
        "answer_1": "def missingNumbers(arr):\n        start = arr[0]\n        end = arr[len(arr)-1]\n        \n        result = []\n        \n        for i in range(start, end+1):\n            if i not in arr:\n                result.append(i)\n                \n        return result\n\n# Test Case\narr = [2, 3, 5, 6, 7, 8, 10]\nprint(missingNumbers(arr))\n\n# Output:\n# [4, 9]",
        "question_2": "In Python, write a program to find a single missing number in a sorted array of unique integers.",
        "answer_2": "def findMissingNumber(arr):\n    n = len(arr)\n    total_sum = (n+1)*(n+2)//2\n    arr_sum = sum(arr)\n    \n    missing_number = total_sum - arr_sum\n    \n    return missing_number\n\narr = [1,2,3,4,6,7,8]\n\nprint(findMissingNumber(arr))",
        "question_3": "Design a function in Python for finding the missing number in an array of integers.",
        "answer_3": "def find_missing_number(arr):\n # Set to store all numbers from 1 to the last element in the array\n # For an array of length n, the last element has value n \n all_nums = set(range(1, arr[-1] + 1)) \n \n # Set to store all numbers present in the array\n arr_nums = set(arr) \n  \n return list(all_nums - arr_nums)[0] \n\n# Test\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9]))\n# Output: 5",
        "full_code": "\ndef find_missing(ar, N):\n    # Step 1: Calculate the expected sum of the first N natural numbers.\n    # This can be done using the formula for the sum of the first N natural numbers: N * (N + 1) / 2\n    expected_sum = N * (N + 1) // 2\n    \n    # Step 2: Calculate the actual sum of the elements in the array.\n    actual_sum = sum(ar)\n    \n    # Step 3: The missing number is the difference between the expected sum and the actual sum.\n    missing_number = expected_sum - actual_sum\n    \n    # Step 4: Return the missing number.\n    return missing_number\n\n# Example usage:\n# ar = [1, 2, 3, 5]  # Missing number is 4\n# N = 5  # Total numbers including the missing one\n# print(find_missing(ar, N))  # Output should be 4\n",
        "pass": "False"
    },
    {
        "task_id": 35,
        "text": "Write a function to find the n-th rectangular number.",
        "code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "test_list": [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rect_num(n):",
        "question_1": "Write a Python function to create a list containing the squares of numbers up to n.",
        "answer_1": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))",
        "question_2": "Design an algorithm in Python that prints out the squares of each number between 1 and n.",
        "answer_2": "def printSquares(n):\n for num in range(1,n+1):\n sqr = num * num\n print(sqr)\n\nn = 8\nprintSquares(n)",
        "question_3": "Design a program in Python to detect if a given number is a perfect square?",
        "answer_3": "# function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False",
        "full_code": "\ndef find_rect_num(n):\n    # Rectangular numbers are also known as pronic numbers or oblong numbers.\n    # The n-th rectangular number is given by the formula n * (n + 1).\n    # This formula arises because rectangular numbers are the product of two consecutive integers.\n    \n    # Calculate the n-th rectangular number using the formula\n    rect_num = n * (n + 1)\n    \n    # Return the calculated rectangular number\n    return rect_num\n\n# Example usage:\n# print(find_rect_num(5))  # This should output 30, since 5 * (5 + 1) = 30\n",
        "pass": "True"
    },
    {
        "task_id": 36,
        "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "test_list": [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Nth_Digit(p,q,N) :",
        "question_1": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_1": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b",
        "question_2": "Generate a Python program to divide two numbers and produce the result in decimal form.",
        "answer_2": "def divide(a,b):\n return round(a/b, 2)",
        "question_3": "Write a Python list comprehension to extract the individual digits of a given number.",
        "answer_3": "[int(d) for d in str(num)]",
        "full_code": "\ndef find_Nth_Digit(p, q, N):\n    # Step 1: Calculate the decimal representation of the fraction p/q\n    # We use the divmod function to get both the quotient and the remainder\n    # The quotient will be the integer part of the division, and the remainder will be used to find the decimal part\n    integer_part, remainder = divmod(p, q)\n    \n    # Step 2: Initialize a list to store the digits of the decimal part\n    decimal_digits = []\n    \n    # Step 3: Use a dictionary to detect recurring sequences (if any)\n    # This helps in handling repeating decimals\n    remainders_seen = {}\n    \n    # Step 4: Loop to find the decimal digits\n    while remainder != 0:\n        # If the remainder has been seen before, it means we have a repeating sequence\n        if remainder in remainders_seen:\n            # Break the loop as we don't need to continue further\n            break\n        \n        # Store the position of this remainder to detect the start of the repeating sequence\n        remainders_seen[remainder] = len(decimal_digits)\n        \n        # Multiply the remainder by 10 to continue the division process\n        remainder *= 10\n        \n        # Get the next digit and the new remainder\n        digit, remainder = divmod(remainder, q)\n        \n        # Append the digit to the list of decimal digits\n        decimal_digits.append(digit)\n    \n    # Step 5: Determine the Nth digit\n    # If N is within the length of the decimal digits, return the Nth digit\n    # Otherwise, return None (or handle the case where N is out of bounds)\n    if N < len(decimal_digits):\n        return decimal_digits[N]\n    else:\n        return None\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 37,
        "text": "Write a function to sort a given mixed list of integers and strings.",
        "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "test_list": [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_mixed_list(mixed_list):",
        "question_1": "Develop a function in Python to sort a given array of strings.",
        "answer_1": "def sort_strings(strings):\n  return sorted(strings)",
        "question_2": "Create a sorting algorithm that sorts a list of strings alphabetically in Python.",
        "answer_2": "def sortAlphabetically(stringList):\n  sortedList = sorted(stringList)\n  return sortedList\n\nunsortedList = [\"list\", \"of\", \"unsorted\", \"strings\"]\nsortedList = sortAlphabetically(unsortedList)\n\nprint(sortedList)",
        "question_3": "Write a function in Python that sorts a given list of strings in alphabetical order case insensitive.",
        "answer_3": "def sort_strings_case_insensitive(input_list):\n  return sorted([string.strip().lower() for string in input_list])",
        "full_code": "\ndef sort_mixed_list(mixed_list):\n    # Step 1: Separate the integers and strings into two different lists\n    # We will iterate through the mixed_list and check the type of each element\n    # If the element is an integer, we add it to the integers list\n    # If the element is a string, we add it to the strings list\n    integers = []\n    strings = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n    \n    # Step 2: Sort the integers list\n    # We use the built-in sorted() function to sort the integers in ascending order\n    sorted_integers = sorted(integers)\n    \n    # Step 3: Sort the strings list\n    # We use the built-in sorted() function to sort the strings in alphabetical order\n    sorted_strings = sorted(strings)\n    \n    # Step 4: Combine the sorted integers and strings lists\n    # We concatenate the sorted_integers and sorted_strings lists to get the final sorted list\n    sorted_mixed_list = sorted_integers + sorted_strings\n    \n    # Step 5: Return the final sorted list\n    return sorted_mixed_list\n\n# Example usage:\n# mixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\n# sorted_list = sort_mixed_list(mixed_list)\n# print(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n",
        "pass": "True"
    },
    {
        "task_id": 38,
        "text": "Write a function to find the division of first even and odd number of a given list.",
        "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "test_list": [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def div_even_odd(list1):",
        "question_1": "Write a Python program to print out the even numbers in the given list.",
        "answer_1": "#Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num)",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Create a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements.",
        "answer_3": "def find_even_odd(nums):\n  even_list = []\n  odd_list = []\n  for num in nums:\n    if num % 2 == 0:\n      even_list.append(num)\n    else:\n      odd_list.append(num)\n  \n  return even_list, odd_list\n  \nprint(find_even_odd([1, 2, 3, 4, 5, 6]))",
        "full_code": "\ndef div_even_odd(list1):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and odd numbers are found\n    if first_even is not None and first_odd is not None:\n        # Calculate the division of the first even number by the first odd number\n        result = first_even / first_odd\n        return result\n    else:\n        # If either the first even or the first odd number is not found, return None\n        return None\n\n# Example usage:\n# print(div_even_odd([1, 2, 3, 4, 5, 6]))  # Should print 2.0 (2 / 1)\n",
        "pass": "True"
    },
    {
        "task_id": 39,
        "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "test_list": [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):",
        "question_1": "Generate a Python function that rearranges the characters of a string such that no character repeats consecutively.",
        "answer_1": "def rearrange_chars(string):\n    char_list = list(string)\n    for i in range(len(char_list)):\n        for j in range(i + 1, len(char_list)):\n            if char_list[i] == char_list[j]:\n                char_list.insert(j, '_')\n    return \"\".join(char_list).replace('_', '')",
        "question_2": "Create a function in Python to check if a given string contains two of the same characters next to each other.",
        "answer_2": "def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False",
        "question_3": "Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.",
        "answer_3": "def is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)",
        "full_code": "\nimport heapq\nfrom collections import Counter\n\ndef rearrange_string(S):\n    # Step 1: Count the frequency of each character in the string\n    char_count = Counter(S)\n    \n    # Step 2: Create a max heap to store the characters based on their frequency\n    # We use negative values to simulate a max heap since Python's heapq is a min heap\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Step 3: Initialize variables to keep track of the previous character and its frequency\n    prev_char, prev_freq = None, 0\n    result = []\n    \n    # Step 4: Pop characters from the heap and rearrange them\n    while max_heap:\n        # Pop the most frequent character\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If there was a previous character, push it back into the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char, prev_freq = char, freq + 1  # Decrease the frequency by 1\n    \n    # Step 5: Check if the result string has the same length as the input string\n    # If not, it means we couldn't rearrange the string as required\n    if len(result) == len(S):\n        return ''.join(result)\n    else:\n        return \"\"\n\n# Example usage:\n# result = rearrange_string(\"aabb\")\n# print(result)  # Output should be \"abab\" or \"baba\"\n",
        "pass": "False"
    },
    {
        "task_id": 40,
        "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "test_list": [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):",
        "question_1": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_1": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "question_2": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_2": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_3": "Write a Python program to create a dictionary of the elements in a list and their frequency count.",
        "answer_3": "def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))",
        "full_code": "\nfrom collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # Step 1: Flatten the list of lists into a single list\n    # We use itertools.chain to achieve this, which efficiently concatenates all sublists into one\n    flattened_list = list(chain(*nums))\n    \n    # Step 2: Use Counter from collections to count the frequency of each element in the flattened list\n    # Counter will return a dictionary-like object where keys are elements and values are their frequencies\n    frequency_count = Counter(flattened_list)\n    \n    # Step 3: Return the frequency count\n    return frequency_count\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [1, 2], [3, 4], [1]]\nprint(freq_element(list_of_lists))\n",
        "pass": "True"
    },
    {
        "task_id": 41,
        "text": "Write a function to filter even numbers using lambda function.",
        "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "test_list": [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_evennumbers(nums):",
        "question_1": "Rewrite a Python program from imperative to functional style.",
        "answer_1": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)",
        "question_2": "Write a Python program to filter out all the even numbers from a list.",
        "answer_2": "def filter_even(numbers):\n    return [n for n in numbers if n %2 == 0]",
        "question_3": "Design a program in Python to filter a given array of integers and output only the even numbers.",
        "answer_3": "def filterEvenNo(arr): \n\n  # return a list containing only even numbers\n  return [num for num in arr if num % 2 == 0]",
        "full_code": "\ndef filter_evennumbers(nums):\n    # Step 1: Define the lambda function that checks if a number is even\n    # The lambda function takes a number 'n' and returns True if 'n' is even (i.e., n % 2 == 0)\n    is_even = lambda n: n % 2 == 0\n    \n    # Step 2: Use the filter function to apply the lambda function to each element in the list 'nums'\n    # The filter function will return an iterator containing only the elements for which the lambda function returns True\n    even_numbers = filter(is_even, nums)\n    \n    # Step 3: Convert the result of the filter function to a list\n    # This step is necessary because the filter function returns an iterator, and we want a list as the final output\n    even_numbers_list = list(even_numbers)\n    \n    # Step 4: Return the list of even numbers\n    return even_numbers_list\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef filter_evennumbers(nums):\n    # Step 1: Define the lambda function that checks if a number is even\n    # The lambda function takes a number 'n' and returns True if 'n' is even (i.e., n % 2 == 0)\n    is_even = lambda n: n % 2 == 0\n    \n    # Step 2: Use the filter function to apply the lambda function to each element in the list 'nums'\n    # The filter function will return an iterator containing only the elements for which the lambda function returns True\n    even_numbers = filter(is_even, nums)\n    \n    # Step 3: Convert the result of the filter function to a list\n    # This step is necessary because the filter function returns an iterator, and we want a list as the final output\n    even_numbers_list = list(even_numbers)\n    \n    # Step 4: Return the list of even numbers\n    return even_numbers_list\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 42,
        "text": "Write a python function to find the sum of repeated elements in a given array.",
        "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"
        ],
        "def_code": "def find_Sum(arr,n):",
        "question_1": "Write a Python function to sum up elements in a given array.",
        "answer_1": "def sum_array(arr):\n result = 0\n for item in arr:\n result += item\n return result",
        "question_2": "Optimize the python code that finds the sum of the elements in a given array.",
        "answer_2": "def sum(arr): \n    s = 0\n    for number in arr: \n        s += number \n    return s",
        "question_3": "Generate code to find the sum of all numbers in an array using Python.",
        "answer_3": "def sum_of_array(arr):\n    # Initialize result \n    res = 0 \n  \n    # Iterate through all elements \n    # and add them to result \n    for i in range(0, len(arr)): \n        res = res + arr[i] \n  \n    # return final result \n    return res",
        "full_code": "\ndef find_Sum(arr, n):\n    # Step 1: Create a dictionary to store the frequency of each element in the array\n    frequency = {}\n    \n    # Step 2: Iterate through the array to count the occurrences of each element\n    for element in arr:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    \n    # Step 3: Initialize a variable to store the sum of repeated elements\n    sum_of_repeated_elements = 0\n    \n    # Step 4: Iterate through the frequency dictionary to find elements that appear more than once\n    for key, value in frequency.items():\n        if value > 1:\n            # Step 5: If an element is repeated, add its value multiplied by its frequency to the sum\n            sum_of_repeated_elements += key * value\n    \n    # Step 6: Return the sum of repeated elements\n    return sum_of_repeated_elements\n\n# The entire function is now complete and can be executed using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 43,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "test_list": [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match(\"aab-cbbbc\") == 'Not matched!'"
        ],
        "def_code": "import re\r\ndef text_match(text):",
        "question_1": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_1": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_2": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_2": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
        "question_3": "Write a Python function to invert a string (swap uppercase and lowercase letters).",
        "answer_3": "def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result",
        "full_code": "\nimport re\n\ndef text_match(text):\n    # Step 1: Define the regex pattern\n    # We need to find sequences of lowercase letters joined with an underscore.\n    # The pattern should match one or more lowercase letters followed by an underscore,\n    # and then followed by one or more lowercase letters again.\n    # The pattern can be expressed as: [a-z]+_[a-z]+\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Step 2: Use the re.findall() function to find all matches in the text\n    # re.findall() returns a list of all non-overlapping matches in the string.\n    matches = re.findall(pattern, text)\n    \n    # Step 3: Return the list of matches\n    return matches\n\n# Example usage:\n# text = \"hello_world this_is_a_test another_example\"\n# print(text_match(text))  # Output: ['hello_world', 'this_is_a_test', 'another_example']\n",
        "pass": "False"
    },
    {
        "task_id": 44,
        "text": "Write a function that matches a word at the beginning of a string.",
        "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match_string(\"foo\")==('Found a match!')"
        ],
        "def_code": "import re\r\ndef text_match_string(text):",
        "question_1": "Write a function in Python to display all the words beginning with a given alphabet in a given string.",
        "answer_1": "def all_words_beginning_with(str, alphabet):\n  words = str.split()\n  result = []\n  for word in words:\n    if word[0].upper() == alphabet.upper():\n      result.append(word)\n  \n  return result",
        "question_2": "Create a Python script that takes a string and prints the first character of every word in the given string.",
        "answer_2": "def first_characters_of_words(string):\n    words = string.split(\" \") \n    characters = [word[0] for word in words] \n    return \"\".join(characters)\n\nprint(first_characters_of_words(\"This is a test string\")) # Tiat",
        "question_3": "Write a Python function that takes a string as input and returns true if the string starts with the letter \"a\".",
        "answer_3": "def starts_with_a(string):\n    if string[0] == 'a':\n        return True\n    else:\n        return False\n\nresult = starts_with_a('awesome')\nprint(result)",
        "full_code": "\nimport re\n\ndef text_match_string(text):\n    # Step 1: Define a regular expression pattern to match a word at the beginning of the string\n    # The pattern \"\\b\" denotes a word boundary, and \"\\w+\" matches one or more word characters (letters, digits, and underscores)\n    pattern = r'^\\b\\w+'\n    \n    # Step 2: Use the re.match() function to check if the pattern matches at the beginning of the string\n    # re.match() returns a match object if the pattern is found at the beginning of the string, otherwise it returns None\n    match = re.match(pattern, text)\n    \n    # Step 3: Check if a match was found\n    if match:\n        # Step 4: If a match is found, return the matched word\n        return match.group()\n    else:\n        # Step 5: If no match is found, return an empty string\n        return \"\"\n\n# Example usage:\n# result = text_match_string(\"Hello world\")\n# print(result)  # Output: \"Hello\"\n",
        "pass": "False"
    },
    {
        "task_id": 45,
        "text": "Write a function to find the gcd of the given array elements.",
        "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "test_list": [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_gcd(x, y):",
        "question_1": "Write a Python function to find the GCD of two numbers.",
        "answer_1": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "question_2": "Write a Python script to reduce an array of integers by their GCD.",
        "answer_2": "def gcd(a, b):\n   while a != 0:\n       a, b = b % a, a\n   return b\n\ndef reduce_by_gcd(arr):\n    gcd_val = arr[0]\n    for i in range(len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return [a // gcd_val for a in arr]\n\nreduced_arr = reduce_by_gcd([30, 20, 45])\nprint(reduced_arr) # [2, 3, 5]",
        "question_3": "Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.",
        "answer_3": "def find_GCD(input_list): \n gcd = input_list[0] \n for num in input_list[1:]: \n gcd = find_GCD(gcd, num) \n return gcd\n\ndef find_GCD(a, b):\n while(b != 0): \n a, b = b, a%b \n return a",
        "full_code": "\ndef find_gcd(x, y):\n    # Step 1: Check if either number is zero\n    # If either number is zero, the GCD is the other number\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    \n    # Step 2: Use the Euclidean algorithm to find the GCD\n    # The Euclidean algorithm states that GCD(x, y) = GCD(y, x % y)\n    # We will continue this process until y becomes zero\n    while y != 0:\n        # Swap x and y, and set y to the remainder of x divided by y\n        x, y = y, x % y\n    \n    # Step 3: When y becomes zero, x will be the GCD of the original two numbers\n    return x\n\n# Example usage:\n# print(find_gcd(48, 18))  # Output should be 6\n",
        "pass": "False"
    },
    {
        "task_id": 46,
        "text": "Write a python function to determine whether all the numbers are different from each other are not.",
        "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "test_list": [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_distinct(data):",
        "question_1": "Convert the following Algorithm into Python code.\n\nInput: two numbers\n\nAlgorithm:\n1. Check if the two numbers are equal.\n2. If true, return 0.\n3. Else check the which is higher.\n4. Return 1 if the first number is higher than the second one.\n5. Return -1 otherwise.",
        "answer_1": "def compare_numbers(num1, num2):\n if num1 == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result)",
        "question_2": "Create a Python program that checks if two numbers are equal or not.",
        "answer_2": "def is_equal(num1, num2):\n return num1 == num2",
        "question_3": "Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list?",
        "answer_3": "def max_difference(numbers):\n max_diff = 0\n for i in range(len(numbers)-1):\n for j in range(i+1, len(numbers)):\n cur_diff = abs(numbers[i] - numbers[j])\n if cur_diff > max_diff:\n max_diff = cur_diff\n return max_diff\n\nresult = max_difference([4, 8, 2, 10, 6])\nprint(result)",
        "full_code": "\ndef test_distinct(data):\n    # Step 1: Check if the input is a list\n    # Reasoning: The function should only process lists of numbers\n    if not isinstance(data, list):\n        return False\n    \n    # Step 2: Create a set from the list\n    # Reasoning: A set automatically removes duplicate elements\n    unique_elements = set(data)\n    \n    # Step 3: Compare the length of the original list with the set\n    # Reasoning: If the lengths are the same, it means all elements were unique\n    if len(data) == len(unique_elements):\n        return True\n    else:\n        return False\n\n# Example usage\ndata = [1, 2, 3, 4, 5]\nresult = test_distinct(data)\nprint(result)  # Output should be True if all elements are distinct\n",
        "pass": "True"
    },
    {
        "task_id": 47,
        "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "test_list": [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert compute_Last_Digit(3,7) == 0",
            "assert compute_Last_Digit(20,23) == 6",
            "assert compute_Last_Digit(1021,1024) == 4"
        ],
        "def_code": "def compute_Last_Digit(A,B):",
        "question_1": "Write a Python function to calculate the factorial of a number (a non-negative integer).",
        "answer_1": "def factorial(n):\n    if n == 0: \n        return 1 \n    return n * factorial(n-1) \n\nnum = 9\nfactorial_num = factorial(num)\nprint(factorial_num)",
        "question_2": "Design a function in Python to compute the factorial of a given number.",
        "answer_2": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)",
        "question_3": "Design a Python function to compute the factorial of a given number.",
        "answer_3": "def factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "full_code": "\ndef compute_Last_Digit(A, B):\n    # Step 1: Define a helper function to calculate the factorial of a number\n    # This function will be used to compute the factorial of A and B\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Step 2: Calculate the factorial of A and B\n    factorial_A = factorial(A)\n    factorial_B = factorial(B)\n    \n    # Step 3: Compute the last digit of the division of factorial_A by factorial_B\n    # Since we are only interested in the last digit, we can use modulo 10\n    # However, directly dividing large factorials can be computationally expensive\n    # Instead, we can use properties of modular arithmetic to simplify the problem\n    \n    # Step 4: Use the property that (a * b) % c = ((a % c) * (b % c)) % c\n    # This property can be applied recursively to compute the last digit of the factorial\n    \n    # Step 5: Define a function to compute the last digit of a factorial\n    def last_digit_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            # Compute the last digit of the factorial recursively\n            return (n * last_digit_factorial(n - 1)) % 10\n    \n    # Step 6: Compute the last digit of the factorial of A and B\n    last_digit_A = last_digit_factorial(A)\n    last_digit_B = last_digit_factorial(B)\n    \n    # Step 7: Compute the last digit of the division of last_digit_A by last_digit_B\n    # Since we are only interested in the last digit, we can use modulo 10\n    last_digit_division = (last_digit_A * pow(last_digit_B, -1, 10)) % 10\n    \n    # Step 8: Return the last digit of the division\n    return last_digit_division\n\n# Example usage:\nA = 5\nB = 3\nprint(compute_Last_Digit(A, B))  # Output should be the last digit of 5! / 3!\n",
        "pass": "Error"
    },
    {
        "task_id": 48,
        "text": "Write a python function to set all odd bits of a given number.",
        "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "test_list": [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_bit_set_number(n):",
        "question_1": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_1": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_2": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_2": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"",
        "question_3": "Produce a Python program to print odd numbers from 1 to 10.",
        "answer_3": "for num in range(1, 11): \n    if num % 2 != 0: \n        print(num)",
        "full_code": "\ndef odd_bit_set_number(n):\n    # Step 1: Create a mask with all odd bits set to 1.\n    # Odd bits in a binary number are at positions 1, 3, 5, etc.\n    # We can create this mask by shifting 1 left by 2 positions repeatedly and ORing the results.\n    # For example, for a 32-bit number, the mask would be:\n    # 0xAAAAAAAA (in hexadecimal) which is 10101010101010101010101010101010 in binary.\n    mask = 0xAAAAAAAA\n    \n    # Step 2: Use the mask to set all odd bits in the given number.\n    # We do this by performing a bitwise OR operation between the number and the mask.\n    # This will ensure that all odd bits in the number are set to 1.\n    result = n | mask\n    \n    # Step 3: Return the resulting number with all odd bits set.\n    return result\n\n# The entire function code as a plain string that can be directly executed using `exec()`.\nfunction_code = \"\"\"\ndef odd_bit_set_number(n):\n    # Step 1: Create a mask with all odd bits set to 1.\n    # Odd bits in a binary number are at positions 1, 3, 5, etc.\n    # We can create this mask by shifting 1 left by 2 positions repeatedly and ORing the results.\n    # For example, for a 32-bit number, the mask would be:\n    # 0xAAAAAAAA (in hexadecimal) which is 10101010101010101010101010101010 in binary.\n    mask = 0xAAAAAAAA\n    \n    # Step 2: Use the mask to set all odd bits in the given number.\n    # We do this by performing a bitwise OR operation between the number and the mask.\n    # This will ensure that all odd bits in the number are set to 1.\n    result = n | mask\n    \n    # Step 3: Return the resulting number with all odd bits set.\n    return result\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(function_code)\n",
        "pass": "False"
    },
    {
        "task_id": 49,
        "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "question_1": "Create a Python script to return the first two elements of a list.",
        "answer_1": "def get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2]",
        "question_2": "Extract the 2nd and 3rd element from a given list in Python.",
        "answer_2": "new_list = list[1:3]",
        "question_3": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_3": "first_element = (3, 4, 5)[0]",
        "full_code": "\ndef specified_element(nums, N):\n    # Initialize an empty list to store the specified elements\n    result = []\n    \n    # Iterate over each sublist in the two-dimensional list\n    for sublist in nums:\n        # Check if the sublist has enough elements to access the N-th element\n        if len(sublist) > N:\n            # Append the N-th element of the sublist to the result list\n            result.append(sublist[N])\n        else:\n            # If the sublist doesn't have enough elements, append None\n            result.append(None)\n    \n    # Return the list of specified elements\n    return result\n\n# Example usage:\nnums = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nN = 1\nprint(specified_element(nums, N))  # Output: [2, 5, 7]\n",
        "pass": "True"
    },
    {
        "task_id": 50,
        "text": "Write a function to find the list with minimum length using lambda function.",
        "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "test_list": [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_length_list(input_list):",
        "question_1": "Optimize the following python program and reduce its runtime.",
        "answer_1": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "question_2": "Construct a Python script for finding the second smallest element in a given list.",
        "answer_2": "def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele",
        "full_code": "\ndef min_length_list(input_list):\n    # Step 1: Use the built-in `min` function with a lambda function as the key\n    # The lambda function will return the length of each list in the input_list\n    # This will help us find the list with the minimum length\n    min_list = min(input_list, key=lambda x: len(x))\n    \n    # Step 2: Return the list with the minimum length\n    return min_list\n\n# Example usage:\n# input_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n# print(min_length_list(input_list))  # Output: [4, 5]\n",
        "pass": "False"
    },
    {
        "task_id": 51,
        "text": "Write a function to print check if the triangle is equilateral or not.",
        "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_equilateral(x,y,z):",
        "question_1": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_1": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_2": "Create a Python program to identify the type of triangles given three sides.",
        "answer_2": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_3": "Create a python program to classify the type of a triangle based on the side lengths.",
        "answer_3": "def get_triangle_type(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"",
        "full_code": "\ndef check_equilateral(x, y, z):\n    # Step 1: Check if all three sides are greater than zero\n    # This is a basic validation to ensure we are dealing with a valid triangle\n    if x > 0 and y > 0 and z > 0:\n        # Step 2: Check if all three sides are equal\n        # If all sides are equal, the triangle is equilateral\n        if x == y and y == z:\n            print(\"The triangle is equilateral.\")\n        else:\n            print(\"The triangle is not equilateral.\")\n    else:\n        # Step 3: If any side is zero or negative, it's not a valid triangle\n        print(\"Invalid triangle sides.\")\n\n# Example usage:\n# check_equilateral(5, 5, 5)  # Should print \"The triangle is equilateral.\"\n# check_equilateral(5, 5, 6)  # Should print \"The triangle is not equilateral.\"\n# check_equilateral(0, 5, 5)  # Should print \"Invalid triangle sides.\"\n",
        "pass": "False"
    },
    {
        "task_id": 52,
        "text": "Write a function to caluclate area of a parallelogram.",
        "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parallelogram_area(b,h):",
        "question_1": "Write a Python function that computes the area of a square using the side length as a parameter.",
        "answer_1": "def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)",
        "question_2": "Create a python function to compute the area of a triangle with given sides.",
        "answer_2": "def calculateTriangleArea(a, b, c): \n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n  \narea = calculateTriangleArea(a, b, c) \nprint(\"Area of triangle is %.2f\" % area)",
        "question_3": "Construct a function in Python to calculate the area of a triangle with three sides",
        "answer_3": "def triangleArea(side1, side2, side3):\n  s = (side1 + side2 + side3) / 2\n  area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n  return area",
        "full_code": "\ndef parallelogram_area(b, h):\n    # Step 1: Understand the formula for the area of a parallelogram\n    # The area A of a parallelogram is given by the formula: A = base * height\n    # where 'b' is the base and 'h' is the height of the parallelogram.\n\n    # Step 2: Implement the formula in the function\n    # We will multiply the base 'b' by the height 'h' to get the area.\n    area = b * h\n\n    # Step 3: Return the calculated area\n    return area\n\n# Example usage:\n# Let's calculate the area of a parallelogram with base 10 and height 5\nbase = 10\nheight = 5\nresult = parallelogram_area(base, height)\nprint(\"The area of the parallelogram is:\", result)\n",
        "pass": "True"
    },
    {
        "task_id": 53,
        "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "test_list": [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(str):",
        "question_1": "Write a function in Python to compare two given strings character-wise and return the position of the first difference.",
        "answer_1": "def compare_strings_charwise(s1, s2):\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            return i\n    return -1",
        "question_2": "Write a Python program create a string made of the first and last two characters from a given string.",
        "answer_2": "def substring(str):\n    if len(str) < 3:\n        return\n    else:\n        return str[:2] + str[-2:]\n\nsubstring(\"hello\")",
        "question_3": "Create a function in Python to check if a given string contains two of the same characters next to each other.",
        "answer_3": "def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False",
        "full_code": "\ndef check_Equality(str):\n    # First, we need to check if the string is empty or has only one character.\n    # If the string is empty or has only one character, the first and last characters cannot be different.\n    # In such cases, we can directly return True.\n    if len(str) <= 1:\n        return True\n    \n    # If the string has more than one character, we need to compare the first and last characters.\n    # The first character is at index 0 and the last character is at index -1 (using negative indexing).\n    # We can use a simple comparison to check if these two characters are the same.\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(check_Equality(\"hello\"))  # Output: False\n# print(check_Equality(\"level\"))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 54,
        "text": "Write a function to sort the given array by using counting sort.",
        "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "test_list": [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def counting_sort(my_list):",
        "question_1": "Create a python script to sort the numbers in an array",
        "answer_1": "def sort_array(arr):\n    for i in range(0, len(arr)-1):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "question_2": "Write a function in Python to perform a selection sort on an unsorted array.",
        "answer_2": "def selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n        \nconst result = selection_sort([4, 6, 1, 3, 8, 2]);\nconsole.log(result);",
        "question_3": "Create a Python function to sort an array of numbers based on their size.",
        "answer_3": "def sort_array(arr):\n    arr.sort()\n    return arr",
        "full_code": "\ndef counting_sort(my_list):\n    # Step 1: Find the maximum element in the list to determine the range of counting array\n    max_element = max(my_list)\n    \n    # Step 2: Initialize a counting array of size max_element + 1 with all elements set to 0\n    count_array = [0] * (max_element + 1)\n    \n    # Step 3: Count the occurrences of each element in the input list\n    for num in my_list:\n        count_array[num] += 1\n    \n    # Step 4: Modify the count array by adding the previous counts to get the position of each element in the output array\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n    \n    # Step 5: Build the output sorted array\n    output_array = [0] * len(my_list)\n    for num in reversed(my_list):\n        output_array[count_array[num] - 1] = num\n        count_array[num] -= 1\n    \n    # Step 6: Copy the sorted elements back to the original list\n    for i in range(len(my_list)):\n        my_list[i] = output_array[i]\n    \n    return my_list\n\n# Example usage:\n# my_list = [4, 2, 2, 8, 3, 3, 1]\n# sorted_list = counting_sort(my_list)\n# print(sorted_list)\n",
        "pass": "True"
    },
    {
        "task_id": 55,
        "text": "Write a function to find t-nth term of geometric series.",
        "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "test_list": [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef tn_gp(a,n,r):",
        "question_1": "Write a python function to calculate an exponential series",
        "answer_1": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "question_2": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_2": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum",
        "question_3": "Develop a program in Python to calculate the sum of the following series:",
        "answer_3": "def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))",
        "full_code": "\nimport math\n\ndef tn_gp(a, n, r):\n    # Step 1: Understand the formula for the nth term of a geometric series.\n    # The nth term (tn) of a geometric series can be calculated using the formula:\n    # tn = a * r^(n-1)\n    # where 'a' is the first term, 'r' is the common ratio, and 'n' is the term number.\n\n    # Step 2: Implement the formula in the function.\n    # We will use the ** operator to calculate the power of 'r' raised to (n-1).\n    tn = a * (r ** (n - 1))\n\n    # Step 3: Return the calculated nth term.\n    return tn\n\n# Example usage:\n# a = 2, n = 5, r = 3\n# The 5th term of the geometric series starting with 2 and having a common ratio of 3 is:\n# tn = 2 * 3^(5-1) = 2 * 3^4 = 2 * 81 = 162\n# Uncomment the following lines to test the function:\n# print(tn_gp(2, 5, 3))  # Output should be 162\n",
        "pass": "True"
    },
    {
        "task_id": 56,
        "text": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rev(num):",
        "question_1": "Develop a function in Python to accept a positive integer as input and print its reverse.",
        "answer_1": "def reverse_integer(number):\n    reversed_number = 0\n    while number > 0: \n        remainder = number % 10\n        reversed_number *= 10\n        reversed_number += remainder\n        number //= 10\n      \n    return reversed_number\n\nnumber = 12345\nprint(\"Reversed Number:\", reverse_integer(number))",
        "question_2": "Can you create a program in Python which reverses a number?",
        "answer_2": "# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number//10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321",
        "question_3": "Design a function in Python that takes an integer and returns its opposite in sign.",
        "answer_3": "def opposite_int(num):\n  return -1 * num",
        "full_code": "\ndef rev(num):\n    # Step 1: Reverse the given number\n    # We will use the same logic as in the previous examples to reverse the number\n    reversed_number = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_number = reversed_number * 10 + remainder\n        num = num // 10\n    \n    return reversed_number\n\ndef check_one_less_than_twice_reverse(num):\n    # Step 2: Reverse the given number using the rev function\n    reversed_num = rev(num)\n    \n    # Step 3: Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    \n    # Step 4: Check if the given number is one less than twice the reversed number\n    if num == twice_reversed - 1:\n        return True\n    else:\n        return False\n\n# Example usage:\nnumber = 12345\nprint(check_one_less_than_twice_reverse(number))  # Output: False\n",
        "pass": "False"
    },
    {
        "task_id": 57,
        "text": "Write a python function to find the largest number that can be formed with the given digits.",
        "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "test_list": [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Num(arr,n) :",
        "question_1": "Write a Python function to find the largest number in a given list.",
        "answer_1": "def find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest",
        "question_2": "Write a python function to take a list of numbers as input and return the largest number.",
        "answer_2": "def find_largest_number(numbers):\n  largest_number = numbers[0]\n  for number in numbers:\n    if number > largest_number:\n      largest_number = number\n  return largest_number",
        "question_3": "Create a function in Python that takes a list of integers and returns the largest integer.",
        "answer_3": "def biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9",
        "full_code": "\ndef find_Max_Num(arr, n):\n    # Step 1: Sort the array in descending order\n    # Reasoning: To form the largest number, we need the highest digits in the most significant places.\n    # Sorting the array in descending order ensures that the largest digits come first.\n    arr.sort(reverse=True)\n    \n    # Step 2: Join the sorted array into a single string\n    # Reasoning: Converting the sorted array to a string will allow us to easily form the largest number.\n    max_num = ''.join(map(str, arr))\n    \n    # Step 3: Convert the string back to an integer\n    # Reasoning: The largest number formed by the digits should be an integer, not a string.\n    max_num = int(max_num)\n    \n    # Step 4: Return the largest number\n    return max_num\n\n# Example usage:\n# arr = [3, 30, 34, 5, 9]\n# n = len(arr)\n# print(find_Max_Num(arr, n))  # Output should be 9534330\n",
        "pass": "True"
    },
    {
        "task_id": 58,
        "text": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def opposite_Signs(x,y):",
        "question_1": "Design a function in Python that takes an integer and returns its opposite in sign.",
        "answer_1": "def opposite_int(num):\n  return -1 * num",
        "question_2": "Given two integers, write a Python function to compare them.",
        "answer_2": "def compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result)",
        "question_3": "Develop a function in Python to accept a positive integer as input and print its reverse.",
        "answer_3": "def reverse_integer(number):\n    reversed_number = 0\n    while number > 0: \n        remainder = number % 10\n        reversed_number *= 10\n        reversed_number += remainder\n        number //= 10\n      \n    return reversed_number\n\nnumber = 12345\nprint(\"Reversed Number:\", reverse_integer(number))",
        "full_code": "\ndef opposite_Signs(x, y):\n    # Step 1: Check if x is positive or zero\n    # If x is greater than or equal to 0, it is non-negative\n    if x >= 0:\n        # Step 2: Check if y is negative\n        # If y is less than 0, it is negative\n        if y < 0:\n            return True  # x is non-negative and y is negative, so they have opposite signs\n        else:\n            return False  # Both x and y are non-negative, so they do not have opposite signs\n    else:\n        # Step 3: If x is negative\n        # Check if y is non-negative\n        if y >= 0:\n            return True  # x is negative and y is non-negative, so they have opposite signs\n        else:\n            return False  # Both x and y are negative, so they do not have opposite signs\n\n# Example usage:\nresult = opposite_Signs(10, -5)\nprint(result)  # Output should be True\n",
        "pass": "True"
    },
    {
        "task_id": 59,
        "text": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_octagonal(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_2": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "question_3": "Generate a Python program to read an integer from the user and display a right-angled triangle with the given integer as the base.",
        "answer_3": "num = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\")",
        "full_code": "\ndef is_octagonal(n):\n    # Step 1: Define a helper function to calculate the nth octagonal number\n    # The formula for the nth octagonal number is given by: O(n) = 3n^2 - 2n\n    def octagonal_number(n):\n        return 3 * n * n - 2 * n\n    \n    # Step 2: Iterate through possible values of n to find if any nth octagonal number matches the given number\n    # Start with n = 1 and increment n until the calculated octagonal number is greater than or equal to the given number\n    current_n = 1\n    while True:\n        oct_num = octagonal_number(current_n)\n        if oct_num == n:\n            return True  # The given number is an octagonal number\n        elif oct_num > n:\n            return False  # The given number is not an octagonal number\n        current_n += 1\n\n# Example usage:\n# print(is_octagonal(1))  # True, because 1 is the 1st octagonal number\n# print(is_octagonal(8))  # True, because 8 is the 2nd octagonal number\n# print(is_octagonal(21))  # True, because 21 is the 3rd octagonal number\n# print(is_octagonal(10))  # False, because 10 is not an octagonal number\n",
        "pass": "False"
    },
    {
        "task_id": 60,
        "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "test_list": [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_len_sub( arr, n):",
        "question_1": "Create a function in Python to check the length of the longest increasing subsequence in a given array.",
        "answer_1": "def longestIncreasingSubsequence(arr):\n    n = len(arr) \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n  \n    return maximum \n  \narr = [1, 3, 5, 4, 7] \nres = longestIncreasingSubsequence(arr); \nprint(res)",
        "question_2": "Write a Python program to find the length of the longest increasing subsequence in a given array.",
        "answer_2": "def longest_increasing_subsequence(arr):\n    length = len(arr)\n    lis = [1] * length\n    for i in range(1, length):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\nresult = longest_increasing_subsequence([3, 4, 2, 1, 7])\nprint(result)",
        "question_3": "Create a Python program that identifies the longest contiguous subsequence with same values from an integer array.",
        "answer_3": "def longestSubsequence(array):\n    longest_start = 0\n    longest_length = 0\n    start = 0\n    current_length = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            current_length += 1\n        else:\n            current_length = 0\n            start = i+1\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_start = start\n    return array[longest_start : longest_start + longest_length + 1]",
        "full_code": "\ndef max_len_sub(arr, n):\n    # Initialize a variable to store the maximum length of the subsequence\n    max_length = 1\n    \n    # Initialize a variable to store the current length of the subsequence\n    current_length = 1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Check if the absolute difference between the current element and the previous element is 1\n        if abs(arr[i] - arr[i - 1]) == 1:\n            # If the condition is met, increment the current length\n            current_length += 1\n        else:\n            # If the condition is not met, reset the current length to 1\n            current_length = 1\n        \n        # Update the maximum length if the current length is greater than the maximum length\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the maximum length of the subsequence\n    return max_length\n\n# Example usage\narr = [1, 2, 3, 2, 3, 4, 5, 6, 7]\nn = len(arr)\nresult = max_len_sub(arr, n)\nprint(result)  # Output should be 7, as the longest subsequence with adjacent differences of 1 is [1, 2, 3, 4, 5, 6, 7]\n",
        "pass": "False"
    },
    {
        "task_id": 61,
        "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "test_list": [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):",
        "question_1": "Write a Python function to calculate the sum of the digits in a given string of numbers and letters.",
        "answer_1": "def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum",
        "question_2": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.",
        "answer_2": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "question_3": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_3": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))",
        "full_code": "\nfrom collections import defaultdict\n\ndef count_Substrings(s, n):\n    # Initialize a dictionary to store the count of substrings with a specific sum of digits\n    sum_count = defaultdict(int)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            # Check if the current character is a digit\n            if s[j].isdigit():\n                # Add the digit to the sum of digits for the current substring\n                sum_digits += int(s[j])\n            # Calculate the length of the current substring\n            length = j - i + 1\n            # If the sum of digits equals the length, increment the count for this sum\n            if sum_digits == length:\n                sum_count[sum_digits] += 1\n    \n    # Return the total count of substrings where the sum of digits equals their length\n    return sum(sum_count.values())\n\n# Example usage:\ns = \"a1b2c3d4\"\nn = len(s)\nprint(count_Substrings(s, n))  # Output should be the count of such substrings\n",
        "pass": "True"
    },
    {
        "task_id": 62,
        "text": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(xs):\n  return min(xs)\n",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_num(xs):",
        "question_1": "Can you find the smallest number in a given list using Python?",
        "answer_1": "def smallest_num(lst):\n   min_num = lst[0]\n   \n   for num in lst:\n       if num < min_num:\n           min_num = num\n           \n   return min_num\n\nlst = [4, 5, 6, 7, 8, 1, 2]\n\nprint(smallest_num(lst))",
        "question_2": "Design an algorithm in Python to find the smallest number in a given list.",
        "answer_2": "def smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)",
        "question_3": "Create a program to find the smallest number in a given list using a for loop in Python.",
        "answer_3": "def find_smallest_number(lst):\n  smallest = lst[0]\n  for number in lst:\n    if number < smallest:\n      smallest = number\n  return smallest\n\nprint(find_smallest_number([12, 4, 16, 15]))\n# Output: 4",
        "full_code": "\ndef smallest_num(xs):\n    # Step 1: Initialize a variable to store the smallest number.\n    # We start by assuming the first element in the list is the smallest.\n    smallest = xs[0]\n    \n    # Step 2: Iterate through each element in the list.\n    # For each element, check if it is smaller than the current smallest number.\n    for num in xs:\n        # Step 3: If the current element is smaller, update the smallest number.\n        if num < smallest:\n            smallest = num\n    \n    # Step 4: After iterating through the list, return the smallest number found.\n    return smallest\n\n# Example usage:\n# xs = [4, 5, 6, 7, 8, 1, 2]\n# print(smallest_num(xs))  # Output: 1\n",
        "pass": "True"
    },
    {
        "task_id": 63,
        "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_difference(test_list):",
        "question_1": "Create a Python function that takes a list of numbers and returns the maximum difference between any two elements.",
        "answer_1": "def getMaxDifference(elementList): \n    maxDifference = 0\n    for i in range(len(elementList)): \n        for j in range(i + 1, len(elementList)): \n            if (elementList[j] - elementList[i] > maxDifference): \n                maxDifference = elementList[j] - elementList[i] \n    return maxDifference\n\nlist = [3, 14, 5, 2, 9]\nprint (getMaxDifference(list))",
        "question_2": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_2": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_3": "Design a function in Python to find the maximum pair sum from the list input.",
        "answer_3": "def maxPairSum(input_list):\n\n    #assume the first and second elements are the max pair\n    max_pair_sum = input_list[0] + input_list[1]\n\n    # Keep track of the max pair\n    pair_index_one = 0\n    pair_index_two = 1\n\n    # iterate through the entire list\n    for index_one in range(0, len(input_list)):\n        for index_two in range(index_one + 1, len(input_list)):\n\n            # if the current pair sum is greater than the max pair sum\n            # update the max pair sum and the pair indices\n            if input_list[index_one] + input_list[index_two] > max_pair_sum:\n                max_pair_sum = input_list[index_one] + input_list[index_two]\n                pair_index_one = index_one\n                pair_index_two = index_two\n\n    #return the max pair sum\n    return max_pair_sum",
        "full_code": "\ndef max_difference(test_list):\n    # Initialize a variable to store the maximum difference found\n    max_diff = 0\n    \n    # Iterate through each tuple in the list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Calculate the difference between the elements of the current pair of tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            \n            # If the current difference is greater than the maximum difference found so far, update max_diff\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff\n\n# Example usage:\ntest_list = [(1, 10), (2, 20), (3, 30), (4, 40)]\nprint(max_difference(test_list))  # Output should be 30\n",
        "pass": "False"
    },
    {
        "task_id": 64,
        "text": "Write a function to sort a list of tuples using lambda.",
        "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def subject_marks(subjectmarks):",
        "question_1": "Write a Python program to sort a list of tuples using a lambda expression",
        "answer_1": "sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]",
        "question_2": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_3": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_3": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])",
        "full_code": "\ndef subject_marks(subjectmarks):\n    # Step 1: Identify the key for sorting. In this case, we want to sort by the second element of each tuple.\n    # Step 2: Use the sorted() function with a lambda expression as the key to sort the list of tuples.\n    # Step 3: The lambda function should extract the second element (x[1]) of each tuple for comparison.\n    # Step 4: Return the sorted list.\n    \n    return sorted(subjectmarks, key=lambda x: x[1])\n\n# Example usage:\n# subjectmarks = [('Math', 85), ('Science', 90), ('English', 80)]\n# print(subject_marks(subjectmarks))\n# Output: [('English', 80), ('Math', 85), ('Science', 90)]\n",
        "pass": "True"
    },
    {
        "task_id": 65,
        "text": "Write a function of recursion list sum.",
        "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def recursive_list_sum(data_list):",
        "question_1": "Create a recursive Python function to calculate the sum of all elements in a list.",
        "answer_1": "def sum_list(list):\n if not list:\n  return 0\n\n return list[0] + sum_list(list[1:])",
        "question_2": "Rewrite the following Python program using recursion to sum the numbers in a list.",
        "answer_2": "# Using recursion to sum the numbers in a list\ndef recursive_sum(arr):\n    if len(arr) == 0:  \n        return 0   # Base case \n    else:\n        return arr[0] + recursive_sum(arr[1:])   # Recursive case\n\nprint(\"Sum of the list:\", recursive_sum([2, 4, 6, 8]))",
        "question_3": "Convert the following loop code into a recursive function in Python.",
        "answer_3": "def sum_of_n_natural_numbers_recursive(n, s=0):\n    if n == 0:\n        return s\n    \n    s += n\n    return sum_of_n_natural_numbers_recursive(n-1, s)\n\nresult = sum_of_n_natural_numbers_recursive(10)\nprint(result)",
        "full_code": "\ndef recursive_list_sum(data_list):\n    # Step 1: Define the base case for the recursion\n    # If the list is empty, the sum is 0\n    if not data_list:\n        return 0\n    \n    # Step 2: Define the recursive case\n    # If the list is not empty, sum the first element and the sum of the rest of the list\n    # This can be done by calling the function recursively with the rest of the list (data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Example usage:\n# result = recursive_list_sum([1, 2, 3, 4, 5])\n# print(result)  # Output should be 15\n",
        "pass": "False"
    },
    {
        "task_id": 66,
        "text": "Write a python function to count positive numbers in a list.",
        "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_count(list):",
        "question_1": "Compose a code in Python that counts the number of positive integers in a list.",
        "answer_1": "def count_positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count",
        "question_2": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_2": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)",
        "question_3": "Write a Python program to count and display the number of positive numbers from a given list of integers.",
        "answer_3": "def countPositive(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print(\"Number of positive numbers:\", count)\n\nnums = [-2, 3, 4, -7, 6]\ncountPositive(nums)\n\n# Output: Number of positive numbers: 3",
        "full_code": "\ndef pos_count(lst):\n    # Initialize a counter to keep track of the number of positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the current number is positive\n        if num > 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count of positive numbers\n    return count\n\n# Example usage:\n# lst = [1, -2, 3, -4, 5]\n# print(pos_count(lst))  # Output: 3\n",
        "pass": "True"
    },
    {
        "task_id": 67,
        "text": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bell_number(n):",
        "question_1": "Create a Python script to partition a list into sub-lists of equal size.",
        "answer_1": "def partition(lst, n):\n return [lst[i:i+n] for i in range(0, len(lst), n)]\n \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npartitions = partition(list, 3)\n \nfor p in partitions:\n print(p)\n\n# Output\n# [1, 2, 3]\n# [4, 5, 6]\n# [7, 8, 9]\n# [10]",
        "question_2": "Write a function in Python that creates a list of all the letter combinations of a given string.",
        "answer_2": "def letterCombinations(string):\n letters = [] \n for i in range(len(string)): \n for j in range(i+1, len(string)+1): \n letters.append(string[i:j]) \n return letters",
        "question_3": "Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4.",
        "answer_3": "def countWays(n):  \n if (n == 0): \n return 1\n elif (n < 0): \n return 0\n else: \n return countWays(n-1) + countWays(n-3) + countWays(n-4)\n\nn = 8\nresult = countWays(n)\n\nprint(\"The number of different ways to express\", n, \"as the sum of 1, 3 and 4 is:\", result)",
        "full_code": "\ndef bell_number(n):\n    # Bell numbers represent the number of ways to partition a set of n elements.\n    # We will use a dynamic programming approach to compute the Bell numbers.\n    \n    # Step 1: Create a list to store Bell numbers up to n.\n    # Bell[i] will store the Bell number for the set of i elements.\n    Bell = [0] * (n + 1)\n    \n    # Step 2: Initialize the first Bell number.\n    # Bell[0] is 1 because there is exactly one way to partition a set with 0 elements (the empty set).\n    Bell[0] = 1\n    \n    # Step 3: Use a nested loop to compute the Bell numbers for each set size from 1 to n.\n    for i in range(1, n + 1):\n        # Step 4: Compute Bell[i] using the previous Bell numbers.\n        # We use a temporary variable to store the sum of the previous Bell numbers.\n        temp = 0\n        for j in range(i):\n            temp += Bell[j] * comb(i-1, j)\n        Bell[i] = temp\n    \n    # Step 5: Return the Bell number for the set of n elements.\n    return Bell[n]\n\n# Helper function to compute the binomial coefficient (n choose k).\ndef comb(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    return result\n\n# Example usage:\nn = 5\nprint(f\"The number of ways to partition a set of {n} elements is: {bell_number(n)}\")\n",
        "pass": "True"
    },
    {
        "task_id": 68,
        "text": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Monotonic(A):",
        "question_1": "Write an algorithm in Python to detect the monotonic increasing pattern in a given array.",
        "answer_1": "def increasingPattern(arr):\n\tstatus = False\n\tcheck = arr[0]\n\tfor i in range(1,len(arr)): \n\t\tif check < arr[i]:\n\t\t\tcheck = arr[i]\n\t\t\tstatus = True\n\t\telse:\n\t\t\tstatus = False\n\t\t\tbreak\n\treturn status\n\n\n# Test case\narr = [2, 3, 4, 5, 6, 7, 8, 1]\nprint(increasingPattern(arr))  # Output: False",
        "question_2": "Create a Python program to determine if a list is monotonically increasing.",
        "answer_2": "def check_monotonic(list):\n is_monotonic = True\n for i in range(len(list)-1):\n  if(list[i] > list[i+1]):\n   is_monotonic = False\n return is_monotonic\n\nlist = [1, 3, 4, 5, 9, 10]\nprint(check_monotonic(list)) # Output: True",
        "question_3": "Create a function in Python that takes in a list of numbers and returns true if the list of numbers is strictly increasing; false otherwise.",
        "answer_3": "def is_strictly_increasing(numbers):\n for i in range(len(numbers) - 1):\n if numbers[i] >= numbers[i + 1]:\n return False\n return True\n\nnumbers = [3, 4, 5, 6, 7]\nresult = is_strictly_increasing(numbers)\nprint(result) # returns True",
        "full_code": "\ndef is_Monotonic(A):\n    # Step 1: Initialize two boolean flags to True. These will help us determine if the array is either increasing or decreasing.\n    increasing = True\n    decreasing = True\n    \n    # Step 2: Iterate through the array from the first element to the second last element.\n    for i in range(len(A) - 1):\n        # Step 3: Check if the current element is greater than the next element.\n        if A[i] > A[i + 1]:\n            # If true, set the increasing flag to False, as the array is not increasing.\n            increasing = False\n        # Step 4: Check if the current element is less than the next element.\n        if A[i] < A[i + 1]:\n            # If true, set the decreasing flag to False, as the array is not decreasing.\n            decreasing = False\n    \n    # Step 5: After the loop, if either the increasing or decreasing flag is still True, the array is monotonic.\n    # Return the logical OR of the two flags.\n    return increasing or decreasing\n\n# Test case\nA = [1, 2, 2, 3]\nprint(is_Monotonic(A))  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 69,
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_sublist(l, s):",
        "question_1": "Write a Python function to check if an element exists in a list.",
        "answer_1": "def check_list(list_, element): \n    return element in list_",
        "question_2": "Generate a Python program to check if a list contains a given value.",
        "answer_2": "def check_if_contains(lst, val):\n    return val in lst",
        "question_3": "Write a Python program to check if an item exists in a given list.",
        "answer_3": "def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result)",
        "full_code": "\ndef is_sublist(l, s):\n    # Step 1: Check if the sublist is empty\n    # If the sublist is empty, it is trivially a sublist of any list\n    if not s:\n        return True\n    \n    # Step 2: Check if the sublist is longer than the main list\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if len(s) > len(l):\n        return False\n    \n    # Step 3: Iterate through the main list to find the sublist\n    # We will iterate through the main list and check if the sublist matches\n    # any contiguous sequence of elements in the main list\n    for i in range(len(l) - len(s) + 1):\n        # Step 4: Compare the sublist with a slice of the main list\n        # If the sublist matches the slice of the main list starting at index i,\n        # then the sublist is found in the main list\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # Step 5: If no match is found, return False\n    # If we finish the loop without finding a match, the sublist is not in the main list\n    return False\n\n# Example usage:\n# result = is_sublist([1, 2, 3, 4, 5], [2, 3])\n# print(result)  # Output should be True\n",
        "pass": "True"
    },
    {
        "task_id": 70,
        "text": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_equal_tuple(Input, k):",
        "question_1": "Develop a python code to achieve the following goal",
        "answer_1": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
        "question_2": "Write a Python function that takes a list of strings and checks if all the strings have the same length.",
        "answer_2": "def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True",
        "question_3": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]",
        "full_code": "\ndef find_equal_tuple(Input, k):\n    # Initialize a variable to store the length of the first tuple\n    first_tuple_length = len(Input[0])\n    \n    # Iterate through each tuple in the input list\n    for tuple_item in Input:\n        # Check if the current tuple's length is equal to the first tuple's length\n        if len(tuple_item) != first_tuple_length:\n            # If any tuple's length is not equal, return False\n            return False\n    \n    # If all tuples have the same length, return True\n    return True\n\n# Example usage:\n# Input = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# k = 3\n# print(find_equal_tuple(Input, k))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 71,
        "text": "Write a function to sort a list of elements using comb sort.",
        "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def comb_sort(nums):",
        "question_1": "Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.",
        "answer_1": "def sortList(arr, num): \n    arr.sort(key = lambda x: x*num) \n    return arr \n  \narr = [3, 1, 5, 4, 2] \nnum = 5\nprint(sortList(arr, num))",
        "question_2": "Create a function in Python that sorts the elements of a given list.",
        "answer_2": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)",
        "question_3": "Generate a Python program to demonstrate a sorting algorithm.",
        "answer_3": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
        "full_code": "\ndef comb_sort(nums):\n    # Comb sort is an improvement over bubble sort. It works by using a gap to compare elements that are far apart,\n    # gradually reducing the gap until it becomes 1, at which point it behaves like a bubble sort.\n    \n    # Define the shrink factor. This is typically set to 1.3, which is found to be an optimal value through empirical testing.\n    shrink_factor = 1.3\n    \n    # Initialize the gap to the length of the list.\n    gap = len(nums)\n    \n    # Initialize the sorted flag to False. This will help us determine when to stop the sorting process.\n    sorted = False\n    \n    # Continue sorting until the gap is 1 and the list is sorted.\n    while not sorted:\n        # Reduce the gap by the shrink factor.\n        gap = int(gap / shrink_factor)\n        \n        # If the gap is greater than 1, we continue sorting.\n        if gap > 1:\n            sorted = False\n        else:\n            # If the gap is 1, we set the sorted flag to True, assuming the list is sorted.\n            gap = 1\n            sorted = True\n        \n        # Perform the comb sort pass.\n        for i in range(len(nums) - gap):\n            # Compare elements that are 'gap' distance apart.\n            if nums[i] > nums[i + gap]:\n                # Swap the elements if they are out of order.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # If we made a swap, the list is not yet sorted.\n                sorted = False\n    \n    # Return the sorted list.\n    return nums\n\n# Example usage:\nnums = [8, 4, 1, 56, 3, -44, 23, -6, 28, 0]\nprint(\"Sorted list:\", comb_sort(nums))\n",
        "pass": "True"
    },
    {
        "task_id": 72,
        "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dif_Square(n):",
        "question_1": "Develop a Python function that squares a given number.",
        "answer_1": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Design a program in Python to detect if a given number is a perfect square?",
        "answer_3": "# function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False",
        "full_code": "\ndef dif_Square(n):\n    # Step 1: Check if the number is even or odd\n    # If the number is even, it can be represented as the difference of two squares\n    # If the number is odd, it cannot be represented as the difference of two squares\n    # This is because the difference of two squares (a^2 - b^2) is always even\n    # (a^2 - b^2) = (a - b)(a + b), and either (a - b) or (a + b) must be even\n    \n    if n % 2 == 0:\n        # Step 2: If the number is even, check if it is a multiple of 4\n        # If n is a multiple of 4, it can be represented as the difference of two squares\n        # If n is not a multiple of 4, it cannot be represented as the difference of two squares\n        # This is because for even n, (a - b) and (a + b) must both be even, so n must be divisible by 4\n        \n        if n % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        # Step 3: If the number is odd, it cannot be represented as the difference of two squares\n        return False\n\n# Example usage:\n# print(dif_Square(8))  # Output: True\n# print(dif_Square(5))  # Output: False\n",
        "pass": "False"
    },
    {
        "task_id": 73,
        "text": "Write a function to split the given string with multiple delimiters by using regex.",
        "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "test_list": [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef multiple_split(text):",
        "question_1": "Create a program in Python to split a string into an array based on a given delimiter.",
        "answer_1": "def split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World']",
        "question_2": "Generate a code snippet to split a given string using a given delimiter in Python.",
        "answer_2": "str.split(delimiter)",
        "question_3": "Write a Python program to split a string into a list of substrings.",
        "answer_3": "words = str.split(\" \")",
        "full_code": "\nimport re\n\ndef multiple_split(text):\n    # Step 1: Define the delimiters we want to split by\n    # We will use a regular expression to match any of the delimiters\n    # For example, if we want to split by commas, spaces, and semicolons,\n    # we can define the delimiters as [,; ]\n    delimiters = r'[,; ]'\n    \n    # Step 2: Use re.split to split the text based on the delimiters\n    # re.split will return a list of substrings split by any of the delimiters\n    # We pass the delimiters regex pattern and the text to re.split\n    result = re.split(delimiters, text)\n    \n    # Step 3: Return the resulting list of substrings\n    return result\n\n# Example usage:\n# text = \"Hello,World;This is a test\"\n# print(multiple_split(text))\n# Expected output: ['Hello', 'World', 'This', 'is', 'a', 'test']\n",
        "pass": "False"
    },
    {
        "task_id": 74,
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_samepatterns(colors, patterns):",
        "question_1": "Construct a Python program to detect pattern",
        "answer_1": "def detect_pattern(arr):\n    consec_nums = []\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            # if consecutive numbers are detected \n            # add the number to the list\n            consec_nums.append(arr[i - 1])\n            consec_nums.append(arr[i])\n    \n    return consec_nums",
        "question_2": "Create a Python function to detect a specific sequence",
        "answer_2": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_3": "Create an algorithm in Python to analyze a given list of numbers and identify patterns, if any.",
        "answer_3": "def find_pattern(lst):\n pattern_list = []\n for i in range(len(lst) - 1):\n diff = abs(lst[i] - lst[i + 1])\n pattern_list.append(diff)\n\n # Check for increasing pattern\n increasing = True\n for j in range(len(pattern_list) - 1):\n if pattern_list[j] > pattern_list[j + 1]:\n increasing = False\n\n # Check for constant pattern\n constant = True\n for k in range(len(pattern_list) - 1):\n if pattern_list[k] != pattern_list[k + 1]:\n constant = False\n\n # Check for repeating pattern\n repeating = True\n for l in range(len(pattern_list) - 2):\n if pattern_list[l] != pattern_list[l + 2]:\n repeating = False\n\n if increasing:\n return \"Increasing\"\n elif constant:\n return \"Constant\"\n elif repeating:\n return \"Repeating\"\n else:\n return None\n\nlst = [7,8,10,15,20,25,30,31]\nprint(find_pattern(lst))",
        "full_code": "\ndef is_samepatterns(colors, patterns):\n    # Check if the lengths of the colors array and the patterns array are the same\n    # If they are not the same, it is impossible for them to follow the same sequence\n    if len(colors) != len(patterns):\n        return False\n\n    # Initialize a dictionary to store the pattern for each color\n    color_pattern = {}\n\n    # Iterate through the colors and patterns simultaneously\n    for color, pattern in zip(colors, patterns):\n        # Check if the color is already in the dictionary\n        if color in color_pattern:\n            # If the color is already in the dictionary, check if the pattern matches\n            if color_pattern[color] != pattern:\n                return False\n        else:\n            # If the color is not in the dictionary, add it with the current pattern\n            color_pattern[color] = pattern\n\n    # If we have iterated through all colors and patterns without finding any mismatches,\n    # it means the colors follow the sequence given in the patterns array\n    return True\n\n# Example usage:\n# colors = ['red', 'blue', 'red']\n# patterns = [1, 2, 1]\n# print(is_samepatterns(colors, patterns))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 75,
        "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_tuples(test_list, K):",
        "question_1": "Create a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function).",
        "answer_1": "def filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6]",
        "question_2": "Write a function to remove all elements from a Python list that are divisible by a given number.",
        "answer_2": "def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]",
        "question_3": "Write a Python program that takes a list of numbers as input and returns a list of all numbers in the original list which are divisible by 7.",
        "answer_3": "def divisible_by_seven(numbers): \n    return [number for number in numbers if number % 7 == 0]\n\nnumbers = [14, 21, 49, 28, 35, 56, 16]\nprint(divisible_by_seven(numbers))\n\n# Output  [14, 21, 28, 56]",
        "full_code": "\ndef find_tuples(test_list, K):\n    # Initialize an empty list to store the tuples that meet the criteria\n    result = []\n    \n    # Iterate over each tuple in the given list of tuples\n    for tup in test_list:\n        # Check if all elements in the current tuple are divisible by K\n        # This can be done by checking if the modulo operation (%) of each element with K is 0\n        if all(elem % K == 0 for elem in tup):\n            # If the condition is met, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the list of tuples that have all elements divisible by K\n    return result\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 15, 20)]\nK = 5\nprint(find_tuples(test_list, K))  # Output: [(10, 15, 20)]\n",
        "pass": "False"
    },
    {
        "task_id": 76,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Develop a Python function that squares a given number.",
        "answer_3": "def square(number):\n \u00a0 \u00a0return number * number",
        "full_code": "\ndef count_Squares(m, n):\n    # Initialize a counter to keep track of the number of squares\n    count = 0\n    \n    # Determine the smaller dimension between m and n\n    # This is because the largest possible square that can fit in the rectangle\n    # will have a side length equal to the smaller dimension of the rectangle\n    smaller_dimension = min(m, n)\n    \n    # Iterate over possible square sizes from 1x1 up to the smaller_dimension x smaller_dimension\n    for side_length in range(1, smaller_dimension + 1):\n        # For each side length, calculate the number of squares that can fit in the rectangle\n        # The number of squares of side_length x side_length that can fit horizontally\n        horizontal_squares = m - side_length + 1\n        # The number of squares of side_length x side_length that can fit vertically\n        vertical_squares = n - side_length + 1\n        # The total number of squares of this size is the product of horizontal and vertical squares\n        count += horizontal_squares * vertical_squares\n    \n    # Return the total count of squares\n    return count\n\n# Example usage:\nresult = count_Squares(3, 4)\nprint(result)  # Output should be 20\n",
        "pass": "True"
    },
    {
        "task_id": 77,
        "text": "Write a python function to find the difference between sum of even and odd digits.",
        "code": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Diff(n):",
        "question_1": "Create a function in Python to sum up all odd digits in a given number.",
        "answer_1": "def sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243))",
        "question_2": "Develop a python code to evaluate the sum of all the even numbers in a given sequence.",
        "answer_2": "def sum_even_numbers(sequence):\n    result = 0\n    for num in sequence:\n        if num % 2 == 0:\n            result += num\n    \n    return result",
        "question_3": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_3": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum",
        "full_code": "\ndef is_Diff(n):\n    # Initialize variables to store the sum of even and odd digits\n    sum_even = 0\n    sum_odd = 0\n    \n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer\n        digit = int(char)\n        \n        # Check if the digit is even\n        if digit % 2 == 0:\n            # Add the even digit to the sum of even digits\n            sum_even += digit\n        else:\n            # Add the odd digit to the sum of odd digits\n            sum_odd += digit\n    \n    # Calculate the difference between the sum of even and odd digits\n    difference = sum_even - sum_odd\n    \n    # Return the difference\n    return difference\n\n# Example usage\nprint(is_Diff(2243))  # Output should be 1 (2+2+4 - 3 = 5 - 3 = 2)\n",
        "pass": "False"
    },
    {
        "task_id": 78,
        "text": "Write a python function to find number of integers with odd number of set bits.",
        "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "test_list": [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_With_Odd_SetBits(n):",
        "question_1": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_1": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_2": "Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.",
        "answer_2": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]",
        "question_3": "Write a Python program to count the number of even and odd numbers in a given list of integers.",
        "answer_3": "def count_even_odd(numbers):\n even_count = 0\n odd_count = 0\n for num in numbers:\n     if num % 2 == 0:\n         even_count += 1\n     else:\n         odd_count += 1\n return even_count, odd_count",
        "full_code": "\ndef count_With_Odd_SetBits(n):\n    # Initialize a counter to keep track of numbers with odd set bits\n    odd_set_bits_count = 0\n    \n    # Iterate through each number from 0 to n (inclusive)\n    for i in range(n + 1):\n        # Convert the number to its binary representation and count the number of '1's (set bits)\n        set_bits_count = bin(i).count('1')\n        \n        # Check if the count of set bits is odd\n        if set_bits_count % 2 != 0:\n            # Increment the counter if the number has an odd number of set bits\n            odd_set_bits_count += 1\n    \n    # Return the total count of numbers with odd set bits\n    return odd_set_bits_count\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 79,
        "text": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def word_len(s):",
        "question_1": "Create a Python program to parse a list of strings and print the words with odd length.",
        "answer_1": "list = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word)",
        "question_2": "In Python, create a function to identify whether a given number is even or odd.",
        "answer_2": "def is_odd(n):\n  if(n % 2 == 0):\n    return \"Even\"\n  else:\n    return \"Odd\"\n \nprint(is_odd(21)) # Outputs: \"Odd\"",
        "question_3": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_3": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "full_code": "\ndef word_len(s):\n    # Step 1: Calculate the length of the string 's' using the built-in len() function.\n    length = len(s)\n    \n    # Step 2: Check if the length is odd by using the modulus operator %.\n    # If length % 2 is not equal to 0, then the length is odd.\n    if length % 2 != 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n# Example usage:\n# print(word_len(\"hello\"))  # Outputs: \"Odd\"\n# print(word_len(\"world\"))  # Outputs: \"Even\"\n",
        "pass": "False"
    },
    {
        "task_id": 80,
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test_list": [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tetrahedral_number(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_2": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y",
        "question_3": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_3": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "full_code": "\ndef tetrahedral_number(n):\n    # Tetrahedral numbers are a sequence of numbers that represent the number of objects\n    # that can form a tetrahedron (a pyramid with a triangular base).\n    # The nth tetrahedral number can be calculated using the formula:\n    # T(n) = n * (n + 1) * (n + 2) / 6\n    \n    # Step 1: Calculate the product of n, (n + 1), and (n + 2)\n    product = n * (n + 1) * (n + 2)\n    \n    # Step 2: Divide the product by 6 to get the nth tetrahedral number\n    tetrahedral_num = product // 6\n    \n    # Step 3: Return the calculated tetrahedral number\n    return tetrahedral_num\n\n# The function is now complete and can be executed directly using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 81,
        "text": "Write a function to zip the two given tuples.",
        "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "test_list": [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zip_tuples(test_tup1, test_tup2):",
        "question_1": "Construct a Python program to combine the elements of two lists into a list of tuples.",
        "answer_1": "def combine_list(array1, array2):\n    return list(zip(array1, array2))",
        "question_2": "Generate a Python program to unpack a given list of tuples",
        "answer_2": "list_of_tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n\nlist_1, list_2 = zip(*list_of_tuples)\n\nprint(list_1)\nprint(list_2)",
        "question_3": "Generate a function in Python to zip two lists.",
        "answer_3": "def zip_two_lists(list1, list2):\n    return zip(list1, list2)",
        "full_code": "\ndef zip_tuples(test_tup1, test_tup2):\n    # Step 1: Convert the tuples to lists\n    # Reasoning: zip() function works well with lists and returns a zip object, which can be converted back to a list of tuples.\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Step 2: Use the zip() function to combine the two lists\n    # Reasoning: zip() pairs elements from the first list with elements from the second list.\n    zipped_result = zip(list1, list2)\n    \n    # Step 3: Convert the zip object to a list of tuples\n    # Reasoning: This will give us the desired output format.\n    zipped_list = list(zipped_result)\n    \n    # Step 4: Return the resulting list of tuples\n    return zipped_list\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n    # Step 1: Convert the tuples to lists\n    # Reasoning: zip() function works well with lists and returns a zip object, which can be converted back to a list of tuples.\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Step 2: Use the zip() function to combine the two lists\n    # Reasoning: zip() pairs elements from the first list with elements from the second list.\n    zipped_result = zip(list1, list2)\n    \n    # Step 3: Convert the zip object to a list of tuples\n    # Reasoning: This will give us the desired output format.\n    zipped_list = list(zipped_result)\n    \n    # Step 4: Return the resulting list of tuples\n    return zipped_list\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "False"
    },
    {
        "task_id": 82,
        "text": "Write a function to find the volume of a sphere.",
        "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "test_list": [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_sphere(r):",
        "question_1": "Create a Python program to calculate the volume of a sphere.",
        "answer_1": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_2": "Construct a function in Python to calculate the volume of a sphere.",
        "answer_2": "def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))",
        "question_3": "Develop a Python program to calculate the Volume of a Sphere with the given radius.",
        "answer_3": "def calculateSphereVolume(radius):\n    volume = (4/3) * (3.142) * (radius**3)\n    return round(volume, 2)\n\nradius = 5\nresult = calculateSphereVolume(radius)\nprint(result)  # Output: 523.6",
        "full_code": "\nimport math\n\ndef volume_sphere(r):\n    # Step 1: Calculate the volume of a sphere using the formula V = (4/3) * \u03c0 * r^3\n    # Reasoning: The formula for the volume of a sphere is a well-known mathematical formula.\n    # We use the math module to get the value of \u03c0 (pi) for accuracy.\n    \n    # Step 2: Use the math.pi constant to get the value of \u03c0\n    # Reasoning: math.pi provides a more accurate value of \u03c0 compared to a manually defined constant.\n    \n    # Step 3: Compute the volume using the formula\n    # Reasoning: Plugging in the radius 'r' into the formula will give us the volume.\n    \n    volume = (4/3) * math.pi * (r ** 3)\n    \n    # Step 4: Return the computed volume\n    # Reasoning: The function should return the result of the calculation.\n    \n    return volume\n\n# Example usage:\n# radius = 5\n# print(volume_sphere(radius))  # Output: 523.6\n",
        "pass": "True"
    },
    {
        "task_id": 83,
        "text": "Write a python function to find the character made by adding all the characters of the given string.",
        "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Char(strr):",
        "question_1": "Generate a Python code to execute the following logic",
        "answer_1": "def add_string(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result",
        "question_2": "Create a function in Python which takes a string as an input and adds the number 1 to each character in the string.",
        "answer_2": "def add_one_to_each_char(mystring):\n    new_str = \"\"\n    for c in mystring:\n        new_str += chr(ord(c) + 1)\n    return new_str",
        "question_3": "Create a function in Python to calculate the total of all the characters in a given input string.",
        "answer_3": "def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116",
        "full_code": "\ndef get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of characters\n    total_ascii = 0\n    \n    # Iterate over each character in the input string\n    for char in strr:\n        # Convert the character to its ASCII value using ord() and add it to total_ascii\n        total_ascii += ord(char)\n    \n    # Convert the total ASCII value back to a character using chr()\n    result_char = chr(total_ascii)\n    \n    # Return the resulting character\n    return result_char\n\n# Example usage:\n# print(get_Char('Hello World!'))  # This will output a character based on the sum of ASCII values of 'Hello World!'\n",
        "pass": "False"
    },
    {
        "task_id": 84,
        "text": "Write a function to find the n-th number in newman conway sequence.",
        "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequence(n):",
        "question_1": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_1": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y",
        "question_2": "Create a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number",
        "answer_2": "def fibonacci(n): \n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return 0\n elif n == 1: \n  return 1\n else: \n  return fibonacci(n-1) + fibonacci(n-2) \n\nprint(fibonacci(10))",
        "question_3": "Design a recursive function in Python that calculates the Fibonacci sequence to the nth number.",
        "answer_3": "def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i))",
        "full_code": "\ndef sequence(n):\n    # The Newman-Conway sequence is defined by the recurrence relation:\n    # P(n) = P(P(n - 1)) + P(n - P(n - 1)) for n > 2\n    # P(1) = 1\n    # P(2) = 1\n    \n    # We need to handle the base cases first\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize a list to store the values of the sequence up to n\n    # This will help us avoid recalculating values and improve efficiency\n    seq = [0] * (n + 1)\n    \n    # Set the base cases\n    seq[1] = 1\n    seq[2] = 1\n    \n    # Calculate the sequence values from 3 to n\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    # Return the nth value in the sequence\n    return seq[n]\n\n# Example usage:\n# n = 10\n# print(f\"The {n}th number in the Newman-Conway sequence is: {sequence(n)}\")\n",
        "pass": "True"
    },
    {
        "task_id": 85,
        "text": "Write a function to find the surface area of a sphere.",
        "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_sphere(r):",
        "question_1": "Create a function in Python that returns the surface area of a sphere when given the sphere\u2019s radius as input.",
        "answer_1": "import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211",
        "question_2": "Create a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.",
        "answer_2": "def sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 / 3) * math.pi * (radius ** 3)",
        "question_3": "Create a Python program to calculate the volume of a sphere.",
        "answer_3": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "full_code": "\nimport math\n\ndef surfacearea_sphere(r):\n    # Step 1: Identify the formula for the surface area of a sphere\n    # The formula for the surface area of a sphere is 4 * \u03c0 * r^2\n    # where r is the radius of the sphere and \u03c0 (pi) is a mathematical constant approximately equal to 3.14159.\n\n    # Step 2: Use the math module to get the value of \u03c0 (pi)\n    # The math module in Python provides a constant for \u03c0 (pi), which is math.pi.\n\n    # Step 3: Calculate the surface area using the formula\n    # Substitute the radius r into the formula and compute the result.\n\n    # Step 4: Return the computed surface area\n    # The result of the calculation should be returned as the output of the function.\n\n    # Implementation of the above steps:\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n\n# Example usage:\n# radius = 5\n# print(surfacearea_sphere(radius))  # Output should be approximately 314.159\n",
        "pass": "True"
    },
    {
        "task_id": 86,
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def centered_hexagonal_number(n):",
        "question_1": "Write a Python program to calculate the area of a regular hexagon",
        "answer_1": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_2": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_2": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_3": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_3": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "full_code": "\ndef centered_hexagonal_number(n):\n    # Step 1: Understand the formula for the nth centered hexagonal number.\n    # The nth centered hexagonal number is given by the formula: H(n) = 3n(n-1) + 1\n    # This formula can be derived from the pattern of centered hexagonal numbers.\n    \n    # Step 2: Implement the formula in Python.\n    # We will use the formula directly to calculate the nth centered hexagonal number.\n    \n    # Step 3: Calculate the nth centered hexagonal number using the formula.\n    hexagonal_number = 3 * n * (n - 1) + 1\n    \n    # Step 4: Return the calculated number.\n    return hexagonal_number\n\n# The function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 87,
        "text": "Write a function to merge three dictionaries into a single expression.",
        "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "question_1": "Design a function in Python for merging two dictionaries.",
        "answer_1": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3",
        "question_2": "Generate a Python code snippet to combine two dictionaries.",
        "answer_2": "dict3 = {**dict1, **dict2}",
        "question_3": "Write a code block to merge two given dictionaries into a single one.",
        "answer_3": "def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict",
        "full_code": "\nimport collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Step 1: Use the collections.ChainMap to create a view that treats all three dictionaries as a single entity.\n    # This is efficient and avoids creating a new dictionary unless necessary.\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    \n    # Step 2: Convert the ChainMap to a regular dictionary. This is necessary if you need a single dictionary object.\n    # ChainMap is a view and does not create a new dictionary until explicitly converted.\n    merged_dict = dict(merged_dict)\n    \n    # Step 3: Return the merged dictionary.\n    return merged_dict\n\n# The entire function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 88,
        "text": "Write a function to get the frequency of the elements in a list.",
        "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections\r\ndef freq_count(list1):",
        "question_1": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_1": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_2": "Generate a Python program to find the frequency of an element in a list.",
        "answer_2": "def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1))",
        "question_3": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_3": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "full_code": "\nimport collections\n\ndef freq_count(list1):\n    # Step 1: Import the Counter class from the collections module if not already imported\n    # This is already done at the top of the script, so no need to repeat here.\n\n    # Step 2: Use the Counter class to count the frequency of each element in the list\n    # Counter will create a dictionary-like object where keys are elements of the list\n    # and values are their respective counts.\n    frequency_dict = collections.Counter(list1)\n\n    # Step 3: Return the frequency dictionary\n    return frequency_dict\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 1, 2, 3, 3]\n# print(freq_count(list1))\n",
        "pass": "True"
    },
    {
        "task_id": 89,
        "text": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(N):\r\n  return (N - 1)",
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def closest_num(N):",
        "question_1": "Create a Python program that takes in a list of numbers and finds the closest number to a given number.",
        "answer_1": "def find_closest(nums, target):\n closest_num = float('inf')\n for num in nums:\n  if abs(target - num) < abs(target - closest_num):\n   closest_num = num\n return closest_num\n\nnums = [2, 4, 7, 8]\ntarget = 5\n\nprint(find_closest(nums, target))",
        "question_2": "Write a Python code to find the nearest integer to a given number.",
        "answer_2": "def nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)",
        "question_3": "Write a Python program to find the n-th smallest number in the following list",
        "answer_3": "def nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result)",
        "full_code": "\ndef closest_num(N):\n    # Step 1: Initialize a variable to store the closest smaller number\n    # We start with None because we don't know if there will be a smaller number yet\n    closest_smaller = None\n    \n    # Step 2: Iterate through a range of numbers starting from N-1 down to 1\n    # We start from N-1 because we are looking for the closest smaller number\n    for i in range(N-1, 0, -1):\n        # Step 3: Check if the current number is smaller than N\n        if i < N:\n            # Step 4: If it is, assign it to closest_smaller and break the loop\n            # This is because we are looking for the closest smaller number,\n            # and the first one we find will be the closest since we are iterating downwards\n            closest_smaller = i\n            break\n    \n    # Step 5: Return the closest smaller number found\n    return closest_smaller\n\n# Example usage:\nN = 10\nprint(closest_num(N))  # Output should be 9\n",
        "pass": "True"
    },
    {
        "task_id": 90,
        "text": "Write a python function to find the length of the longest word.",
        "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def len_log(list1):",
        "question_1": "Write a function in Python to find out the longest word in a string",
        "answer_1": "def longestWord(str):\n    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in words:\n        if len(word) == max_len:\n            return word",
        "question_2": "Create a Python function to find the longest word in a given sentence.",
        "answer_2": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "question_3": "Write a Python program that would take a string and return the length of its longest word.",
        "answer_3": "def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "full_code": "\ndef len_log(list1):\n    # Initialize a variable to store the length of the longest word\n    max_length = 0\n    \n    # Iterate over each word in the list\n    for word in list1:\n        # Check if the current word's length is greater than the current max_length\n        if len(word) > max_length:\n            # If it is, update max_length to the current word's length\n            max_length = len(word)\n    \n    # Return the length of the longest word found\n    return max_length\n",
        "pass": "True"
    },
    {
        "task_id": 91,
        "text": "Write a function to check if a substring is present in a given list of string values.",
        "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_substring(str1, sub_str):",
        "question_1": "Write a Python function to check if a given substring is contained in a string.",
        "answer_1": "def check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False",
        "question_2": "Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.",
        "answer_2": "def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True\n  return False",
        "question_3": "Write a Python program to check if a string contains a specific substring",
        "answer_3": "def contains_substring(string, substring):\n    return substring in string",
        "full_code": "\ndef find_substring(str1, sub_str):\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each string in the list str1\n    for string in str1:\n        # Check if the substring is present in the current string\n        if sub_str in string:\n            # If the substring is found, append True to the results list\n            results.append(True)\n        else:\n            # If the substring is not found, append False to the results list\n            results.append(False)\n    \n    # Return the list of results\n    return results\n\n# Example usage:\n# str1 = [\"hello world\", \"goodbye\", \"welcome\"]\n# sub_str = \"world\"\n# print(find_substring(str1, sub_str))  # Output: [True, False, False]\n",
        "pass": "False"
    },
    {
        "task_id": 92,
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "test_list": [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_undulating(n):",
        "question_1": "Create a Python function that takes in one integer argument and returns an integer with the absolute value.",
        "answer_1": "def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3",
        "question_2": "Analyze the input provided and generate a function in Python that returns \"Invalid input\" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.",
        "answer_2": "def count_digits(inp):\n    if not isinstance(inp, int):\n        return \"Invalid input\"\n    else:\n        return len(str(inp))",
        "question_3": "Generate a Python function to calculate the absolute value of a number.",
        "answer_3": "def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num",
        "full_code": "\ndef is_undulating(n):\n    # Step 1: Convert the number to a string to easily access individual digits\n    n_str = str(n)\n    \n    # Step 2: Check if the number has at least 3 digits\n    if len(n_str) < 3:\n        return False  # Undulating numbers must have at least 3 digits\n    \n    # Step 3: Iterate through the digits to check the undulating pattern\n    for i in range(1, len(n_str) - 1):\n        # Check if the current digit is different from the previous and next digit\n        if n_str[i] == n_str[i - 1] or n_str[i] == n_str[i + 1]:\n            return False  # If any digit is the same as its neighbors, it's not undulating\n    \n    # Step 4: If all checks pass, the number is undulating\n    return True\n\n# Example usage:\n# print(is_undulating(121))  # Outputs: True\n# print(is_undulating(123))  # Outputs: False\n",
        "pass": "True"
    },
    {
        "task_id": 93,
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def power(a,b):",
        "question_1": "Write a Python script that takes two numbers as input and raises the first number to the power of the second number.",
        "answer_1": "def power_function(a, b):\n    return a**b\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = power_function(a, b)\nprint(\"The result is:\", result)",
        "question_2": "Generate a Python code to find the power of a number.",
        "answer_2": "# Calculate power of a number \ndef power(base, exponent):\n    # Initialize result\n    result = 1\n    # Multiply result with base\n    # until exponent becomes 0\n    while exponent != 0:\n        result *= base\n        exponent -= 1\n \n    # Return result\n    return result\n\n# Print the power\nprint(power(base, exponent))",
        "question_3": "Create a function in Python to calculate the power of a number.",
        "answer_3": "def power(num, pow):\n return num**pow",
        "full_code": "\ndef power(a, b):\n    # Step 1: Initialize a variable to store the result.\n    # We start with 1 because any number raised to the power of 0 is 1.\n    result = 1\n    \n    # Step 2: Use a loop to multiply the base 'a' by itself 'b' times.\n    # This is the essence of calculating the power of a number.\n    for _ in range(b):\n        result *= a\n    \n    # Step 3: Return the result after the loop completes.\n    return result\n\n# The function is now complete and can be executed directly.\n# The following string can be passed to exec() for execution.\n```\n\nThis code defines a function `power(a, b)` that calculates the value of `a` raised to the power `b`. The function uses a loop to multiply `a` by itself `b` times, and it initializes the result to 1 to handle the case where `b` is 0. The entire code is provided as a plain string that can be directly executed using `exec()`.",
        "pass": "Error"
    },
    {
        "task_id": 94,
        "text": "Write a function to extract the index minimum value record from the given tuples.",
        "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter \r\ndef index_minimum(test_list):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.",
        "answer_2": "def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))",
        "question_3": "Generate a code in Python to find the index of the smallest element in a given list of numbers.",
        "answer_3": "def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index",
        "full_code": "\nfrom operator import itemgetter \n\ndef index_minimum(test_list):\n    # Step 1: Initialize a variable to keep track of the index of the minimum value\n    # We will assume the first tuple has the minimum value initially\n    min_index = 0\n    \n    # Step 2: Iterate through the list starting from the second tuple\n    for i in range(1, len(test_list)):\n        # Step 3: Compare the second element of the current tuple with the second element of the tuple at min_index\n        # If the current tuple's second element is smaller, update min_index to the current index\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    \n    # Step 4: Return the tuple at the index with the minimum value\n    return test_list[min_index]\n\n# Example usage:\ntest_list = [(2, 3), (4, 1), (6, 4), (5, 8)]\nprint(index_minimum(test_list))  # Output: (4, 1)\n",
        "pass": "False"
    },
    {
        "task_id": 95,
        "text": "Write a python function to find the minimum length of sublist.",
        "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min_Length(lst):",
        "question_1": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_1": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_2": "Create a Python script to find the maximum and minimum values for each sublist in a list",
        "answer_2": "def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele",
        "full_code": "\ndef Find_Min_Length(lst):\n    # Initialize a variable to store the minimum length of sublists\n    min_length = float('inf')  # Start with a very large number\n    \n    # Iterate through each sublist in the main list\n    for sublist in lst:\n        # Check the length of the current sublist\n        current_length = len(sublist)\n        \n        # If the current sublist's length is smaller than the minimum length found so far\n        if current_length < min_length:\n            # Update the minimum length\n            min_length = current_length\n    \n    # Return the minimum length found\n    return min_length\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(Find_Min_Length(lst))  # Output should be 1\n",
        "pass": "True"
    },
    {
        "task_id": 96,
        "text": "Write a python function to find the number of divisors of a given integer.",
        "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "test_list": [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def divisor(n):",
        "question_1": "Write a Python program to find the number of divisors of an integer.",
        "answer_1": "def count_number_divisors(x): \n    count = 0\n    for i in range(1, x+1): \n        if x % i == 0: \n            count = count + 1\n    return count",
        "question_2": "Write a Python code for a program that takes an integer as an input and prints the number of divisors for that integer.",
        "answer_2": "def count_divisors(number):\n    divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors += 1\n    print(\"Number of divisors:\", divisors)",
        "question_3": "Construct a Python program that takes a number as an input and prints all its divisors.",
        "answer_3": "def find_divisors(num):\n    divisors = []\n    for i in range(2,num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 48\ndivisors = find_divisors(num)\nprint(\"The divisors of {} are: {}\".format(num, divisors))",
        "full_code": "\ndef divisor(n):\n    # Initialize a counter to keep track of the number of divisors\n    count = 0\n    \n    # Iterate through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if the current number i is a divisor of n\n        if n % i == 0:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the total count of divisors\n    return count\n\n# The function definition and logic are complete.\n# The code can be directly executed using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 97,
        "text": "Write a function to find frequency count of list of lists.",
        "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_lists(list1):",
        "question_1": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_1": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "question_2": "Write a Python program to create a dictionary of the elements in a list and their frequency count.",
        "answer_2": "def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))",
        "question_3": "Generate a Python program to find the frequency of an element in a list.",
        "answer_3": "def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1))",
        "full_code": "\ndef frequency_lists(list1):\n    # Initialize an empty dictionary to store the frequency count of each sublist\n    frequency_count = {}\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple to use it as a dictionary key\n        # Tuples are hashable and can be used as keys in dictionaries\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the sublist (as a tuple) is already in the dictionary\n        if sublist_tuple in frequency_count:\n            # If it is, increment its count by 1\n            frequency_count[sublist_tuple] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            frequency_count[sublist_tuple] = 1\n    \n    # Return the dictionary containing the frequency count of each sublist\n    return frequency_count\n\n# Example usage:\nlist1 = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [1, 2]]\nprint(frequency_lists(list1))\n",
        "pass": "False"
    },
    {
        "task_id": 98,
        "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "test_list": [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_num(numbers):",
        "question_1": "Write a Python function to multiply all the numbers in a list.",
        "answer_1": "def multiplyList(numbers):\n  result = 1\n  for x in numbers:\n    result = result * x\n  return result",
        "question_2": "Create a Python program to multiply all of the values in a given list",
        "answer_2": "def multiply_list(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result",
        "question_3": "Create a Python function that takes a list and an integer as inputs and returns a new list with every item in the original list multiplied by the integer.",
        "answer_3": "def multiply_list(lst, i):\n  return [j * i for j in lst]\n\nresult = multiply_list(list, integer)\nprint(result) # [15, 10, 5]",
        "full_code": "\ndef multiply_num(numbers):\n    # Initialize a variable 'result' to store the product of all numbers in the list\n    result = 1\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Multiply the current number with the 'result'\n        result *= num\n    \n    # Calculate the length of the list to use as the divisor\n    length = len(numbers)\n    \n    # Divide the product by the length of the list\n    result /= length\n    \n    # Return the final result\n    return result\n\n# Example usage:\n# numbers = [1, 2, 3, 4]\n# print(multiply_num(numbers))  # Output should be (1*2*3*4)/4 = 6.0\n",
        "pass": "True"
    },
    {
        "task_id": 99,
        "text": "Write a function to convert the given decimal number to its binary equivalent.",
        "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_binary(n):",
        "question_1": "Generate a Python program which will convert the given binary number into its equivalent decimal number",
        "answer_1": "def binary_to_decimal(binary):\n  decimal = 0\n  binary = binary[::-1]\n  for i, num in enumerate(binary):\n    if num == '1':\n      decimal += pow(2, i)\n  return decimal",
        "question_2": "Write a Python program to convert a given binary number to decimal.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_3": "Write a Python program to convert a given binary number to a decimal number.",
        "answer_3": "binary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)",
        "full_code": "\ndef decimal_to_binary(n):\n    # Step 1: Initialize an empty list to store the binary digits\n    binary_digits = []\n    \n    # Step 2: Handle the special case where n is 0\n    if n == 0:\n        binary_digits.append(0)\n    \n    # Step 3: Use a loop to repeatedly divide the number by 2 and store the remainder\n    while n > 0:\n        remainder = n % 2  # Get the remainder when dividing by 2\n        binary_digits.append(remainder)  # Append the remainder to the list\n        n = n // 2  # Update n to be the quotient of the division\n    \n    # Step 4: The binary digits are currently in reverse order, so reverse the list\n    binary_digits.reverse()\n    \n    # Step 5: Convert the list of binary digits to a string\n    binary_representation = ''.join(map(str, binary_digits))\n    \n    # Step 6: Return the binary representation as a string\n    return binary_representation\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output should be \"1010\"\n",
        "pass": "True"
    },
    {
        "task_id": 100,
        "text": "Write a function to find the next smallest palindrome of a specified number.",
        "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys\r\ndef next_smallest_palindrome(num):",
        "question_1": "Design a python function that finds the closest palindrome to a given number.",
        "answer_1": "def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]",
        "question_2": "Given a string, write a python program to print the next largest palindrome.",
        "answer_2": "def next_largest_palindrome(num):\n    # convert string to a number\n    num = int(num)\n    # increment number by 1\n    num += 1\n    while not is_palindrome(str(num)):\n        # increment number by 1\n        num += 1\n\n    return num\n\ndef is_palindrome(num):\n    return num == num[::-1]\n\nprint(next_largest_palindrome(\"1234\"))\n\n# Output: 1331",
        "question_3": "Develop a Python program to find the largest palindrome number in a given range.",
        "answer_3": "def get_largest_palindrome_in_range(min, max):\n    max_palindrome = 0\n    # Iterate over range\n    for x in range(min, max+1):\n        # Check if number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # If this palindrome is larger, update the maximum\n            if x > max_palindrome:\n                max_palindrome = x\n\n    return max_palindrome",
        "full_code": "\nimport sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to facilitate palindrome checks\n    num_str = str(num)\n    \n    # Start by decrementing the number by 1 to find the next smallest number\n    num -= 1\n    \n    # Loop until we find a palindrome\n    while True:\n        # Convert the current number to a string\n        num_str = str(num)\n        \n        # Check if the current number is a palindrome\n        if num_str == num_str[::-1]:\n            # If it is, return the number as the next smallest palindrome\n            return num\n        \n        # If not, decrement the number and check again\n        num -= 1\n\n# Example usage:\n# print(next_smallest_palindrome(1234))  # Output should be 1221\n",
        "pass": "False"
    },
    {
        "task_id": 101,
        "text": "Write a function to find the kth element in the given array.",
        "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def kth_element(arr, n, k):",
        "question_1": "Generate a code in Python to find the Kth smallest element in an array.",
        "answer_1": "def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]",
        "question_2": "Generate an algorithm in Python that returns the kth smallest number in a given array.",
        "answer_2": "def kthSmallest(arr, k):\n # sort the array\n arr.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3",
        "question_3": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_3": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
        "full_code": "\ndef kth_element(arr, n, k):\n    # Step 1: Understand the problem\n    # We need to find the kth smallest element in the array.\n    # The array is unsorted, and we need to return the kth smallest element.\n    \n    # Step 2: Plan the solution\n    # We can sort the array and then access the kth element.\n    # Since array indices start from 0, the kth smallest element will be at index k-1.\n    \n    # Step 3: Implement the solution\n    # Sort the array\n    arr.sort()\n    \n    # Step 4: Return the kth smallest element\n    # Since the array is sorted in ascending order, the kth smallest element is at index k-1\n    return arr[k-1]\n\n# Example usage:\n# arr = [3, 2, 4, 1, 5]\n# n = len(arr)\n# k = 3\n# print(kth_element(arr, n, k))  # Output should be 3\n",
        "pass": "False"
    },
    {
        "task_id": 102,
        "text": "Write a function to convert snake case string to camel case string.",
        "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def snake_to_camel(word):",
        "question_1": "Generate a function in Python to transform a string from camelCase to snake_case.",
        "answer_1": "def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))",
        "question_2": "Write a Python program to convert a string in camel case format to snake case format",
        "answer_2": "my_name_is_ryan",
        "question_3": "Convert the given string from Upper Camel Case notation to lower snake case notation in Python.",
        "answer_3": "lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",
        "full_code": "\ndef snake_to_camel(word):\n    # Step 1: Split the input string by underscores to get individual words\n    words = word.split('_')\n    \n    # Step 2: Initialize an empty string to store the camelCase result\n    camel_case_string = \"\"\n    \n    # Step 3: Iterate over the list of words\n    for i, w in enumerate(words):\n        # Step 4: For the first word, convert it to lowercase and add to the result\n        if i == 0:\n            camel_case_string += w.lower()\n        # Step 5: For subsequent words, capitalize the first letter and add to the result\n        else:\n            camel_case_string += w.capitalize()\n    \n    # Step 6: Return the final camelCase string\n    return camel_case_string\n\n# Example usage\nif __name__ == '__main__':\n    input_word = \"this_is_example\"\n    print(snake_to_camel(input_word))\n",
        "pass": "False"
    },
    {
        "task_id": 103,
        "text": "Write a function to find eulerian number a(n, m).",
        "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def eulerian_num(n, m):",
        "question_1": "Create a python program to calculate the Mertens function over a given range.",
        "answer_1": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)",
        "question_2": "Create a python script which takes two numbers as argument to calculate the LCM (Least Common Multiple)",
        "answer_2": "def lcm(x, y):\n    lcm = (x*y)//gcd(x,y) \n    return lcm\n  \n# This function implements the Euclidian algorithm to find H.C.F. of two numbers \ndef gcd(x, y): \n  \n    while(y): \n        x, y = y, x % y \n  \n    return x \n\n# Driver program\nnum1 = 12\nnum2 = 15\n\nprint(\"The L.C.M. is\", lcm(num1, num2))",
        "question_3": "Design a function that returns the least common multiple (LCM) of two numbers",
        "answer_3": "# Python3 program to find LCM of two numbers \n\n# method to return gcd of a and b \ndef gcd(a, b): \n    if a == 0 : \n        return b \n          \n    return gcd(b % a, a) \n      \n# method to return LCM of two numbers \ndef lcm(a, b): \n    return (a*b) // gcd(a, b)",
        "full_code": "\ndef eulerian_num(n, m):\n    # The Eulerian number A(n, m) is the number of permutations of the numbers 1 to n in which exactly m elements are greater than the previous element.\n    # We can use a dynamic programming approach to solve this problem.\n    \n    # Step 1: Initialize a 2D list (dp) to store the Eulerian numbers.\n    # dp[i][j] will store the Eulerian number A(i, j).\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Step 2: Base case initialization\n    # A(n, 0) = 1 for all n because there is exactly one way to arrange n elements such that no element is greater than the previous one (i.e., the sorted order).\n    for i in range(n + 1):\n        dp[i][0] = 1\n    \n    # Step 3: Fill the dp table using the recurrence relation for Eulerian numbers.\n    # The recurrence relation is:\n    # A(n, m) = (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)\n    # This relation comes from the fact that we can either place the largest element in the correct position or not.\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    # Step 4: The result is the Eulerian number A(n, m) which is stored in dp[n][m].\n    return dp[n][m]\n\n# Example usage:\n# n = 4, m = 2\n# print(eulerian_num(4, 2))  # Output should be 5\n\n# The entire code as a plain string that can be directly executed using `exec()`.\ncode_string = \"\"\"\ndef eulerian_num(n, m):\n    # The Eulerian number A(n, m) is the number of permutations of the numbers 1 to n in which exactly m elements are greater than the previous element.\n    # We can use a dynamic programming approach to solve this problem.\n    \n    # Step 1: Initialize a 2D list (dp) to store the Eulerian numbers.\n    # dp[i][j] will store the Eulerian number A(i, j).\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Step 2: Base case initialization\n    # A(n, 0) = 1 for all n because there is exactly one way to arrange n elements such that no element is greater than the previous one (i.e., the sorted order).\n    for i in range(n + 1):\n        dp[i][0] = 1\n    \n    # Step 3: Fill the dp table using the recurrence relation for Eulerian numbers.\n    # The recurrence relation is:\n    # A(n, m) = (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)\n    # This relation comes from the fact that we can either place the largest element in the correct position or not.\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    # Step 4: The result is the Eulerian number A(n, m) which is stored in dp[n][m].\n    return dp[n][m]\n\n# Example usage:\n# n = 4, m = 2\n# print(eulerian_num(4, 2))  # Output should be 5\n\"\"\"\n\n# You can execute the code using `exec(code_string)`\n",
        "pass": "True"
    },
    {
        "task_id": 104,
        "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_sublists(input_list):",
        "question_1": "Write a Python function to sort the given list of strings using the length of the strings instead of alphabetically.",
        "answer_1": "def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list",
        "question_2": "Write a Python program that takes a list of strings as input and prints out all the strings in sorted order.",
        "answer_2": "def sort_list_of_strings(list_of_strings):\n    list_of_strings.sort()\n    for string in list_of_strings:\n        print(string)",
        "question_3": "Develop an efficient sorting technique in Python to arrange the following list of strings.",
        "answer_3": "def sort_list(L1):\n    L1.sort()\n    return L1",
        "full_code": "\ndef sort_sublists(input_list):\n    # Step 1: Iterate through each sublist in the input list\n    # Reasoning: We need to apply the sorting operation to each sublist individually.\n    for sublist in input_list:\n        # Step 2: Sort each sublist using the sort() method with a lambda function as the key\n        # Reasoning: The lambda function will sort the strings based on their default order (alphabetically).\n        sublist.sort(key=lambda x: x)\n    \n    # Step 3: Return the modified input list\n    # Reasoning: After sorting each sublist, we need to return the entire list of lists.\n    return input_list\n\n# Example usage:\n# input_list = [['banana', 'apple', 'cherry'], ['dog', 'cat', 'bird']]\n# sorted_list = sort_sublists(input_list)\n# print(sorted_list)\n",
        "pass": "False"
    },
    {
        "task_id": 105,
        "text": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):   \r\n    return sum(lst) ",
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(lst):",
        "question_1": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_1": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_2": "Analyze the following code in Python and write an improved version of it.",
        "answer_2": "def countOccurrences(string, x): \n  count = 0\n  for i in range(len(string)): \n    if string[i] == x: \n      count += 1\n  return count \n\ndef countOccurrences2(string, x): \n  found = False\n  count = 0\n  for i in range(len(string)): \n    if string[i] == x and not found: \n      count += 1\n      found = True\n    else: \n      found = False\n  return count",
        "question_3": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_3": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count",
        "full_code": "\ndef count(lst):\n    # Initialize a variable to keep track of the count of True values\n    true_count = 0\n    \n    # Iterate through each element in the list\n    for element in lst:\n        # Check if the current element is True\n        if element is True:\n            # If it is True, increment the true_count by 1\n            true_count += 1\n    \n    # Return the total count of True values found in the list\n    return true_count\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 106,
        "text": "Write a function to add the given list to the given tuples.",
        "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_lists(test_list, test_tup):",
        "question_1": "Convert a given list into a list of tuples using Python.",
        "answer_1": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Generate a Python program to add new elements to an existing tuple.",
        "answer_3": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "full_code": "\ndef add_lists(test_list, test_tup):\n    # Step 1: Convert the tuple to a list to allow modification\n    # Tuples are immutable, so we need to convert it to a list first\n    list_from_tuple = list(test_tup)\n    \n    # Step 2: Extend the list with the elements from the given list\n    # This will add all elements from test_list to list_from_tuple\n    list_from_tuple.extend(test_list)\n    \n    # Step 3: Convert the modified list back to a tuple\n    # Since the requirement is to return a tuple, we convert the list back\n    result_tuple = tuple(list_from_tuple)\n    \n    # Step 4: Return the resulting tuple\n    return result_tuple\n\n# Example usage:\n# test_list = [4, 5, 6]\n# test_tup = (1, 2, 3)\n# print(add_lists(test_list, test_tup))  # Output should be (1, 2, 3, 4, 5, 6)\n",
        "pass": "True"
    },
    {
        "task_id": 107,
        "text": "Write a python function to count hexadecimal numbers for a given range.",
        "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Hexadecimal(L,R) :",
        "question_1": "Write a function in Python to convert a string of hexadecimal characters to their corresponding ASCII value.",
        "answer_1": "def hexToASCII(hexStr):\n num = int(hexStr, 16)\n return chr(num)",
        "question_2": "Create a Python script to generate 10 random hexadecimal numbers.",
        "answer_2": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))",
        "question_3": "Convert an array of hexadecimal strings to decimal numbers with a Python script.",
        "answer_3": "def hex_to_dec(hex_strings):\n    # Define an array to store the decimal numbers\n    dec_nums = []\n  \n    # Iterate over each hex string in the array\n    for hex_string in hex_strings:\n        # Convert the hexadecimal to integer and \n        # store the result in dec_nums \n        dec_nums.append(int(hex_string, 16))\n  \n    return dec_nums\n\n# Test example\nprint(hex_to_dec([\"FF\", \"A0\", \"5E\"]))\n# Output: [255, 160, 94]",
        "full_code": "\ndef count_Hexadecimal(L, R):\n    # Initialize a counter to keep track of the number of valid hexadecimal numbers\n    count = 0\n    \n    # Iterate through each number in the given range [L, R]\n    for num in range(L, R + 1):\n        # Convert the current number to a hexadecimal string\n        hex_str = hex(num)\n        \n        # Check if the hexadecimal string is valid\n        # A valid hexadecimal string should only contain characters from 0-9 and A-F\n        if all(c in '0123456789abcdefABCDEF' for c in hex_str[2:]):\n            # If valid, increment the counter\n            count += 1\n    \n    # Return the total count of valid hexadecimal numbers in the range\n    return count\n\n# Example usage:\n# print(count_Hexadecimal(10, 100))  # Output will depend on the range provided\n",
        "pass": "False"
    },
    {
        "task_id": 108,
        "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):",
        "question_1": "Write a code to implement a priority queue using a max heap in Python",
        "answer_1": "class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1",
        "question_2": "Write an algorithm for merging two sorted lists of integers into one sorted list in Python.",
        "answer_2": "def merge(list1, list2): \n    # create an empty list to store the result \n    mergedList = [] \n    # set two index pointers \n    i = 0  \n    j = 0\n    while (i < len(list1) and j < len(list2)): \n        if (list1[i] < list2[j]): \n            mergedList.append(list1[i]) \n            i += 1\n        else: \n            mergedList.append(list2[j]) \n            j += 1\n\n    # check for remaining elements \n    while (i < len(list1)): \n        mergedList.append(list1[i]) \n        i += 1\n\n    while (j < len(list2)): \n        mergedList.append(list2[j]) \n        j += 1\n  \n    return mergedList \n  \n# Driver code \nlist1 = [1, 3, 5, 8]\nlist2 = [2, 4, 6, 7]\n\n# function call \nmergedList = merge(list1, list2) \n\n# print result \nprint(mergedList)",
        "question_3": "Generate a python program to sort a given linked list using the quicksort algorithm",
        "answer_3": "def sort_linked_list(head):\n    if not head or head.next is None:\n        return head\n\n    mid = get_middle(head)\n    mid_next = mid.next\n\n    l1 = sort_linked_list(head)\n    l2 = sort_linked_list(mid_next)\n\n    return merge(l1, l2)\n\ndef merge(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge(l1, l2.next)\n        return l2\n\ndef get_middle(head):\n    if not head:\n        return head\n\n    slow = head\n    fast = head\n\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow",
        "full_code": "\nimport heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Initialize an empty list to hold the merged result\n    merged_list = []\n    \n    # Create a list of tuples where each tuple contains the first element of each sorted list and its index\n    # This will help us keep track of which list the element came from\n    heap = [(lst[0], i) for i, lst in enumerate([num1, num2, num3]) if lst]\n    \n    # Convert the list of tuples into a heap\n    heapq.heapify(heap)\n    \n    # Create a list of iterators for each input list\n    iterators = [iter(lst) for lst in [num1, num2, num3]]\n    \n    # While there are elements in the heap\n    while heap:\n        # Pop the smallest element from the heap\n        val, idx = heapq.heappop(heap)\n        \n        # Append the smallest element to the merged list\n        merged_list.append(val)\n        \n        # Try to get the next element from the list that the popped element came from\n        try:\n            next_val = next(iterators[idx])\n            # Push the next element onto the heap\n            heapq.heappush(heap, (next_val, idx))\n        except StopIteration:\n            # If the list is exhausted, do nothing\n            pass\n    \n    return merged_list\n\n# Example usage:\nnum1 = [1, 4, 7]\nnum2 = [2, 5, 8]\nnum3 = [3, 6, 9]\n\n# Function call\nmerged_list = merge_sorted_list(num1, num2, num3)\n\n# Print result\nprint(merged_list)\n```\n\n### Explanation:\n1. **Initialization**:\n   - We start by initializing an empty list `merged_list` to store the merged result.\n   - We create a list of tuples `heap` where each tuple contains the first element of each sorted list and its index. This helps us keep track of which list the element came from.\n\n2. **Heapify**:\n   - We convert the list of tuples into a heap using `heapq.heapify(heap)`. This ensures that the smallest element is always at the root of the heap.\n\n3. **Iterators**:\n   - We create a list of iterators for each input list using `iter(lst)`. This allows us to efficiently get the next element from each list.\n\n4. **Merging Process**:\n   - We enter a loop that continues as long as there are elements in the heap.\n   - Inside the loop, we pop the smallest element from the heap using `heapq.heappop(heap)`.\n   - We append the popped element to the `merged_list`.\n   - We then try to get the next element from the list that the popped element came from using `next(iterators[idx])`.\n   - If the next element exists, we push it onto the heap using `heapq.heappush(heap, (next_val, idx))`.\n   - If the list is exhausted (i.e., `StopIteration` is raised), we do nothing and continue with the next iteration of the loop.\n\n5. **Return**:\n   - Finally, we return the `merged_list` which contains all elements from the input lists in sorted order.\n\nThis approach ensures that we efficiently merge multiple sorted lists into a single sorted list using the heap queue algorithm, which has a time complexity of \\(O(n \\log k)\\), where \\(n\\) is the total number of elements and \\(k\\) is the number of input lists.",
        "pass": "Error"
    },
    {
        "task_id": 109,
        "text": "Write a python function to find the count of rotations of a binary string with odd value.",
        "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Equivalent(s,n):",
        "question_1": "Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.",
        "answer_1": "def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')",
        "question_2": "Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true).",
        "answer_2": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1 + str1\n\n# testing\nprint(is_rotation('hello', 'lohel'))  # prints True",
        "question_3": "Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.",
        "answer_3": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    s1s1 = s1 + s1\n    if s2 in s1s1:\n        return True\n    return False\n\nprint(is_rotation(\"ABACD\", \"CDABA\"))",
        "full_code": "\ndef odd_Equivalent(s, n):\n    # Step 1: Check if the length of the string is odd\n    # If the length is not odd, then there can't be any rotations with an odd value\n    if n % 2 == 0:\n        return 0\n    \n    # Step 2: Initialize a counter to keep track of the number of valid rotations\n    count = 0\n    \n    # Step 3: Generate all possible rotations of the string\n    # A rotation can be obtained by slicing the string at different points\n    for i in range(n):\n        # Create the rotated string by slicing and concatenating\n        rotated_string = s[i:] + s[:i]\n        \n        # Step 4: Convert the rotated string to an integer to check if it's odd\n        # We use int(rotated_string, 2) to convert the binary string to an integer\n        if int(rotated_string, 2) % 2 != 0:\n            # Step 5: If the integer value is odd, increment the counter\n            count += 1\n    \n    # Step 6: Return the count of rotations with odd values\n    return count\n\n# Example usage:\n# s = \"101\"\n# n = len(s)\n# print(odd_Equivalent(s, n))  # Output should be 2, as \"101\" and \"011\" are odd\n",
        "pass": "False"
    },
    {
        "task_id": 110,
        "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "test_list": [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_missing(test_list, strt_val, stop_val):",
        "question_1": "Create a Python program to determine the missing elements from a given list.",
        "answer_1": "def find_missing_elements(list):\n    missing_elements = []\n    for i in range(min(list), max(list)):\n        if i not in list:\n            missing_elements.append(i)\n    return missing_elements",
        "question_2": "Create a Python program to list all the integers between a given range input.",
        "answer_2": "def list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)",
        "question_3": "Generate a Python script to create a list of numbers between a given range.",
        "answer_3": "def generate_list(start, end):\n    result = []\n    for num in range(start, end+1):\n        result.append(num)\n    return result\n\nlist = generate_list(5, 10)\nprint(list)  # Output: [5, 6, 7, 8, 9, 10]",
        "full_code": "\ndef extract_missing(test_list, strt_val, stop_val):\n    # Initialize an empty list to store the missing ranges\n    missing_ranges = []\n    \n    # Iterate through the range from strt_val to stop_val\n    for i in range(strt_val, stop_val + 1):\n        # Check if the current number is not in the test_list\n        if i not in test_list:\n            # If it's the first missing number, start a new range\n            if not missing_ranges or missing_ranges[-1][1] != i - 1:\n                missing_ranges.append([i, i])\n            else:\n                # If it continues the previous range, update the end of the range\n                missing_ranges[-1][1] = i\n    \n    # Convert the missing ranges to a list of strings for better readability\n    missing_ranges = [f\"{start}-{end}\" for start, end in missing_ranges]\n    \n    # Return the list of missing ranges\n    return missing_ranges\n\n# Example usage:\ntest_list = [3, 5, 7, 10]\nstrt_val = 1\nstop_val = 12\nprint(extract_missing(test_list, strt_val, stop_val))\n# Expected output: ['1-2', '4', '6', '8-9', '11-12']\n",
        "pass": "False"
    },
    {
        "task_id": 111,
        "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "test_list": [
            "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
            "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
            "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_in_nested_lists(nestedlist):",
        "question_1": "Write a Python script to find the common elements in two given lists.",
        "answer_1": "def findCommonElements(listA, listB):\n commonElements = []\n\n for elementA in listA:\n for elementB in listB:\n if elementA == elementB:\n commonElements.append(elementA)\n\n return commonElements\n\nlistA = [1, 3, 5, 7, 9]\nlistB = [2, 3, 4, 5, 8]\ncommonElements = findCommonElements(listA, listB) \n\nprint(commonElements)  # Output: [3, 5]",
        "question_2": "Create a Python function that takes two lists and returns a list of all elements in common between them.",
        "answer_2": "def find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements",
        "question_3": "Write a Python program to find the common elements between two given lists.",
        "answer_3": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common",
        "full_code": "\ndef common_in_nested_lists(nestedlist):\n    # Step 1: Initialize an empty set to store the common elements.\n    # Using a set will help in avoiding duplicate common elements.\n    common_elements = set()\n    \n    # Step 2: Check if the input list is not empty and contains at least one list.\n    if nestedlist and isinstance(nestedlist[0], list):\n        # Step 3: Initialize the common_elements set with the elements of the first list.\n        common_elements = set(nestedlist[0])\n        \n        # Step 4: Iterate over the remaining lists in the nested list.\n        for sublist in nestedlist[1:]:\n            # Step 5: Convert the current sublist to a set to perform intersection.\n            sublist_set = set(sublist)\n            \n            # Step 6: Update the common_elements set by intersecting it with the current sublist set.\n            common_elements.intersection_update(sublist_set)\n    \n    # Step 7: Convert the set of common elements back to a list (if needed).\n    common_elements = list(common_elements)\n    \n    # Step 8: Return the list of common elements.\n    return common_elements\n\n# Example usage:\nnestedlist = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]\nprint(common_in_nested_lists(nestedlist))  # Output: [3, 4]\n",
        "pass": "True"
    },
    {
        "task_id": 112,
        "text": "Write a python function to find the perimeter of a cylinder.",
        "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "test_list": [
            "assert perimeter(2,4) == 12",
            "assert perimeter(1,2) == 6",
            "assert perimeter(3,1) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter(diameter,height) :",
        "question_1": "Create a Python module that calculates the perimeter of a circle.",
        "answer_1": "import math\n\ndef calculate_circle_perimeter(radius):\n        return 2 * math.pi * radius",
        "question_2": "Create a class in Python that defines a shape and has three methods that calculate the perimeter, area, and volume.",
        "answer_2": "class Shape:\n    def __init__(self):\n        # Initialize any variables as needed.\n        pass\n\n    def calculate_perimeter(self):\n        # Code to calculate perimeter\n        pass\n    \n    def calculate_area(self):\n        # Code to calculate area\n        pass\n\n    def calculate_volume(self):\n        # Code to calculate volume\n        pass",
        "question_3": "Write a Python program which takes the length and width of a rectangle as input and returns its perimeter.",
        "answer_3": "def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter)",
        "full_code": "\ndef perimeter(diameter, height):\n    # Step 1: Calculate the circumference of the base of the cylinder.\n    # The circumference of a circle is given by the formula C = \u03c0 * d, where d is the diameter.\n    circumference = 3.14159 * diameter  # Using a common approximation for \u03c0\n\n    # Step 2: Calculate the perimeter of the cylinder.\n    # The perimeter of a cylinder is the sum of the circumference of the base and the height of the cylinder.\n    # Since the cylinder has two bases, we need to consider the circumference twice.\n    # However, the height is only considered once in the perimeter calculation.\n    cylinder_perimeter = 2 * circumference + height\n\n    # Step 3: Return the calculated perimeter.\n    return cylinder_perimeter\n\n# Example usage:\n# diameter = 5, height = 10\n# perimeter(5, 10) should return the perimeter of the cylinder.\n",
        "pass": "False"
    },
    {
        "task_id": 113,
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_integer(text):",
        "question_1": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_1": "def contains_number(string):\n    return any(char.isdigit() for char in string)",
        "question_2": "Write a Python function to check if a string contains only numbers.",
        "answer_2": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_3": "Write a python program to check if a given string contains any numbers",
        "answer_3": "def string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None",
        "full_code": "\ndef check_integer(text):\n    # Step 1: Check if the string is empty\n    # An empty string cannot represent an integer\n    if not text:\n        return False\n    \n    # Step 2: Check if the string contains only digits\n    # An integer should only contain numeric characters\n    if text.isdigit():\n        return True\n    \n    # Step 3: Check if the string represents a negative integer\n    # A negative integer should start with a '-' followed by digits\n    if text.startswith('-') and text[1:].isdigit():\n        return True\n    \n    # Step 4: If none of the above conditions are met, the string does not represent an integer\n    return False\n\n# The function is now complete and can be executed directly using `exec()`\n",
        "pass": "True"
    },
    {
        "task_id": 114,
        "text": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "test_list": [
            "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
            "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
            "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef assign_freq(test_list):",
        "question_1": "Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.",
        "answer_1": "def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]",
        "question_2": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_2": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_3": "Generate a Python function that takes an array of elements and finds the frequency of each element",
        "answer_3": "def count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))",
        "full_code": "\nfrom collections import Counter\n\ndef assign_freq(test_list):\n    # Step 1: Initialize a Counter object to count the frequency of each tuple\n    # Counter is a dictionary subclass that helps count hashable objects\n    freq_counter = Counter(test_list)\n    \n    # Step 2: Create a list of tuples where each tuple contains the original tuple and its frequency\n    # We use a list comprehension to iterate over the items of the Counter object\n    # Each item in the Counter object is a tuple (original_tuple, frequency)\n    result = [(tup, freq_counter[tup]) for tup in test_list]\n    \n    # Step 3: Return the result list\n    return result\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4)]\nprint(assign_freq(test_list))\n```\n\n### Explanation:\n1. **Initialization of Counter**: \n   - We use `Counter` from the `collections` module to count the occurrences of each tuple in the list. `Counter` is particularly useful because it automatically handles counting and returns a dictionary-like object where keys are the tuples and values are their respective counts.\n\n2. **Creating the Result List**:\n   - We use a list comprehension to iterate over each tuple in the original list (`test_list`). For each tuple, we look up its frequency in the `freq_counter` and create a new tuple containing the original tuple and its frequency. This new tuple is then added to the `result` list.\n\n3. **Returning the Result**:\n   - Finally, we return the `result` list, which contains tuples of the form `(original_tuple, frequency)`.\n\n### Example Usage:\n- The example usage demonstrates how the function works with a sample list of tuples. The output will be a list of tuples where each tuple contains an original tuple and its frequency in the input list.",
        "pass": "Error"
    },
    {
        "task_id": 115,
        "text": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def empty_dit(list1):",
        "question_1": "Generate a Python code snippet to check if all the values of a dictionary are True.",
        "answer_1": "all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.",
        "question_2": "Create a function in Python to build an empty dictionary.",
        "answer_2": "def buildDictionary():\n  dictionary = dict()\n  return dictionary",
        "question_3": "Generate a valid Python code that will create an empty dictionary",
        "answer_3": "my_dict = {}",
        "full_code": "\ndef empty_dict(list1):\n    # Step 1: Initialize a flag to keep track of whether all dictionaries are empty\n    all_empty = True\n    \n    # Step 2: Iterate through each dictionary in the list\n    for dictionary in list1:\n        # Step 3: Check if the current dictionary is not empty\n        if dictionary:\n            # Step 4: If any dictionary is not empty, set the flag to False and break the loop\n            all_empty = False\n            break\n    \n    # Step 5: Return the flag indicating whether all dictionaries are empty\n    return all_empty\n\n# The following code can be directly executed using `exec()`\ndef empty_dict(list1):\n    all_empty = True\n    for dictionary in list1:\n        if dictionary:\n            all_empty = False\n            break\n    return all_empty\n",
        "pass": "False"
    },
    {
        "task_id": 116,
        "text": "Write a function to convert a given tuple of positive integers into an integer.",
        "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_to_int(nums):",
        "question_1": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_1": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "question_2": "Write a Python function to convert a list of multiple integers into a single integer.",
        "answer_2": "def convert_list_to_integer(my_list):\n    result = 0\n    multiplier = 1\n \n    for i in range(len(my_list)-1, -1, -1):\n        result += my_list[i]*multiplier\n        multiplier *= 10\n \n    return result\n \nprint(convert_list_to_integer(my_list))",
        "question_3": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_3": "def convert_to_integers(lst):\n    return [int(i) for i in lst]",
        "full_code": "\ndef tuple_to_int(nums):\n    # Step 1: Initialize an empty string to store the concatenated string representation of the integers.\n    concatenated_string = \"\"\n    \n    # Step 2: Iterate over each integer in the tuple.\n    for num in nums:\n        # Step 3: Convert each integer to a string and concatenate it to the concatenated_string.\n        concatenated_string += str(num)\n    \n    # Step 4: Convert the concatenated string back to an integer.\n    result_integer = int(concatenated_string)\n    \n    # Step 5: Return the resulting integer.\n    return result_integer\n\n# Example usage:\n# print(tuple_to_int((1, 2, 3)))  # Output should be 123\n",
        "pass": "True"
    },
    {
        "task_id": 117,
        "text": "Write a function to convert all possible convertible elements in the list to float.",
        "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_to_float(test_list):",
        "question_1": "Create a Python program to convert a given list of strings to float values",
        "answer_1": "def convertStringToFloat(str_list):\n    floats = []\n    for s in str_list:\n        floats.append(float(s))\n    return floats\n\nconvertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]",
        "question_2": "Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.",
        "answer_2": "def infer_data_type(my_list):\n    output_list = []\n    for item in my_list:\n        if type(item) == int:\n            output_list.append('integer')\n        elif type(item) == float:\n            output_list.append('float')\n        else:\n            output_list.append('string')\n    return output_list",
        "question_3": "Write a Python program to convert ratings in a list of strings to a float.",
        "answer_3": "def str_to_float(ratings):\n    return [float(x) for x in ratings]",
        "full_code": "\ndef list_to_float(test_list):\n    # Initialize an empty list to store the converted float values\n    float_list = []\n    \n    # Iterate over each element in the input list\n    for item in test_list:\n        try:\n            # Attempt to convert the item to a float\n            float_item = float(item)\n            # If successful, append the float value to the float_list\n            float_list.append(float_item)\n        except ValueError:\n            # If conversion fails, append the original item (which is not convertible)\n            float_list.append(item)\n    \n    # Return the list with all possible convertible elements converted to float\n    return float_list\n\n# Example usage:\n# test_list = ['123', '45.67', 'abc', '89']\n# print(list_to_float(test_list))  # Output: [123.0, 45.67, 'abc', 89.0]\n",
        "pass": "False"
    },
    {
        "task_id": 118,
        "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_list(string):",
        "question_1": "Create a function to convert a string to a list using Python.",
        "answer_1": "def string_to_list(text):\n    lst = text.split()\n    return lst\n\ntext = \"This is a sentence.\"\nprint(string_to_list(text))",
        "question_2": "Given a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.",
        "answer_2": "def str_to_list(string):\n    return string.split(' ')",
        "question_3": "Generate a Python script that will extract all URLs from the given text.",
        "answer_3": "import re\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list)",
        "full_code": "\ndef string_to_list(string):\n    # Step 1: Initialize an empty list to store the split elements\n    lst = []\n    \n    # Step 2: Use the split() method to split the string by spaces\n    # The split() method will return a list of words\n    lst = string.split()\n    \n    # Step 3: Return the list of words\n    return lst\n\n# Example usage:\n# text = \"This is a sentence.\"\n# print(string_to_list(text))\n",
        "pass": "True"
    },
    {
        "task_id": 119,
        "text": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "test_list": [
            "assert search([1,1,2,2,3],5) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
            "assert search([1,2,2,3,3,4,4],7) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def search(arr,n) :",
        "question_1": "Suggest an algorithm in Python to sort an array of integers but maintain the order of similar elements.",
        "answer_1": "def sort_with_maintained_order(array):\n    \"\"\"\n    Sort an array of integers\n    but maintain the order of similar elements.\n\n    Parameters\n    ----------\n    array : List[int]\n        The input array\n\n    Returns\n    -------\n    List[int]\n        The sorted array\n\n    \"\"\"\n    # Keep track of elements already seen\n    seen_elements = []\n\n    # Loop over the list in the original order\n    for element in array:\n        # Check if element appears for the first time\n        if element not in seen_elements:\n            # Only continue if it is the first appearance\n            seen_elements.append(element)\n            # Find the positions of all elements with this value\n            positions = [i for i, x in enumerate(array) if x == element]\n            # Resolve the order for this element\n            order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1])\n            # Rearrange the elements in ascending order\n            for i, (pos, val) in enumerate(order):\n                array[pos] = i\n    return array",
        "question_2": "Design an algorithm in Python to detect duplicate elements in an array.",
        "answer_2": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates",
        "question_3": "Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise",
        "answer_3": "def is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True",
        "full_code": "\ndef search(arr, n):\n    # The array is sorted, so we can use binary search to find the element that appears only once.\n    # Binary search is efficient with a time complexity of O(log n).\n\n    # Initialize the start and end pointers for the binary search.\n    start = 0\n    end = n - 1\n\n    # Perform binary search\n    while start <= end:\n        # Calculate the middle index\n        mid = start + (end - start) // 2\n\n        # Check if the middle element is the one that appears only once\n        if mid == 0 or mid == n - 1:\n            # If mid is at the start or end of the array, it must be the unique element\n            return arr[mid]\n        elif arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            # If the middle element is different from its neighbors, it is the unique element\n            return arr[mid]\n        elif mid % 2 == 0:\n            # If mid is even, the unique element is in the right half if arr[mid] == arr[mid + 1]\n            if arr[mid] == arr[mid + 1]:\n                start = mid + 2\n            else:\n                end = mid - 2\n        else:\n            # If mid is odd, the unique element is in the left half if arr[mid] == arr[mid - 1]\n            if arr[mid] == arr[mid - 1]:\n                start = mid + 1\n            else:\n                end = mid - 1\n\n    # If no unique element is found, return None (though the problem guarantees one unique element)\n    return None\n\n# Example usage:\n# arr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\n# n = len(arr)\n# print(search(arr, n))  # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 120,
        "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product_tuple(list1):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Generate Python code to find the pair with the maximum product in a given array.",
        "answer_2": "def max_pair_product(arr):\n    # Initialize the maximum product and the maximum elements\n    max_product = 0\n    max_elems = [0, 0]\n    # Iterate through each element in the array \n    for i in range(len(arr)):\n        left_elem = arr[i]\n        # Iterate through each other element in the array\n        for j in range(i + 1, len(arr)):\n            right_elem = arr[j]\n            # Compute the product\n            product = left_elem * right_elem\n            # Find the maximum product and the corresponding elements\n            if product > max_product:\n                max_product = product\n                max_elems = [left_elem, right_elem]\n    # Return the maximum product and the corresponding elements\n    return (max_product, max_elems)",
        "question_3": "Write a Python function to find the maximum product of three integers from a given list.",
        "answer_3": "def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n )",
        "full_code": "\ndef max_product_tuple(list1):\n    # Initialize the maximum product to a very small number\n    max_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Extract the first tuple\n        tuple1 = list1[i]\n        \n        # Iterate through each other tuple in the list\n        for j in range(i + 1, len(list1)):\n            # Extract the second tuple\n            tuple2 = list1[j]\n            \n            # Calculate the product of the first elements of both tuples\n            product = tuple1[0] * tuple2[0]\n            \n            # Check if this product is greater than the current maximum product\n            if product > max_product:\n                # Update the maximum product\n                max_product = product\n    \n    # Return the maximum product found\n    return max_product\n\n# Example usage:\n# list1 = [(1, 2), (3, 4), (5, 6)]\n# print(max_product_tuple(list1))  # Output should be 15 (5 * 3)\n",
        "pass": "False"
    },
    {
        "task_id": 121,
        "text": "Write a function to find the triplet with sum of the given array",
        "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "test_list": [
            "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
            "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
            "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_triplet(A, n, sum, count):",
        "question_1": "Write a Python program to find all unique triplets of number in an array that sums up to 0.",
        "answer_1": "def threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]",
        "question_2": "Write a Python program to find all unique triplets in the array which give the sum of zero.",
        "answer_2": "def threeSum(nums): \n\tres = [] \n\tnums.sort() \n\n\tfor i in range(len(nums)-2): \n\t\tif i > 0 and nums[i] == nums[i-1]: \n\t\t\tcontinue\n\t\t\t\n\t\tl, r = i+1, len(nums)-1\n\t\twhile l < r: \n\t\t\ts = nums[i] + nums[l] + nums[r]  \n\t\t\tif s > 0: \n\t\t\t\tr -= 1\n\t\t\telif s < 0: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tres.append([nums[i], nums[l], nums[r]]) \n\t\t\t\twhile l < r and nums[l] == nums[l+1]: \n\t\t\t\t\tl += 1\n\t\t\t\twhile l < r and nums[r] == nums[r-1]: \n\t\t\t\t\tr -= 1\n\t\t\t\tl += 1\n\t\t\t\tr -= 1\n\treturn res \n\nprint(threeSum(nums))",
        "question_3": "Generate an efficient code for 3-sum problem.",
        "answer_3": "# Python program to find all unique triplets that sum up to 0\ndef find_triplets(arr):\n  result = []\n  n = len(arr)\n  # Sort the array \n  arr.sort()\n\n  # Fix the first element \n  # and find other two elements \n  for i in range(0,n-1):\n    # Fix the second element and\n    # find the third \n    l = i + 1\n    r = n - 1\n    while (l < r):\n      sum = arr[i] + arr[l] + arr[r]\n      if sum == 0: \n        result.append([arr[i],arr[l],arr[r]]) \n        l+=1\n        r-=1\n      # If the sum is lesser  \n      # than zero, then increase \n      # the left bound    \n      elif (sum < 0):\n        l+=1\n        \n      # If the sum is greater \n      # then decrease the right bound \n      else: \n        r-=1\n  return result\n\n# Driver code\nif __name__ == \"__main__\":\n  arr = [-3, 0, 1, 2, -1, 1, -2] \n  result = find_triplets(arr)\n  print(result)",
        "full_code": "\ndef check_triplet(A, n, sum, count):\n    # Initialize result list to store the triplets\n    result = []\n    \n    # Sort the array to make the two-pointer technique feasible\n    A.sort()\n    \n    # Iterate through the array to fix the first element of the triplet\n    for i in range(n - 2):\n        # Use two pointers to find the other two elements of the triplet\n        l = i + 1\n        r = n - 1\n        \n        # Continue until the two pointers meet\n        while l < r:\n            # Calculate the current sum of the triplet\n            current_sum = A[i] + A[l] + A[r]\n            \n            # If the current sum matches the target sum, add the triplet to the result\n            if current_sum == sum:\n                result.append([A[i], A[l], A[r]])\n                l += 1\n                r -= 1\n                count += 1\n            \n            # If the current sum is less than the target sum, move the left pointer to increase the sum\n            elif current_sum < sum:\n                l += 1\n            \n            # If the current sum is greater than the target sum, move the right pointer to decrease the sum\n            else:\n                r -= 1\n    \n    # Return the result list containing all triplets that sum to the given value\n    return result\n\n# Example usage\nA = [1, 4, 45, 6, 10, 8]\nn = len(A)\nsum = 22\ncount = 0\n\nprint(check_triplet(A, n, sum, count))\n",
        "pass": "False"
    },
    {
        "task_id": 122,
        "text": "Write a function to find n\u2019th smart number.",
        "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "test_list": [
            "assert smartNumber(1) == 30",
            "assert smartNumber(50) == 273",
            "assert smartNumber(1000) == 2664"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 3000 \r\ndef smartNumber(n):",
        "question_1": "Rewrite a Python function given a few specific requirements.",
        "answer_1": "def is_prime(n):\n if n < 2:\n return False\n elif n == 2:\n return True\n elif n > 2 and n % 2 == 0:\n return False\n for i in range(3, int(n**0.5)+1, 2):\n if n % i == 0:\n return False\n return True",
        "question_2": "Write a python function that accepts a number n as input and outputs its nth prime number.",
        "answer_2": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result",
        "full_code": "\nMAX = 3000\n\ndef smartNumber(n):\n    # Smart numbers are defined as numbers that can be represented as the sum of two or more consecutive positive integers.\n    # To find the nth smart number, we need to generate smart numbers in ascending order until we reach the nth one.\n    \n    # Initialize a list to store the smart numbers found so far.\n    smart_numbers = []\n    \n    # Start with the smallest possible sum of two consecutive positive integers, which is 3 (1 + 2).\n    num = 3\n    \n    # Loop until we have found the nth smart number.\n    while len(smart_numbers) < n:\n        # Check if the current number can be represented as the sum of two or more consecutive positive integers.\n        # We do this by checking if the number can be expressed as (k * (k + 1)) / 2 for some integer k.\n        # This is equivalent to checking if the number is a triangular number.\n        \n        # Initialize a variable to count the number of ways the current number can be expressed as a sum of consecutive integers.\n        count = 0\n        \n        # Check for each possible starting point of the sequence.\n        for start in range(1, num):\n            # Calculate the sum of the sequence starting from 'start' and ending at 'end'.\n            sum_seq = 0\n            end = start\n            while sum_seq < num:\n                sum_seq += end\n                end += 1\n            # If the sum matches the number, increment the count.\n            if sum_seq == num:\n                count += 1\n        \n        # If the number can be expressed in more than one way, it is a smart number.\n        if count > 1:\n            smart_numbers.append(num)\n        \n        # Move to the next number.\n        num += 1\n    \n    # Return the nth smart number.\n    return smart_numbers[n-1]\n\n# The function is now complete and can be executed using exec().\n",
        "pass": "False"
    },
    {
        "task_id": 123,
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def amicable_numbers_sum(limit):",
        "question_1": "Generate an algorithm using Python for computing the sum of all numbers up to a given number.",
        "answer_1": "def sum_up_to_number(number):\n   sum_number = 0\n   for num in range(1,number+1):\n      sum_number += num\n   return sum_number",
        "question_2": "Write a Python function to calculate the sum of all the amicable numbers within a given range.",
        "answer_2": "def sum_amicable_numbers(start, end):\n amicable_sum = 0\n \n for num in range(start, end + 1):\n divisors = get_divisors(num)\n div_sum = sum(divisors)\n other_divisors = get_divisors(div_sum)\n other_div_sum = sum(other_divisors)\n \n if other_div_sum == num and num != div_sum:\n amicable_sum += num\n  \n return amicable_sum\n \n def get_divisors(num):\n divisors = []\n \n for i in range(1, int(num/2) + 1):\n if num % i == 0:\n divisors.append(i)\n \n return divisors\n\nsum_amicable_numbers(1, 10000)",
        "question_3": "Create a function in Python to calculate the sum of 1 to n numbers.",
        "answer_3": "def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))",
        "full_code": "\ndef amicable_numbers_sum(limit):\n    # Step 1: Define a helper function to calculate the sum of proper divisors of a number\n    def sum_of_divisors(num):\n        # Initialize the sum to 0\n        total = 0\n        # Iterate through potential divisors from 1 to num/2 (since no divisor can be greater than num/2)\n        for i in range(1, num // 2 + 1):\n            # If i is a divisor of num, add it to the total\n            if num % i == 0:\n                total += i\n        return total\n\n    # Step 2: Initialize a variable to store the sum of amicable numbers\n    amicable_sum = 0\n\n    # Step 3: Iterate through all numbers from 1 to the given limit\n    for num in range(1, limit + 1):\n        # Calculate the sum of proper divisors of the current number\n        sum_div_num = sum_of_divisors(num)\n        # Calculate the sum of proper divisors of the sum_div_num\n        sum_div_sum_div_num = sum_of_divisors(sum_div_num)\n\n        # Step 4: Check if the current number and sum_div_num form an amicable pair\n        # An amicable pair must satisfy two conditions:\n        # 1. The sum of proper divisors of sum_div_num should be equal to the current number\n        # 2. The current number should not be equal to sum_div_num (to avoid perfect numbers)\n        if sum_div_sum_div_num == num and num != sum_div_num:\n            # If they form an amicable pair, add the current number to the amicable_sum\n            amicable_sum += num\n\n    # Step 5: Return the sum of all amicable numbers found within the given limit\n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(10000))\n",
        "pass": "True"
    },
    {
        "task_id": 124,
        "text": "Write a function to get the angle of a complex number.",
        "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath\r\ndef angle_complex(a,b):",
        "question_1": "Create a Python class that allows you to store complex numbers in a vector.",
        "answer_1": "class ComplexVector:\n    def __init__(self, complex_num):\n        # split the complex number into its components\n        self.real = float(complex_num.split(\" \")[0])\n        self.imag = float(complex_num.split(\" \")[2].replace(\"i\", \"\"))\n    \n    # print the vector in a readable format\n    def __str__(self):\n        return f\"{self.real} + {self.imag}i\"\n\n# create the vector from a complex number\nvec = ComplexVector(\"1 - 2i\")\nprint(vec) # prints \"1.0 + -2.0i\"",
        "question_2": "Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.",
        "answer_2": "import math\n\ndef magnitude_to_vector(magnitude, angle):\n    x = magnitude * math.cos(math.radians(angle))\n    y = magnitude * math.sin(math.radians(angle))\n    z = 0\n    \n    return (x, y, z)\n\nresult = magnitude_to_vector(5, 90)\n\nprint(f\"The vector is {result}\")",
        "question_3": "Using the complex library in Python, generate the complex number whose real part is 2 and imaginary part is 3.",
        "answer_3": "complex_number = complex(2,3)",
        "full_code": "\nimport cmath\n\ndef angle_complex(a, b):\n    # Step 1: Create the complex number using the real part 'a' and imaginary part 'b'\n    complex_num = complex(a, b)\n    \n    # Step 2: Use the cmath.phase function to get the angle of the complex number\n    # cmath.phase returns the angle in radians\n    angle_radians = cmath.phase(complex_num)\n    \n    # Step 3: Convert the angle from radians to degrees for easier interpretation\n    angle_degrees = math.degrees(angle_radians)\n    \n    # Step 4: Return the angle in degrees\n    return angle_degrees\n\n# Example usage:\n# angle_complex(1, 1) will return the angle of the complex number 1 + 1j\n",
        "pass": "False"
    },
    {
        "task_id": 125,
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "test_list": [
            "assert find_length(\"11000010001\", 11) == 6",
            "assert find_length(\"10111\", 5) == 1",
            "assert find_length(\"11011101100101\", 14) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_length(string, n):",
        "question_1": "Develop a Python script to find the maximum number of consecutive 1's in a given binary number.",
        "answer_1": "def countMaxOnes(inpString):\n  maxLength = 0\n  count = 0\n\n # Iterate through all elements of input string\n for i in range(len(inpString)):\n     # If element is '1', increment the count\n     if (inpString[i] == '1'):\n         count += 1\n\n     # If element is '0', check if count is greater\n     # than the maximum length found so far\n     else:\n         if (count > maxLength):\n             maxLength = count\n         count = 0\n  \n  # Check if last sequence of 1's if more\n  # than the maximum length found so far\n  if (count > maxLength):\n      maxLength = count\n  return maxLength\n\ninpString = \"101101111\"\nprint(\"Length of the longest contiguous 1's is\", countMaxOnes(inpString))\n\n# Output: Length of the longest contiguous 1's is 3",
        "question_2": "Write a python program to count the total number of \"1\"s present in a binary string",
        "answer_2": "def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count",
        "question_3": "Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string.",
        "answer_3": "def longestZeroSeq(inputStr):\n    maxLength = 0 \n   \n    currentLength = 0\n   \n    for c in inputStr:\n        if c == '0':\n            currentLength += 1\n        else:\n            maxLength = max(maxLength, currentLength) \n            currentLength = 0\n   \n    maxLength = max(maxLength, currentLength)\n   \n    return maxLength",
        "full_code": "\ndef find_length(string, n):\n    # Initialize variables to keep track of the maximum difference\n    max_diff = 0\n    \n    # Iterate through each possible starting point of the sub-string\n    for start in range(n):\n        # Initialize counters for 0s and 1s\n        count_0 = 0\n        count_1 = 0\n        \n        # Iterate through each possible ending point of the sub-string\n        for end in range(start, n):\n            # Count the number of 0s and 1s in the current sub-string\n            if string[end] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            \n            # Calculate the difference between the number of 0s and 1s\n            current_diff = abs(count_0 - count_1)\n            \n            # Update the maximum difference if the current difference is greater\n            if current_diff > max_diff:\n                max_diff = current_diff\n    \n    # Return the maximum difference found\n    return max_diff\n\n# Example usage:\nstring = \"101101111\"\nn = len(string)\nprint(\"Maximum difference between number of 0s and 1s in any sub-string is\", find_length(string, n))\n",
        "pass": "False"
    },
    {
        "task_id": 126,
        "text": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum(a,b):",
        "question_1": "Write a python program to calculate the sum of the divisors of a number",
        "answer_1": "def sum_divisors(n):\n    '''Returns the sum of all divisors of the given number.'''\n    if n <= 1:\n        return 0\n    #assume n is a positive integer\n    sum_divisors = 1\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors",
        "question_2": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_2": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_3": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_3": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))",
        "full_code": "\ndef sum(a, b):\n    # Step 1: Find the divisors of each number\n    # We will use a helper function to find all divisors of a given number\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Step 2: Find the common divisors of both numbers\n    # We will use set intersection to find common elements between the two lists of divisors\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = set(divisors_a) & set(divisors_b)\n\n    # Step 3: Sum the common divisors\n    # We will sum the elements in the set of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    # Step 4: Return the result\n    return sum_of_common_divisors\n\n# Example usage:\n# a = 12, b = 18\n# The common divisors are {1, 2, 3, 6}\n# The sum of common divisors is 1 + 2 + 3 + 6 = 12\n# result = sum(12, 18)\n# print(result)  # Output should be 12\n",
        "pass": "False"
    },
    {
        "task_id": 127,
        "text": "Write a function to multiply two integers without using the * operator in python.",
        "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_int(x, y):",
        "question_1": "Build a Python script to multiply two integer values.",
        "answer_1": "def multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))",
        "question_2": "Generate a Python function to multiply two given positive integers without using the * operator.",
        "answer_2": "def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1))",
        "question_3": "Write a Python function to multiply two given numbers.",
        "answer_3": "def multiply(num1, num2):\n    return num1 * num2",
        "full_code": "\ndef multiply_int(x, y):\n    # Initialize a variable to store the result of the multiplication\n    result = 0\n    \n    # Determine the sign of the result based on the signs of x and y\n    # If both x and y are positive or both are negative, the result will be positive\n    # If one is positive and the other is negative, the result will be negative\n    positive_result = (x >= 0 and y >= 0) or (x < 0 and y < 0)\n    \n    # Convert x and y to their absolute values to simplify the multiplication process\n    x = abs(x)\n    y = abs(y)\n    \n    # Use a loop to add x to the result y times\n    for _ in range(y):\n        result += x\n    \n    # If the result should be negative, negate the result\n    if not positive_result:\n        result = -result\n    \n    return result\n\n# Example usage:\n# print(multiply_int(3, 4))  # Output should be 12\n# print(multiply_int(-3, 4))  # Output should be -12\n# print(multiply_int(3, -4))  # Output should be -12\n# print(multiply_int(-3, -4))  # Output should be 12\n",
        "pass": "True"
    },
    {
        "task_id": 128,
        "text": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def long_words(n, str):",
        "question_1": "Write a Python program to find the list of words that are longer than n from a given list of words.",
        "answer_1": "def get_long_words(word_list, n):\n  return [w for w in word_list if len(w) > n]\n\nlong_words = get_long_words(word_list, n)\nprint(long_words)",
        "question_2": "In Python, generate a function that takes two arguments (a list and a number) and prints out the first two elements of the list that have a length greater than the second argument.",
        "answer_2": "def print_long_words(list_of_words, integer):\n  long_words = []\n  for word in list_of_words:\n    if len(word) > integer:\n      long_words.append(word)\n  if len(long_words)>1:\n    print(long_words[0], long_words[1])\n  else:\n    print('No words found with length greater than ', integer)",
        "question_3": "Write a Python program to find the list of words that are longer than given length",
        "answer_3": "# Create a list to store the result\nlong_words_list = []\n\n# Iterate the list to find words longer than the given length\nfor word in word_list:\n    if len(word) > length:\n        long_words_list.append(word)\n\n# Print the result\nprint(long_words_list)",
        "full_code": "\ndef long_words(n, str):\n    # Initialize an empty list to store the words that are longer than n\n    long_words_list = []\n    \n    # Split the input string into a list of words\n    # This assumes that words are separated by spaces\n    word_list = str.split()\n    \n    # Iterate through each word in the list\n    for word in word_list:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the word is longer than n, add it to the long_words_list\n            long_words_list.append(word)\n    \n    # Return the list of words that are longer than n\n    return long_words_list\n\n# Example usage:\n# n = 3\n# str = \"This is a test string to find long words\"\n# print(long_words(n, str))\n",
        "pass": "True"
    },
    {
        "task_id": 129,
        "text": "Write a function to calculate magic square.",
        "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def magic_square_test(my_matrix):",
        "question_1": "Create a python function named 'square' that squares a given number.",
        "answer_1": "def square(x):\n return x * x",
        "question_2": "Develop a Python function that squares a given number.",
        "answer_2": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_3": "Write a Python program to compute the square of a given number.",
        "answer_3": "def square(num):\n    return num ** 2",
        "full_code": "\ndef magic_square_test(my_matrix):\n    # Step 1: Check if the input matrix is square\n    # A magic square must be a square matrix (n x n)\n    n = len(my_matrix)\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    # Step 2: Calculate the sum of the first row (this will be our reference sum)\n    reference_sum = sum(my_matrix[0])\n    \n    # Step 3: Check if all rows have the same sum as the reference sum\n    for row in my_matrix:\n        if sum(row) != reference_sum:\n            return False\n    \n    # Step 4: Check if all columns have the same sum as the reference sum\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != reference_sum:\n            return False\n    \n    # Step 5: Check if the two main diagonals have the same sum as the reference sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n - i - 1] for i in range(n))\n    \n    if diag1_sum != reference_sum or diag2_sum != reference_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n\n# Example usage:\n# my_matrix = [\n#     [2, 7, 6],\n#     [9, 5, 1],\n#     [4, 3, 8]\n# ]\n# print(magic_square_test(my_matrix))  # Should return True\n",
        "pass": "True"
    },
    {
        "task_id": 130,
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_occurrences(nums):",
        "question_1": "Create a python program to select the item with the highest frequency in the list.",
        "answer_1": "def frequency_selector(list): \n    # Create an empty dictionary for counts \n    counts = {} \n  \n    # Iterate the list and store values in the dictionary \n    for l in list: \n        if l in counts: \n            counts[l] += 1\n        else: \n            counts[l] = 1\n  \n    # Find the highest frequency \n    max = 0\n    item = None\n  \n    for l in counts: \n        if counts[l] > max: \n            max = counts[l] \n            item = l \n  \n    return item\n\nlist = [5, 2, 8, 7, 2, 2, 4]\nprint(frequency_selector(list))",
        "question_2": "Write a Python function to find the most frequent element in a list.",
        "answer_2": "def most_frequent(list): \n    counter = 0\n    num = list[0] \n      \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num",
        "question_3": "Make an algorithm in Python for printing the maximum frequency of an element in an array.",
        "answer_3": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2",
        "full_code": "\nfrom collections import defaultdict\n\ndef max_occurrences(nums):\n    # Step 1: Initialize a defaultdict to store the frequency of each element\n    # defaultdict is used here to avoid key errors when adding new elements\n    frequency = defaultdict(int)\n    \n    # Step 2: Iterate through the list and count the occurrences of each element\n    for num in nums:\n        frequency[num] += 1\n    \n    # Step 3: Initialize variables to keep track of the maximum frequency and the corresponding element\n    max_freq = 0\n    max_item = None\n    \n    # Step 4: Iterate through the frequency dictionary to find the element with the highest frequency\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    # Step 5: Return the element with the maximum frequency\n    return max_item\n\n# Example usage:\nnums = [1, 3, 3, 3, 2, 2, 1, 1, 1]\nprint(max_occurrences(nums))  # Output: 1\n",
        "pass": "False"
    },
    {
        "task_id": 131,
        "text": "Write a python function to reverse only the vowels of a given string.",
        "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_vowels(str1):",
        "question_1": "Design a function in Python to remove the vowels from a given string.",
        "answer_1": "def remove_vowels(text):\n    \"\"\"Remove the vowels from a given string.\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n# Output\nprint(remove_vowels(text))",
        "question_2": "Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.",
        "answer_2": "def remove_vowels(s): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in s: \n        if x in vowels: \n            s = s.replace(x, \"\") \n    return s",
        "question_3": "In Python, build a program that can remove all vowels from a given string.",
        "answer_3": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string",
        "full_code": "\ndef reverse_vowels(str1):\n    # Step 1: Identify all vowels in the string and store them in a list\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = [char for char in str1 if char.lower() in vowels]\n    \n    # Step 2: Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Step 3: Create a new string where we will replace the vowels in the original string with the reversed vowels\n    new_str = \"\"\n    \n    # Step 4: Iterate through the original string and replace vowels with the reversed vowels\n    vowel_index = 0\n    for char in str1:\n        if char.lower() in vowels:\n            # Replace the vowel with the next vowel from the reversed list\n            new_str += vowel_list[vowel_index]\n            vowel_index += 1\n        else:\n            # Keep the non-vowel characters as they are\n            new_str += char\n    \n    # Step 5: Return the new string with reversed vowels\n    return new_str\n\n# Output the entire function as a plain string\noutput_code = \"\"\"\ndef reverse_vowels(str1):\n    # Step 1: Identify all vowels in the string and store them in a list\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = [char for char in str1 if char.lower() in vowels]\n    \n    # Step 2: Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Step 3: Create a new string where we will replace the vowels in the original string with the reversed vowels\n    new_str = \"\"\n    \n    # Step 4: Iterate through the original string and replace vowels with the reversed vowels\n    vowel_index = 0\n    for char in str1:\n        if char.lower() in vowels:\n            # Replace the vowel with the next vowel from the reversed list\n            new_str += vowel_list[vowel_index]\n            vowel_index += 1\n        else:\n            # Keep the non-vowel characters as they are\n            new_str += char\n    \n    # Step 5: Return the new string with reversed vowels\n    return new_str\n\"\"\"\n\n# Print the output code\nprint(output_code)\n",
        "pass": "True"
    },
    {
        "task_id": 132,
        "text": "Write a function to convert tuple to a string.",
        "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tup_string(tup1):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
        "full_code": "\ndef tup_string(tup1):\n    # Step 1: Initialize an empty string to store the result\n    result_string = \"\"\n    \n    # Step 2: Iterate over each element in the tuple\n    for item in tup1:\n        # Step 3: Convert the element to a string (if it's not already)\n        item_str = str(item)\n        \n        # Step 4: Append the string representation of the element to the result string\n        result_string += item_str\n        \n        # Step 5: Add a space between elements for readability (optional)\n        result_string += \" \"\n    \n    # Step 6: Remove the trailing space (if added in Step 5)\n    result_string = result_string.strip()\n    \n    # Step 7: Return the final concatenated string\n    return result_string\n\n# Example usage:\n# tup1 = (1, 2, 3, \"four\", 5.0)\n# print(tup_string(tup1))  # Output: \"1 2 3 four 5.0\"\n",
        "pass": "False"
    },
    {
        "task_id": 133,
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_negativenum(nums):",
        "question_1": "Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.",
        "answer_1": "def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)",
        "question_2": "Write a python for loop to iterate over a list of numbers and compute the sum of all numbers greater than 0",
        "answer_2": "sum = 18\n\n# using a for-loop\nsum = 0\nfor num in [-1, 5, -7, 10, -2]:\n  if num > 0:\n    sum += num\n\nprint(sum)\n\nOutput: 18",
        "question_3": "Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers",
        "answer_3": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list",
        "full_code": "\ndef sum_negativenum(nums):\n    # Step 1: Use the filter function to filter out all negative numbers from the list\n    # The lambda function lambda x: x < 0 will return True for negative numbers\n    negative_numbers = list(filter(lambda x: x < 0, nums))\n    \n    # Step 2: Use the sum function to calculate the sum of the filtered negative numbers\n    # The sum function will add up all the elements in the list\n    negative_sum = sum(negative_numbers)\n    \n    # Step 3: Return the calculated sum of negative numbers\n    return negative_sum\n\n# Example usage:\nnums = [-2, 4, 3, -3, -4, 5]\nresult = sum_negativenum(nums)\nprint(result)  # Output should be -9\n",
        "pass": "True"
    },
    {
        "task_id": 134,
        "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "test_list": [
            "assert check_last([5,7,10],3,1) == \"ODD\"",
            "assert check_last([2,3],2,3) == \"EVEN\"",
            "assert check_last([1,2,3],3,1) == \"ODD\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_last (arr,n,p):",
        "question_1": "Create an algorithm in Python to check whether an array has even or odd number of elements.",
        "answer_1": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "question_2": "Write a Python function which takes an array as input and prints out all the even numbers in the array.",
        "answer_2": "def print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11])",
        "question_3": "Develop a program in Python to classify the elements in an array as even or odd.",
        "answer_3": "evenArray = []\noddArray = []\nfor i in array:\n  if i % 2 == 0:\n    evenArray.append(i)\n  else:\n    oddArray.append(i)",
        "full_code": "\ndef check_last(arr, n, p):\n    # Step 1: Check if the array is empty\n    # If the array is empty, we cannot perform any operations or check the last element\n    if len(arr) == 0:\n        return \"Array is empty\"\n    \n    # Step 2: Perform the operation p times\n    # The operation involves modifying the last element of the array n times\n    # We will use a loop to perform this operation p times\n    for _ in range(p):\n        # Step 3: Modify the last element of the array\n        # We will add n to the last element of the array\n        arr[-1] += n\n    \n    # Step 4: Check if the last element is even or odd\n    # If the last element modulo 2 is 0, it is even; otherwise, it is odd\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\n# arr = [1, 2, 3]\n# n = 2\n# p = 3\n# print(check_last(arr, n, p))  # Output should be \"Odd\" if the last element becomes 9 after 3 operations\n",
        "pass": "False"
    },
    {
        "task_id": 135,
        "text": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hexagonal_num(n):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_2": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "question_3": "Create a Python script to generate 10 random hexadecimal numbers.",
        "answer_3": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))",
        "full_code": "\ndef hexagonal_num(n):\n    # The formula for the nth hexagonal number is given by H(n) = n * (2n - 1)\n    # This formula can be derived from the properties of hexagonal numbers.\n    \n    # Step 1: Calculate 2n - 1\n    term = 2 * n - 1\n    \n    # Step 2: Multiply n by the result from Step 1 to get the nth hexagonal number\n    hexagonal_number = n * term\n    \n    # Step 3: Return the calculated hexagonal number\n    return hexagonal_number\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 136,
        "text": "Write a function to calculate electricity bill.",
        "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "test_list": [
            "assert cal_electbill(75)==246.25",
            "assert cal_electbill(265)==1442.75",
            "assert cal_electbill(100)==327.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_electbill(units):",
        "question_1": "Write a Python program to calculate the total electricity bill given the rate per kwh for domestic loads.",
        "answer_1": "def calculate_bill(rate, consumption):\n    bill = rate * consumption\n    print(\"Your total electricity bill is Rs. {}\".format(bill))\n\ncalculate_bill(40, 300)",
        "question_2": "Create a Python program to calculate the electric bill for a customer based on kilowatt hour of electricity used.",
        "answer_2": "def calculate_electric_bill(kw_usage):\n  rate = 0.15\n  bill = kw_usage * rate\n  return bill\n\nx = 500\nbill = calculate_electric_bill(x)\nprint(\"Your bill is:\", str(bill))",
        "question_3": "Create a Python script to calculate total electricity bill",
        "answer_3": "def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh):\n    one_off_fee = one_off\n    night_rate_fee = night_rate * total_kwh\n    standard_rate_fee = standard_rate * total_kwh\n    return one_off_fee + night_rate_fee + standard_rate_fee\n\none_off = 25.00\nnight_rate = 0.20\nstandard_rate = 0.30\ntotal_kwh = 350.00\n\nprint(\"Total electricity bill: $\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh)))",
        "full_code": "\ndef cal_electbill(units):\n    # Step 1: Define the rate per unit for different consumption slabs\n    # Reasoning: Different regions or providers might have different rates for different consumption levels.\n    # Here, we assume three slabs: 0-100 units, 101-200 units, and 201+ units.\n    rate_slab1 = 5.00  # Rate for the first 100 units\n    rate_slab2 = 7.00  # Rate for units between 101 and 200\n    rate_slab3 = 10.00  # Rate for units above 200\n    \n    # Step 2: Initialize the total bill amount to 0\n    # Reasoning: We will accumulate the bill amount based on the consumption slabs.\n    total_bill = 0.0\n    \n    # Step 3: Calculate the bill based on the consumption slabs\n    # Reasoning: We need to apply different rates based on the number of units consumed.\n    if units <= 100:\n        # If units are less than or equal to 100, apply rate_slab1\n        total_bill = units * rate_slab1\n    elif units <= 200:\n        # If units are between 101 and 200, apply rate_slab1 for the first 100 units\n        # and rate_slab2 for the remaining units.\n        total_bill = (100 * rate_slab1) + ((units - 100) * rate_slab2)\n    else:\n        # If units are above 200, apply rate_slab1 for the first 100 units,\n        # rate_slab2 for the next 100 units, and rate_slab3 for the remaining units.\n        total_bill = (100 * rate_slab1) + (100 * rate_slab2) + ((units - 200) * rate_slab3)\n    \n    # Step 4: Return the total bill amount\n    # Reasoning: The function should return the calculated bill amount.\n    return total_bill\n\n# Example usage:\n# units = 250\n# print(\"Total electricity bill: $\" + str(cal_electbill(units)))\n",
        "pass": "False"
    },
    {
        "task_id": 137,
        "text": "Write a function to find the ration of zeroes in an array of integers.",
        "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
            "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
            "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef zero_count(nums):",
        "question_1": "Write a Python program to create an array of N zeros.",
        "answer_1": "import numpy\n\ndef create_zeros_array(N):\n  return numpy.zeros(N)\n\nresult = create_zeros_array(N)\nprint(result)",
        "question_2": "Edit the following Python program to implement try and except",
        "answer_2": "try:\n a = 10\n b = 0\n c = a/b\nexcept ZeroDivisionError:\n print(\"Error: Cannot divide by zero\")",
        "question_3": "Write Python code to include exception handling in this code.",
        "answer_3": "try:\n    a = 1\n    b = 0\n    c = a / b\n    print(c)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")",
        "full_code": "\nfrom array import array\n\ndef zero_count(nums):\n    # Step 1: Initialize a counter to keep track of the number of zeroes\n    zero_counter = 0\n    \n    # Step 2: Iterate through each element in the array\n    for num in nums:\n        # Step 3: Check if the current element is zero\n        if num == 0:\n            # Step 4: If it is zero, increment the zero counter\n            zero_counter += 1\n    \n    # Step 5: Calculate the total number of elements in the array\n    total_elements = len(nums)\n    \n    # Step 6: Calculate the ratio of zeroes to total elements\n    zero_ratio = zero_counter / total_elements\n    \n    # Step 7: Return the calculated ratio\n    return zero_ratio\n\n# Example usage:\nnums = array('i', [0, 1, 2, 0, 3, 0, 4])\nprint(zero_count(nums))  # Output should be the ratio of zeroes in the array\n",
        "pass": "False"
    },
    {
        "task_id": 138,
        "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Sum_Of_Powers_Of_Two(n):",
        "question_1": "Compose a function in Python to check if a given number is a power of two.",
        "answer_1": "def is_power_two(num):\n    if num == 0:\n        return False\n    \n    while num != 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n    return True",
        "question_2": "Create a Python program to check if a given number is a power of 2.",
        "answer_2": "def is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num /= 2\n    return num == 1\n\nprint(is_power_of_two(32))",
        "question_3": "Design an algorithm in Python to check if an integer is a power of two.",
        "answer_3": "def isPowerOfTwo(n):\n  if(n == 0): \n    return False\n  while(n != 1): \n    if(n % 2 != 0): \n      return False\n    n = n // 2\n    \n  return True\n  \n# The following call will return True\nisPowerOfTwo(16)",
        "full_code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Step 1: Check if the number is 0. If it is, it cannot be represented as a sum of non-zero powers of 2.\n    if n == 0:\n        return False\n    \n    # Step 2: Use bitwise operations to check if the number can be represented as a sum of non-zero powers of 2.\n    # A number can be represented as a sum of non-zero powers of 2 if it has exactly one bit set in its binary representation.\n    # This is because each bit set in the binary representation of a number represents a power of 2.\n    # For example, 5 (binary 101) has two bits set, so it cannot be represented as a single power of 2.\n    # However, 4 (binary 100) has exactly one bit set, so it can be represented as a single power of 2.\n    \n    # Step 3: Count the number of bits set in the binary representation of the number.\n    # We can use the bitwise AND operation to check each bit.\n    count = 0\n    while n > 0:\n        # If the least significant bit is 1, increment the count.\n        if n & 1:\n            count += 1\n        # Right shift the number to check the next bit.\n        n = n >> 1\n    \n    # Step 4: If the count of set bits is exactly 1, then the number can be represented as a sum of non-zero powers of 2.\n    # Otherwise, it cannot.\n    return count == 1\n\n# Example usage:\n# print(is_Sum_Of_Powers_Of_Two(4))  # Should return True\n# print(is_Sum_Of_Powers_Of_Two(5))  # Should return False\n",
        "pass": "False"
    },
    {
        "task_id": 139,
        "text": "Write a function to find the circumference of a circle.",
        "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "test_list": [
            "assert circle_circumference(10)==62.830000000000005",
            "assert circle_circumference(5)==31.415000000000003",
            "assert circle_circumference(4)==25.132"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def circle_circumference(r):",
        "question_1": "Write a Python script to calculate the circumference of a circle when the radius of the circle is given.",
        "answer_1": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)",
        "question_2": "Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.",
        "answer_2": "def circumference_of_circle(diameter):\n    circumference = 3.14 * diameter\n    return circumference",
        "question_3": "Develop a function in Python to calculate the circumference of a circle.",
        "answer_3": "def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)",
        "full_code": "\ndef circle_circumference(r):\n    # Step 1: Define the formula for the circumference of a circle\n    # The formula is C = 2 * \u03c0 * r, where C is the circumference and r is the radius\n    \n    # Step 2: Define the value of \u03c0 (pi)\n    # We'll use a common approximation for \u03c0, which is 3.14\n    pi = 3.14\n    \n    # Step 3: Calculate the circumference using the formula\n    circumference = 2 * pi * r\n    \n    # Step 4: Return the calculated circumference\n    return circumference\n\n# The following code is structured to be directly executable using exec()\n# It includes the function definition and a sample call to the function\n# to demonstrate its usage and output the result.\n\ndef circle_circumference(r):\n    # Step 1: Define the formula for the circumference of a circle\n    # The formula is C = 2 * \u03c0 * r, where C is the circumference and r is the radius\n    \n    # Step 2: Define the value of \u03c0 (pi)\n    # We'll use a common approximation for \u03c0, which is 3.14\n    pi = 3.14\n    \n    # Step 3: Calculate the circumference using the formula\n    circumference = 2 * pi * r\n    \n    # Step 4: Return the calculated circumference\n    return circumference\n\n# Sample call to the function with a radius of 5\nradius = 5\nresult = circle_circumference(radius)\nprint(result)\n",
        "pass": "False"
    },
    {
        "task_id": 140,
        "text": "Write a function to extract elements that occur singly in the given tuple list.",
        "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "test_list": [
            "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
            "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
            "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_singly(test_list):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Convert a given list into a list of tuples using Python.",
        "answer_2": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_3": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_3": "first_element = (3, 4, 5)[0]",
        "full_code": "\ndef extract_singly(test_list):\n    # Step 1: Initialize an empty dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Step 2: Iterate through each tuple in the list\n    for tup in test_list:\n        # Step 3: Iterate through each element in the tuple\n        for element in tup:\n            # Step 4: If the element is already in the dictionary, increment its count\n            if element in element_count:\n                element_count[element] += 1\n            # Step 5: If the element is not in the dictionary, add it with a count of 1\n            else:\n                element_count[element] = 1\n    \n    # Step 6: Initialize an empty list to store elements that occur singly\n    singly_elements = []\n    \n    # Step 7: Iterate through the dictionary to find elements with a count of 1\n    for element, count in element_count.items():\n        if count == 1:\n            singly_elements.append(element)\n    \n    # Step 8: Return the list of elements that occur singly\n    return singly_elements\n\n# Example usage:\n# test_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n# print(extract_singly(test_list))  # Output: [1, 5]\n",
        "pass": "False"
    },
    {
        "task_id": 141,
        "text": "Write a function to sort a list of elements using pancake sort.",
        "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pancake_sort(nums):",
        "question_1": "Create a function in Python that takes a list and sorts its elements in ascending order.",
        "answer_1": "def sortAsc(numbers):\n    numbers.sort()\n    return numbers",
        "question_2": "Generate a Python script to sort a given list of numbers without using the built-in function ``sort()``",
        "answer_2": "def sort_list(list):\n    '''This function will sort a given list of numbers without using the built-in function sort()'''\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list",
        "question_3": "Generate a Python script for sorting a list in ascending order.",
        "answer_3": "def sortList(list): \n    list.sort() \n    return list\n    \nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = sortList(unsorted_list)\n\nprint(\"Sorted list:\", sorted_list)",
        "full_code": "\ndef pancake_sort(nums):\n    # Pancake Sort Algorithm:\n    # 1. Find the maximum element in the unsorted portion of the list.\n    # 2. Flip (reverse) the list from the start to the maximum element to move the maximum element to the start.\n    # 3. Flip the entire unsorted portion to move the maximum element to the end of the unsorted portion.\n    # 4. Repeat the process for the remaining unsorted portion until the entire list is sorted.\n\n    # Function to flip the list from index 0 to the given index\n    def flip(arr, k):\n        arr[:k+1] = arr[:k+1][::-1]\n\n    # Function to find the index of the maximum element in the given range\n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(1, n+1):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    # Start the sorting process\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted portion\n        max_index = find_max_index(nums, n-1)\n        \n        # If the maximum element is not already at the end, flip to move it to the start\n        if max_index != n-1:\n            # Flip the list to move the maximum element to the start\n            flip(nums, max_index)\n            # Flip the entire unsorted portion to move the maximum element to the end\n            flip(nums, n-1)\n        \n        # Reduce the size of the unsorted portion\n        n -= 1\n\n    return nums\n\n# Example usage:\nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = pancake_sort(unsorted_list)\nprint(\"Sorted list:\", sorted_list)\n",
        "pass": "True"
    },
    {
        "task_id": 142,
        "text": "Write a function to count the same pair in three given lists.",
        "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_samepair(list1,list2,list3):",
        "question_1": "Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.",
        "answer_1": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))",
        "question_2": "Write a Python program to print out all possible pairs of two lists.",
        "answer_2": "for i in list1:\n    for j in list2:\n        print(i,j)\n\n# Output:\n# (1, 'a')\n# (1, 'b')\n# (1, 'c')\n# (2, 'a')\n# (2, 'b')\n# (2, 'c')\n# (3, 'a')\n# (3, 'b')\n# (3, 'c')",
        "question_3": "Create a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists.",
        "answer_3": "list1 = [1,2,3]\nlist2 = ['a', 'b', 'c']\n\npairs = []\n\nfor x in list1:\n    for y in list2:\n        pairs.append((x,y))\n\nprint(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]",
        "full_code": "\ndef count_samepair(list1, list2, list3):\n    # Initialize a counter to keep track of the number of same pairs\n    count = 0\n    \n    # Iterate through each element in the first list\n    for x in list1:\n        # For each element in the first list, iterate through each element in the second list\n        for y in list2:\n            # Check if the pair (x, y) exists in the third list\n            if (x, y) in list3:\n                # If the pair exists, increment the counter\n                count += 1\n    \n    # Return the total count of same pairs\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\nlist3 = [(1, 2), (2, 3), (3, 4)]\n\nprint(count_samepair(list1, list2, list3))  # Output: 2\n",
        "pass": "False"
    },
    {
        "task_id": 143,
        "text": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lists(Input):",
        "question_1": "Convert a given list into a list of tuples using Python.",
        "answer_1": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_2": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_2": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)",
        "full_code": "\ndef find_lists(Input):\n    # Initialize a counter to keep track of the number of lists found\n    list_count = 0\n    \n    # Iterate through each element in the tuple\n    for element in Input:\n        # Check if the current element is a list\n        if isinstance(element, list):\n            # If it is a list, increment the counter\n            list_count += 1\n    \n    # Return the total count of lists found in the tuple\n    return list_count\n\n# Example usage:\n# Input = (1, [2, 3], 'a', [4, 5, 6], 7, [8])\n# print(find_lists(Input))  # Output should be 3\n",
        "pass": "False"
    },
    {
        "task_id": 144,
        "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "test_list": [
            "assert sum_Pairs([1,8,9,15,16],5) == 74",
            "assert sum_Pairs([1,2,3,4],4) == 10",
            "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Pairs(arr,n):",
        "question_1": "Write a Python program to compute the sum of the absolute difference of all pairs of numbers in a given array.",
        "answer_1": "arr = [5, 8, 10, 15]\nSum = 0\n\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if(i != j):\n            Sum += abs(arr[i] - arr[j])\n            \nprint(Sum)",
        "question_2": "Generate a Python program to return the sum of abs(x1 - x2) for each pair in an array.",
        "answer_2": "def sum_diff_pair(arr):\n    total = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            total += abs(arr[i]-arr[j])\n    return total",
        "question_3": "Write a python program to calculate the absolute differences between corresponding elements of two arrays of the same size.",
        "answer_3": "def calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff",
        "full_code": "\ndef sum_Pairs(arr, n):\n    # Initialize the sum variable to store the total sum of absolute differences\n    total_sum = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # For each element, iterate through the remaining elements to form pairs\n        for j in range(i + 1, n):\n            # Calculate the absolute difference between the pair (arr[i], arr[j])\n            # Add this difference to the total sum\n            total_sum += abs(arr[i] - arr[j])\n    \n    # Return the total sum of absolute differences\n    return total_sum\n\n# Example usage:\n# arr = [1, 2, 3]\n# n = len(arr)\n# print(sum_Pairs(arr, n))  # Output should be 4\n",
        "pass": "True"
    },
    {
        "task_id": 145,
        "text": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3),4) == 4",
            "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
            "assert max_Abs_Diff((3,2,1),3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Abs_Diff(arr,n):",
        "question_1": "Write a code in Python for computing the maximum difference between any two elements in an array.",
        "answer_1": "def max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array))",
        "question_2": "Write a Python function that takes an array of integers and finds the maximum difference between any two elements in the array",
        "answer_2": "def max_difference(arr):\n  if len(arr) < 2:\n    return 0\n  curr_max = arr[1]-arr[0]\n  min_elem = min(arr[0], arr[1])\n  for i in range(2, len(arr)):\n    curr_max = max(curr_max, arr[i] - min_elem)\n    min_elem = min(min_elem, arr[i])\n  return curr_max\n  \nprint(max_difference([2, 3, 10, 6, 4, 8, 1]))",
        "question_3": "Generate a Python program to find the value of two positions in an array that have the greatest difference.",
        "answer_3": "def max_difference(arr):\n    # Initialize max_difference to a negative value\n    max_difference = -float(\"inf\")\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n\nresult = max_difference([7, 1, 3, 8, 25])\nprint(result)",
        "full_code": "\ndef max_Abs_Diff(arr, n):\n    # Step 1: Initialize a variable to store the maximum absolute difference\n    # We start with a very small number to ensure any difference found will be larger\n    max_diff = -float(\"inf\")\n    \n    # Step 2: Iterate through each element in the array\n    for i in range(n):\n        # Step 3: For each element, iterate through the remaining elements to find the difference\n        for j in range(i + 1, n):\n            # Step 4: Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            \n            # Step 5: Check if this difference is greater than the current maximum difference\n            if diff > max_diff:\n                # Step 6: If it is, update the maximum difference\n                max_diff = diff\n    \n    # Step 7: Return the maximum difference found\n    return max_diff\n\n# Example usage:\narr = [7, 1, 3, 8, 25]\nn = len(arr)\nprint(max_Abs_Diff(arr, n))\n",
        "pass": "True"
    },
    {
        "task_id": 146,
        "text": "Write a function to find the ascii value of total characters in a string.",
        "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "test_list": [
            "assert ascii_value_string(\"python\")==112",
            "assert ascii_value_string(\"Program\")==80",
            "assert ascii_value_string(\"Language\")==76"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value_string(str1):",
        "question_1": "Create a function in Python to calculate the total of all the characters in a given input string.",
        "answer_1": "def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116",
        "question_2": "Write a Python program to calculate the total number of characters in a given string.",
        "answer_2": "def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "question_3": "Develop a Python program which will take a string and print out the total number of characters in it.",
        "answer_3": "def num_chars(string):\n    char_count = 0\n    for i in string:\n        char_count += 1\n    print(\"The number of characters in the string is\", char_count)",
        "full_code": "\ndef ascii_value_string(str1):\n    # Initialize a variable to store the total ASCII value\n    total_ascii = 0\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # Convert the character to its ASCII value using the ord() function\n        ascii_value = ord(char)\n        \n        # Add the ASCII value to the total\n        total_ascii += ascii_value\n    \n    # Return the total ASCII value of all characters in the string\n    return total_ascii\n\n# Example usage:\nprint(ascii_value_string('Hello World!'))  # Output: 1116\n",
        "pass": "False"
    },
    {
        "task_id": 147,
        "text": "Write a function to find the maximum total path sum in the given triangle.",
        "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "test_list": [
            "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
            "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
            "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_path_sum(tri, m, n):",
        "question_1": "Implement an algorithm in Python that can calculate the maximum path sum from the given tree.",
        "answer_1": "def max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)",
        "question_2": "Write a Python program to calculate the maximum possible sum of a route between two nodes in a tree.",
        "answer_2": "def max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23",
        "question_3": "Design a Python program to compute the maximum sum of any subpolygon within a given array of N points",
        "answer_3": "def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')",
        "full_code": "\ndef max_path_sum(tri, m, n):\n    # Step 1: Initialize a 2D list to store the maximum path sums for each position in the triangle.\n    # This will help us avoid recalculating sums for the same positions multiple times.\n    max_sums = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Step 2: Set the base case. The maximum sum for the last row of the triangle is the values themselves.\n    for i in range(n):\n        max_sums[m-1][i] = tri[m-1][i]\n    \n    # Step 3: Iterate from the second last row to the top of the triangle.\n    # For each element, calculate the maximum sum path by considering the maximum of the two possible paths below it.\n    for i in range(m-2, -1, -1):\n        for j in range(n):\n            # Step 4: Calculate the maximum sum for the current position.\n            # The maximum sum at (i, j) is the value at (i, j) plus the maximum of the sums at (i+1, j) and (i+1, j+1).\n            max_sums[i][j] = tri[i][j] + max(max_sums[i+1][j], max_sums[i+1][j+1] if j+1 < n else 0)\n    \n    # Step 5: The maximum path sum from the top of the triangle to the bottom is now stored in max_sums[0][0].\n    return max_sums[0][0]\n\n# Example usage:\ntri = [\n    [3],\n    [7, 4],\n    [2, 4, 6],\n    [8, 5, 9, 3]\n]\nm = len(tri)\nn = len(tri[0])\n\n# Output the result\nprint(max_path_sum(tri, m, n))\n",
        "pass": "False"
    },
    {
        "task_id": 148,
        "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_digits_single(x) :",
        "question_1": "Design a function in Python that takes a positive integer and returns the sum of its digits.",
        "answer_1": "def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total",
        "question_2": "Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer.",
        "answer_2": "# take a number \nnumber = int(input(\"Please enter a number: \")) \n  \n#initialize sum\nsum = 0\n  \n#Find the sum of the digits of the number\ntemp = number\nwhile temp > 0: \n   digit = temp % 10\n   sum += digit \n   temp //= 10\n  \n# print the output\nprint(\"The sum of the digits of the given number is\", sum)",
        "question_3": "Can you build a Python program which calculates the sum of digits of an inputted number?",
        "answer_3": "def sumDigits(num): \n    sum = 0\n    while(num): \n        sum += num % 10\n        num = num//10\n    return sum\n\n# main function\nnum = 12345\nprint(\"Sum of digits of specified number is: \", \n      sumDigits(num))",
        "full_code": "\ndef sum_digits_single(x):\n    # Convert the number to a string to easily access each digit\n    num_str = str(x)\n    \n    # Initialize variables to store the maximum sum and the corresponding split point\n    max_sum = 0\n    split_point = 0\n    \n    # Iterate through possible split points\n    for i in range(1, len(num_str)):\n        # Split the number into two parts\n        part1 = num_str[:i]\n        part2 = num_str[i:]\n        \n        # Calculate the sum of digits for each part\n        sum1 = sum(int(digit) for digit in part1)\n        sum2 = sum(int(digit) for digit in part2)\n        \n        # Calculate the total sum of digits for this split\n        total_sum = sum1 + sum2\n        \n        # Update the maximum sum and the split point if the current total sum is greater\n        if total_sum > max_sum:\n            max_sum = total_sum\n            split_point = i\n    \n    # Output the result\n    print(f\"The maximum sum of digits is achieved by splitting the number at position {split_point}.\")\n    print(f\"The two parts are '{num_str[:split_point]}' and '{num_str[split_point:]}'.\")\n    print(f\"The sum of digits for these parts is {max_sum}.\")\n\n# Example usage\nsum_digits_single(12345)\n",
        "pass": "False"
    },
    {
        "task_id": 149,
        "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "test_list": [
            "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
            "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
            "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_subseq_with_diff_one(arr, n):",
        "question_1": "Create a Python program that identifies the longest contiguous subsequence with same values from an integer array.",
        "answer_1": "def longestSubsequence(array):\n    longest_start = 0\n    longest_length = 0\n    start = 0\n    current_length = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            current_length += 1\n        else:\n            current_length = 0\n            start = i+1\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_start = start\n    return array[longest_start : longest_start + longest_length + 1]",
        "question_2": "Create a function in Python to check the length of the longest increasing subsequence in a given array.",
        "answer_2": "def longestIncreasingSubsequence(arr):\n    n = len(arr) \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n  \n    return maximum \n  \narr = [1, 3, 5, 4, 7] \nres = longestIncreasingSubsequence(arr); \nprint(res)",
        "question_3": "Write a Python program to find the length of the longest increasing subsequence in a given array.",
        "answer_3": "def longest_increasing_subsequence(arr):\n    length = len(arr)\n    lis = [1] * length\n    for i in range(1, length):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\nresult = longest_increasing_subsequence([3, 4, 2, 1, 7])\nprint(result)",
        "full_code": "\ndef longest_subseq_with_diff_one(arr, n):\n    # Initialize a list to store the length of the longest subsequence ending at each index\n    dp = [1] * n\n    \n    # Iterate through the array to fill the dp list\n    for i in range(1, n):\n        # Check all previous elements\n        for j in range(i):\n            # If the absolute difference between the current element and the previous element is 1\n            # and the length of the subsequence ending at the current element is less than the length of the subsequence ending at the previous element plus one\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                # Update the length of the subsequence ending at the current element\n                dp[i] = dp[j] + 1\n    \n    # The answer is the maximum value in the dp list\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)\nresult = longest_subseq_with_diff_one(arr, n)\nprint(result)  # Output should be 6, because the longest subsequence is [1, 2, 3, 4, 5, 3]\n",
        "pass": "True"
    },
    {
        "task_id": 150,
        "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert does_Contain_B(1,7,3) == True",
            "assert does_Contain_B(1,-3,5) == False",
            "assert does_Contain_B(3,2,5) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def does_Contain_B(a,b,c):",
        "question_1": "Create a Python generator to generate an infinite sequence of a given number.",
        "answer_1": "def generate_infinite_sequence(num):\n    while True:\n        yield num\n\nfor n in generate_infinite_sequence(5):\n    print(n)",
        "question_2": "Create a Python function to detect a specific sequence",
        "answer_2": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_3": "Write a python function that determines if a given number is within a given range of numbers",
        "answer_3": "def is_in_range(n, start, end):\n  if n >= start and n <= end:\n    return True\n  else:\n    return False",
        "full_code": "\ndef does_Contain_B(a, b, c):\n    # Step 1: Define a generator function to generate an infinite sequence starting from 'a' with a step of 'c'\n    def generate_sequence(start, step):\n        current = start\n        while True:\n            yield current\n            current += step\n\n    # Step 2: Create an instance of the generator\n    sequence_generator = generate_sequence(a, c)\n\n    # Step 3: Iterate through the sequence to check if 'b' is present\n    # We will iterate a finite number of times (e.g., 1000 times) to avoid infinite loop in this example\n    # In a real-world scenario, you might need a more sophisticated approach to handle infinite sequences\n    for _ in range(1000):\n        current_value = next(sequence_generator)\n        if current_value == b:\n            return True\n        elif current_value > b:\n            # If the current value exceeds 'b', we can safely assume 'b' is not in the sequence\n            return False\n\n    # If we finish the loop without finding 'b', return False\n    return False\n\n# Example usage:\n# print(does_Contain_B(1, 5, 2))  # Should return True\n# print(does_Contain_B(1, 6, 2))  # Should return False\n",
        "pass": "True"
    },
    {
        "task_id": 151,
        "text": "Write a python function to check whether the given number is co-prime or not.",
        "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "test_list": [
            "assert is_coprime(17,13) == True",
            "assert is_coprime(15,21) == False",
            "assert is_coprime(25,45) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(p,q):",
        "question_1": "Code a Python program that takes two integers and checks if they are co-prime numbers.",
        "answer_1": "def is_coprime(num1, num2):\n        while num1 != 0 and num2 != 0: \n            if(num1 > num2): \n                num1 %= num2 \n            else: \n                num2 %= num1\n                  \n        if(num1 == 0): \n            gcd = num2 \n        else: \n            gcd = num1 \n        if(gcd == 1):\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)",
        "question_2": "Write a Python function to determine whether a number is a prime or a composite number.",
        "answer_2": "def is_prime(n):\n   if n <= 1:\n      return False\n   for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n         return False\n   return True",
        "question_3": "Write a Python function to check for a prime number.",
        "answer_3": "def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False",
        "full_code": "\ndef gcd(p, q):\n    # Step 1: Check if either number is zero\n    # If either number is zero, the greatest common divisor (GCD) is the other number\n    if p == 0:\n        return q\n    if q == 0:\n        return p\n    \n    # Step 2: Use the Euclidean algorithm to find the GCD\n    # The Euclidean algorithm states that gcd(p, q) = gcd(q, p % q)\n    # We will keep applying this until one of the numbers becomes zero\n    while q != 0:\n        # Store the value of q in a temporary variable\n        temp = q\n        # Update q to be the remainder of p divided by q\n        q = p % q\n        # Update p to be the value of the temporary variable\n        p = temp\n    \n    # Step 3: When q becomes zero, p will be the GCD of the original p and q\n    return p\n\n# Step 4: Define a function to check if two numbers are co-prime\ndef is_coprime(num1, num2):\n    # Two numbers are co-prime if their GCD is 1\n    return gcd(num1, num2) == 1\n\n# Example usage:\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)  # Output should be True if num1 and num2 are co-prime\n",
        "pass": "True"
    },
    {
        "task_id": 152,
        "text": "Write a function to sort the given array by using merge sort.",
        "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "test_list": [
            "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
            "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
            "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge(a,b):",
        "question_1": "Develop a program in Python for implementing Merge Sort algorithm.",
        "answer_1": "def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)",
        "question_2": "Create a Python program to sort numbers in an array using different algorithms, such as quick sort, insertion sort and merge sort.",
        "answer_2": "def quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j - 1] > array[j]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) // 2\n        left = array[:mid]\n        right = array[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n    return array",
        "question_3": "Write a function in Python to merge two sorted arrays.",
        "answer_3": "def merge_arrays(arr1, arr2):\n    merged_array = arr1 + arr2\n    return sorted(merged_array)\n\nmerged_array = merge_arrays(arr1, arr2)\nprint(merged_array)",
        "full_code": "\ndef merge(a, b):\n    # Initialize an empty list to store the merged result\n    merged = []\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n    \n    # Loop until we reach the end of either array\n    while i < len(a) and j < len(b):\n        # Compare the current elements of both arrays\n        if a[i] < b[j]:\n            # If the element in 'a' is smaller, add it to the merged list\n            merged.append(a[i])\n            # Move the pointer of 'a' to the next element\n            i += 1\n        else:\n            # If the element in 'b' is smaller or equal, add it to the merged list\n            merged.append(b[j])\n            # Move the pointer of 'b' to the next element\n            j += 1\n    \n    # If there are remaining elements in 'a', add them to the merged list\n    while i < len(a):\n        merged.append(a[i])\n        i += 1\n    \n    # If there are remaining elements in 'b', add them to the merged list\n    while j < len(b):\n        merged.append(b[j])\n        j += 1\n    \n    # Return the merged and sorted array\n    return merged\n\n# Example usage:\narr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8]\nprint(merge(arr1, arr2))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "pass": "False"
    },
    {
        "task_id": 153,
        "text": "Write a function to find the vertex of a parabola.",
        "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "test_list": [
            "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
            "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
            "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_vertex(a, b, c):",
        "question_1": "Generate a graphical representation of a function using Python.",
        "answer_1": "import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()",
        "question_2": "Convert the following equation into a Python program: y = x^2 - 3x + 2",
        "answer_2": "def equation(x):\n    return (x**2 - 3*x + 2)",
        "question_3": "Create a python program to optimize a given function along a certain parameter range.",
        "answer_3": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))",
        "full_code": "\ndef parabola_vertex(a, b, c):\n    # The vertex of a parabola given by the quadratic equation ax^2 + bx + c\n    # can be found using the formula x = -b / (2a)\n    \n    # Step 1: Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Step 2: Calculate the y-coordinate of the vertex by substituting x_vertex back into the equation\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    \n    # Step 3: Return the coordinates of the vertex as a tuple\n    return (x_vertex, y_vertex)\n\n# Example usage:\n# print(parabola_vertex(1, -4, 4))  # Should output (2.0, 0.0)\n",
        "pass": "True"
    },
    {
        "task_id": 154,
        "text": "Write a function to extract every specified element from a given two dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "question_1": "Write a Python program to traverse a two-dimensional array and print each row.",
        "answer_1": "def traverse_2d_list(list2d):\n    for row in list2d:\n        print(row)",
        "question_2": "Write a function in Python to search a given 2D list for a given item and return its row and column index if it exists.",
        "answer_2": "def search2Dlist(list, item): \n    row_index = None\n    col_index = None\n\n    for row in range(len(list)): \n        for col in range(len(list[row])): \n            if list[row][col] == item: \n                row_index = row\n                col_index = col\n\n    if (row_index == None) and (col_index == None):\n        return None\n    else:\n        return row_index, col_index\n\n# Output: (1, 2) (index of item 8 in the 2D list)",
        "question_3": "Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.",
        "answer_3": "def double_list(lst):\n    return [x * 2 for x in lst]",
        "full_code": "\ndef specified_element(nums, N):\n    # Initialize an empty list to store the specified elements\n    result = []\n    \n    # Iterate over each row in the 2D list\n    for row in nums:\n        # Iterate over each element in the row\n        for element in row:\n            # Check if the element is equal to the specified number N\n            if element == N:\n                # If it is, append it to the result list\n                result.append(element)\n    \n    # Return the list of specified elements\n    return result\n\n# Example usage:\n# nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# N = 5\n# print(specified_element(nums, N))  # Output: [5]\n",
        "pass": "False"
    },
    {
        "task_id": 155,
        "text": "Write a python function to toggle all even bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 0",
            "assert even_bit_toggle_number(20) == 30",
            "assert even_bit_toggle_number(30) == 20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "question_1": "Program a function in Python that will recognize if a given number is even.",
        "answer_1": "def is_even(num):\n\u00a0 \u00a0 if num % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return False",
        "question_2": "Write a script in python that outputs all even numbers between 0 and 10.",
        "answer_2": "for number in range(0,11):\n  if (number % 2 == 0):\n    print(number)",
        "question_3": "Define a function in Python to check if a number is even.",
        "answer_3": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False",
        "full_code": "\ndef even_bit_toggle_number(n):\n    # Step 1: Create a mask with all even bits set to 1 and odd bits set to 0.\n    # In binary, even bits are at positions 0, 2, 4, etc.\n    # We can create this mask by shifting 1 left by 0, 2, 4, etc. and ORing them together.\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming 32-bit integers, adjust range for larger integers if needed\n        mask |= (1 << i)\n    \n    # Step 2: XOR the original number with the mask.\n    # XORing with 1 will toggle the bit (0 to 1 or 1 to 0).\n    toggled_number = n ^ mask\n    \n    # Step 3: Return the toggled number.\n    return toggled_number\n\n# Example usage:\n# print(even_bit_toggle_number(5))  # Output will be 10 (binary 101 -> 1010)\n",
        "pass": "False"
    },
    {
        "task_id": 156,
        "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "test_list": [
            "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
            "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
            "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_int_str(tuple_str):",
        "question_1": "Create a function in Python to convert a given list of strings to integers.",
        "answer_1": "def convert_string_to_ints(strings):\n    return [int(string) for string in strings]",
        "question_2": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_2": "def convert_to_integers(lst):\n    return [int(i) for i in lst]",
        "question_3": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_3": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "full_code": "\ndef tuple_int_str(tuple_str):\n    # Step 1: Initialize an empty list to store the integer values\n    int_list = []\n    \n    # Step 2: Iterate over each string in the input tuple\n    for string in tuple_str:\n        # Step 3: Convert the string to an integer\n        int_value = int(string)\n        \n        # Step 4: Append the integer value to the list\n        int_list.append(int_value)\n    \n    # Step 5: Convert the list of integers back to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Step 6: Return the tuple of integers\n    return int_tuple\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef tuple_int_str(tuple_str):\n    # Step 1: Initialize an empty list to store the integer values\n    int_list = []\n    \n    # Step 2: Iterate over each string in the input tuple\n    for string in tuple_str:\n        # Step 3: Convert the string to an integer\n        int_value = int(string)\n        \n        # Step 4: Append the integer value to the list\n        int_list.append(int_value)\n    \n    # Step 5: Convert the list of integers back to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Step 6: Return the tuple of integers\n    return int_tuple\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "False"
    },
    {
        "task_id": 157,
        "text": "Write a function to reflect the run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "test_list": [
            "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
            "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
            "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef encode_list(list1):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_2": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']",
        "question_3": "Given a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.",
        "answer_3": "def str_to_list(string):\n    return string.split(' ')",
        "full_code": "\nfrom itertools import groupby\n\ndef encode_list(list1):\n    # Initialize an empty list to store the encoded result\n    encoded_list = []\n    \n    # Iterate over each element in the input list\n    for element in list1:\n        # Initialize an empty string to store the encoded version of the current element\n        encoded_element = \"\"\n        \n        # Use groupby to group consecutive characters in the element\n        for char, group in groupby(element):\n            # Calculate the length of the group (i.e., the number of consecutive characters)\n            count = len(list(group))\n            # Append the character and its count to the encoded_element string\n            encoded_element += char + str(count)\n        \n        # Append the encoded element to the encoded_list\n        encoded_list.append(encoded_element)\n    \n    # Return the encoded list\n    return encoded_list\n\n# Example usage:\n# list1 = [\"aaabbbccc\", \"aabbcc\"]\n# print(encode_list(list1))  # Output: ['a3b3c3', 'a2b2c2']\n",
        "pass": "False"
    },
    {
        "task_id": 158,
        "text": "Write a python function to find k number of operations required to make all elements equal.",
        "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "test_list": [
            "assert min_Ops([2,2,2,2],4,3) == 0",
            "assert min_Ops([4,2,6,8],4,3) == -1",
            "assert min_Ops([21,33,9,45,63],5,6) == 24"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_Ops(arr,n,k):",
        "question_1": "Optimize the following code in Python to reduce its complexity.",
        "answer_1": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_2": "Generate a Python program to find the minimum number of operations required to convert a given number into 1.",
        "answer_2": "def minOperations(n): \n  \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n  \n    x = n \n  \n    for i in range(2, n): \n        if i>x: \n            break\n  \n        if n%i == 0: \n            x = minOperations(int(n/i)) +  i \n  \n    return x \n  \nresult = minOperations(18)\nprint(result)",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result",
        "full_code": "\ndef min_Ops(arr, n, k):\n    # Step 1: Find the maximum element in the array\n    # This is because to make all elements equal, we need to bring all elements up to the maximum element.\n    max_element = max(arr)\n    \n    # Step 2: Initialize the count of operations to 0\n    # This will keep track of the number of operations needed.\n    operations = 0\n    \n    # Step 3: Loop through each element in the array\n    # For each element, calculate the difference between the maximum element and the current element.\n    # This difference tells us how much we need to increment the current element to make it equal to the maximum element.\n    for element in arr:\n        difference = max_element - element\n        \n        # Step 4: Calculate the number of operations needed to increment the current element to the maximum element\n        # Since each operation can increment the element by k, we divide the difference by k.\n        # The result of this division is the number of operations needed for the current element.\n        operations += difference // k\n        \n        # Step 5: If there is a remainder after dividing the difference by k, it means one more operation is needed\n        # to cover the remaining part.\n        if difference % k != 0:\n            operations += 1\n    \n    # Step 6: Return the total number of operations needed to make all elements equal\n    return operations\n\n# Example usage:\narr = [1, 2, 3, 4]\nn = len(arr)\nk = 1\nprint(min_Ops(arr, n, k))  # Output should be 6\n",
        "pass": "False"
    },
    {
        "task_id": 159,
        "text": "Write a function to print the season for the given month and day.",
        "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "test_list": [
            "assert month_season('January',4)==('winter')",
            "assert month_season('October',28)==('autumn')",
            "assert month_season('June',6)==('spring')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def month_season(month,days):",
        "question_1": "Write a Python program to list all months of the current year.",
        "answer_1": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfor month in months:\n    print(month)",
        "question_2": "Write a Python program to print a calendar of the given month and year",
        "answer_2": "import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatmonth(year, month)\nprint(str)",
        "question_3": "Create a Python program to print the number of days in a month.",
        "answer_3": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "full_code": "\ndef month_season(month, days):\n    # Step 1: Define the seasons and their corresponding months and day ranges\n    # We will use a dictionary to map each season to a list of tuples, where each tuple contains the month and the day range\n    seasons = {\n        \"Winter\": [(\"December\", (21, 31)), (\"January\", (1, 31)), (\"February\", (1, 29)), (\"March\", (1, 19))],\n        \"Spring\": [(\"March\", (20, 31)), (\"April\", (1, 30)), (\"May\", (1, 31)), (\"June\", (1, 20))],\n        \"Summer\": [(\"June\", (21, 30)), (\"July\", (1, 31)), (\"August\", (1, 31)), (\"September\", (1, 22))],\n        \"Autumn\": [(\"September\", (23, 30)), (\"October\", (1, 31)), (\"November\", (1, 30)), (\"December\", (1, 20))]\n    }\n    \n    # Step 2: Iterate through the seasons dictionary to find the matching season\n    for season, month_day_ranges in seasons.items():\n        for m, (start_day, end_day) in month_day_ranges:\n            if m == month and start_day <= days <= end_day:\n                # Step 3: Print the season if the month and day match the range\n                print(season)\n                return\n    \n    # Step 4: If no match is found, print an error message\n    print(\"Invalid month or day input\")\n\n# Example usage:\n# month_season(\"March\", 25)  # Output: Spring\n",
        "pass": "False"
    },
    {
        "task_id": 160,
        "text": "Write a function to find x and y that satisfies ax + by = n.",
        "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "test_list": [
            "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
            "assert solution(4, 2, 7) == 'No solution'",
            "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def solution (a, b, n):",
        "question_1": "Using Python, create a function that calculates the objective function of a linear equation.",
        "answer_1": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)",
        "question_2": "Find the value of x in the following equation using a numerical calculation method in Python.",
        "answer_2": "# define variables\na = 5\nb = 7\nx = 3\ny = 4\n\n# calculate x\nx = (0 - (b*y))/a\n\nprint(x)",
        "question_3": "Write a Python program to optimize this linear equation.",
        "answer_3": "# function to solve equation \ndef solve(eqn): \n    x, y = sympy.symbols('x y') \n    return sympy.solve((eqn, ), (x, y)) \n  \n# equation\neqn = x + y - 5\n\n# solve equation\nresult = solve(eqn)\nx_sol = result[x]\ny_sol = result[y]\n\nprint(\"x =\", x_sol)\nprint(\"y =\", y_sol)",
        "full_code": "\ndef solution(a, b, n):\n    # Import the necessary library for symbolic mathematics\n    import sympy\n    \n    # Define the symbols for x and y\n    x, y = sympy.symbols('x y')\n    \n    # Create the linear equation ax + by = n\n    eqn = a*x + b*y - n\n    \n    # Solve the equation for x and y\n    # The solve function returns a dictionary where keys are the symbols and values are the solutions\n    solutions = sympy.solve(eqn, (x, y))\n    \n    # Extract the solutions for x and y\n    x_sol = solutions[x]\n    y_sol = solutions[y]\n    \n    # Return the solutions as a tuple\n    return (x_sol, y_sol)\n\n# Example usage:\n# result = solution(3, 5, 7)\n# print(result)\n",
        "pass": "False"
    },
    {
        "task_id": 161,
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "test_list": [
            "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_elements(list1, list2):",
        "question_1": "Write a Python function to remove all elements from a given list present in another list.",
        "answer_1": "def remove_elements(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    \n    return list1\n\nresult = remove_elements([1, 2, 3, 4, 5], [4, 5, 6])\nprint(result)",
        "question_2": "Write a Python program to remove a given element from a list.",
        "answer_2": "def remove_item(items, target):\n    return [i for i in items if i != target]",
        "question_3": "Design a Python program to remove a specified element from a list.",
        "answer_3": "def remove_element(list, element):\n  return [ el for el in list if el != element]\n\t \nlist = [1, 2, 3, 4, 5]\n\t\nlist = remove_element(list, 4)\n\t\nprint(list)",
        "full_code": "\ndef remove_elements(list1, list2):\n    # Step 1: Iterate through each element in list2\n    # Reasoning: We need to check each element in list2 to see if it exists in list1\n    for item in list2:\n        # Step 2: Check if the current element from list2 is in list1\n        # Reasoning: If the element is in list1, we need to remove it\n        if item in list1:\n            # Step 3: Remove the element from list1\n            # Reasoning: This ensures that all elements from list2 are removed from list1\n            list1.remove(item)\n    \n    # Step 4: Return the modified list1\n    # Reasoning: The function should return the list after all specified elements have been removed\n    return list1\n\n# Example usage:\nresult = remove_elements([1, 2, 3, 4, 5], [4, 5, 6])\nprint(result)  # Output should be [1, 2, 3]\n",
        "pass": "True"
    },
    {
        "task_id": 162,
        "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_series(n):",
        "question_1": "Create a program in Python to calculate the sum of the first n positive integers, using recursion.",
        "answer_1": "def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)",
        "question_2": "Write a Python function to calculate the sum of the natural numbers up to n.",
        "answer_2": "def sum_natural_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_natural_numbers(n - 1)",
        "question_3": "Develop a Python program that computes the sum of integers from 1 to n.",
        "answer_3": "def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))",
        "full_code": "\ndef sum_series(n):\n    # Step 1: Initialize a variable to keep track of the sum\n    total_sum = 0\n    \n    # Step 2: Use a loop to iterate through the series n, n-2, n-4, ..., until n-x <= 0\n    # We start with the current value of n and decrement by 2 in each iteration\n    current_value = n\n    \n    # Step 3: Continue the loop as long as the current value is greater than or equal to 0\n    while current_value >= 0:\n        # Step 4: Add the current value to the total sum\n        total_sum += current_value\n        \n        # Step 5: Decrement the current value by 2 for the next term in the series\n        current_value -= 2\n    \n    # Step 6: Return the total sum after the loop completes\n    return total_sum\n\n# Example usage:\n# result = sum_series(5)\n# print(result)  # Output should be 9 (5 + 3 + 1)\n",
        "pass": "True"
    },
    {
        "task_id": 163,
        "text": "Write a function to calculate the area of a regular polygon.",
        "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import tan, pi\r\ndef area_polygon(s,l):",
        "question_1": "Extend a Python program to calculate the area of any regular polygon.",
        "answer_1": "def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)",
        "question_2": "Write a Python program to calculate the area of a regular hexagon",
        "answer_2": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_3": "Produce an algorithm in Python to calculate the total area of a polygon given its side lengths?",
        "answer_3": "def polygon_area(sides):\n\tx = sum(sides) / 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)",
        "full_code": "\nfrom math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculates the area of a regular polygon given the number of sides (s) and the length of each side (l).\n    \"\"\"\n    # Step 1: Understand the formula for the area of a regular polygon\n    # The formula for the area of a regular polygon is:\n    # Area = (s * l^2) / (4 * tan(pi / s))\n    # where s is the number of sides and l is the length of each side.\n    \n    # Step 2: Apply the formula to calculate the area\n    area = (s * l**2) / (4 * tan(pi / s))\n    \n    # Step 3: Return the calculated area\n    return area\n\n# Example usage:\n# s = 6  # Number of sides (hexagon)\n# l = 5  # Length of each side\n# print(area_polygon(s, l))  # Output the area of the hexagon\n",
        "pass": "True"
    },
    {
        "task_id": 164,
        "text": "Write a python function to check whether the sum of divisors are same or not.",
        "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef divSum(n):",
        "question_1": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_1": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_2": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_2": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))",
        "question_3": "Write a python program to calculate the sum of the divisors of a number",
        "answer_3": "def sum_divisors(n):\n    '''Returns the sum of all divisors of the given number.'''\n    if n <= 1:\n        return 0\n    #assume n is a positive integer\n    sum_divisors = 1\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors",
        "full_code": "\nimport math\n\ndef divSum(n):\n    # Step 1: Define a helper function to calculate the sum of divisors of a number\n    def sum_of_divisors(num):\n        # Initialize the sum to 0\n        total = 0\n        # Iterate from 1 to the square root of the number\n        for i in range(1, int(math.sqrt(num)) + 1):\n            # If i is a divisor of num\n            if num % i == 0:\n                # Add both i and num/i to the total sum\n                total += i\n                if i != num // i:\n                    total += num // i\n        return total\n\n    # Step 2: Calculate the sum of divisors for the given number n\n    sum_n = sum_of_divisors(n)\n\n    # Step 3: Calculate the sum of divisors for the sum of divisors of n\n    sum_sum_n = sum_of_divisors(sum_n)\n\n    # Step 4: Compare the original number n with the sum of divisors of sum_n\n    if n == sum_sum_n:\n        return True\n    else:\n        return False\n\n# Example usage:\n# n = 28\n# print(divSum(n))  # Output should be True if the sum of divisors are the same\n",
        "pass": "False"
    },
    {
        "task_id": 165,
        "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_char_position(str1):",
        "question_1": "Create a Python program to count the number of upper case and lower case letters in a given string",
        "answer_1": "def countLetters(s): \n   uppercase, lowercase = 0, 0\n   for x in s: \n      if x.islower(): \n         lowercase+= 1\n      elif x.isupper(): \n         uppercase+= 1\n   print (\"No. of Upper case characters : \", uppercase) \n   print (\"No. of Lower case Characters : \", lowercase) \n\ncountLetters('Hello World')",
        "question_2": "Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.",
        "answer_2": "def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World'))",
        "question_3": "Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters.",
        "answer_3": "def count_uppercase_lowercase(s):\n  lowercase_count = 0\n  uppercase_count = 0\n  for c in s:\n    if c.isupper():\n      uppercase_count+=1\n    elif c.islower():\n      lowercase_count+=1\n  return uppercase_count, lowercase_count\n\nuppercase_count, lowercase_count =  count_uppercase_lowercase(\"This Is A Test String\")\nprint(\"Number of Uppercase letters : \", uppercase_count)\nprint(\"Number of Lowercase letters : \", lowercase_count)",
        "full_code": "\ndef count_char_position(str1):\n    # Initialize counters for lowercase and uppercase characters\n    lowercase_count = 0\n    uppercase_count = 0\n    \n    # Iterate through each character in the string\n    for i, char in enumerate(str1):\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # Check if the position of the character in the alphabet matches its index in the string\n            if ord(char) - ord('a') == i:\n                lowercase_count += 1\n        # Check if the character is an uppercase letter\n        elif char.isupper():\n            # Check if the position of the character in the alphabet matches its index in the string\n            if ord(char) - ord('A') == i:\n                uppercase_count += 1\n    \n    # Print the results\n    print(\"Number of lowercase letters at correct position: \", lowercase_count)\n    print(\"Number of uppercase letters at correct position: \", uppercase_count)\n\n# Example usage\ncount_char_position(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")\n",
        "pass": "False"
    },
    {
        "task_id": 166,
        "text": "Write a python function to count the pairs with xor as an even number.",
        "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "test_list": [
            "assert find_even_Pair([5,4,7,2,1],5) == 4",
            "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
            "assert find_even_Pair([1,2,3],3) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_even_Pair(A,N):",
        "question_1": "Create a python program for the following purpose:",
        "answer_1": "def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n",
        "question_2": "Generate an XOR function in Python that takes two integers as parameters and returns a boolean.",
        "answer_2": "def xor(a, b):\nreturn (a or b) and not (a and b)",
        "question_3": "Translate the following pseudocode into Python",
        "answer_3": "def count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count",
        "full_code": "\ndef find_even_Pair(A, N):\n    # Initialize a counter to keep track of the number of pairs with even XOR\n    count = 0\n    \n    # Iterate over each element in the array\n    for i in range(N):\n        # For each element, iterate over the subsequent elements to form pairs\n        for j in range(i + 1, N):\n            # Calculate the XOR of the current pair\n            xor_result = A[i] ^ A[j]\n            \n            # Check if the XOR result is even\n            if xor_result % 2 == 0:\n                # If it is even, increment the counter\n                count += 1\n    \n    # Return the total count of pairs with even XOR\n    return count\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 167,
        "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "test_list": [
            "assert next_Power_Of_2(0) == 1",
            "assert next_Power_Of_2(5) == 8",
            "assert next_Power_Of_2(17) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def next_Power_Of_2(n):",
        "question_1": "Optimize the following python program such that it reaches an O(logN) complexity",
        "answer_1": "def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y",
        "question_2": "Provide an algorithm in python to calculate the power of an integer.",
        "answer_2": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)",
        "question_3": "Create a Python function that takes in two parameters (n,k) and returns the value of n^k.",
        "answer_3": "def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result",
        "full_code": "\ndef next_Power_Of_2(n):\n    # Step 1: Check if n is already a power of 2\n    # A number is a power of 2 if it has exactly one bit set in its binary representation.\n    # For example, 8 (1000 in binary) is a power of 2, but 6 (110 in binary) is not.\n    # We can check this by using the property that n & (n - 1) is 0 for powers of 2.\n    if n & (n - 1) == 0:\n        return n\n    \n    # Step 2: If n is not a power of 2, find the next power of 2\n    # To find the next power of 2, we can use bit manipulation.\n    # We start by setting a variable to 1 (which is 2^0).\n    power_of_2 = 1\n    \n    # Step 3: Shift the bit to the left until it is greater than or equal to n\n    # Each left shift doubles the value (i.e., 1 << 1 = 2, 1 << 2 = 4, etc.)\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    \n    # Step 4: Return the result\n    return power_of_2\n\n# Example usage:\n# print(next_Power_Of_2(10))  # Output should be 16\n",
        "pass": "False"
    },
    {
        "task_id": 168,
        "text": "Write a python function to find the frequency of a number in a given array.",
        "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "test_list": [
            "assert frequency([1,2,3],4) == 0",
            "assert frequency([1,2,2,3,3,3,4],3) == 3",
            "assert frequency([0,1,2,3,1,2],1) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency(a,x):",
        "question_1": "Create a Python program to compute the frequency of each element in a given array.",
        "answer_1": "def compute_frequency(arr):\n    frequency_map = {}\n    \n    for num in arr:\n        if num not in frequency_map:\n            frequency_map[num] = 1\n        else:\n            frequency_map[num] += 1\n            \n    return frequency_map\n\nresult = compute_frequency([1, 2, 3, 2, 1, 3])\nprint(result)",
        "question_2": "Generate a Python function that takes an array of elements and finds the frequency of each element",
        "answer_2": "def count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))",
        "question_3": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_3": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "full_code": "\ndef frequency(a, x):\n    # Initialize a counter to keep track of the frequency of the number x\n    count = 0\n    \n    # Iterate through each element in the array a\n    for num in a:\n        # If the current element matches x, increment the counter\n        if num == x:\n            count += 1\n    \n    # Return the final count which represents the frequency of x in the array a\n    return count\n\n# Example usage:\n# a = [1, 2, 3, 2, 1, 3, 2]\n# x = 2\n# print(frequency(a, x))  # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 169,
        "text": "Write a function to calculate the nth pell number.",
        "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_pell(n):",
        "question_1": "Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user.",
        "answer_1": "# Fibonacci Sequence\n\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n\n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1 \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nn = int(input(\"Enter the value of n: \"))\nprint(Fibonacci(n))",
        "question_2": "Design a program in Python that outputs the N-th Fibonacci number.",
        "answer_2": "def nth_fibonacci_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return c",
        "question_3": "Design a recursive function in Python that calculates the Fibonacci sequence to the nth number.",
        "answer_3": "def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i))",
        "full_code": "\ndef get_pell(n):\n    # Pell numbers are a sequence similar to Fibonacci numbers, but defined by different recurrence relations.\n    # The nth Pell number P(n) is defined as:\n    # P(0) = 0\n    # P(1) = 1\n    # P(n) = 2 * P(n-1) + P(n-2) for n > 1\n    \n    # First, we handle the base cases where n is 0 or 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # For n > 1, we initialize the first two Pell numbers\n    pell_n_minus_2 = 0  # P(0)\n    pell_n_minus_1 = 1  # P(1)\n    \n    # We will use a loop to calculate the nth Pell number iteratively\n    for i in range(2, n + 1):\n        # Calculate the current Pell number using the recurrence relation\n        pell_n = 2 * pell_n_minus_1 + pell_n_minus_2\n        \n        # Update the previous two Pell numbers for the next iteration\n        pell_n_minus_2 = pell_n_minus_1\n        pell_n_minus_1 = pell_n\n    \n    # After the loop, pell_n will hold the nth Pell number\n    return pell_n\n\n# Example usage:\n# n = 10\n# print(get_pell(n))  # This will print the 10th Pell number\n",
        "pass": "True"
    },
    {
        "task_id": 170,
        "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "test_list": [
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_range_list(list1, m, n):",
        "question_1": "Write a function in Python to compute the sum of the given list of numbers.",
        "answer_1": "def sum_list(nums):\n sum = 0\n for n in nums:\n  sum += n\n return sum\n\nresult = sum_list([1, 24, 47, 98, 22, 45])\nprint(\"Sum of the list is\", result)",
        "question_2": "Create a Python algorithm to calculate the target sums of all elements in a given list with a given value",
        "answer_2": "def target_sum(subtrahend, lst):\n    target_sums = []\n    for num in lst:\n        target_sums.append(subtrahend - num)\n    return target_sums",
        "question_3": "Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it",
        "answer_3": "def index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1",
        "full_code": "\ndef sum_range_list(list1, m, n):\n    # Initialize a variable to store the sum of the range\n    sum_range = 0\n    \n    # Iterate through the list from index m to n (inclusive)\n    # We use range(m, n+1) because range is exclusive of the end index\n    for i in range(m, n + 1):\n        # Add the current element to the sum_range\n        sum_range += list1[i]\n    \n    # Return the computed sum of the range\n    return sum_range\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5, 6]\n# m = 1\n# n = 3\n# result = sum_range_list(list1, m, n)\n# print(result)  # Output should be 9 (2 + 3 + 4)\n",
        "pass": "True"
    },
    {
        "task_id": 171,
        "text": "Write a function to find the perimeter of a pentagon.",
        "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "test_list": [
            "assert perimeter_pentagon(5)==25",
            "assert perimeter_pentagon(10)==50",
            "assert perimeter_pentagon(15)==75"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef perimeter_pentagon(a):",
        "question_1": "Write a Python class for Polygon which has the ability to compute the perimeter of a polygon.",
        "answer_1": "class Polygon:\n    def __init__(self, num_of_sides):\n        self.number_of_sides = num_of_sides\n        self.sides = [0 for i in range(num_of_sides)]\n\n    def input_sides(self, sides):\n        self.sides = sides\n\n    def perimeter(self):\n        peri = 0\n        for side in self.sides:\n            peri += side\n        return peri",
        "question_2": "Create a Python module that calculates the perimeter of a circle.",
        "answer_2": "import math\n\ndef calculate_circle_perimeter(radius):\n        return 2 * math.pi * radius",
        "question_3": "Write a Python script to calculate the perimeter of a triangle given 3 sides.",
        "answer_3": "def calculate_perimeter(side1, side2, side3):\n perimeter = side1 + side2 + side3\n return perimeter\n\nside1 = 10\nside2 = 12\nside3 = 14\n\nperimeter = calculate_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", perimeter) # Output: 36",
        "full_code": "\nimport math\n\ndef perimeter_pentagon(a):\n    # Step 1: Understand the problem\n    # A pentagon has 5 sides, and if all sides are equal, the perimeter is simply 5 times the length of one side.\n    \n    # Step 2: Calculate the perimeter\n    # Since all sides are equal, the perimeter is 5 * side_length\n    \n    # Step 3: Return the calculated perimeter\n    return 5 * a\n\n# Example usage:\n# side_length = 10\n# print(perimeter_pentagon(side_length))  # Output: 50\n",
        "pass": "True"
    },
    {
        "task_id": 172,
        "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_occurance(s):",
        "question_1": "Create a Python function that takes a list of strings and a character as input and prints out a new list consisting of strings that have that character in it.",
        "answer_1": "def find_strings_with_char(string_list, char):\n    output = []\n    for string in string_list:\n        if char in string:\n            output.append(string)\n    return output\n\nstring_list = [\"apple\", \"banana\", \"pear\"]\nchar = 'a'\n\noutput = find_strings_with_char(string_list, char)\nprint(output) # [\"apple\", \"banana\"]",
        "question_2": "Write a python program to detect the occurrence of a given string in another large string.",
        "answer_2": "def str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")",
        "question_3": "Create a Python program that counts the occurrence of a specific character in a list",
        "answer_3": "def count_char(my_list, char):\n    count = 0\n    for i in my_list:\n        if i == char:\n            count += 1\n    return count",
        "full_code": "\ndef count_occurance(s):\n    # Initialize a dictionary to store the count of each character in 'std'\n    char_count = {'s': 0, 't': 0, 'd': 0}\n    \n    # Iterate through each character in the given string 's'\n    for char in s:\n        # Check if the character is one of the characters we are counting ('s', 't', 'd')\n        if char in char_count:\n            # If it is, increment the count for that character in the dictionary\n            char_count[char] += 1\n    \n    # Return the dictionary containing the counts of 's', 't', and 'd'\n    return char_count\n\n# Example usage:\ns = \"list item 1. list item 1. list item 2. list item 2. list item 2. list item\"\nresult = count_occurance(s)\nprint(result)  # Output will be {'s': 6, 't': 12, 'd': 6}\n",
        "pass": "False"
    },
    {
        "task_id": 173,
        "text": "Write a function to remove everything except alphanumeric characters from a string.",
        "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "test_list": [
            "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
            "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
            "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_splchar(text):",
        "question_1": "Create a Python function to remove all non-alphanumeric characters from a string.",
        "answer_1": "def clean_string(string):\n    cleanedString = \"\"\n    for c in string:\n        if c.isalnum():   \n            cleanedString += c \n  \n    return cleanedString",
        "question_2": "Create a function in Python to remove all non-alphanumeric characters in a string.",
        "answer_2": "import re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str)",
        "question_3": "Develop a Python script to delete all non-alphabetic characters in a string.",
        "answer_3": "def remove_non_alpha(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string",
        "full_code": "\nimport re\n\ndef remove_splchar(text):\n    # Step 1: Define the regular expression pattern to match non-alphanumeric characters\n    # The pattern [^a-zA-Z0-9] matches any character that is not a letter (uppercase or lowercase) or a digit.\n    pattern = r'[^a-zA-Z0-9]'\n    \n    # Step 2: Use the re.sub() function to replace all non-alphanumeric characters with an empty string\n    # re.sub(pattern, replacement, string) will replace all occurrences of the pattern in the string with the replacement.\n    cleaned_text = re.sub(pattern, '', text)\n    \n    # Step 3: Return the cleaned string\n    return cleaned_text\n",
        "pass": "True"
    },
    {
        "task_id": 174,
        "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "test_list": [
            "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
            "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
            "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_keyvalue(l):",
        "question_1": "Create a Python function that returns a nested dictionary given a list of keys and their corresponding values.",
        "answer_1": "def create_nested_dict(keys, values): \n  my_dict = {}\n  for i in range(len(keys)):\n    my_dict[keys[i]] = values[i]\n  return my_dict",
        "question_2": "Write a function in Python to convert following input into a dictionary",
        "answer_2": "def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict",
        "question_3": "Write a Python program to convert a given list to a dictionary with each item as a key-value pair.",
        "answer_3": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "full_code": "\ndef group_keyvalue(l):\n    # Initialize an empty dictionary to store the grouped key-value pairs\n    grouped_dict = {}\n    \n    # Iterate over each key-value pair in the input list\n    for key, value in l:\n        # Check if the key already exists in the dictionary\n        if key in grouped_dict:\n            # If the key exists, append the value to the existing list\n            grouped_dict[key].append(value)\n        else:\n            # If the key does not exist, create a new list with the value\n            grouped_dict[key] = [value]\n    \n    # Return the resulting dictionary of lists\n    return grouped_dict\n\n# Example usage:\n# l = [('a', 1), ('b', 2), ('a', 3), ('b', 4)]\n# print(group_keyvalue(l))\n# Output: {'a': [1, 3], 'b': [2, 4]}\n",
        "pass": "True"
    },
    {
        "task_id": 175,
        "text": "Write a function to verify validity of a string of parentheses.",
        "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "test_list": [
            "assert is_valid_parenthese(\"(){}[]\")==True",
            "assert is_valid_parenthese(\"()[{)}\")==False",
            "assert is_valid_parenthese(\"()\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_valid_parenthese( str1):",
        "question_1": "Create a Python function to return the maximum number of valid parentheses in a given expression.",
        "answer_1": "def max_valid_parenthesis(expression):\n    max_value = 0\n    # Keep a count of left parentheses\n    count = 0\n    for char in expression:\n        if char == '(':\n            count += 1\n            max_value = max(max_value, count)\n        else:\n            count -= 1\n\n    return max_value",
        "question_2": "Create an algorithm in Python to check if a given string contains valid parentheses.",
        "answer_2": "def isValid(s):\n    stack = []\n    dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\n    for char in s:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n\nprint(isValid('[[{{}}]]'))",
        "question_3": "Write a python program to identify if a string s has matching parentheses",
        "answer_3": "def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "full_code": "\ndef is_valid_parenthese(str1):\n    # Initialize an empty stack to keep track of opening parentheses\n    stack = []\n    \n    # Define a dictionary to map closing parentheses to their corresponding opening parentheses\n    # This will help in checking if a closing parenthesis matches the last opened one\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a closing parenthesis\n        if char in mapping:\n            # Pop the top element from the stack if it's not empty, otherwise use a dummy value '#'\n            top_element = stack.pop() if stack else '#'\n            \n            # Check if the popped element (most recent opening parenthesis) matches the corresponding opening parenthesis for the current closing parenthesis\n            if mapping[char] != top_element:\n                # If they don't match, the string is not valid\n                return False\n        else:\n            # If the character is an opening parenthesis, push it onto the stack\n            stack.append(char)\n    \n    # If the stack is empty, all opening parentheses have been matched correctly\n    # If it's not empty, there are unmatched opening parentheses, so the string is not valid\n    return not stack\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 176,
        "text": "Write a function to find the perimeter of a triangle.",
        "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "test_list": [
            "assert perimeter_triangle(10,20,30)==60",
            "assert perimeter_triangle(3,4,5)==12",
            "assert perimeter_triangle(25,35,45)==105"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter_triangle(a,b,c):",
        "question_1": "Write a Python script to calculate the perimeter of a triangle given 3 sides.",
        "answer_1": "def calculate_perimeter(side1, side2, side3):\n perimeter = side1 + side2 + side3\n return perimeter\n\nside1 = 10\nside2 = 12\nside3 = 14\n\nperimeter = calculate_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", perimeter) # Output: 36",
        "question_2": "Create a Python program for calculating the area of a given triangle.",
        "answer_2": "def triangleArea(a, b, c): \n\n    # calculate the semi-perimeter \n    s = (a + b + c) / 2\n\n    # calculate the area \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area",
        "question_3": "Create a function in Python to calculate the area of a triangle using its three sides.",
        "answer_3": "def triangleArea(a, b, c):\n # Calculate the semi-perimeter of the triangle\n s = (a + b + c) / 2\n \n # Calculate the area using Heron's formula\n area = (s*(s - a)*(s - b)*(s - c))**0.5\n \n return area\n\ntriangleArea(3,4,5) # 6.0",
        "full_code": "\ndef perimeter_triangle(a, b, c):\n    # Step 1: Define the function perimeter_triangle that takes three parameters: a, b, and c, representing the sides of the triangle.\n    \n    # Step 2: Calculate the perimeter of the triangle by summing up the three sides.\n    perimeter = a + b + c\n    \n    # Step 3: Return the calculated perimeter.\n    return perimeter\n\n# Example usage:\n# perimeter_triangle(3, 4, 5)  # This would return 12\n",
        "pass": "True"
    },
    {
        "task_id": 177,
        "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "test_list": [
            "assert answer(3,8) == (3,6)",
            "assert answer(2,6) == (2,4)",
            "assert answer(1,3) == (1,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def answer(L,R):",
        "question_1": "Create a Python program to get the least common multiple (LCM) of two numbers.",
        "answer_1": "def lcm(num1, num2):\n  if num1 > num2:\n    greater = num1\n  else:\n    greater = num2\n\n  while(True):\n    if((greater % num1 == 0) and (greater % num2 == 0)):\n      lcm = greater\n      break \n    greater += 1\n\n  return lcm",
        "question_2": "Design a function that returns the least common multiple (LCM) of two numbers",
        "answer_2": "# Python3 program to find LCM of two numbers \n\n# method to return gcd of a and b \ndef gcd(a, b): \n    if a == 0 : \n        return b \n          \n    return gcd(b % a, a) \n      \n# method to return LCM of two numbers \ndef lcm(a, b): \n    return (a*b) // gcd(a, b)",
        "question_3": "Generate a Python function to calculate the least common multiple (LCM) of two numbers.",
        "answer_3": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm",
        "full_code": "\ndef answer(L, R):\n    # Step 1: Define a helper function to calculate the LCM of two numbers\n    # This function will be used to check if the LCM of two numbers lies within the given range [L, R]\n    def lcm(a, b):\n        def gcd(x, y):\n            while y:\n                x, y = y, x % y\n            return x\n        return (a * b) // gcd(a, b)\n\n    # Step 2: Iterate through possible pairs of numbers to find a pair whose LCM lies within the range [L, R]\n    # We start with the smallest possible pair (1, 2) and increment the second number until we find a valid pair\n    # or until the second number exceeds R (since the LCM of (a, b) where b > R cannot be within the range [L, R])\n    for a in range(1, R + 1):\n        for b in range(a + 1, R + 1):\n            current_lcm = lcm(a, b)\n            if L <= current_lcm <= R:\n                # Step 3: If we find a pair (a, b) such that L <= lcm(a, b) <= R, return the pair\n                return f\"Found pair: ({a}, {b}) with LCM: {current_lcm}\"\n    \n    # Step 4: If no such pair is found within the range, return a message indicating no valid pair was found\n    return \"No pair found within the given range.\"\n\n# Example usage:\n# exec(answer(10, 20))\n",
        "pass": "False"
    },
    {
        "task_id": 178,
        "text": "Write a function to search some literals strings in a string.",
        "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "test_list": [
            "assert string_literals(['language'],'python language')==('Matched!')",
            "assert string_literals(['program'],'python language')==('Not Matched!')",
            "assert string_literals(['python'],'programming language')==('Not Matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef string_literals(patterns,text):",
        "question_1": "Create a Python function to search for a specific piece of text in a string. This function should return true if the string contains the text and false otherwise.",
        "answer_1": "def search(text, string):\n return text in string",
        "question_2": "Using advanced data structures, write Python code to search for a string within a larger string.",
        "answer_2": "def search(string, search): \n\t# Create a Trie type datastructure \n\tt = {}\n\n\t# Put each character of the string in a lexicographic tree \n\tfor char in string: \n\t\tif char in t: \n\t\t\tt = t[char] \n\t\telse: \n\t\t\tt[char] = {}\n\t\t\tt = t[char] \n\n\t# Now search for the search string in the trie structure \n\tcursor = t \n\tfor char in search: \n\t\tif char in cursor: \n\t\t\tcursor = cursor[char] \n\t\telse: \n\t\t\treturn False\n\treturn True",
        "question_3": "Write a Python program to search a substring in a string without using built-in functions.",
        "answer_3": "def search_substring(string, substring):\n  \"\"\"Function to search substring within a string\"\"\"\n  \n  matches = []\n  \n  # Iterate over the search string\n  for i in range(len(string)):\n    temp = \"\"\n    \n    # Iterate over the substring\n    for j in range(len(substring)):\n      if substring[j] == string[i + j]:\n        temp += substring[j]\n      else:\n        break\n        \n    if temp == substring:\n      matches.append(i)\n      \n  # Return the list of matches\n  return matches\n\nstring = 'This is a test string'\nsubstring = 'test'\nresult = search_substring(string, substring)\n\n# Print the result\nprint(result)\n# Output\n# [10]",
        "full_code": "\nimport re\n\ndef string_literals(patterns, text):\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate over each pattern in the list of patterns\n    for pattern in patterns:\n        # Use the re.search function to check if the pattern is present in the text\n        # re.search returns a match object if the pattern is found, otherwise it returns None\n        match = re.search(pattern, text)\n        \n        # If a match is found, append the pattern to the results list\n        if match:\n            results.append(pattern)\n    \n    # Return the list of patterns that were found in the text\n    return results\n\n# Example usage:\npatterns = [\"hello\", \"world\", \"test\"]\ntext = \"This is a test string to search for hello and world.\"\nprint(string_literals(patterns, text))\n# Output: ['hello', 'test', 'world']\n",
        "pass": "False"
    },
    {
        "task_id": 179,
        "text": "Write a function to find if the given number is a keith number or not.",
        "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "test_list": [
            "assert is_num_keith(14) == True",
            "assert is_num_keith(12) == False",
            "assert is_num_keith(197) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_keith(x):",
        "question_1": "Create a function in Python that determines if a given number is an Armstrong number or not.",
        "answer_1": "def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')",
        "question_2": "Write a function to determine if the given number is an Armstrong number in Python.",
        "answer_2": "def is_armstrong(num): \n    n = len(str(num)) \n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit**n\n        temp //= 10\n    if num == total:\n        return True\n    else:\n        return False",
        "question_3": "Design a function in Python that checks whether a number is an Armstrong number or not.",
        "answer_3": "def isArmstrongNumber(x):  \n    sum = 0  \n    order = len(str(x))  \n    temp = x  \n    while temp > 0:  \n        digit = temp % 10  \n        sum += digit ** order  \n        temp //= 10  \n  \n    # If n is equal to the sum  \n    # of its digits raised to the power \n    # of the number of digits \n    if x == sum:  \n        return True\n    else:  \n        return False\n  \n# Driver Program \nn = 1634\nif isArmstrongNumber(n): \n    print(\"Yes\") \nelse: \n    print(\"No\")\n\n# Output:Yes",
        "full_code": "\ndef is_num_keith(x):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(x)\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n    \n    # Initialize a list to store the sequence of numbers that will be used to check if the number is a Keith number\n    sequence = [int(digit) for digit in num_str]\n    \n    # Continue the process until the sequence number is greater than or equal to the original number\n    while sequence[-1] < x:\n        # Calculate the next number in the sequence by summing the last 'num_digits' numbers in the sequence\n        next_num = sum(sequence[-num_digits:])\n        # Append the next number to the sequence\n        sequence.append(next_num)\n    \n    # Check if the last number in the sequence is equal to the original number\n    if sequence[-1] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# Check if 197 is a Keith number\nprint(is_num_keith(197))  # Output should be True\n```\n\n### Explanation:\n1. **Convert the number to a string**: This allows us to easily access each digit of the number.\n2. **Calculate the number of digits**: This helps in determining how many previous numbers to sum to get the next number in the sequence.\n3. **Initialize the sequence**: Start with the digits of the number.\n4. **Generate the sequence**: Continue summing the last `num_digits` numbers in the sequence until the last number in the sequence is greater than or equal to the original number.\n5. **Check if the number is a Keith number**: If the last number in the sequence matches the original number, then it is a Keith number.\n\nThis code can be directly executed using `exec()`.",
        "pass": "Error"
    },
    {
        "task_id": 180,
        "text": "Write a function to calculate distance between two points using latitude and longitude.",
        "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):",
        "question_1": "Write a Python program to calculate the distance between two points",
        "answer_1": "def calculate_distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5",
        "question_2": "Create a Python module that calculates the distance between two points given their latitude and longitude.",
        "answer_2": "import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https://stackoverflow.com/a/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r",
        "question_3": "Create an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.",
        "answer_3": "from math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)",
        "full_code": "\nfrom math import radians, sin, cos, acos\n\ndef distance_lat_long(slat, slon, elat, elon):\n    # Step 1: Convert latitude and longitude from degrees to radians\n    # This is necessary because trigonometric functions in Python's math module use radians.\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    \n    # Step 2: Calculate the central angle between the two points using the Haversine formula\n    # The central angle can be calculated using the arccosine of the dot product of the unit vectors pointing to the two points.\n    # The formula is: central_angle = acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(abs(slon - elon)))\n    central_angle = acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(abs(slon - elon)))\n    \n    # Step 3: Calculate the distance using the central angle and the Earth's radius\n    # The Earth's radius is approximately 6371 kilometers.\n    # The distance is then given by: distance = central_angle * radius\n    radius = 6371  # Earth's radius in kilometers\n    distance = central_angle * radius\n    \n    # Step 4: Return the calculated distance\n    return distance\n\n# Example usage:\n# paris = [48.8566, 2.3522]\n# ny = [40.7128, 74.0060]\n# print(distance_lat_long(paris[0], paris[1], ny[0], ny[1]))\n",
        "pass": "False"
    },
    {
        "task_id": 181,
        "text": "Write a function to find the longest common prefix in the given set of strings.",
        "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "test_list": [
            "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
            "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
            "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_prefix_util(str1, str2):",
        "question_1": "Come up with a python program to find the longest common prefix in a list of strings.",
        "answer_1": "def longest_common_prefix(strings):\n    if len(strings) == 0: \n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        i = 0 \n        while i < len(prefix) and i < len(s) and s[i] == prefix[i]: \n            i += 1 \n        prefix = prefix[:i] \n    return prefix \n\nprint(longest_common_prefix([\"hello\", \"hey\", \"hi\", \"have\"]))  # Output: h",
        "question_2": "Write a Python program to find the longest common prefix among all strings in the list.",
        "answer_2": "def find_longest_common_prefix(strings):\n first_str = strings[0]\n longest_prefix = \"\"\n for i in range(len(first_str)):\n  current_prefix = first_str[:i]\n  flag = True\n  for string in strings[1:]:\n   if not string.startswith(current_prefix):\n    flag = False\n    break\n  if flag:\n   longest_prefix = current_prefix\n return longest_prefix",
        "question_3": "Create a Python code to return the longest common prefix of a given set of strings.",
        "answer_3": "def longestCommonPrefix(strings):\n    prefix = \"\"\n    min_length = min([len(s) for s in strings])\n    for i in range(min_length):\n        current_char = strings[0][i]\n        for s in strings:\n            if s[i] != current_char:\n                return prefix\n        prefix += current_char\n    return prefix\n\nresult = longestCommonPrefix(['car', 'cat', 'cow'])\nprint(result) # Output: 'c'",
        "full_code": "\ndef common_prefix_util(str1, str2):\n    # Initialize an empty string to store the common prefix\n    common_prefix = \"\"\n    \n    # Determine the minimum length of the two strings to avoid index out of range errors\n    min_length = min(len(str1), len(str2))\n    \n    # Iterate through each character of the strings up to the minimum length\n    for i in range(min_length):\n        # If the characters at the current position are the same, add the character to the common prefix\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            # If characters differ, break the loop as the common prefix ends here\n            break\n    \n    # Return the common prefix found\n    return common_prefix\n\n# Example usage\nprint(common_prefix_util(\"hello\", \"hey\"))  # Output: \"he\"\n",
        "pass": "False"
    },
    {
        "task_id": 182,
        "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "test_list": [
            "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
            "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
            "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_character(string):",
        "question_1": "Create a program in Python to identify whether a character is uppercase, lowercase or a digit.",
        "answer_1": "def char_type(char):\n    # check if character is uppercase \n    if char.isupper(): \n        print('Uppercase') \n \n    # check if character is lowercase  \n    elif char.islower(): \n        print('Lowercase') \n \n    # check if character is digit \n    elif char.isdigit(): \n        print('Digit') \n    else: \n        print('Special Character') \n\nchar_type('A')",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_3": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
        "full_code": "\nimport re\n\ndef find_character(string):\n    # Initialize lists to store the results\n    uppercase = []\n    lowercase = []\n    special_char = []\n    numeric = []\n    \n    # Define regex patterns for each type of character\n    # Uppercase letters: [A-Z]\n    # Lowercase letters: [a-z]\n    # Special characters: [^a-zA-Z0-9] (anything that is not a letter or digit)\n    # Numeric values: [0-9]\n    \n    # Iterate through each character in the string\n    for char in string:\n        if re.match(r\"[A-Z]\", char):\n            uppercase.append(char)\n        elif re.match(r\"[a-z]\", char):\n            lowercase.append(char)\n        elif re.match(r\"[0-9]\", char):\n            numeric.append(char)\n        elif re.match(r\"[^a-zA-Z0-9]\", char):\n            special_char.append(char)\n    \n    # Print the results\n    print(\"Uppercase letters:\", uppercase)\n    print(\"Lowercase letters:\", lowercase)\n    print(\"Special characters:\", special_char)\n    print(\"Numeric values:\", numeric)\n\n# Example usage\nfind_character(\"Hello World! 123\")\n",
        "pass": "False"
    },
    {
        "task_id": 183,
        "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "test_list": [
            "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
            "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
            "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_pairs(arr, n, k):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Create a program in Python to find all pairs of elements in a list with the given difference.",
        "answer_2": "def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)",
        "question_3": "Optimize the following code in Python to reduce its complexity.",
        "answer_3": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "full_code": "\ndef count_pairs(arr, n, k):\n    # Step 1: Initialize a counter to keep track of the number of pairs\n    count = 0\n    \n    # Step 2: Use a set to store the elements of the array for O(1) average time complexity lookups\n    seen = set(arr)\n    \n    # Step 3: Iterate through each element in the array\n    for num in arr:\n        # Step 4: For each element, check if there exists another element in the set such that their difference is k\n        # This can be done by checking if num + k or num - k exists in the set\n        if num + k in seen:\n            count += 1\n        if num - k in seen:\n            count += 1\n        \n        # Step 5: Remove the current element from the set to avoid counting the same pair twice\n        seen.remove(num)\n    \n    # Step 6: Return the count of distinct pairs\n    return count\n\n# Example usage:\narr = [1, 5, 3, 4, 2]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output should be 2, as pairs are (1, 4) and (5, 2)\n",
        "pass": "False"
    },
    {
        "task_id": 184,
        "text": "Write a function to find all the values in a list that are greater than a specified number.",
        "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "test_list": [
            "assert greater_specificnum([220, 330, 500],200)==True",
            "assert greater_specificnum([12, 17, 21],20)==False",
            "assert greater_specificnum([1,2,3,4],10)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def greater_specificnum(list,num):",
        "question_1": "Create a python program to remove all the values in a list that are greater than a given value.",
        "answer_1": "# Defining a function to remove all the values in a list that are greater than a given value\ndef remove_greater(list, n):\n\u00a0\u00a0return [val for val in list if val <= n]\n\n# Testing the remove_greater() function\nlist = [10, 15, 20, 25, 30]\nprint(remove_greater(list, 15)) # [10, 15]",
        "question_2": "Given a list of numbers, write a Python program to find the element in the list having the highest value.",
        "answer_2": "def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value",
        "question_3": "Write a function in Python that takes a list of numbers and returns the sum of the list items that are greater than the given value.",
        "answer_3": "def findSum(nums, value):\n total = 0\n \n for num in nums:\n if num > value:\n total += num\n \n return total\n \nnums = [1, 4, 5, 10, 12]\nvalue = 6\n\nres = findSum(nums, value)\n\nprint(res)",
        "full_code": "\ndef greater_specificnum(list, num):\n    # Initialize an empty list to store the values that are greater than the specified number\n    greater_values = []\n    \n    # Iterate through each element in the input list\n    for element in list:\n        # Check if the current element is greater than the specified number\n        if element > num:\n            # If it is, append it to the greater_values list\n            greater_values.append(element)\n    \n    # Return the list of values that are greater than the specified number\n    return greater_values\n\n# Example usage:\n# list = [10, 20, 30, 40, 50]\n# num = 25\n# print(greater_specificnum(list, num))  # Output: [30, 40, 50]\n",
        "pass": "False"
    },
    {
        "task_id": 185,
        "text": "Write a function to find the focus of a parabola.",
        "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "test_list": [
            "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
            "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
            "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_focus(a, b, c):",
        "question_1": "Create a python program to optimize a given function along a certain parameter range.",
        "answer_1": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))",
        "question_2": "Create an optimization problem in Python to optimize the function.",
        "answer_2": "import numpy as np\nfrom scipy.optimize import minimize\ndef f(x):\n    x, y = x\n    return x + y**2\n\nx0 = np.array([0,0])\nres = minimize(f, x0, method='nelder-mead')\nprint(res.x)",
        "question_3": "Create an optimization algorithm in Python to find the minimum value of a function.",
        "answer_3": "import numpy as np \n  \ndef optimize(func, x_range, y_range): \n    x = np.linspace(*x_range, num=100)\n    y = np.linspace(*y_range, num=100)\n    minVal = np.inf\n  \n    for xVal in x: \n        for yVal in y: \n            fVal = func(xVal, yVal) \n            if fVal < minVal: \n                minVal = fVal\n                minXVal = xVal\n                minYVal = yVal\n  \n    print(\"The minimum value is \" + str(minVal) + \" at x=\" + str(minXVal) + \" and y=\" + str(minYVal))\n  \nfunc = lambda x,y: x*x + y*y\noptimize(func, (-2,2), (-3,3)) # Output: The minimum value is 0.0 at x=0.0 and y=0.0",
        "full_code": "\ndef parabola_focus(a, b, c):\n    # The standard form of a parabola is ax^2 + bx + c = 0\n    # The focus of a parabola in the form y = ax^2 + bx + c is given by (h, k)\n    # where h = -b / (2a) and k = (1 - (b^2 - 4ac)) / (4a)\n    \n    # Step 1: Calculate the x-coordinate of the focus (h)\n    h = -b / (2 * a)\n    \n    # Step 2: Calculate the discriminant (b^2 - 4ac)\n    discriminant = b**2 - 4 * a * c\n    \n    # Step 3: Calculate the y-coordinate of the focus (k)\n    k = (1 - discriminant) / (4 * a)\n    \n    # Step 4: Return the focus as a tuple (h, k)\n    return (h, k)\n\n# Example usage:\n# a = 1, b = 0, c = -1 (parabola: y = x^2 - 1)\n# The focus should be (0, 0.25)\nprint(parabola_focus(1, 0, -1))  # Output: (0.0, 0.25)\n",
        "pass": "True"
    },
    {
        "task_id": 186,
        "text": "Write a function to search some literals strings in a string by using regex.",
        "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "test_list": [
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef check_literals(text, patterns):",
        "question_1": "Create a string matching algorithm in Python using Regular Expressions.",
        "answer_1": "import re\n\n# Define the pattern\npattern = r'(apple|orange|banana)'\n\n# Test strings\nstrings = ['I ate an apple.',\n 'I love oranges!',\n 'This banana is delicious.',\n 'I cannot eat grapes.']\n\n# Create the regex object\nregex = re.compile(pattern, re.IGNORECASE)\n\n# Iterate through the strings\nfor string in strings:\n # Test if the regex matches\n if regex.search(string):\n print(f\"Matched: {string}\")\n# Output\n# Matched: I ate an apple.\n# Matched: I love oranges!\n# Matched: This banana is delicious.",
        "question_2": "Generate a function in Python to search for a substring in a given string. This function should be case and pattern insensitive.",
        "answer_2": "def match_text(text, search_string):\n \"\"\"Returns all occurrences of substring in the given string with case and pattern insensitivity.\n \n Args:\n text (str): A string.\n search_string (str): The substring for which to search.\n \n Returns:\n A list of all occurrences in the given string.\n \"\"\" \n matches = []\n # Construct a case and pattern insensitive regex expression\n search_string = re.compile(search_string, re.IGNORECASE)\n # Search the string and add the matches to a list\n for match in search_string.finditer(text): \n matches.append(match.group(0))\n \n return matches",
        "question_3": "Implement a search engine in Python to perform basic search operations like exact search, wildcard etc.",
        "answer_3": "import re\n\ndef basic_search(text, pattern):\n    \"\"\" A basic search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(pattern, text)\n    # Output a list of all matches\n    return matches\n\ndef exact_search(text, pattern):\n    \"\"\" An exact search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(r'\\b' + pattern + r'\\b', text)\n     # Output a list of all matches\n    return matches\n\ndef wildcard_search(text, pattern):\n    \"\"\" A wildcard search to find 'pattern' in 'text' \"\"\"\n    # Create a regex pattern from the input pattern \n    regex_pattern = re.escape(pattern).replace(r'\\*', '.*')\n    # Find all matches \n    matches = re.findall(regex_pattern, text)\n    # Output a list of all matches\n    return matches",
        "full_code": "\nimport re\n\ndef check_literals(text, patterns):\n    \"\"\"\n    Searches for literal strings in a given text using regex.\n    \n    Args:\n    text (str): The text in which to search for the patterns.\n    patterns (list): A list of literal strings to search for in the text.\n    \n    Returns:\n    dict: A dictionary where keys are the patterns and values are lists of matches found in the text.\n    \"\"\"\n    \n    # Initialize an empty dictionary to store the results\n    results = {}\n    \n    # Iterate over each pattern in the list of patterns\n    for pattern in patterns:\n        # Escape the pattern to treat it as a literal string in regex\n        # This ensures that any special regex characters in the pattern are treated as literals\n        escaped_pattern = re.escape(pattern)\n        \n        # Compile the escaped pattern into a regex object\n        # This allows us to use the pattern to search the text\n        regex = re.compile(escaped_pattern)\n        \n        # Search the text for all occurrences of the pattern\n        matches = regex.findall(text)\n        \n        # Store the matches in the results dictionary with the pattern as the key\n        results[pattern] = matches\n    \n    # Return the results dictionary\n    return results\n\n# Example usage:\n# text = \"The quick brown fox jumps over the lazy dog. The dog is quick.\"\n# patterns = [\"quick\", \"dog\", \"fox\"]\n# print(check_literals(text, patterns))\n",
        "pass": "False"
    },
    {
        "task_id": 187,
        "text": "Write a function to find the longest common subsequence for the given two sequences.",
        "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "test_list": [
            "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
            "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
            "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_common_subsequence(X, Y, m, n):",
        "question_1": "Write a python program to find the Longest Common Subsequence (LCS) of two sequences",
        "answer_1": "def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))",
        "question_2": "Develop a script in Python to find the longest common subsequence of two given strings.",
        "answer_2": "def lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The length of LCS is \" + lcs(X, Y, m, n))",
        "question_3": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "answer_3": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "full_code": "\ndef longest_common_subsequence(X, Y, m, n):\n    # Initialize a 2D list (table) to store the lengths of LCS for subproblems\n    # The table will have dimensions (m+1) x (n+1) to accommodate base cases\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the table using a nested loop\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # If the characters at the current positions in both strings match\n            if X[i - 1] == Y[j - 1]:\n                # The length of LCS at this position is 1 plus the LCS of the previous characters\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                # If the characters do not match, take the maximum LCS length from either excluding the current character of X or Y\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    \n    # The length of the LCS of the entire strings is now found at table[m][n]\n    lcs_length = table[m][n]\n    \n    # To reconstruct the LCS string, we need to backtrack from table[m][n]\n    lcs_string = [''] * lcs_length\n    i, j = m, n\n    \n    # Backtrack to find the LCS characters\n    while i > 0 and j > 0:\n        # If the characters match, it's part of the LCS\n        if X[i - 1] == Y[j - 1]:\n            lcs_string[lcs_length - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            lcs_length -= 1\n        # If not, move in the direction of the larger value in the table\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Join the list into a string to get the LCS\n    lcs_string = ''.join(lcs_string)\n    \n    return lcs_string\n\n# Example usage:\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The longest common subsequence is:\", longest_common_subsequence(X, Y, m, n))\n",
        "pass": "False"
    },
    {
        "task_id": 188,
        "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "test_list": [
            "assert prod_Square(25) == False",
            "assert prod_Square(30) == False",
            "assert prod_Square(16) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def prod_Square(n):",
        "question_1": "Develop a Python function that squares a given number.",
        "answer_1": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_3": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "full_code": "\ndef prod_Square(n):\n    # Step 1: Initialize a list to store pairs of squares whose product equals n\n    square_pairs = []\n    \n    # Step 2: Iterate through possible values of i from 1 to the square root of n\n    # This is because the maximum value of i^2 that can be a factor of n is sqrt(n)\n    for i in range(1, int(n**0.5) + 1):\n        # Step 3: Calculate the square of i\n        i_squared = i**2\n        \n        # Step 4: Check if the remaining part of n (n / i^2) is also a perfect square\n        if n % i_squared == 0:\n            # Step 5: Calculate the remaining part of n after dividing by i^2\n            remaining = n // i_squared\n            \n            # Step 6: Check if the remaining part is a perfect square\n            if (remaining**0.5).is_integer():\n                # Step 7: If both i^2 and remaining are perfect squares, add the pair to the list\n                square_pairs.append((i_squared, remaining))\n    \n    # Step 8: Return the list of pairs of squares whose product equals n\n    return square_pairs\n\n# Example usage:\nresult = prod_Square(36)\nprint(result)  # Output should be [(1, 36), (4, 9)]\n",
        "pass": "False"
    },
    {
        "task_id": 189,
        "text": "Write a python function to find the first missing positive number.",
        "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "test_list": [
            "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
            "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
            "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Missing_Positive(arr,n):",
        "question_1": "Create a function in Python to find the smallest positive number which is not present in a given unsorted array.",
        "answer_1": "def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4",
        "question_2": "Generate an algorithm in Python that finds the smallest positive number not present in an array.",
        "answer_2": "def findSmallestMissingPositiveInteger(arr): \n\tpositiveIntegers = set(i for i in range(1, len(arr) + 2)) \n\tarrSet = set(arr) \n\tres = positiveIntegers - arrSet \n\treturn res.pop() \n  \narr = [1, 10, 5, 3, 8] \nprint(findSmallestMissingPositiveInteger(arr))",
        "question_3": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_3": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "full_code": "\ndef first_Missing_Positive(arr, n):\n    # Step 1: Initialize a set to store the elements of the array\n    # This will help in O(1) time complexity for checking if an element exists\n    num_set = set(arr)\n    \n    # Step 2: Iterate through the range from 1 to n+1\n    # We start from 1 because we are looking for the smallest positive integer\n    # We go up to n+1 because the array might be missing the smallest positive integer\n    # that is greater than the length of the array\n    for i in range(1, n + 2):\n        # Step 3: Check if the current number i is not in the set\n        if i not in num_set:\n            # Step 4: If i is not in the set, it is the first missing positive number\n            return i\n    \n    # Step 5: If all numbers from 1 to n are present, return n+1\n    # This is the edge case where the array contains all numbers from 1 to n\n    return n + 1\n\n# Example usage:\narr = [3, 4, -1, 1]\nn = len(arr)\nprint(first_Missing_Positive(arr, n))  # Output should be 2\n",
        "pass": "True"
    },
    {
        "task_id": 190,
        "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "test_list": [
            "assert count_Intgral_Points(1,1,4,4) == 4",
            "assert count_Intgral_Points(1,2,1,2) == 1",
            "assert count_Intgral_Points(4,2,6,4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Intgral_Points(x1,y1,x2,y2):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Use Python loops to generate a new list containing the square of all numbers in the following list.",
        "answer_2": "\"\"\"\nGenerate a new list containing the square of all numbers in a list\n\"\"\"\n# input list\nin_list = [1,2,3,4,5]\n\n# output list\nout_list = []\n\n# loop over the input list\nfor i in in_list:\n    # calculate the square of the element and append it to output list\n    out_list.append(i**2)\n\n# print the output list\nprint(out_list)",
        "question_3": "Write a Python function to create a list containing the squares of numbers up to n.",
        "answer_3": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))",
        "full_code": "\ndef count_Intgral_Points(x1, y1, x2, y2):\n    # Step 1: Determine the minimum and maximum x and y coordinates of the square\n    # The square is defined by two points (x1, y1) and (x2, y2)\n    # We need to find the top-left and bottom-right corners of the square\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    \n    # Step 2: Initialize a counter to keep track of the number of integral points\n    count = 0\n    \n    # Step 3: Loop through all possible x and y coordinates within the square\n    # We need to check all integral points (x, y) where min_x <= x <= max_x and min_y <= y <= max_y\n    for x in range(min_x, max_x + 1):\n        for y in range(min_y, max_y + 1):\n            # Step 4: Check if the current point (x, y) is an integral point\n            # An integral point is a point where both x and y are integers\n            if isinstance(x, int) and isinstance(y, int):\n                # Step 5: Increment the counter if the point is integral\n                count += 1\n    \n    # Step 6: Return the total count of integral points\n    return count\n\n# Example usage:\n# The square is defined by points (1, 1) and (3, 3)\n# The integral points inside this square are (1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3)\n# So, the function should return 9\nprint(count_Intgral_Points(1, 1, 3, 3))  # Output should be 9\n",
        "pass": "False"
    },
    {
        "task_id": 191,
        "text": "Write a function to check whether the given month name contains 30 days or not.",
        "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumber(\"February\")==False",
            "assert check_monthnumber(\"June\")==True",
            "assert check_monthnumber(\"April\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumber(monthname3):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a code snippet in Python to print the date after 30 days from the current date.",
        "answer_3": "from datetime import date, timedelta\n \nd = date.today() \nprint(d + timedelta(days = 30))",
        "full_code": "\ndef check_monthnumber(monthname3):\n    # Step 1: Define a list of months that have 30 days\n    # Reasoning: We need to check if the given month is in this list\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Step 2: Check if the given month name is in the list of months with 30 days\n    # Reasoning: If it is in the list, then the month has 30 days\n    if monthname3 in months_with_30_days:\n        # Step 3: Return True if the month has 30 days\n        # Reasoning: This indicates that the month has 30 days\n        return True\n    else:\n        # Step 4: Return False if the month does not have 30 days\n        # Reasoning: This indicates that the month does not have 30 days\n        return False\n\n# Example usage:\n# monthname3 = \"April\"\n# print(check_monthnumber(monthname3))  # Output should be True\n",
        "pass": "True"
    },
    {
        "task_id": 192,
        "text": "Write a python function to check whether a string has atleast one letter and one number.",
        "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "test_list": [
            "assert check_String('thishasboth29') == True",
            "assert check_String('python') == False",
            "assert check_String ('string') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_String(str):",
        "question_1": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_1": "def contains_number(string):\n    return any(char.isdigit() for char in string)",
        "question_2": "Write a Python function to check if a string contains only numbers.",
        "answer_2": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_3": "Write a Python program to check whether a string contains all letters of the alphabet",
        "answer_3": "def check_alphabet(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True",
        "full_code": "\ndef check_String(str):\n    # Initialize two boolean flags to False\n    # These flags will help us track if we have found at least one letter and one number\n    has_letter = False\n    has_number = False\n    \n    # Iterate through each character in the string\n    for char in str:\n        # Check if the current character is a letter\n        if char.isalpha():\n            has_letter = True\n        # Check if the current character is a digit\n        elif char.isdigit():\n            has_number = True\n        \n        # If both flags are True, we can return True immediately\n        # This is because we only need to find one letter and one number\n        if has_letter and has_number:\n            return True\n    \n    # If the loop completes and either flag is still False, return False\n    return False\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 193,
        "text": "Write a function to remove the duplicates from the given tuple.",
        "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "test_list": [
            "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
            "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
            "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuple(test_tup):",
        "question_1": "Write a Python function that takes in a list of elements and removes all the duplicate elements.",
        "answer_1": "def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n  \nresult = remove_duplicates([1, 2, 2, 3, 3, 3])\nprint(result)",
        "question_2": "Create a function in Python that takes a list as an argument and removes any duplicate values in the list.",
        "answer_2": "def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list",
        "question_3": "Write a function in Python to filter out duplicates from a list.",
        "answer_3": "def remove_duplicates(List): \n  return list(set(List))",
        "full_code": "\ndef remove_tuple(test_tup):\n    # Step 1: Convert the tuple to a list\n    # Reasoning: Tuples are immutable, so we need to convert it to a list to remove duplicates.\n    test_list = list(test_tup)\n    \n    # Step 2: Create an empty list to store unique elements\n    # Reasoning: We need a new list to store elements that are not duplicates.\n    unique_list = []\n    \n    # Step 3: Iterate through each element in the list\n    # Reasoning: We need to check each element to see if it's already in the unique_list.\n    for item in test_list:\n        # Step 4: Check if the element is not already in the unique_list\n        # Reasoning: If the element is not in the unique_list, it means it's unique.\n        if item not in unique_list:\n            # Step 5: Append the unique element to the unique_list\n            # Reasoning: We add the unique element to the list to keep track of it.\n            unique_list.append(item)\n    \n    # Step 6: Convert the unique_list back to a tuple\n    # Reasoning: The function should return a tuple, so we convert the list back to a tuple.\n    unique_tup = tuple(unique_list)\n    \n    # Step 7: Return the tuple with unique elements\n    # Reasoning: The function should return the tuple with duplicates removed.\n    return unique_tup\n\n# Example usage:\ntest_tup = (1, 3, 5, 2, 3, 5, 1, 1, 2)\nresult = remove_tuple(test_tup)\nprint(result)\n",
        "pass": "False"
    },
    {
        "task_id": 194,
        "text": "Write a python function to convert octal number to decimal number.",
        "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def octal_To_Decimal(n):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_3": "Write a Python function to convert a given floating point number to binary.",
        "answer_3": "def decimal_to_binary(f_num):\n  b_str = \"\"\n  int_num = int(f_num)\n  f_num = f_num - int_num\n\n  while int_num > 0:\n    b_str = str(int_num % 2) + b_str\n    int_num //= 2\n\n  b_str = \"1.\" + b_str\n\n  while f_num > 0: \n    f_num *= 2\n    int_num = int(f_num)\n    if int_num == 1:\n      b_str += \"1\"\n    else:\n      b_str += \"0\"\n    f_num = f_num - int_num\n\n  return b_str",
        "full_code": "\ndef octal_To_Decimal(n):\n    # Initialize the decimal result to 0\n    decimal = 0\n    # Initialize the base position to 1 (which represents 8^0)\n    base = 1\n    \n    # Convert the input octal number to a string to facilitate iteration\n    octal_str = str(n)\n    \n    # Iterate over each digit in the octal string from right to left\n    for digit in reversed(octal_str):\n        # Convert the current digit from string to integer\n        digit_value = int(digit)\n        \n        # Add the value of the current digit multiplied by the current base to the decimal result\n        decimal += digit_value * base\n        \n        # Update the base to the next power of 8 (base *= 8)\n        base *= 8\n    \n    # Return the final decimal result\n    return decimal\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 195,
        "text": "Write a python function to find the first position of an element in a sorted array.",
        "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "test_list": [
            "assert first([1,2,3,4,5,6,6],6,6) == 5",
            "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
            "assert first([1,2,3],1,3) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first(arr,x,n):",
        "question_1": "Create a Python program to find the index of the first occurrence of a given element in a sorted array",
        "answer_1": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid-1] < target:\n                return mid\n            else:\n                high = mid - 1\n\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# example\narr = [1, 3, 3, 4, 5, 6, 8]\ntarget = 3\nprint(binary_search(arr, target)) # 1",
        "question_2": "Create an algorithm in Python to find the first index of an item in an array.",
        "answer_2": "def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "question_3": "Suggest an algorithm in Python to sort an array of integers but maintain the order of similar elements.",
        "answer_3": "def sort_with_maintained_order(array):\n    \"\"\"\n    Sort an array of integers\n    but maintain the order of similar elements.\n\n    Parameters\n    ----------\n    array : List[int]\n        The input array\n\n    Returns\n    -------\n    List[int]\n        The sorted array\n\n    \"\"\"\n    # Keep track of elements already seen\n    seen_elements = []\n\n    # Loop over the list in the original order\n    for element in array:\n        # Check if element appears for the first time\n        if element not in seen_elements:\n            # Only continue if it is the first appearance\n            seen_elements.append(element)\n            # Find the positions of all elements with this value\n            positions = [i for i, x in enumerate(array) if x == element]\n            # Resolve the order for this element\n            order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1])\n            # Rearrange the elements in ascending order\n            for i, (pos, val) in enumerate(order):\n                array[pos] = i\n    return array",
        "full_code": "\ndef first(arr, x, n):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = n - 1\n    # Initialize the result to -1, which will be returned if the element is not found\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # Check if the middle element is the target element\n        if arr[mid] == x:\n            # If it is the target element, update the result to the current mid index\n            result = mid\n            # Continue searching in the left half to find the first occurrence\n            high = mid - 1\n        # If the middle element is greater than the target element, search in the left half\n        elif arr[mid] > x:\n            high = mid - 1\n        # If the middle element is less than the target element, search in the right half\n        else:\n            low = mid + 1\n\n    # Return the result, which will be the index of the first occurrence of the element\n    return result\n\n# Example usage\narr = [1, 2, 2, 2, 3, 4, 5]\nx = 2\nn = len(arr)\nprint(first(arr, x, n))  # Output should be 1\n",
        "pass": "True"
    },
    {
        "task_id": 196,
        "text": "Write a function to remove all the tuples with length k.",
        "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "test_list": [
            "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
            "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
            "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuples(test_list, K):",
        "question_1": "Construct a Python function to remove all instances of an element from a given list of integers.",
        "answer_1": "def remove_element(nums, x):\n   return [y for y in nums if y != x]",
        "question_2": "Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.",
        "answer_2": "def filter_list(list):\n    return [item for item in list if len(item) < 4 or 'k' not in item]\n\nmy_list = filter_list(my_list)\nprint(my_list)\n\n# Output:\n# ['cat', 'dog']",
        "question_3": "Write a function in Python to remove duplicate entries from a list.",
        "answer_3": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))",
        "full_code": "\ndef remove_tuples(test_list, K):\n    # Step 1: Initialize an empty list to store the tuples that do not have length K\n    filtered_list = []\n    \n    # Step 2: Iterate through each tuple in the input list\n    for tup in test_list:\n        # Step 3: Check if the length of the current tuple is not equal to K\n        if len(tup) != K:\n            # Step 4: If the length is not K, append the tuple to the filtered_list\n            filtered_list.append(tup)\n    \n    # Step 5: Return the filtered list containing only the tuples with length not equal to K\n    return filtered_list\n\n# Example usage:\ntest_list = [(1, 2), (3, 4, 5), (6,), (7, 8, 9, 10)]\nK = 3\nprint(remove_tuples(test_list, K))\n# Output: [(1, 2), (6,), (7, 8, 9, 10)]\n",
        "pass": "True"
    },
    {
        "task_id": 197,
        "text": "Write a function to perform the exponentiation of the given two tuples.",
        "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "test_list": [
            "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
            "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
            "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_exponentio(test_tup1, test_tup2):",
        "question_1": "Create a python program that takes two numbers and calculates the exponent of the first number raised to the power of the second number.",
        "answer_1": "# This program takes two numbers and calculates the \n# exponent of the first number raised to the power of the second number\n\ndef calculateExponent(base, exponent):\n    return base**exponent\n\nbase = 2\nexponent = 3\n\nresult = calculateExponent(base, exponent)\nprint(\"The result is:\", result) # The result is: 8",
        "question_2": "Optimize a given code in Python for higher efficiency.",
        "answer_2": "def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer",
        "question_3": "Write an algorithm in Python to find the exponentiation of a given base and an exponent.",
        "answer_3": "def pow(base, exponent): \n    result = 1\n    for i in range(exponent): \n        result = result * base \n    return result \n\nbase = 2\nexponent = 4\nprint('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))",
        "full_code": "\ndef find_exponentio(test_tup1, test_tup2):\n    # Step 1: Check if both tuples have the same length\n    # This is necessary because exponentiation requires corresponding elements from both tuples\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Step 2: Initialize an empty list to store the results of the exponentiation\n    result = []\n    \n    # Step 3: Iterate over the elements of the tuples\n    # Use the zip function to pair corresponding elements from both tuples\n    for base, exponent in zip(test_tup1, test_tup2):\n        # Step 4: Perform the exponentiation for each pair of elements\n        # Use the ** operator to raise the base to the power of the exponent\n        result.append(base ** exponent)\n    \n    # Step 5: Return the list of results\n    return result\n\n# Example usage:\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (3, 2, 1)\nprint(find_exponentio(test_tup1, test_tup2))  # Output: [8, 9, 4]\n",
        "pass": "False"
    },
    {
        "task_id": 198,
        "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "test_list": [
            "assert largest_triangle(4,2)==10.392304845413264",
            "assert largest_triangle(5,7)==4.639421805988064",
            "assert largest_triangle(9,1)==105.2220865598093"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef largest_triangle(a,b):",
        "question_1": "Use Python to optimize a function f(x, y) so that it attains its maximum for any given set of x and y.",
        "answer_1": "from scipy.optimize import fmin\n\ndef f(x, y):\n return 3*x**2 + 2*x*y + 5*y**2\n\nx, y = fmin(f, 0, 0)\n\nprint(f'The maximum of f(x,y) is {f(x, y)} at (x, y) = ({x:0.5f}, {y:0.5f})')",
        "question_2": "Maximize a given function subject to the given constraints.",
        "answer_2": "We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2.",
        "question_3": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_3": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "full_code": "\nimport math\n\ndef largest_triangle(a, b):\n    # The largest triangle that can be inscribed in an ellipse is an equilateral triangle.\n    # The side length of the equilateral triangle inscribed in an ellipse with semi-major axis 'a' and semi-minor axis 'b'\n    # can be derived using geometric properties and optimization techniques.\n    \n    # Step 1: Calculate the semi-major axis 'a' and semi-minor axis 'b' of the ellipse.\n    # These values are already provided as function arguments.\n    \n    # Step 2: Use the formula for the side length 's' of an equilateral triangle inscribed in an ellipse.\n    # The formula is derived from the geometric properties of the ellipse and the triangle.\n    # The side length 's' can be approximated using the formula: s = 3 * sqrt(3) * a * b / (a^2 + b^2)\n    \n    # Step 3: Calculate the side length 's' using the derived formula.\n    s = (3 * math.sqrt(3) * a * b) / (a**2 + b**2)\n    \n    # Step 4: Return the side length 's' as the result.\n    return s\n\n# Example usage:\n# a = 5, b = 3\n# print(largest_triangle(5, 3))  # This will output the side length of the largest equilateral triangle that can be inscribed in the ellipse.\n",
        "pass": "False"
    },
    {
        "task_id": 199,
        "text": "Write a python function to find highest power of 2 less than or equal to given number.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "question_1": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_1": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_2": "Create a function to compute the maximum of two numbers in Python.",
        "answer_2": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "question_3": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_3": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "full_code": "\ndef highest_Power_of_2(n):\n    # Step 1: Initialize a variable to store the highest power of 2 found so far\n    highest_power = 1\n    \n    # Step 2: Iterate through powers of 2 starting from 1\n    # We use a while loop to keep multiplying by 2 until we exceed the given number n\n    while highest_power * 2 <= n:\n        highest_power *= 2\n    \n    # Step 3: After the loop, highest_power will be the highest power of 2 less than or equal to n\n    return highest_power\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 200,
        "text": "Write a function to find all index positions of the maximum values in a given list.",
        "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "test_list": [
            "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
            "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
            "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_max(list1):",
        "question_1": "Generate a Python program that takes a numerical list and finds the index of the largest value.",
        "answer_1": "# list of numbers \nlist = [3, 5, 9, 10] \n\n# maximum number \nMaxNum = max(list) \n\n# index of the maximum number \nindex = list.index(MaxNum) \n\nprint(\"Maximum number is:\", MaxNum) \nprint(\"Index of maximum number is:\", index)",
        "question_2": "Given a list of integers, write a Python program to find the maximum value in the array and display its index.",
        "answer_2": "mylist = [3, 2, 5, 8, 6]\n\n# initialize maximum value and index\nmaxval = 0\nmaxindex = 0\n\n# iterate through list\nfor i, val in enumerate(mylist):\n # check if the current value is greater than the maximum value\n if val > maxval:\n  maxval = val\n  maxindex = i\n\n# print the result\nprint('Maximum value:', maxval)\nprint('Index of maximum value:', maxindex)",
        "question_3": "Design a Python program to find the position of the maximum element in a list of numbers.",
        "answer_3": "def find_max_position(nums):\n    max_num = nums[0]\n    max_pos = 0\n\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_pos = i\n\n    return max_pos\n\nnums = [1, 5, 8, -3, 0]\nmax_pos = find_max_position(nums)\nprint(f\"The maximum element is at position {max_pos}\")",
        "full_code": "\ndef position_max(list1):\n    # Step 1: Find the maximum value in the list\n    # We use the built-in max() function to find the maximum value in the list.\n    max_value = max(list1)\n    \n    # Step 2: Initialize an empty list to store the indices of the maximum values\n    max_positions = []\n    \n    # Step 3: Iterate through the list to find all indices where the value equals the maximum value\n    # We use enumerate() to get both the index and the value of each element in the list.\n    for index, value in enumerate(list1):\n        # Step 4: Check if the current value is equal to the maximum value\n        if value == max_value:\n            # Step 5: If it is, append the index to the max_positions list\n            max_positions.append(index)\n    \n    # Step 6: Return the list of indices where the maximum value occurs\n    return max_positions\n\n# Example usage:\nlist1 = [1, 5, 8, 8, -3, 0, 8]\nprint(position_max(list1))  # Output should be [2, 3, 6]\n",
        "pass": "True"
    },
    {
        "task_id": 201,
        "text": "Write a python function to check whether the elements in a list are same or not.",
        "code": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "test_list": [
            "assert chkList(['one','one','one']) == True",
            "assert chkList(['one','Two','Three']) == False",
            "assert chkList(['bigdata','python','Django']) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def chkList(lst):",
        "question_1": "Generate a Python program that checks if all elements of a given list are the same.",
        "answer_1": "def check_list_elements(list_of_elements):\n    if len(set(list_of_elements)) == 1:\n        return True\n    else:\n        return False\n\nlist_of_elements = [1, 4, 1, 4, 1]\nsame_elements = check_list_elements(list_of_elements)\nprint(same_elements)",
        "question_2": "Write a Python program to check if elements in two given lists are the same.",
        "answer_2": "def compareLists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = compareLists(list1, list2)\n\nprint(f'Are the elements in the lists the same? {result}')\n\n# Output: Are the elements in the lists the same? False",
        "question_3": "Write a Python function to check if an element exists in a list.",
        "answer_3": "def check_list(list_, element): \n    return element in list_",
        "full_code": "\ndef chkList(lst):\n    # Step 1: Check if the list is empty\n    # If the list is empty, we can consider all elements to be the same (vacuously true)\n    if not lst:\n        return True\n    \n    # Step 2: Use a set to determine unique elements\n    # Convert the list to a set, which will remove any duplicate elements\n    unique_elements = set(lst)\n    \n    # Step 3: Check the length of the set\n    # If the length of the set is 1, it means all elements in the original list were the same\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False\n\n# Example usage:\n# lst = [1, 1, 1, 1]\n# result = chkList(lst)\n# print(result)  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 202,
        "text": "Write a function to remove even characters in a string.",
        "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_even(\"python\")==(\"pto\")",
            "assert remove_even(\"program\")==(\"porm\")",
            "assert remove_even(\"language\")==(\"lnug\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_even(str1):",
        "question_1": "Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.",
        "answer_1": "def remove_odd_ascii_chars(str):\n    new_str = \"\"\n    for ch in str:\n        if ord(ch) % 2 == 0:\n            new_str += ch\n    return new_str\n\nstr = \"Hello world!\"\nnew_str = remove_odd_ascii_chars(str)\nprint(new_str)",
        "question_2": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_2": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_3": "Create a Python program to delete all characters at odd index in a given string.",
        "answer_3": "def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output",
        "full_code": "\ndef remove_even(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string with both index and character using enumerate\n    for i, ch in enumerate(str1):\n        # Check if the index is even\n        if i % 2 == 0:\n            # If the index is even, skip this character\n            continue\n        else:\n            # If the index is odd, add the character to the result string\n            result += ch\n    \n    # Return the resulting string with even characters removed\n    return result\n\n# Example usage\nprint(remove_even(\"Hello World\"))  # Output should be \"el ol\"\n",
        "pass": "False"
    },
    {
        "task_id": 203,
        "text": "Write a python function to find the hamming distance between given two integers.",
        "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "test_list": [
            "assert hamming_Distance(4,8) == 2",
            "assert hamming_Distance(2,4) == 2",
            "assert hamming_Distance(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hamming_Distance(n1,n2) :",
        "question_1": "Build a function in Python for computing the Hamming Distance between two strings of equal length.",
        "answer_1": "def hammingDistance(s1, s2): \n\n    # initialize with 0\n    distance = 0\n  \n    # Calculate the length of the string \n    length_str1 = len(s1) \n    # Compare adjacent characters and increment the count \n    # if characters are not same \n    for i in range(length_str1): \n        if s1[i] != s2[i]: \n            distance += 1\n  \n    return distance",
        "question_2": "Write a Python function to calculate the Hamming distance between two strings of same length.",
        "answer_2": "def hamming_distance(s1, s2):\n    distance = 0\n\n    for char1, char2 in zip(s1, s2):\n        if char1 != char2:\n            distance += 1\n    \n    return distance\n\nresult = hamming_distance(\"abc\", \"acd\")\nprint(result)",
        "question_3": "Using Python, write a program to calculate the hamming distance between two strings.",
        "answer_3": "def hammingDistance(string1, string2): \n if len(string1) != len(string2):\n  raise ValueError('Strings must be of equal length.')\n\n distance = 0\n\n for c1, c2 in zip(string1, string2):\n  if c1 != c2:\n   distance += 1\n\n return distance\n\nstring1 = \"Hello World!\"\nstring2 = \"Goodbye World!\"\ndistance = hammingDistance(string1, string2)\nprint(distance) # Outputs 5",
        "full_code": "\ndef hamming_Distance(n1, n2):\n    # Step 1: Convert the integers to binary strings\n    # This is necessary because the Hamming distance is typically calculated for binary data\n    bin_n1 = bin(n1)[2:]  # Convert n1 to binary and remove the '0b' prefix\n    bin_n2 = bin(n2)[2:]  # Convert n2 to binary and remove the '0b' prefix\n\n    # Step 2: Ensure both binary strings are of equal length\n    # This is important because the Hamming distance is defined for strings of equal length\n    max_len = max(len(bin_n1), len(bin_n2))\n    bin_n1 = bin_n1.zfill(max_len)  # Pad bin_n1 with leading zeros if necessary\n    bin_n2 = bin_n2.zfill(max_len)  # Pad bin_n2 with leading zeros if necessary\n\n    # Step 3: Initialize a counter to keep track of the Hamming distance\n    distance = 0\n\n    # Step 4: Iterate through the binary strings and count the differing bits\n    for bit1, bit2 in zip(bin_n1, bin_n2):\n        if bit1 != bit2:\n            distance += 1\n\n    # Step 5: Return the calculated Hamming distance\n    return distance\n\n# Example usage:\nresult = hamming_Distance(10, 12)\nprint(result)  # Outputs 1, because the binary representation of 10 is '1010' and 12 is '1100', differing only in one bit\n",
        "pass": "True"
    },
    {
        "task_id": 204,
        "text": "Write a python function to count the occurrence of a given character in a string.",
        "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "test_list": [
            "assert count(\"abcc\",\"c\") == 2",
            "assert count(\"ababca\",\"a\") == 3",
            "assert count(\"mnmm0pm\",\"m\") == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(s,c) :",
        "question_1": "Formulate a Python function to count the occurrences of a character in a given string.",
        "answer_1": "def count_characters(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count",
        "question_2": "Create a function in Python that counts the occurrence of a given character in a string.",
        "answer_2": "def count_occurrence(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count",
        "question_3": "Given a string and a character, write a Python function to count the number of occurrences of the character in the string.",
        "answer_3": "def count_characters(string, char):\n    return sum([1 for x in string if x == char])",
        "full_code": "\ndef count(s, c):\n    # Initialize a variable to keep track of the count of the character 'c'\n    count = 0\n    \n    # Iterate through each character in the string 's'\n    for char in s:\n        # Check if the current character matches the character 'c'\n        if char == c:\n            # If it matches, increment the count by 1\n            count += 1\n    \n    # Return the total count of the character 'c' in the string 's'\n    return count\n\n# The function is now complete and can be executed using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 205,
        "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "test_list": [
            "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
            "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
            "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def inversion_elements(test_tup):",
        "question_1": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_1": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_2": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_2": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)",
        "full_code": "\ndef inversion_elements(test_tup):\n    # Initialize a counter to keep track of the number of inversions\n    inversion_count = 0\n    \n    # Iterate through each element in the tuple\n    for i in range(len(test_tup)):\n        # For each element, compare it with every subsequent element\n        for j in range(i + 1, len(test_tup)):\n            # If the current element is greater than the subsequent element, it's an inversion\n            if test_tup[i] > test_tup[j]:\n                inversion_count += 1\n    \n    # Return the total count of inversions\n    return inversion_count\n\n# Example usage:\ntest_tup = (3, 5, 2, 1, 4)\nprint(inversion_elements(test_tup))  # Output should be 6\n",
        "pass": "False"
    },
    {
        "task_id": 206,
        "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
            "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
            "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(test_tup):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.",
        "answer_2": "def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3]",
        "question_3": "Generate a python code to concatenate two strings.",
        "answer_3": "def concat(s1, s2):\n    return s1 + s2",
        "full_code": "\ndef concatenate_elements(test_tup):\n    # Initialize an empty list to store the concatenated results\n    result = []\n    \n    # Iterate through the tuple, stopping at the second last element\n    # This is because we are concatenating each element with its adjacent element\n    for i in range(len(test_tup) - 1):\n        # Concatenate the current element with the next element\n        concatenated_element = test_tup[i] + test_tup[i + 1]\n        \n        # Append the concatenated result to the result list\n        result.append(concatenated_element)\n    \n    # Return the list of concatenated elements\n    return result\n\n# Example usage:\n# test_tup = ('a', 'b', 'c', 'd')\n# print(concatenate_elements(test_tup))  # Output: ['ab', 'bc', 'cd']\n",
        "pass": "False"
    },
    {
        "task_id": 207,
        "text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "test_list": [
            "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
            "assert find_longest_repeating_subseq(\"aabb\") == 2",
            "assert find_longest_repeating_subseq(\"aab\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_longest_repeating_subseq(str):",
        "question_1": "Create a Python script that takes two strings as an input and returns the longest common subsequence of those two strings.",
        "answer_1": "def longestCommonSubsequence(str1, str2): \n    # find the length of the strings \n    m = len(str1) \n    n = len(str2)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of str1[0..i-1] \n    and str2[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1])\n    counter = L[m-1][n-1] \n  \n    # Create lcs and return it\n    lcs = [\"\"] * (counter+1) \n    lcs[counter] = \"\" \n  \n    # Start from the right-most-bottom-most corner and \n    # one by one store characters in lcs[] \n    i = m-1\n    j = n-1\n    while i > 0 and j > 0: \n  \n        # If current character in X[] and Y are same, then \n        # current character is part of LCS \n        if str1[i-1] == str2[j-1]: \n            lcs[counter-1] = str1[i-1] \n            i-=1\n            j-=1\n            counter-=1\n  \n        # If not same, then find the larger of two and \n        # go in the direction of larger value \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    return ''.join(lcs)\n  \n# Driver Code \nstr1 = \"ABCD\"\nstr2 = \"BCEA\"\nprint(longestCommonSubsequence(str1, str2))",
        "question_2": "Create a function in Python to determine the length of the longest common subsequence of two strings.",
        "answer_2": "def longest_subsequence(s1, s2):\n    n = len(s1) \n    m = len(s2) \n   \n    LCS = [[0 for k in range(m+1)]for l in range(n+1)]  \n   \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCS[i][j] = LCS[i-1][j-1]+1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n\n    return LCS[n][m]",
        "question_3": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "answer_3": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "full_code": "\ndef find_longest_repeating_subseq(str):\n    # Step 1: Initialize a 2D array to store the length of the longest repeating subsequence\n    # The array will have dimensions (n+1) x (n+1) where n is the length of the input string\n    # This is because we need to consider the empty string as well, hence the +1\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Step 2: Fill the dp array\n    # We will iterate over the string and compare each character with every other character\n    # If two characters are the same and are not at the same position in the string,\n    # we will update the dp array accordingly\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # If characters match and indices are different\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                # If characters do not match, take the maximum value from either excluding the current character from the first sequence\n                # or excluding the current character from the second sequence\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Step 3: The value at dp[n][n] will give us the length of the longest repeating subsequence\n    # This is because we have considered all characters of the string in both sequences\n    return dp[n][n]\n\n# Example usage:\n# result = find_longest_repeating_subseq(\"aabb\")\n# print(result)  # Output should be 2, because \"ab\" is the longest repeating subsequence\n\n# The entire code as a plain string that can be directly executed using exec()\ncode = \"\"\"\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]\n\n# Example usage:\nresult = find_longest_repeating_subseq(\"aabb\")\nprint(result)  # Output should be 2\n\"\"\"\n\n# To execute the code using exec()\nexec(code)\n",
        "pass": "True"
    },
    {
        "task_id": 208,
        "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "test_list": [
            "assert is_decimal('123.11') == True",
            "assert is_decimal('0.21') == True",
            "assert is_decimal('123.1214') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_decimal(num):",
        "question_1": "Create a function in Python that rounds a number to two decimal places.",
        "answer_1": "def round_to_two_decimals(number):\n    return round(number, 2)",
        "question_2": "Generate Python code to format a given string as a Float number with 2 decimal places.",
        "answer_2": "def format_string(string): \n    return '{:.2f}'.format(float(string))\n\n// Usage:\nstring = '3.14159'\nformatted_string = format_string(string)\nprint(formatted_string) // prints 3.14",
        "question_3": "Generate a python function that checks if the number is a valid decimal or not.",
        "answer_3": "def is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False",
        "full_code": "\nimport re\n\ndef is_decimal(num):\n    # Step 1: Define the regex pattern for a decimal number with up to 2 decimal places\n    # The pattern should match:\n    # - An optional '+' or '-' sign at the beginning\n    # - One or more digits before the decimal point\n    # - An optional decimal point followed by exactly 0, 1, or 2 digits\n    pattern = r'^[+-]?\\d+(\\.\\d{0,2})?$'\n    \n    # Step 2: Use the re.match function to check if the input string matches the pattern\n    # re.match returns a match object if the pattern matches, otherwise it returns None\n    match = re.match(pattern, num)\n    \n    # Step 3: Return True if there is a match, otherwise return False\n    return bool(match)\n\n# Example usage:\n# print(is_decimal('3.14'))  # True\n# print(is_decimal('3.141')) # False\n# print(is_decimal('3'))     # True\n# print(is_decimal('-3.1'))  # True\n# print(is_decimal('+3.14')) # True\n# print(is_decimal('3.'))    # True\n# print(is_decimal('3.141')) # False\n",
        "pass": "True"
    },
    {
        "task_id": 209,
        "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "test_list": [
            "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_replace(heap,a):",
        "question_1": "Create a minimum heap in python",
        "answer_1": "class MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2",
        "question_2": "Generate a Python program to implement a Min-Heap data structure.",
        "answer_2": "class MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def parent(self, i):\n        return (i - 1) // 2\n\n    def insert(self, key):\n        self.heap_array.append(key)\n\n        # Fix the min heap property if it is violated\n        self.heapify_up(len(self.heap_array) - 1)\n\n    def heapify_up(self, index):\n        # If current node is greater than parent, then swap\n        if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]:\n            # Swap the current node with its parent\n            self.heap_array[index], self.heap_array[self.parent(index)] = (\n                self.heap_array[self.parent(index)],\n                self.heap_array[index],\n            )\n\n            # Heapify the parent node\n            self.heapify_up(self.parent(index))\n\n    def delete_min(self):\n        if self.heap_array:\n            deletemin = self.heap_array[0]\n\n            # Replace the root with the last node\n            self.heap_array[0] = self.heap_array[-1]\n            del self.heap_array[-1]\n\n            # Heapify the root node\n            self.heapify_down(0)\n\n            return deletemin\n\n    def heapify_down(self, index):\n        index_left = 2 * index + 1\n        index_right = 2 * index + 2\n        index_smallest = index\n\n        # If left child is smaller than root\n        if (\n            index_left\n            < len(self.heap_array)\n            and self.heap_array[index_left] < self.heap_array[index]\n        ):\n            index_smallest = index_left\n\n        # If right child is smaller than smallest so far\n        if (\n            index_right\n            < len(self.heap_array)\n            and self.heap_array[index_right] < self.heap_array[index_smallest]\n        ):\n            index_smallest = index_right\n\n        # If index is not the smallest\n        if index != index_smallest:\n            # Swap with the smallest\n            self.heap_array[index], self.heap_array[index_smallest] = (\n                self.heap_array[index_smallest],\n                self.heap_array[index],\n            )\n\n            # Heapify the index that was swapped\n            self.heapify_down(index_smallest)",
        "question_3": "Generate a code which implements a minimum heap house.",
        "answer_3": "# Python program to demonstrate Min Heap \nfrom heapq import heappop, heappush \n  \nclass MinHeap: \n   \n    def __init__(self): \n        self.heap = list() \n   \n    # Inserts a new key 'k'  \n    def push(self, k): \n        heappush(self.heap, k)            \n  \n    # Decrease value of key at index 'i' to new_val \n    # It is assumed that new_val is smaller than heap[i] \n    def decreaseKey(self, i, new_val): \n        self.heap[i] = new_val  \n        while(i != 0 and self.heap[int((i - 1) / 2)] > self.heap[i]): \n            //Swapping the two keys \n            self.heap[i] = self.heap[int((i - 1) / 2)] \n            self.heap[int((i - 1) / 2)] = self.heap[i] \n            i = int((i - 1) / 2); \n  \n    # Method to remove minium element from min heap \n    def pop(self): \n        if self.heap: \n            # Replace root with last element of the heap\n            self.heap[0] = self.heap[len(self.heap) - 1] \n            # Remove last element\n            self.heap.pop() \n            # Heapify the root element\n            self.minHeapify(0) \n        else: \n            return None\n   \n    # This function mainly calls minHeapify of the root. \n    def minHeapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.heap) and self.heap[i] > self.heap[l]: \n            smallest = l \n        if r < len(self.heap) and self.heap[smallest] > self.heap[r]: \n            smallest = r \n        if smallest != i: \n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] \n            self.minHeapify(smallest)",
        "full_code": "\nimport heapq as hq\n\ndef heap_replace(heap, a):\n    # Step 1: Check if the heap is empty\n    # If the heap is empty, we can directly insert the new item\n    if not heap:\n        hq.heappush(heap, a)\n        return\n    \n    # Step 2: Delete the smallest element from the heap\n    # The smallest element is always at the root of the min-heap\n    # We use heapq.heappop to remove and return the smallest element\n    smallest = hq.heappop(heap)\n    \n    # Step 3: Insert the new item into the heap\n    # We use heapq.heappush to insert the new item while maintaining the heap property\n    hq.heappush(heap, a)\n    \n    # Step 4: Return the smallest element that was deleted\n    # This is optional, but useful if you need to know what was deleted\n    return smallest\n\n# Example usage:\n# heap = [3, 5, 7, 9, 11]\n# heap_replace(heap, 4)\n# print(heap)  # Output: [4, 5, 7, 9, 11]\n",
        "pass": "False"
    },
    {
        "task_id": 210,
        "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "test_list": [
            "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
            "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
            "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_allowed_specific_char(string):",
        "question_1": "Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).",
        "answer_1": "import re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')",
        "question_2": "Write a Python program to detect if a string contains any special characters.",
        "answer_2": "def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))",
        "question_3": "Develop a Python program to check if a given string contains any special characters.",
        "answer_3": "import re\ndef hasSpecialChar(str):\n    return bool(re.search(r'[^A-Za-z0-9]', str))",
        "full_code": "\nimport re\n\ndef is_allowed_specific_char(string):\n    # Step 1: Define the regex pattern to match characters in the set a-z, A-Z, and 0-9\n    # The pattern '[a-zA-Z0-9]' will match any single character that is a letter (lowercase or uppercase) or a digit.\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\n    \n    # Step 2: Use the fullmatch method to check if the entire string matches the pattern\n    # fullmatch ensures that the entire string adheres to the pattern, not just a part of it.\n    if pattern.fullmatch(string):\n        return True\n    else:\n        return False\n\n# Example usage:\n# Uncomment the following lines to test the function\n# print(is_allowed_specific_char('abc123'))  # Should return True\n# print(is_allowed_specific_char('abc!@#'))  # Should return False\n```\n\nThis code defines a function `is_allowed_specific_char` that checks if a given string contains only the characters a-z, A-Z, and 0-9 using a regular expression. The function uses the `fullmatch` method to ensure that the entire string matches the pattern, and returns `True` if it does, and `False` otherwise.",
        "pass": "Error"
    },
    {
        "task_id": 211,
        "text": "Write a python function to count numbers whose oth and nth bits are set.",
        "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "test_list": [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Num(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Generate a code to find the number of 1-bits in an integer",
        "answer_2": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "full_code": "\ndef count_Num(n):\n    # Step 1: Initialize a counter to keep track of numbers that meet the criteria\n    count = 0\n    \n    # Step 2: Iterate through all numbers from 0 to 2^n - 1\n    # This range includes all possible n-bit numbers\n    for i in range(1 << n):\n        \n        # Step 3: Check if both the 0th and nth bits are set\n        # The 0th bit is set if the number is odd (i.e., i % 2 == 1)\n        # The nth bit is set if the number has the nth bit set (i.e., i & (1 << (n-1)) != 0)\n        if i % 2 == 1 and (i & (1 << (n-1))) != 0:\n            \n            # Step 4: If both conditions are met, increment the counter\n            count += 1\n    \n    # Step 5: Return the count of numbers that meet the criteria\n    return count\n\n# Example usage:\n# n = 4\n# print(count_Num(n))  # This will output the count of numbers with 0th and 4th bits set\n",
        "pass": "True"
    },
    {
        "task_id": 212,
        "text": "Write a python function to find the sum of fourth power of n natural numbers.",
        "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "test_list": [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef fourth_Power_Sum(n):",
        "question_1": "Design a Python function that outputs the sum of all multiples of 4 and 7 between 1 and a given number n.",
        "answer_1": "def sum_multiples_4_7(n): \n      \n    sum = 0\n    # iterate from 1 to n \n    for i in range(1, n+1): \n          \n        # Sum only if it's a\n        # multiple of 4 or 7 \n        if(i % 4 == 0 or i % 7 == 0): \n            sum += i \n    return sum\n\nresult = sum_multiples_4_7(100)\nprint(result)",
        "question_2": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_2": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_3": "Create a function to calculate the sum of a sequence of integers.",
        "answer_3": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "full_code": "\nimport math  \n\ndef fourth_Power_Sum(n):\n    # Initialize the sum variable to store the cumulative sum of fourth powers\n    sum = 0\n    \n    # Iterate over each natural number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the fourth power of the current number\n        fourth_power = i ** 4\n        \n        # Add the fourth power to the sum\n        sum += fourth_power\n    \n    # Return the final sum of fourth powers\n    return sum\n\n# Example usage:\n# result = fourth_Power_Sum(5)\n# print(result)  # This will print the sum of fourth powers of the first 5 natural numbers\n",
        "pass": "True"
    },
    {
        "task_id": 213,
        "text": "Write a function to perform the concatenation of two string tuples.",
        "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_strings(test_tup1, test_tup2):",
        "question_1": "Can you write a Python function that takes two strings as arguments, and concatenates them together?",
        "answer_1": "def concatenate_strings(string1, string2):\n    return string1 + string2",
        "question_2": "Create a function in Python to concatenate two strings and return the concatenated string.",
        "answer_2": "def concatenate_strings(str1, str2):\n  return str1 + str2",
        "question_3": "Generate a python code to concatenate two strings.",
        "answer_3": "def concat(s1, s2):\n    return s1 + s2",
        "full_code": "\ndef concatenate_strings(test_tup1, test_tup2):\n    # Step 1: Initialize an empty list to store the concatenated results\n    concatenated_list = []\n    \n    # Step 2: Iterate through the elements of the tuples using zip()\n    # This ensures we are processing corresponding elements from both tuples\n    for str1, str2 in zip(test_tup1, test_tup2):\n        # Step 3: Concatenate the corresponding elements from both tuples\n        concatenated_string = str1 + str2\n        \n        # Step 4: Append the concatenated string to the result list\n        concatenated_list.append(concatenated_string)\n    \n    # Step 5: Convert the list of concatenated strings back to a tuple\n    # This is to match the expected output format\n    concatenated_tuple = tuple(concatenated_list)\n    \n    # Step 6: Return the final concatenated tuple\n    return concatenated_tuple\n\n# The entire function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 214,
        "text": "Write a function to convert radians to degrees.",
        "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef degree_radian(radian):",
        "question_1": "Write a Python program to generate a table of values for sin and cos functions between 0 and 10.",
        "answer_1": "import math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table()",
        "question_2": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius.",
        "answer_2": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius",
        "question_3": "Construct a Python code to convert degrees Fahrenheit to Celsius.",
        "answer_3": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32)*(5/9)\n    return celsius",
        "full_code": "\nimport math\n\ndef degree_radian(radian):\n    # Step 1: Understand the conversion formula\n    # The formula to convert radians to degrees is: degrees = radians * (180 / \u03c0)\n    # \u03c0 (pi) is a constant approximately equal to 3.14159\n    \n    # Step 2: Use the math module to get the value of \u03c0\n    # math.pi provides the value of \u03c0 which is approximately 3.14159\n    \n    # Step 3: Apply the conversion formula\n    # Multiply the radian value by (180 / \u03c0) to get the degree value\n    \n    # Step 4: Return the calculated degree value\n    degrees = radian * (180 / math.pi)\n    return degrees\n",
        "pass": "True"
    },
    {
        "task_id": 215,
        "text": "Write a function to decode a run-length encoded given list.",
        "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "test_list": [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decode_list(alist):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_2": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']",
        "question_3": "Prepare a python program that displays a decoded message given in a list.",
        "answer_3": "code = [1,2,3,2,2,3,1,3]\n\nmessage = \"\"\nfor d in code:\n    if d == 1:\n        message += \"A\"\n    elif d == 2:\n        message += \"B\"\n    elif d == 3:\n        message += \"C\"\nprint(message)",
        "full_code": "\ndef decode_list(alist):\n    # Initialize an empty string to store the decoded result\n    decoded_string = \"\"\n    \n    # Iterate over the list in steps of 2 since each encoded pair is a character followed by a count\n    for i in range(0, len(alist), 2):\n        # Extract the character and its count from the list\n        char = alist[i]\n        count = alist[i + 1]\n        \n        # Append the character to the decoded string 'count' number of times\n        decoded_string += char * count\n    \n    # Return the decoded string\n    return decoded_string\n\n# Example usage:\n# encoded_list = ['A', 3, 'B', 2, 'C', 4]\n# print(decode_list(encoded_list))  # Output: AAABBCCCC\n",
        "pass": "False"
    },
    {
        "task_id": 216,
        "text": "Write a function to check if a nested list is a subset of another nested list.",
        "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "test_list": [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_subset_list(list1, list2):",
        "question_1": "Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second",
        "answer_1": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True",
        "question_2": "Write a python program to check if a given array A is a subset of another array B",
        "answer_2": "def is_subset(A, B):\n    # Iterate through A\n    for elem in A:\n        # Check if the element is in B \n        if elem not in B:\n            # If not, return False\n            return False\n\n    # If we reach here, all the elements of A\n    # were present in B, so return True \n    return True",
        "question_3": "Write a Python program to check whether an element exists within a given list.",
        "answer_3": "def is_element_in_list(list_a, target):\n return target in list_a\n\nis_element_in_list(list_a, target)",
        "full_code": "\ndef check_subset_list(list1, list2):\n    # First, we need to check if both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        return False\n    \n    # We will use a recursive function to handle nested lists\n    def is_subset_recursive(sublist, superlist):\n        # Iterate through each element in the sublist\n        for elem in sublist:\n            # If the element is a list, we need to check its elements recursively\n            if isinstance(elem, list):\n                # Check if the current element (which is a list) is in the superlist\n                if elem not in superlist:\n                    return False\n                # If it is, we need to check if it is a subset of the corresponding element in superlist\n                superlist_elem = superlist[superlist.index(elem)]\n                if not is_subset_recursive(elem, superlist_elem):\n                    return False\n            else:\n                # If the element is not a list, simply check if it is in the superlist\n                if elem not in superlist:\n                    return False\n        return True\n    \n    # Call the recursive function to check if list1 is a subset of list2\n    return is_subset_recursive(list1, list2)\n\n# Example usage:\n# list1 = [[1, 2], [3, 4]]\n# list2 = [[1, 2], [3, 4], [5, 6]]\n# print(check_subset_list(list1, list2))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 217,
        "text": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "test_list": [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Repeated_Char(str):",
        "question_1": "Write a Python program to find the first non-repeated character of a given string.",
        "answer_1": "def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch",
        "question_2": "Code a generalized function in Python that takes a string as input and returns the first non-repeating character.",
        "answer_2": "def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1",
        "question_3": "Write a function in Python to find the first non-repeating character in a given string.",
        "answer_3": "def non_repeating_char(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    for c in s:\n        if char_freq[c] == 1:\n            return c\n\nif __name__ == '__main__':\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\"))",
        "full_code": "\ndef first_Repeated_Char(str):\n    # Step 1: Create a dictionary to store the frequency of each character in the string.\n    char_freq = {}\n    \n    # Step 2: Iterate through each character in the string.\n    for ch in str:\n        # Step 3: If the character is already in the dictionary, it means it is repeated.\n        if ch in char_freq:\n            # Step 4: Return the first repeated character.\n            return ch\n        else:\n            # Step 5: If the character is not in the dictionary, add it with a frequency of 1.\n            char_freq[ch] = 1\n    \n    # Step 6: If no repeated character is found, return None.\n    return None\n\n# Example usage:\n# print(first_Repeated_Char(\"the quick brown fox jumps over the lazy dog\"))\n",
        "pass": "False"
    },
    {
        "task_id": 218,
        "text": "Write a python function to find the minimum operations required to make two numbers equal.",
        "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "test_list": [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math   \r\ndef min_Operations(A,B):",
        "question_1": "In Python, create a function to return the minimum of two numbers.",
        "answer_1": "def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "question_2": "Generate Python code for finding the minimum of two given numbers.",
        "answer_2": "def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5",
        "question_3": "Find the minimum of two numbers using Python.",
        "answer_3": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3",
        "full_code": "\nimport math\n\ndef min_Operations(A, B):\n    # Step 1: Check if A and B are already equal\n    if A == B:\n        return 0  # No operations needed if they are already equal\n    \n    # Step 2: Determine the larger and smaller number\n    larger = max(A, B)\n    smaller = min(A, B)\n    \n    # Step 3: Calculate the difference between the larger and smaller number\n    difference = larger - smaller\n    \n    # Step 4: The minimum operations required will be the difference itself\n    # This is because we can increment the smaller number by 1 in each operation\n    # until it equals the larger number\n    return difference\n\n# Example usage:\n# result = min_Operations(5, 10)\n# print(result)  # Output should be 5\n",
        "pass": "False"
    },
    {
        "task_id": 219,
        "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "test_list": [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "\r\ndef extract_min_max(test_tup, K):",
        "question_1": "Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.",
        "answer_1": "def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))",
        "question_2": "Write a Python function to get the maximum and minimum values in a given list.",
        "answer_2": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "question_3": "Create a function in Python that takes four parameters and returns the highest value.",
        "answer_3": "def get_highest(val1, val2, val3, val4):\n return max([val1, val2, val3, val4])",
        "full_code": "\ndef extract_min_max(test_tup, K):\n    # Step 1: Convert the tuple to a list for easier manipulation\n    test_list = list(test_tup)\n    \n    # Step 2: Sort the list to easily access the smallest and largest elements\n    test_list.sort()\n    \n    # Step 3: Extract the smallest K elements from the sorted list\n    min_k_elements = test_list[:K]\n    \n    # Step 4: Extract the largest K elements from the sorted list\n    max_k_elements = test_list[-K:]\n    \n    # Step 5: Return the results as a tuple of two lists\n    return (min_k_elements, max_k_elements)\n\n# Example usage:\n# test_tup = (5, 2, 7, 1, 8, 3)\n# K = 2\n# result = extract_min_max(test_tup, K)\n# print(result)  # Output: ([1, 2], [7, 8])\n",
        "pass": "False"
    },
    {
        "task_id": 220,
        "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "test_list": [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef replace_max_specialchar(text,n):",
        "question_1": "Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.",
        "answer_1": "import string\n\ndef tokenize(string):\n    tokens = string.split()\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ntokenized_str = tokenize('This sentence has commas, periods, and colons.')\nprint(tokenized_str)\n# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']",
        "question_2": "Build a Python script for replacing punctuation with spaces.",
        "answer_2": "def remove_punctuation(s):\n    punctuation = \"\"\"!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~\"\"\"\n    s_no_punct = \"\"\n    for ch in s:\n        if ch not in punctuation:\n            s_no_punct += ch\n        else:\n            s_no_punct += \" \"\n    return s_no_punct\n\ns = \"Hello, world!\"\ns_no_punct = remove_punctuation(s)\nprint(s_no_punct) # Output: \"Hello  world \"",
        "question_3": "Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.",
        "answer_3": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))",
        "full_code": "\nimport re\n\ndef replace_max_specialchar(text, n):\n    # Step 1: Define the pattern for spaces, commas, and dots\n    # We use a regular expression to match any of these characters: ' ', ',', '.'\n    pattern = r'[ ,.]'\n    \n    # Step 2: Use re.subn to replace up to 'n' occurrences of the pattern\n    # re.subn returns a tuple where the first element is the modified string\n    # and the second element is the number of replacements made\n    modified_text, num_replacements = re.subn(pattern, ':', text, count=n)\n    \n    # Step 3: Return the modified text\n    return modified_text\n\n# Example usage:\ntext = \"This is a test, string. With multiple spaces, commas, and dots.\"\nn = 3\nprint(replace_max_specialchar(text, n))\n# Expected Output: \"This:is:a test: string. With multiple spaces, commas, and dots.\"\n",
        "pass": "True"
    },
    {
        "task_id": 221,
        "text": "Write a python function to find the first even number in a given list of numbers.",
        "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "test_list": [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_even(nums):",
        "question_1": "Create an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers.",
        "answer_1": "def get_even_numbers(nums_list):\n  even_numbers = []\n  for num in nums_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nnums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = get_even_numbers(nums_list)\nprint(even_number)",
        "question_2": "Write a Python program that takes a list of numbers and creates a new list of even numbers only.",
        "answer_2": "def get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "question_3": "Generate a new Python List containing all of the even numbers from a given list.",
        "answer_3": "my_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\neven_list = [x for x in my_list if x % 2 == 0]\nprint(even_list)",
        "full_code": "\ndef first_even(nums):\n    # Initialize a variable to store the first even number\n    first_even_num = None\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the current number is even\n        if num % 2 == 0:\n            # If it is even, store it in the variable and break the loop\n            first_even_num = num\n            break\n    \n    # Return the first even number found, or None if no even number was found\n    return first_even_num\n\n# Example usage:\nnums_list = [1, 3, 5, 7, 8, 9, 10]\nprint(first_even(nums_list))  # Output should be 8\n",
        "pass": "True"
    },
    {
        "task_id": 222,
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_type(test_tuple):",
        "question_1": "Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.",
        "answer_1": "def infer_data_type(my_list):\n    output_list = []\n    for item in my_list:\n        if type(item) == int:\n            output_list.append('integer')\n        elif type(item) == float:\n            output_list.append('float')\n        else:\n            output_list.append('string')\n    return output_list",
        "question_2": "Compile a list of data types for Python",
        "answer_2": "In Python, there are various data types such as strings, numbers (integer, float, complex), booleans, lists, tuples, dictionaries and sets.",
        "question_3": "Write a Python function to check if a given list contains any duplicate elements.",
        "answer_3": "def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False",
        "full_code": "\ndef check_type(test_tuple):\n    # Step 1: Check if the tuple is empty. If it is, we can assume all elements have the same type (since there are no elements).\n    if not test_tuple:\n        return True\n    \n    # Step 2: Get the type of the first element in the tuple. This will be used to compare with the types of other elements.\n    first_type = type(test_tuple[0])\n    \n    # Step 3: Iterate through the tuple and compare the type of each element with the type of the first element.\n    for element in test_tuple:\n        # If the type of the current element does not match the type of the first element, return False.\n        if type(element) != first_type:\n            return False\n    \n    # Step 4: If the loop completes without finding any mismatched types, return True.\n    return True\n\n# The function is now complete. The following string can be executed using exec().\ncode_string = \"\"\"\ndef check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return True\n\"\"\"\n\n# Output the code string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 223,
        "text": "Write a function to check for majority element in the given sorted array.",
        "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_majority(arr, n, x):",
        "question_1": "Develop an algorithm in Python to identify the majority element in an unsorted array.",
        "answer_1": "def find_majority_element(array):\n    count = 0\n    majority_element = None\n\n    for element in array:\n        if count == 0:\n            majority_element = element\n\n        count += (1 if element == majority_element else -1)\n\n    return majority_element",
        "question_2": "Generate a Python algorithm that probes an array and attempts to select the majority element in the array.",
        "answer_2": "def find_majority_element(arr):\n    # Use Moore's voting algorithm\n    major_index = 0\n    count = 1\n\n    for i in range(len(arr)):\n        if arr[i] == arr[major_index]:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                major_index = i\n                count = 1\n\n    # Check majority element\n    return arr[major_index]",
        "question_3": "Write a Python function that takes an array of integers and returns the sorted array with the most common element in the middle.",
        "answer_3": "def medianMostCommon(arr):\n  # Count the number of occurences of every element\n  counts = {}\n  for element in arr:\n    if element in counts:\n      counts[element] += 1\n    else:\n      counts[element] = 1\n  \n  # Find the most common element\n  most_common_element = None\n  max_count = 0\n  for element, count in counts.items():\n    if count > max_count:\n      most_common_element = element\n      max_count = count\n\n  # Sort the array\n  sorted_arr = sorted(arr)\n\n  # Find the index of the most common element\n  index = sorted_arr.index(most_common_element)\n\n  # Swap the most common element and the middle element in the array\n  mid = len(sorted_arr) // 2\n  sorted_arr[index] = sorted_arr[mid]\n  sorted_arr[mid] = most_common_element\n\n  return sorted_arr\n\narr = [4, 5, 2, 5, 8, 5, 6, 5]\nresult = medianMostCommon(arr)\nprint(result) # [4, 5, 5, 5, 5, 6, 8, 2]",
        "full_code": "\ndef is_majority(arr, n, x):\n    # Step 1: Find the first occurrence of the element x in the sorted array\n    # We use binary search to efficiently find the first occurrence\n    def find_first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            # Check if the middle element is the first occurrence of x\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            # If x is greater, then it can only be present in the right subarray\n            elif arr[mid] < x:\n                return find_first_occurrence(arr, mid + 1, high, x)\n            # Else it can only be present in the left subarray\n            else:\n                return find_first_occurrence(arr, low, mid - 1, x)\n        return -1\n\n    # Step 2: Find the last occurrence of the element x in the sorted array\n    # We use binary search to efficiently find the last occurrence\n    def find_last_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            # Check if the middle element is the last occurrence of x\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            # If x is smaller, then it can only be present in the left subarray\n            elif arr[mid] > x:\n                return find_last_occurrence(arr, low, mid - 1, x)\n            # Else it can only be present in the right subarray\n            else:\n                return find_last_occurrence(arr, mid + 1, high, x)\n        return -1\n\n    # Step 3: Calculate the number of occurrences of x\n    first_index = find_first_occurrence(arr, 0, n - 1, x)\n    last_index = find_last_occurrence(arr, 0, n - 1, x)\n\n    # If the element is not found, it cannot be the majority element\n    if first_index == -1 or last_index == -1:\n        return False\n\n    # Step 4: Check if the number of occurrences is more than half of the array length\n    count = last_index - first_index + 1\n    return count > n // 2\n\n# Example usage:\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 224,
        "text": "Write a python function to count set bits of a given number.",
        "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Set_Bits(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Generate a code to find the number of 1-bits in an integer",
        "answer_3": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))",
        "full_code": "\ndef count_Set_Bits(n):\n    # Initialize a counter to keep track of the number of set bits\n    count = 0\n    \n    # Loop until the number becomes zero\n    while n:\n        # Check the least significant bit (LSB) of the number\n        # If the LSB is 1, increment the counter\n        count += n & 1\n        \n        # Right shift the number by 1 to process the next bit\n        n >>= 1\n    \n    # Return the total count of set bits\n    return count\n\n# Example usage:\n# n = 23 (binary: 10111)\n# print(count_Set_Bits(23))  # Output should be 4\n",
        "pass": "True"
    },
    {
        "task_id": 225,
        "text": "Write a python function to find the minimum element in a sorted and rotated array.",
        "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "test_list": [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Min(arr,low,high):",
        "question_1": "Create a program in Python that takes an array and finds the minimum value stored in it.",
        "answer_1": "arr = [34, 48, 19, 61, 3] \n  \n# Finds the minimum element \nprint (\"The minimum element is \" + str(min(arr)))",
        "question_2": "Design a selection sort algorithm in Python.",
        "answer_2": "def selection_sort(arr): \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]",
        "question_3": "Design an optimized selection sort algorithm in Python.",
        "answer_3": "def selection_sort(arr): \n    n = len(arr) \n    # Traverse through all array elements \n    for i in range(n): \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]",
        "full_code": "\ndef find_Min(arr, low, high):\n    # The array is sorted and rotated, so we need to find the pivot point where the rotation happened.\n    # The pivot is the point where the array is split into two sorted subarrays.\n    # The minimum element will be the first element of the second sorted subarray.\n\n    # If the array is not rotated at all, the minimum element is the first element.\n    if high < low:\n        return arr[0]\n\n    # If there is only one element left, it is the minimum.\n    if high == low:\n        return arr[low]\n\n    # Find the mid point\n    mid = int((low + high)/2)\n\n    # Check if element (mid+1) is the minimum element. Consider the cases like [3, 4, 5, 1, 2]\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    # Check if mid itself is the minimum element\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    # Decide whether we need to go to the left half or right half\n    # If the middle element is greater than the last element, the minimum element is in the right half\n    if arr[mid] > arr[high]:\n        return find_Min(arr, mid+1, high)\n    # Else the minimum element is in the left half\n    return find_Min(arr, low, mid-1)\n\n# Example usage:\narr = [4, 5, 6, 7, 1, 2, 3]\nprint(\"The minimum element is \" + str(find_Min(arr, 0, len(arr)-1)))\n",
        "pass": "True"
    },
    {
        "task_id": 226,
        "text": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_values_string(str):",
        "question_1": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_1": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_2": "Formulate a python code to remove the characters of odd index in a given string.",
        "answer_2": "def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe",
        "question_3": "Create a Python program to delete all characters at odd index in a given string.",
        "answer_3": "def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output",
        "full_code": "\ndef odd_values_string(str):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through the indices of the input string\n    for i in range(len(str)):\n        # Check if the index is even (i.e., not odd)\n        if i % 2 == 0:\n            # If the index is even, append the character at that index to the result string\n            result += str[i]\n    \n    # Return the resulting string with characters at odd indices removed\n    return result\n\n# Example usage:\n# print(odd_values_string(\"Hello World\"))  # Output: \"HloWrd\"\n",
        "pass": "True"
    },
    {
        "task_id": 227,
        "text": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_of_three(a,b,c):",
        "question_1": "Design a function in Python to find the minimum of three numbers.",
        "answer_1": "def find_min(a, b, c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nmin = find_min(2, -6, 4)\nprint(min)",
        "question_2": "Write a Python function that finds the smallest number among three numbers",
        "answer_2": "def find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2",
        "question_3": "Design an algorithm in Python to find the minimum of three values.",
        "answer_3": "def find_min(a, b, c): \n    min_val = a \n    if b < min_val: \n        min_val = b \n    if c < min_val: \n        min_val = c \n    return min_val \n\nprint(find_min(3, 2, 1)) # Output: 1",
        "full_code": "\ndef min_of_three(a, b, c):\n    # Step 1: Initialize a variable to hold the minimum value.\n    # We'll start by assuming 'a' is the smallest.\n    min_value = a\n\n    # Step 2: Compare 'b' with the current minimum value.\n    # If 'b' is smaller, update the minimum value.\n    if b < min_value:\n        min_value = b\n\n    # Step 3: Compare 'c' with the current minimum value.\n    # If 'c' is smaller, update the minimum value.\n    if c < min_value:\n        min_value = c\n\n    # Step 4: Return the minimum value found.\n    return min_value\n\n# Example usage:\n# This line is not part of the function but shows how to use it.\n# print(min_of_three(3, 2, 1))  # Output: 1\n",
        "pass": "True"
    },
    {
        "task_id": 228,
        "text": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):",
        "question_1": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_1": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "question_2": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_2": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "full_code": "\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Step 1: Validate the input range\n    # Ensure that the range (l to r) is valid, i.e., 1 <= l <= r <= number of bits in n\n    # This can be checked by ensuring that r is less than or equal to the number of bits required to represent n\n    if r > n.bit_length():\n        return False\n    \n    # Step 2: Create a mask for the given range\n    # We need to create a mask that has all bits set from bit l to bit r\n    # For example, if l=2 and r=4, the mask should be 0b11100 (binary)\n    # We can achieve this by shifting 1 left by (r-l+1) positions and subtracting 1, then shifting the result left by (l-1) positions\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Step 3: Apply the mask to the number n\n    # We need to check if all bits in the range l to r in n are set\n    # This can be done by ANDing n with the mask and checking if the result is equal to the mask\n    # If the result is equal to the mask, it means all bits in the range are set\n    return (n & mask) == mask\n\n# Example usage:\n# n = 0b1101101 (binary representation of 109)\n# l = 2, r = 4\n# The function should return True because bits 2 to 4 are set in n\nprint(all_Bits_Set_In_The_Given_Range(109, 2, 4))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 229,
        "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_arrange_array(arr, n):",
        "question_1": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_1": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)",
        "question_2": "Develop a Python program for reversing the order of a given array.",
        "answer_2": "def reverse_array(arr):\n  start = 0\n  end = len(arr) - 1\n  while start < end:\n    arr[start], arr[end] = arr[end], arr[start]\n    start += 1\n    end -= 1\n  return arr",
        "question_3": "Modify the following Python code to reverse the order of the elements in an array",
        "answer_3": "arr = arr[::-1]  # Reverses the order of elements in the array.",
        "full_code": "\ndef re_arrange_array(arr, n):\n    # Initialize two empty lists to hold negative and positive numbers\n    negatives = []\n    positives = []\n    \n    # Iterate through the input array\n    for num in arr:\n        # If the number is negative, append it to the negatives list\n        if num < 0:\n            negatives.append(num)\n        # If the number is positive, append it to the positives list\n        else:\n            positives.append(num)\n    \n    # Combine the negatives and positives lists to form the final array\n    # with all negative numbers appearing before positive numbers\n    rearranged_array = negatives + positives\n    \n    # Return the rearranged array\n    return rearranged_array\n\n# Example usage:\narr = [-5, 2, -7, 3, -4, 9]\nn = len(arr)\nresult = re_arrange_array(arr, n)\nprint(result)\n",
        "pass": "False"
    },
    {
        "task_id": 230,
        "text": "Write a function to replace blank spaces with any character in a string.",
        "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_blank(str1,char):",
        "question_1": "Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.",
        "answer_1": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))",
        "question_2": "Develop a python function which replaces all whitespaces in a given string with a different character.",
        "answer_2": "def replace_whitespaces(string, character):\n    return string.replace(\" \", character)",
        "question_3": "Create a program in Python to strip all white spaces from a given string.",
        "answer_3": "def strip_whitespace(string):\n  return string.replace(' ', '')",
        "full_code": "\ndef replace_blank(str1, char):\n    # Step 1: Identify the task - We need to replace all blank spaces in the string 'str1' with the character 'char'.\n    # Step 2: Use the built-in string method 'replace' which can replace all occurrences of a specified substring with another substring.\n    # Step 3: The method 'replace' takes two arguments: the substring to be replaced (' ' in this case) and the substring to replace it with (char).\n    # Step 4: Return the modified string.\n    \n    return str1.replace(' ', char)\n\n# Example usage:\n# str1 = \"Hello World\"\n# char = \"X\"\n# print(replace_blank(str1, char))  # Output: \"HelloXWorld\"\n",
        "pass": "True"
    },
    {
        "task_id": 231,
        "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "test_list": [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(tri, n):",
        "question_1": "Improve the following Python program to reduce its time complexity.",
        "answer_1": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum",
        "question_2": "Create a function in Python that will take an array of integers and find the two numbers with the largest sum.",
        "answer_2": "def findMaxSum(input):\n    num1 = -float('inf')\n    num2 = -float('inf')\n    for num in input:\n        if num > num1:\n            num2 = num1\n            num1 = num\n        elif num > num2:\n            num2 = num\n    return num1 + num2",
        "question_3": "Refactor this piece of Python code to increase its readability.",
        "answer_3": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum",
        "full_code": "\ndef max_sum(tri, n):\n    # Step 1: Create a copy of the triangle to store the maximum sums at each position.\n    # This will help us avoid modifying the original triangle.\n    max_sums = [[0] * (i + 1) for i in range(n)]\n    \n    # Step 2: Initialize the bottom row of the max_sums with the values from the original triangle.\n    # This is because the maximum sum at the bottom row is simply the value itself.\n    for i in range(n):\n        max_sums[n-1][i] = tri[n-1][i]\n    \n    # Step 3: Traverse the triangle from the second last row to the top.\n    # For each element, calculate the maximum sum possible by adding the current element\n    # to the maximum of the two possible elements from the row below.\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # The maximum sum at position (i, j) is the value at (i, j) plus\n            # the maximum of the sums at positions (i+1, j) and (i+1, j+1).\n            max_sums[i][j] = tri[i][j] + max(max_sums[i+1][j], max_sums[i+1][j+1])\n    \n    # Step 4: The maximum sum for the entire triangle will be found at the top of the max_sums triangle.\n    return max_sums[0][0]\n\n# Example usage:\ntri = [\n    [3],\n    [7, 4],\n    [2, 4, 6],\n    [8, 5, 9, 3]\n]\nn = 4\nprint(max_sum(tri, n))  # Output should be 23 (3 + 7 + 4 + 9)\n",
        "pass": "True"
    },
    {
        "task_id": 232,
        "text": "Write a function to get the n largest items from a dataset.",
        "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "test_list": [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef larg_nnum(list1,n):",
        "question_1": "Create a lambda expression in Python to return the largest number from a list of numbers.",
        "answer_1": "largestNum = lambda a: max(a)",
        "question_2": "Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.",
        "answer_2": "def getLargestNum(nums):\n    largestNum = nums[0]\n    \n    for num in nums[1:]:\n        if num > largestNum:\n            largestNum = num\n\n    return largestNum",
        "question_3": "Create a function in Python to get the largest element in a given list.",
        "answer_3": "def get_largest_element(nums):\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\n\n# Test the function\nnumbers = [4,8,2,9,10]\nprint(get_largest_element(numbers)) # Output: 10",
        "full_code": "\nimport heapq\n\ndef larg_nnum(list1, n):\n    # Step 1: Check if the input list is empty or if n is greater than the length of the list\n    # If either condition is true, return an empty list as it's not possible to find n largest elements\n    if not list1 or n > len(list1):\n        return []\n    \n    # Step 2: Use the heapq.nlargest function to find the n largest elements in the list\n    # heapq.nlargest returns a list of the n largest elements, sorted in descending order\n    largest_n_elements = heapq.nlargest(n, list1)\n    \n    # Step 3: Return the list of n largest elements\n    return largest_n_elements\n\n# Example usage:\n# numbers = [4, 8, 2, 9, 10, 3, 7]\n# print(larg_nnum(numbers, 3))  # Output: [10, 9, 8]\n",
        "pass": "True"
    },
    {
        "task_id": 233,
        "text": "Write a function to find the lateral surface area of a cylinder.",
        "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "test_list": [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsuface_cylinder(r,h):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Rewrite the code in Python to improve its readability.",
        "answer_3": "import math\n\ndef calculate_area(radius):\n    return math.pi * (radius ** 2)",
        "full_code": "\ndef lateralsurface_cylinder(r, h):\n    # Step 1: Understand the formula for lateral surface area of a cylinder\n    # The lateral surface area (LSA) of a cylinder is given by the formula:\n    # LSA = 2 * \u03c0 * r * h\n    # where r is the radius of the base of the cylinder and h is the height of the cylinder.\n\n    # Step 2: Import the math module to use the value of \u03c0 (pi)\n    import math\n\n    # Step 3: Calculate the lateral surface area using the formula\n    # LSA = 2 * \u03c0 * r * h\n    # Here, math.pi gives us the value of \u03c0\n    LSA = 2 * math.pi * r * h\n\n    # Step 4: Return the calculated lateral surface area\n    return LSA\n\n# The function definition and code are complete.\n# This string can be directly executed using exec().\n",
        "pass": "False"
    },
    {
        "task_id": 234,
        "text": "Write a function to find the volume of a cube.",
        "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cube(l):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Create a python program to compute the volume of a cube given its edge length as an input.",
        "answer_2": "length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)",
        "question_3": "Optimize a Python program to calculate the volume of a cube.",
        "answer_3": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "full_code": "\ndef volume_cube(l):\n    # Step 1: Understand the formula for the volume of a cube\n    # The volume V of a cube is given by V = l^3, where l is the length of an edge.\n    \n    # Step 2: Implement the formula in Python\n    # We will use the exponentiation operator (**) to raise the edge length to the power of 3.\n    \n    # Step 3: Return the calculated volume\n    # The result of l ** 3 will be the volume, which we will return.\n    \n    return l ** 3\n\n# The function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 235,
        "text": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_set_number(n):",
        "question_1": "Design a program in Python that prints the even numbers from 0 to 100.",
        "answer_1": "for i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)",
        "question_2": "Write a script in python that outputs all even numbers between 0 and 10.",
        "answer_2": "for number in range(0,11):\n  if (number % 2 == 0):\n    print(number)",
        "question_3": "Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.",
        "answer_3": "def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "full_code": "\ndef even_bit_set_number(n):\n    # Step 1: Create a mask that has all even bits set to 1.\n    # We can achieve this by creating a number where all bits at even positions are 1.\n    # For example, for 8-bit numbers, the mask would be 01010101 (binary) or 85 (decimal).\n    # To generalize this, we can use the formula: mask = sum(2**(2*i) for i in range(0, bit_length//2))\n    # Here, bit_length is the number of bits required to represent the number n.\n    bit_length = n.bit_length()\n    mask = sum(2**(2*i) for i in range(0, bit_length//2))\n    \n    # Step 2: Use the mask to set all even bits in the number n.\n    # We can do this by performing a bitwise OR operation between n and the mask.\n    # This will ensure that all even bits in n are set to 1, while odd bits remain unchanged.\n    result = n | mask\n    \n    # Step 3: Return the resulting number.\n    return result\n\n# The function is now complete and can be executed directly.\n",
        "pass": "False"
    },
    {
        "task_id": 236,
        "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "test_list": [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def No_of_Triangle(N,K):",
        "question_1": "Create a Python program to identify the type of triangles given three sides.",
        "answer_1": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_2": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_2": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_3": "Create a Python program to implement the triangle numbers.",
        "answer_3": "def triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15",
        "full_code": "\ndef No_of_Triangle(N, K):\n    # N is the size of the larger equilateral triangle\n    # K is the size of the smaller equilateral triangles we want to count\n    \n    # Step 1: Calculate the number of smaller triangles that can fit along one side of the larger triangle\n    # The number of smaller triangles that fit along one side of the larger triangle is N // K\n    num_small_triangles_per_side = N // K\n    \n    # Step 2: Calculate the total number of smaller triangles that can fit within the larger triangle\n    # Since the smaller triangles are also equilateral, the total number of smaller triangles that can fit\n    # within the larger triangle is the sum of the first (num_small_triangles_per_side) natural numbers\n    # This is because the number of smaller triangles that can fit in each row of the larger triangle\n    # decreases by 1 as we move down the rows (similar to the pattern in triangle numbers)\n    \n    # Calculate the sum of the first (num_small_triangles_per_side) natural numbers\n    total_small_triangles = (num_small_triangles_per_side * (num_small_triangles_per_side + 1)) // 2\n    \n    # Step 3: Return the total number of smaller triangles\n    return total_small_triangles\n\n# Example usage:\n# N = 9, K = 3\n# The larger triangle has a side length of 9, and the smaller triangles have a side length of 3\n# The number of smaller triangles that can fit along one side of the larger triangle is 9 // 3 = 3\n# The total number of smaller triangles that can fit within the larger triangle is 3 + 2 + 1 = 6\n\n# Uncomment the following lines to test the function\n# N = 9\n# K = 3\n# print(No_of_Triangle(N, K))  # Output should be 6\n```\n\nThis code defines a function `No_of_Triangle` that calculates the maximum number of smaller equilateral triangles that can be formed within a given larger equilateral triangle. The function uses the properties of triangle numbers to determine the total number of smaller triangles that fit within the larger one. The thinking process is explained step by step in the comments.",
        "pass": "Error"
    },
    {
        "task_id": 237,
        "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef check_occurences(test_list):",
        "question_1": "Optimize this Python function to improve its running time.",
        "answer_1": "def find_duplicates(a):\n    seen = set()\n    result = []\n    for num in a:\n        if num in seen:\n            result.append(num)\n        else:\n            seen.add(num)\n    return result",
        "question_2": "How can you reduce the complexity of the following Python code?",
        "answer_2": "def find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates",
        "question_3": "Suggest an improvement to the following python program.",
        "answer_3": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for elem in lst:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates",
        "full_code": "\nfrom collections import Counter\n\ndef check_occurences(test_list):\n    # Step 1: Initialize a Counter object to count the occurrences of each tuple in the list\n    # Counter is a dictionary subclass where elements are stored as dictionary keys and their counts are stored as dictionary values.\n    count = Counter(test_list)\n    \n    # Step 2: Create a dictionary to store tuples that occur the same number of times\n    # The key will be the number of occurrences, and the value will be a list of tuples that occur that many times.\n    occurrences = {}\n    \n    # Step 3: Iterate over the items in the Counter to populate the occurrences dictionary\n    for tuple_, count in count.items():\n        if count not in occurrences:\n            occurrences[count] = []\n        occurrences[count].append(tuple_)\n    \n    # Step 4: Return the occurrences dictionary\n    # This dictionary will contain the number of occurrences as keys and lists of tuples as values.\n    return occurrences\n\n# Example usage:\n# test_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4)]\n# print(check_occurences(test_list))\n# Output: {2: [(1, 2), (3, 4)], 1: [(5, 6)]}\n",
        "pass": "False"
    },
    {
        "task_id": 238,
        "text": "Write a python function to count number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def number_of_substrings(str):",
        "question_1": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.",
        "answer_1": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "question_2": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_2": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))",
        "question_3": "Generate an algorithm to count substrings in Python.",
        "answer_3": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "full_code": "\ndef number_of_substrings(str):\n    # Step 1: Initialize a counter to keep track of the number of non-empty substrings.\n    count = 0\n    \n    # Step 2: Iterate over each possible starting position of the substring in the given string.\n    for start in range(len(str)):\n        # Step 3: For each starting position, iterate over each possible ending position of the substring.\n        for end in range(start, len(str)):\n            # Step 4: Increment the counter for each unique substring found.\n            count += 1\n    \n    # Step 5: Return the total count of non-empty substrings.\n    return count\n\n# Example usage:\n# str = \"abc\"\n# print(number_of_substrings(str))  # Output should be 6 (a, b, c, ab, bc, abc)\n",
        "pass": "True"
    },
    {
        "task_id": 239,
        "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_total_number_of_sequences(m,n):",
        "question_1": "Edit a Python program to sort an array of size n with m different types of numbers in ascending order.",
        "answer_1": "# Sort an array with m different types of elements\ndef sort_array(arr):\n    # Get the number of different types of elements \n    m = len(set(arr)) \n    n = len(arr) \n  \n    # Create an output array of size n\n    output = [0] * (n) \n   \n    # Store count of individual numbers in \n    # count array \n    count = [0] * (m) \n    for i in range(0, n): \n        count[arr[i]] += 1\n   \n    # finding cummulative count \n    for i in range(1, m): \n        count[i] += count[i - 1] \n  \n    # Inserting values in sorted array\n    for i in range(n - 1, -1, -1): \n        output[count[arr[i]] - 1] = arr[i] \n        count[arr[i]] -= 1\n   \n    return output \n\n# Driver Code \narr = [2, 1, 1, 3, 6, 4, 5, 5]\nsorted_arr = sort_array(arr) \n  \n# Printing the sorted array \nprint(*sorted_arr)",
        "question_2": "Write a python program to find the Longest Common Subsequence (LCS) of two sequences",
        "answer_2": "def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))",
        "question_3": "Create a function in Python that takes an integer route x as input and returns all possible subsequences of length x.",
        "answer_3": "def subsequences(x):\n subs = []\n for i in range(1<<x):\n sub = []\n for j in range(x):\n if (i & (1 << j)) > 0:\n sub.append(j)\n subs.append(sub)\n return subs",
        "full_code": "\ndef get_total_number_of_sequences(m, n):\n    # This function will calculate the number of possible sequences of length n\n    # such that each of the next element is greater than or equal to twice of the \n    # previous element but less than or equal to m.\n\n    # We will use a recursive approach with memoization to avoid redundant calculations.\n    # Let's define a helper function that will do the actual recursion.\n\n    # Memoization dictionary to store results of subproblems\n    memo = {}\n\n    def count_sequences(current_length, previous_value):\n        # Base case: if the current length of the sequence is n, we have found a valid sequence\n        if current_length == n:\n            return 1\n        \n        # Check if the result for this subproblem is already computed\n        if (current_length, previous_value) in memo:\n            return memo[(current_length, previous_value)]\n        \n        # Initialize the count of valid sequences starting from this point\n        count = 0\n        \n        # Calculate the minimum and maximum possible values for the next element\n        min_next_value = 2 * previous_value if current_length > 0 else 1\n        max_next_value = m\n        \n        # Iterate over all possible values for the next element\n        for next_value in range(min_next_value, max_next_value + 1):\n            # Recursively count the number of valid sequences starting from this next value\n            count += count_sequences(current_length + 1, next_value)\n        \n        # Store the result in the memoization dictionary\n        memo[(current_length, previous_value)] = count\n        \n        return count\n\n    # Start the recursion with an empty sequence (current_length = 0) and no previous value\n    return count_sequences(0, 0)\n\n# Example usage:\n# m = 10, n = 3\n# The function should return the number of sequences of length 3 where each element is \n# greater than or equal to twice the previous element but less than or equal to 10.\nprint(get_total_number_of_sequences(10, 3))\n",
        "pass": "True"
    },
    {
        "task_id": 240,
        "text": "Write a function to replace the last element of the list with another list.",
        "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_list(list1,list2):",
        "question_1": "Design aPython program to replace the last element in a list with another list.",
        "answer_1": "def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1",
        "question_2": "Write a Python code snippet to remove the last element from a list.",
        "answer_2": "def remove_last_element(lst):\n    last_index = len(lst) - 1\n    del lst[last_index]\n\nexample_list = [3, 1, 5, 7, 4, 8, 2]\nremove_last_element(example_list)\nprint(example_list) \n# Output: [3, 1, 5, 7, 4, 8]",
        "question_3": "Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.",
        "answer_3": "def move_last_3(list):\n  last3 = list[-3:]\n  del list[-3:]\n  list = last3 + list\n  return list",
        "full_code": "\ndef replace_list(list1, list2):\n    # Step 1: Check if list1 is not empty to avoid index errors\n    if len(list1) > 0:\n        # Step 2: Replace the last element of list1 with list2\n        # We use slicing to replace the last element with the entire list2\n        list1[-1:] = list2\n    # Step 3: Return the modified list1\n    return list1\n\n# Example usage:\n# list1 = [1, 2, 3, 4]\n# list2 = [5, 6]\n# print(replace_list(list1, list2))  # Output: [1, 2, 3, [5, 6]]\n",
        "pass": "True"
    },
    {
        "task_id": 241,
        "text": "Write a function to generate a 3d array having each element as '*'.",
        "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "test_list": [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def array_3d(m,n,o):",
        "question_1": "How would you create a 3D Array in python?",
        "answer_1": "A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:\n\narray_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],\n                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],\n                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])",
        "question_2": "Generate a 3D array of size 2 x 3 x 2 in Python.",
        "answer_2": "import numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x)",
        "question_3": "Write a Python program to create a 3x3x3 array (3D array) filled with zeros.",
        "answer_3": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)",
        "full_code": "\ndef array_3d(m, n, o):\n    # Import the numpy library to use its array creation functionalities\n    import numpy as np\n    \n    # Create a 3D array filled with zeros of shape (m, n, o)\n    # This will be the base array that we will modify\n    arr = np.zeros((m, n, o), dtype=object)\n    \n    # Iterate over each element in the 3D array\n    # Since numpy arrays are mutable, we can directly modify each element\n    for i in range(m):\n        for j in range(n):\n            for k in range(o):\n                # Set each element to '*'\n                arr[i, j, k] = '*'\n    \n    # Return the modified 3D array\n    return arr\n\n# Example usage:\n# array_3d(2, 3, 2) will generate a 2x3x2 array with each element as '*'\n",
        "pass": "False"
    },
    {
        "task_id": 242,
        "text": "Write a function to count total characters in a string.",
        "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_charac(str1):",
        "question_1": "Write a Python program to calculate the total number of characters in a given string.",
        "answer_1": "def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "question_2": "Generate a Python function to count and print the total number of characters in a string.",
        "answer_2": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    print(\"Total number of characters:\", count)",
        "question_3": "Given a string and a character, write a Python function to count the number of occurrences of the character in the string.",
        "answer_3": "def count_characters(string, char):\n    return sum([1 for x in string if x == char])",
        "full_code": "\ndef count_charac(str1):\n    # Initialize a variable to keep track of the count of characters\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # For each character, increment the count by 1\n        count += 1\n    \n    # Return the total count of characters\n    return count\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 243,
        "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "test_list": [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_on_occurence(lst):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_2": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])",
        "question_3": "Write a python program to sort a given list of tuples based on its first element in increasing order.",
        "answer_3": "def sortTuplesByFirstElement(lst):\n    lst.sort(key = lambda x: x[0])\n    return lst\n\nsortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])\nprint(sortedList)",
        "full_code": "\ndef sort_on_occurence(lst):\n    # Step 1: Create a dictionary to count the occurrences of each first element in the tuples\n    # This will help us determine the frequency of each first element\n    occurrence_count = {}\n    for tup in lst:\n        first_element = tup[0]\n        if first_element in occurrence_count:\n            occurrence_count[first_element] += 1\n        else:\n            occurrence_count[first_element] = 1\n    \n    # Step 2: Sort the list of tuples based on the occurrence count of their first elements\n    # We will use the sorted function with a custom key that accesses the occurrence count from our dictionary\n    sorted_lst = sorted(lst, key=lambda x: occurrence_count[x[0]])\n    \n    # Step 3: Return the sorted list\n    return sorted_lst\n\n# Example usage:\n# sortedList = sort_on_occurence([(1, 'a'), (2, 'b'), (1, 'c'), (3, 'd'), (2, 'e'), (1, 'f')])\n# print(sortedList)\n",
        "pass": "False"
    },
    {
        "task_id": 244,
        "text": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef next_Perfect_Square(N):",
        "question_1": "Design an algorithm in Python that checks whether a given number is a perfect square.",
        "answer_1": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n",
        "question_2": "Suggest a completion for a python function to find the square of a given number.",
        "answer_2": "def square(num):\n    return num**2",
        "question_3": "Design an algorithm to check if a number is a perfect square in Python.",
        "answer_3": "import math \n  \ndef isPerfectSquare(n): \n    # Find floating point value of \n    # square root of x. \n    sqr = math.sqrt(n) \n   \n    # If square root is an integer \n    return (sqr - math.floor(sqr) == 0) \n  \n# Driver program \nx = 25\nif(isPerfectSquare(x)): \n    print(x, \"is a perfect square\") \nelse: \n    print(x, \"is not a perfect square\")",
        "full_code": "\nimport math  \n\ndef next_Perfect_Square(N):\n    # Step 1: Find the square root of the given number N\n    # Reasoning: To find the next perfect square, we need to know the current integer part of the square root.\n    sqrt_N = math.sqrt(N)\n    \n    # Step 2: Check if the square root is an integer\n    # Reasoning: If the square root is already an integer, we need to increment it by 1 to find the next perfect square.\n    if sqrt_N.is_integer():\n        next_int = int(sqrt_N) + 1\n    else:\n        # Step 3: If the square root is not an integer, take the ceiling of the square root\n        # Reasoning: The ceiling value will give us the smallest integer greater than the square root, which will be the base for the next perfect square.\n        next_int = math.ceil(sqrt_N)\n    \n    # Step 4: Calculate the next perfect square\n    # Reasoning: The next perfect square is the square of the next integer we found.\n    next_perfect_square = next_int ** 2\n    \n    return next_perfect_square\n\n# Example usage:\n# N = 25\n# print(next_Perfect_Square(N))  # Output should be 36\n",
        "pass": "True"
    },
    {
        "task_id": 245,
        "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(arr, n):",
        "question_1": "Write a Python program to find the maximum sum of any continous subarray.",
        "answer_1": "def maxSubarrySum(arr):\n  cur_max = 0\n  global_max = 0\n  \n  for i in arr:\n    cur_max = max(cur_max + i, 0)\n    global_max = max(global_max, cur_max)\n    \n  return global_max\n  \n# test\narr = [1, -2, 3, 4, -5]\nprint(maxSubarrySum(arr))\n\n# output: 7",
        "question_2": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_2": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_3": "Generate a correct Python program to compute the maximum sub array sum",
        "answer_3": "def max_sub_array_sum(arr): \n    max_sum = 0\n    for i in range(len(arr)): \n        ans = 0\n        for j in range(i, len(arr)): \n            ans += arr[j]  \n            max_sum = max(max_sum, ans) \n    return max_sum",
        "full_code": "\ndef max_sum(arr, n):\n    # Step 1: Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    # inc_sum[i] will store the maximum sum of increasing subsequence ending at index i\n    # dec_sum[i] will store the maximum sum of decreasing subsequence starting at index i\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n\n    # Step 2: Compute the maximum sum of increasing subsequence for each element\n    for i in range(n):\n        inc_sum[i] = arr[i]  # Start with the element itself\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n\n    # Step 3: Compute the maximum sum of decreasing subsequence for each element\n    for i in range(n-1, -1, -1):\n        dec_sum[i] = arr[i]  # Start with the element itself\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n\n    # Step 4: Compute the maximum sum of bi-tonic subsequence\n    # A bi-tonic subsequence is a sequence that first increases and then decreases\n    # The maximum sum of such a subsequence will be the sum of the maximum increasing subsequence\n    # ending at some index i and the maximum decreasing subsequence starting at the same index i,\n    # minus the value of the element at index i (since it is counted twice)\n    max_bi_tonic_sum = 0\n    for i in range(n):\n        max_bi_tonic_sum = max(max_bi_tonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n\n    return max_bi_tonic_sum\n\n# Example usage:\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nn = len(arr)\nprint(max_sum(arr, n))\n",
        "pass": "True"
    },
    {
        "task_id": 246,
        "text": "Write a function for computing square roots using the babylonian method.",
        "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def babylonian_squareroot(number):",
        "question_1": "Create a Python program to find the square root of a number without using the square root function.",
        "answer_1": "# A function to calculate the Square Root of a number using \n# the babylonian method \ndef sqrt(n): \n\t\n\t# We are using n itself as initial approximation \n\t# This can definitely be improved \n\tx = n \n\ty = 1\n\t\n\t# e decides the accuracy level \n\te = 0.000001\n\t\n\twhile(x - y > e): \n\t\tx = (x + y)/2\n\t\ty = n/x \n\n\treturn x \n\n# Driver Program \nnum = 25\nprint(sqrt(num))",
        "question_2": "Edit the following Python program to compute the square root of a given number.",
        "answer_2": "def square_root(number):\n    return number ** 0.5",
        "question_3": "Create a python program to implement an algorithm to find the square root of a given number",
        "answer_3": "def sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x/result) / 2\n    return result",
        "full_code": "\ndef babylonian_squareroot(number):\n    # Step 1: Initialize the initial guess for the square root.\n    # We can use the number itself as the initial guess, which is a common approach.\n    guess = number\n    \n    # Step 2: Define a tolerance level for the approximation.\n    # This will determine how close our guess needs to be to the actual square root.\n    tolerance = 0.000001\n    \n    # Step 3: Implement the Babylonian method (also known as Heron's method).\n    # This method iteratively improves the guess by averaging the guess and the number divided by the guess.\n    while True:\n        # Calculate the next guess by averaging the current guess and the number divided by the current guess.\n        next_guess = (guess + number / guess) / 2\n        \n        # Step 4: Check if the difference between the current guess and the next guess is within the tolerance level.\n        # If it is, we consider the next guess to be close enough to the actual square root.\n        if abs(next_guess - guess) < tolerance:\n            break\n        \n        # Step 5: Update the guess to the next guess for the next iteration.\n        guess = next_guess\n    \n    # Step 6: Return the final guess as the approximate square root.\n    return guess\n\n# Example usage:\n# print(babylonian_squareroot(25))  # Should print approximately 5.0\n",
        "pass": "False"
    },
    {
        "task_id": 247,
        "text": "Write a function to find the longest palindromic subsequence in the given string.",
        "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lps(str):",
        "question_1": "Write a Python program to find the longest palindromic subsequence of a given string.",
        "answer_1": "def longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]",
        "question_2": "Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome.",
        "answer_2": "def longest_palindrome(x):\n    longest = ''\n    for i in range(len(x)):\n        j = i + len(longest) + 1\n        while j <= len(x):\n            substring = x[i:j]\n            if substring == substring[::-1] and len(substring) > len(longest):\n                longest = substring\n            j = j + 1\n    return longest",
        "question_3": "Implement an algorithm in Python to find the longest palindromic substring from a given string.",
        "answer_3": "def longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)",
        "full_code": "\ndef lps(str):\n    # Step 1: Initialize a 2D list (dp) to store the length of the longest palindromic subsequence\n    # dp[i][j] will store the length of the longest palindromic subsequence in the substring str[i:j+1]\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Step 2: Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Step 3: Check for palindromic subsequences of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    \n    # Step 4: Fill the dp table for subsequences of length greater than 2\n    # We start from length 3 and go up to the length of the string\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            # If the characters at the ends of the substring are the same,\n            # the longest palindromic subsequence is the longest palindromic subsequence\n            # of the substring excluding these two characters plus 2 (for these two characters)\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                # If the characters at the ends are not the same,\n                # the longest palindromic subsequence is the maximum of the longest palindromic\n                # subsequences of the substrings excluding one of the characters at a time\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    # Step 5: The length of the longest palindromic subsequence of the entire string is stored in dp[0][n-1]\n    return dp[0][n-1]\n\n# Example usage:\n# print(lps(\"character\"))  # Output should be the length of the longest palindromic subsequence\n",
        "pass": "True"
    },
    {
        "task_id": 248,
        "text": "Write a function to calculate the harmonic sum of n-1.",
        "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def harmonic_sum(n):",
        "question_1": "Develop a Python program that computes the sum of integers from 1 to n.",
        "answer_1": "def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))",
        "question_2": "Write a Python function to calculate the sum of the natural numbers up to n.",
        "answer_2": "def sum_natural_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_natural_numbers(n - 1)",
        "question_3": "Create a program in Python to calculate the sum of the first n positive integers, using recursion.",
        "answer_3": "def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)",
        "full_code": "\ndef harmonic_sum(n):\n    # The harmonic sum of n-1 is the sum of the reciprocals of the first (n-1) natural numbers.\n    # For example, if n = 4, the harmonic sum of n-1 would be 1/1 + 1/2 + 1/3.\n    \n    # Base case: If n is 1, the harmonic sum of n-1 is 0 because there are no natural numbers less than 1.\n    if n == 1:\n        return 0\n    \n    # Recursive case: The harmonic sum of n-1 is the harmonic sum of (n-2) plus the reciprocal of (n-1).\n    # This can be expressed as harmonic_sum(n-1) = harmonic_sum(n-2) + 1/(n-1).\n    else:\n        return harmonic_sum(n-1) + 1/(n-1)\n\n# Example usage:\n# result = harmonic_sum(4)\n# print(result)  # Output should be 1/1 + 1/2 + 1/3 = 1.8333...\n",
        "pass": "False"
    },
    {
        "task_id": 249,
        "text": "Write a function to find the intersection of two arrays using lambda function.",
        "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_array(array_nums1,array_nums2):",
        "question_1": "Design an algorithm in Python to compute the intersection of two given arrays.",
        "answer_1": "def intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))",
        "question_2": "Generate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.",
        "answer_2": "def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 7]\n\nprint(intersection(list1, list2)) # [2, 4]",
        "question_3": "Write a Python code to get the intersection of two given arrays.",
        "answer_3": "def intersection_arr(arr1, arr2):\n    # create an empty list for storing the elements\n    result = []\n    \n    for element in arr1:\n        if element in arr2: \n            result.append(element)\n    \n    return result\n\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nintersect = intersection_arr(a, b)\nprint(intersect)",
        "full_code": "\ndef intersection_array(array_nums1, array_nums2):\n    # Step 1: Convert both arrays to sets to leverage set operations\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Step 2: Use a lambda function to filter elements that are in both sets\n    # The lambda function will take an element and check if it is in set2\n    intersection_filter = lambda x: x in set2\n    \n    # Step 3: Apply the lambda function to filter elements from set1\n    # This will give us the intersection of the two sets\n    intersection_set = filter(intersection_filter, set1)\n    \n    # Step 4: Convert the result back to a list (if needed)\n    intersection_list = list(intersection_set)\n    \n    return intersection_list\n\n# Example usage:\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [3, 4, 5, 6, 7]\n\nprint(intersection_array(array_nums1, array_nums2))  # Output: [3, 4, 5]\n",
        "pass": "True"
    },
    {
        "task_id": 250,
        "text": "Write a python function to count the occcurences of an element in a tuple.",
        "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_X(tup, x):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_2": "def count_elements(arr): \n    return len(arr)",
        "question_3": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_3": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "full_code": "\ndef count_X(tup, x):\n    # Initialize a counter to keep track of the occurrences of the element 'x'\n    count = 0\n    \n    # Iterate through each element in the tuple 'tup'\n    for element in tup:\n        # Check if the current element is equal to 'x'\n        if element == x:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the final count of occurrences of 'x' in the tuple\n    return count\n",
        "pass": "True"
    },
    {
        "task_id": 251,
        "text": "Write a function to insert an element before each element of a list.",
        "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def insert_element(list,element):",
        "question_1": "Write a Python program to insert an element at the beginning of a given list.",
        "answer_1": "def insert_at_beginning(list, element):\n    list.insert(0, element)\n    return list",
        "question_2": "Write a Python function to insert an element in a given list after a given index.",
        "answer_2": "def insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list",
        "question_3": "Write a Python function to insert a list of elements into a given list according to the given index.",
        "answer_3": "def insert_list(list, index, elements): \n    return (list[0:index] + elements + list[index:])",
        "full_code": "\ndef insert_element(list, element):\n    # Step 1: Initialize an empty list to store the result\n    result = []\n    \n    # Step 2: Iterate through each item in the original list\n    for item in list:\n        # Step 3: Append the element to be inserted before the current item\n        result.append(element)\n        # Step 4: Append the current item to the result list\n        result.append(item)\n    \n    # Step 5: Return the final result list\n    return result\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef insert_element(list, element):\n    # Step 1: Initialize an empty list to store the result\n    result = []\n    \n    # Step 2: Iterate through each item in the original list\n    for item in list:\n        # Step 3: Append the element to be inserted before the current item\n        result.append(element)\n        # Step 4: Append the current item to the result list\n        result.append(item)\n    \n    # Step 5: Return the final result list\n    return result\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 252,
        "text": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath  \r\ndef convert(numbers):",
        "question_1": "Generate a Python program to convert an array from the cartesian to the polar coordinate system.",
        "answer_1": "def cartesian_to_polar(arr):\n    x = arr[0]\n    y = arr[1]\n \n    radius = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n \n    return [radius, theta]\n    \narr = [1, 2]\nresult = cartesian_to_polar(arr)\nprint(result)",
        "question_2": "Generate a Python function to convert radar data in polar coordinates into Cartesian coordinates.",
        "answer_2": "def polar_to_cartesian(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y",
        "question_3": "Create a class in Python to represent a complex number.",
        "answer_3": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary)",
        "full_code": "\nimport cmath  \n\ndef convert(numbers):\n    # Initialize an empty list to store the polar coordinates\n    polar_coords = []\n    \n    # Iterate over each complex number in the input list\n    for number in numbers:\n        # Use the cmath.polar function to convert the complex number to polar coordinates\n        # cmath.polar returns a tuple (r, phi) where r is the magnitude (radius) and phi is the phase angle\n        polar = cmath.polar(number)\n        \n        # Append the polar coordinates to the list\n        polar_coords.append(polar)\n    \n    # Return the list of polar coordinates\n    return polar_coords\n\n# Example usage:\n# numbers = [1+2j, 3+4j]\n# result = convert(numbers)\n# print(result)  # Output: [(2.23606797749979, 1.1071487177940904), (5.0, 0.9272952180016122)]\n",
        "pass": "False"
    },
    {
        "task_id": 253,
        "text": "Write a python function to count integers from a given list.",
        "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_integer(list1):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Write a Python function to input a list of integers and a number and output the number of times that number appears in the list.",
        "answer_2": "def count_occurrences(numbers, n):\n count = 0\n for num in numbers:\n if num == n:\n count += 1\n return count",
        "question_3": "Rewrite a given Python program to be more efficient.",
        "answer_3": "my_list = [1,2,3,4,5,6]\n\n# Use the sum() function to get the sum of a given list\ncount = sum(my_list)\n\nprint(count)",
        "full_code": "\ndef count_integer(list1):\n    # Initialize a variable to store the count of integers\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in list1:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If it is an integer, increment the count\n            count += 1\n    \n    # Return the total count of integers in the list\n    return count\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 254,
        "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "test_list": [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef words_ae(text):",
        "question_1": "Create a Python function to print out all the words in a given string with the letter e.",
        "answer_1": "def print_words_with_e(str): \n    words = str.split() \n    for word in words: \n        if 'e' in word: \n            print(word) \n\nprint_words_with_e(str)",
        "question_2": "Construct a Python function to filter out all the words from a list that contains the letter \"a\".",
        "answer_2": "def filter_words_with_a(words):\n return [word for word in words if \"a\" in word]",
        "question_3": "Develop a Python program to find all possible words from a set of characters",
        "answer_3": "def findWords(string):\n    results = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            results.append(string[i:j])\n    return results\n\nstring = \"abcd\"\nprint(findWords(string))",
        "full_code": "\nimport re\n\ndef words_ae(text):\n    # Step 1: Split the input text into individual words\n    # We use the split() method to break the text into words based on whitespace\n    words = text.split()\n    \n    # Step 2: Initialize an empty list to store words that start with 'a' or 'e'\n    filtered_words = []\n    \n    # Step 3: Iterate over each word in the list of words\n    for word in words:\n        # Step 4: Check if the word starts with 'a' or 'e'\n        # We use regular expressions to match the word that starts with 'a' or 'e'\n        if re.match(r'^[ae]', word, re.IGNORECASE):\n            # Step 5: If the word matches, add it to the filtered_words list\n            filtered_words.append(word)\n    \n    # Step 6: Return the list of filtered words\n    return filtered_words\n\n# Example usage:\n# text = \"apple elephant banana cherry\"\n# print(words_ae(text))  # Output: ['apple', 'elephant', 'banana']\n",
        "pass": "False"
    },
    {
        "task_id": 255,
        "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):",
        "question_1": "Write a Python program to generate all combinations of three given numbers.",
        "answer_1": "def combinations(lst, n):\n  # generate all the combinations\n  # we use the itertools library to do this\n  from itertools import combinations\n   \n  # generate all the combinations of length three\n  combinations = list(combinations(lst, n))\n\n  # loop through all the combinations and print them\n  for i in range(len(combinations)):\n    print(combinations[i])\n\n# call the function with the given list\ncombinations([1,2,3], 3)",
        "question_2": "Write a Python program to generate a random color palette of five colors.",
        "answer_2": "import random\n\n# List of ten random colors\ncolors = [\"#000000\", \"#FFFFFF\", \"#A52A2A\", \"#008080\", \"#DAA520\", \"#008000\", \"#FF00FF\", \"#808080\", \"#800000\", \"#808000\", \"#FFC0CB\"]\n\n# Function that randomly selects five colors from the list\ndef generate_colors():\n random.shuffle(colors)\n palette = colors[:5]\n return palette\n\n# Generates and prints random color palette\nprint (generate_colors())",
        "question_3": "Write a Python program to generate all possible combinations of a set of numbers.",
        "answer_3": "def combinations(nums):\n  \"\"\"\n Generate all possible combinations of a given set of numbers\n  \n  Args:\n    nums: a list of integers\n \n  Returns:\n    A list of list representing the possible combinations\n  \"\"\"\n  \n  # Base case\n  if len(nums) == 0:\n    return [[]]\n  \n  # Recursive step\n  ans = []\n  for comb in combinations(nums[1:]):\n    for i in range(len(comb)+1):\n      ans.append(comb[:i] + [nums[0]] + comb[i:])\n  return ans\n\n# Call the function with the given input\nprint(combinations(nums))",
        "full_code": "\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Function to generate all combinations with repetitions of a specified number of colors from a given list of three colors.\n    \n    Args:\n    l: list of three colors\n    n: number of colors to choose from the list\n    \n    Returns:\n    A list of tuples representing all combinations with repetitions of the specified number of colors\n    \"\"\"\n    \n    # Ensure the list has exactly three colors\n    if len(l) != 3:\n        raise ValueError(\"The list must contain exactly three colors.\")\n    \n    # Generate all combinations with repetitions of the specified number of colors\n    # We use the itertools.combinations_with_replacement function for this purpose\n    # This function will generate all possible combinations of the colors in the list, allowing repetitions\n    combinations = list(combinations_with_replacement(l, n))\n    \n    # Return the list of combinations\n    return combinations\n\n# Example usage:\n# colors = ['red', 'green', 'blue']\n# num_colors = 2\n# print(combinations_colors(colors, num_colors))\n",
        "pass": "True"
    },
    {
        "task_id": 256,
        "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Primes_nums(n):",
        "question_1": "Create a python program that computes the sum of all the prime numbers lower than a given number",
        "answer_1": "def sum_prime_numbers(n):\n    if n <= 1:\n        return 0\n        \n    prime_sum = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_sum += i\n            \n    return prime_sum",
        "question_2": "Write a function in Python to find the number of prime numbers up to a given number.",
        "answer_2": "def countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)",
        "question_3": "Design a function  in Python to count the total number of prime numbers between the two given numbers (inclusive).",
        "answer_3": "def count_primes(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "full_code": "\ndef count_Primes_nums(n):\n    # Step 1: Handle edge cases where n is less than or equal to 1\n    # If n is less than or equal to 1, there are no prime numbers less than n\n    if n <= 1:\n        return 0\n    \n    # Step 2: Initialize a list to keep track of prime numbers\n    # We start with the first prime number, which is 2\n    primes = [2]\n    \n    # Step 3: Iterate through numbers starting from 3 up to n\n    # We only consider odd numbers since even numbers greater than 2 are not prime\n    for num in range(3, n, 2):\n        # Step 4: Check if the current number is prime\n        # We assume it is prime until proven otherwise\n        is_prime = True\n        \n        # Step 5: Check divisibility by all primes found so far\n        # We only need to check up to the square root of the number\n        for prime in primes:\n            if prime * prime > num:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        \n        # Step 6: If the number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(num)\n    \n    # Step 7: Return the count of prime numbers found\n    return len(primes)\n\n# Example usage:\n# print(count_Primes_nums(10))  # Output should be 4 (2, 3, 5, 7)\n",
        "pass": "True"
    },
    {
        "task_id": 257,
        "text": "Write a function to swap two numbers.",
        "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_numbers(a,b):",
        "question_1": "Create a Python program to swap two numbers.",
        "answer_1": "# Function to swap two numbers \ndef swap_nums(num1, num2): \n    # Swapping the two numbers \n    num1, num2 = num2, num1 \n    return num1, num2 \n  \n# Main code \nnum1 = 5\nnum2 = 10\n  \n# Printing the values before swapping \nprint(\"Before swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2) \n  \n# Calling the swap function \nnum1, num2 = swap_nums(num1, num2) \n  \n# Printing the values after swapping \nprint(\"\\nAfter swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2)",
        "question_2": "Design a function in Python for swapping the values of two given integers.",
        "answer_2": "def swap_values(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n\nx, y = swap_values(3,5)\nprint(x, y)",
        "question_3": "Compose a Python Code to swap two numbers without using a temporary variable.",
        "answer_3": "# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)",
        "full_code": "\ndef swap_numbers(a, b):\n    # Step 1: We need to swap the values of 'a' and 'b'.\n    # One common way to do this is by using a temporary variable.\n    # However, for this task, we will use a method that doesn't require a temporary variable.\n    \n    # Step 2: Use tuple unpacking to swap the values.\n    # This method is concise and leverages Python's ability to assign multiple variables at once.\n    # By assigning (a, b) to (b, a), we effectively swap the values.\n    \n    a, b = b, a\n    \n    # Step 3: Return the swapped values.\n    # This allows the caller to use the swapped values directly.\n    return a, b\n\n# Example usage:\n# a = 5\n# b = 10\n# swapped_a, swapped_b = swap_numbers(a, b)\n# print(swapped_a, swapped_b)  # Output will be 10 5\n\n# The entire code as a plain string that can be directly executed using `exec()`:\ncode_string = \"\"\"\ndef swap_numbers(a, b):\n    # Step 1: We need to swap the values of 'a' and 'b'.\n    # One common way to do this is by using a temporary variable.\n    # However, for this task, we will use a method that doesn't require a temporary variable.\n    \n    # Step 2: Use tuple unpacking to swap the values.\n    # This method is concise and leverages Python's ability to assign multiple variables at once.\n    # By assigning (a, b) to (b, a), we effectively swap the values.\n    \n    a, b = b, a\n    \n    # Step 3: Return the swapped values.\n    # This allows the caller to use the swapped values directly.\n    return a, b\n\n# Example usage:\n# a = 5\n# b = 10\n# swapped_a, swapped_b = swap_numbers(a, b)\n# print(swapped_a, swapped_b)  # Output will be 10 5\n\"\"\"\n\n# Now you can execute the code string using `exec()`:\nexec(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 258,
        "text": "Write a function to find number of odd elements in the given list using lambda function.",
        "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "test_list": [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_odd(array_nums):",
        "question_1": "Optimize the following code using functional programming in Python.",
        "answer_1": "def add_odds(list):\n  odd_list = filter(lambda num: num%2==1, list)\n  return list(odd_list)",
        "question_2": "Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list.",
        "answer_2": "def sum_odd_elements(int_list):\n    '''This function takes a list of integers and returns the sum of all the odd elements.'''\n    total = 0\n    for num in int_list:\n        if num % 2 != 0:\n            total += num\n    return total\n\nint_list = [2, 3, 4, 5, 6]\nsum = sum_odd_elements(int_list)\n\nprint(sum) # 8",
        "question_3": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_3": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "full_code": "\ndef count_odd(array_nums):\n    # Step 1: Use the filter function to filter out the odd numbers from the list.\n    # The lambda function checks if a number is odd by using the modulus operator (%).\n    # If a number % 2 is not equal to 0, it is odd.\n    odd_nums = filter(lambda x: x % 2 != 0, array_nums)\n    \n    # Step 2: Convert the filtered result (which is a filter object) to a list.\n    # This step is necessary because the filter object is not directly countable.\n    odd_nums_list = list(odd_nums)\n    \n    # Step 3: Return the length of the list of odd numbers, which gives the count of odd numbers.\n    return len(odd_nums_list)\n\n# Example usage:\n# array_nums = [1, 2, 3, 4, 5, 6, 7]\n# print(count_odd(array_nums))  # Output: 4\n",
        "pass": "True"
    },
    {
        "task_id": 259,
        "text": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximize_elements(test_tup1, test_tup2):",
        "question_1": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_1": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_2": "Design a function in Python which takes two integers and returns the maximum of the two.",
        "answer_2": "def get_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b",
        "question_3": "Create a function to compute the maximum of two numbers in Python.",
        "answer_3": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "full_code": "\ndef maximize_elements(test_tup1, test_tup2):\n    # Step 1: Check if the lengths of the two tuples are the same\n    # This ensures that we can compare corresponding elements\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # Step 2: Initialize an empty list to store the maximized elements\n    maximized_elements = []\n    \n    # Step 3: Iterate through the elements of the tuples\n    # Compare each corresponding element and append the maximum to the list\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        maximized_elements.append(max(elem1, elem2))\n    \n    # Step 4: Convert the list of maximized elements back to a tuple\n    # This is the final output format\n    return tuple(maximized_elements)\n\n# Example usage:\n# test_tup1 = (1, 4, 3)\n# test_tup2 = (3, 2, 5)\n# result = maximize_elements(test_tup1, test_tup2)\n# print(result)  # Output: (3, 4, 5)\n",
        "pass": "False"
    },
    {
        "task_id": 260,
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test_list": [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def newman_prime(n):",
        "question_1": "Construct a program in Python that finds the nth prime number.",
        "answer_1": "\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)",
        "question_2": "Write a python function that accepts a number n as input and outputs its nth prime number.",
        "answer_2": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "question_3": "Write a Python script which can print out all prime numbers between 0 and n.",
        "answer_3": "def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True",
        "full_code": "\ndef newman_prime(n):\n    # Newman-Shanks-Williams (NSW) primes are defined by a specific sequence.\n    # The sequence starts with S(0) = 1 and S(1) = 1, and subsequent terms are given by:\n    # S(k) = 2 * S(k-1) + S(k-2) for k >= 2.\n    # The nth NSW prime is the nth term in this sequence that is also a prime number.\n    \n    # First, we need to generate the NSW sequence up to the nth term.\n    # We will store the sequence in a list for easy access.\n    \n    # Initialize the first two terms of the NSW sequence\n    s = [1, 1]\n    \n    # Generate the NSW sequence up to the nth term\n    for i in range(2, n + 1):\n        next_term = 2 * s[i - 1] + s[i - 2]\n        s.append(next_term)\n    \n    # Now, we need to find the nth NSW prime.\n    # We will iterate through the generated sequence and check if each term is prime.\n    # We will keep a count of how many primes we have found so far.\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Initialize the count of NSW primes found\n    prime_count = 0\n    \n    # Iterate through the NSW sequence and find the nth prime\n    for term in s:\n        if is_prime(term):\n            prime_count += 1\n            if prime_count == n:\n                return term\n    \n    # If we reach here, it means we didn't find the nth NSW prime within the generated sequence.\n    # This should not happen if n is within a reasonable range, as the sequence grows very quickly.\n    return None\n\n# Example usage:\n# nth_newman_prime = newman_prime(n)\n# print(f\"The {n}th Newman-Shanks-Williams prime is {nth_newman_prime}\")\n",
        "pass": "False"
    },
    {
        "task_id": 261,
        "text": "Write a function to perform mathematical division operation across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def division_elements(test_tup1, test_tup2):",
        "question_1": "Modify a given Python function to accept additional arguments.",
        "answer_1": "def divide(a, b, c=1, d=1):\n    return (a / b) / (c / d)",
        "question_2": "Write a Python function to multiply two given numbers.",
        "answer_2": "def multiply(num1, num2):\n    return num1 * num2",
        "question_3": "Generate a Python function to multiply two given positive integers without using the * operator.",
        "answer_3": "def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1))",
        "full_code": "\ndef division_elements(test_tup1, test_tup2):\n    # Initialize an empty list to store the results of the division operations\n    result = []\n    \n    # Iterate over the elements of the tuples using zip to pair corresponding elements\n    for a, b in zip(test_tup1, test_tup2):\n        # Check if the divisor (b) is not zero to avoid division by zero error\n        if b != 0:\n            # Perform the division and append the result to the result list\n            result.append(a / b)\n        else:\n            # If the divisor is zero, append None to indicate an error or undefined result\n            result.append(None)\n    \n    # Return the list of results\n    return result\n\n# Example usage:\n# test_tup1 = (10, 20, 30)\n# test_tup2 = (2, 4, 0)\n# print(division_elements(test_tup1, test_tup2))  # Output: [5.0, 5.0, None]\n",
        "pass": "False"
    },
    {
        "task_id": 262,
        "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def split_two_parts(list1, L):",
        "question_1": "Create a function in Python to split a list into sublists of given length x.",
        "answer_1": "def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]",
        "question_2": "Design a program in Python to split a list of strings into two halves.",
        "answer_2": "def split_list(string_list):\n    mid = len(string_list) // 2\n    return string_list[:mid], string_list[mid:]",
        "question_3": "Write a Python program to split a list into two halves.",
        "answer_3": "def split_list(lst):\n    half = len(lst) // 2\n    return lst[:half], lst[half:]\n\nleft, right = split_list([14, 8, 3, 7, 5])\nprint (\"Left list : \", left)\nprint (\"Right list : \", right)",
        "full_code": "\ndef split_two_parts(list1, L):\n    # Step 1: Check if the given length L is valid\n    # If L is greater than the length of the list, we cannot split the list as required\n    if L > len(list1):\n        raise ValueError(\"The length L is greater than the length of the list.\")\n    \n    # Step 2: Split the list into two parts\n    # The first part will be from the start of the list to the index L (exclusive)\n    # The second part will be from the index L to the end of the list\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Step 3: Return the two parts as a tuple\n    return first_part, second_part\n\n# Example usage:\n# result = split_two_parts([1, 2, 3, 4, 5], 2)\n# print(result)  # Output: ([1, 2], [3, 4, 5])\n",
        "pass": "True"
    },
    {
        "task_id": 263,
        "text": "Write a function to merge two dictionaries.",
        "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "test_list": [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge_dict(d1,d2):",
        "question_1": "Design a function in Python for merging two dictionaries.",
        "answer_1": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3",
        "question_2": "Write a code block to merge two given dictionaries into a single one.",
        "answer_2": "def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict",
        "question_3": "Suggest a completion for the following python code to merge two given dictionaries into one.",
        "answer_3": "def merge_dict(dict1, dict2):\n result = dict1.copy()\n result.update(dict2)\n return result",
        "full_code": "\ndef merge_dict(d1, d2):\n    # Step 1: Create a new dictionary to hold the merged result.\n    # This avoids modifying the original dictionaries directly.\n    merged = {}\n\n    # Step 2: Iterate over the first dictionary and add its key-value pairs to the merged dictionary.\n    # This ensures that all keys from the first dictionary are included in the merged result.\n    for key, value in d1.items():\n        merged[key] = value\n\n    # Step 3: Iterate over the second dictionary and add its key-value pairs to the merged dictionary.\n    # If there are any keys that overlap with the first dictionary, they will be overwritten by the values from the second dictionary.\n    for key, value in d2.items():\n        merged[key] = value\n\n    # Step 4: Return the merged dictionary.\n    # This is the final result of merging both dictionaries.\n    return merged\n",
        "pass": "True"
    },
    {
        "task_id": 264,
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dog_age(h_age):",
        "question_1": "Write a Python function to convert days to years.",
        "answer_1": "def days_to_years(days):\n    years = days / 365\n    return years",
        "question_2": "Construct a Python program to calculate the age in years of a person given their birthdate.",
        "answer_2": "import datetime\n\ndef calculate_age(birthdate):\n\n    today = datetime.date.today()\n    current_year = today.year\n\n    age = current_year - birthdate.year\n\n    if ((birthdate.month, birthdate.day) > (today.month, today.day)):\n        age -= 1\n    \n    return age\n\nbirthdate = datetime.date(1996, 6, 11)\nage = calculate_age(birthdate)\nprint(age) # 24",
        "question_3": "Write a Python program to convert the ages listed in the input into their equivalent years.",
        "answer_3": "ages = [\"14 months\", \"2 years\", \"4 weeks\", \"6 days\"]\n\ndef convert_age(ages):\n  converted_ages = []\n  for age in ages:\n    age_split = age.split(\" \")\n    if age_split[1] == \"months\":\n        converted_age = int(age_split[0]) / 12\n    elif age_split[1] == \"years\":\n        converted_age = int(age_split[0])\n    elif age_split[1] == \"weeks\":\n        converted_age = int(age_split[0]) / 52\n    elif age_split[1] == \"days\":\n        converted_age = int(age_split[0]) / 365  \n    converted_ages.append(converted_age)\n  return converted_ages\n\nconverted_ages = convert_age(ages)\nprint(converted_ages)",
        "full_code": "\ndef dog_age(h_age):\n    # Step 1: Define the conversion factor from human years to dog years\n    # It is generally accepted that the first two years of a dog's life \n    # are roughly equivalent to 10.5 human years each, and each year \n    # thereafter is equivalent to 4 human years.\n    \n    # Step 2: Check if the human age is less than or equal to 2\n    # If so, multiply the human age by 10.5 to get the dog's age\n    if h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        # Step 3: If the human age is greater than 2, calculate the first two years\n        # and then add the remaining years multiplied by 4\n        d_age = 2 * 10.5 + (h_age - 2) * 4\n    \n    # Step 4: Return the calculated dog's age\n    return d_age\n\n# Example usage:\n# human_age = 5\n# print(dog_age(human_age))  # Output should be 33.0\n",
        "pass": "True"
    },
    {
        "task_id": 265,
        "text": "Write a function to split a list for every nth element.",
        "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_split(S, step):",
        "question_1": "Create a function in Python to split a list into sublists of given length x.",
        "answer_1": "def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]",
        "question_2": "Write a Python program to split a list into two halves.",
        "answer_2": "def split_list(lst):\n    half = len(lst) // 2\n    return lst[:half], lst[half:]\n\nleft, right = split_list([14, 8, 3, 7, 5])\nprint (\"Left list : \", left)\nprint (\"Right list : \", right)",
        "question_3": "Create a Python program for splitting a given string by every nth character.",
        "answer_3": "#Function for splitting a given string by every nth character\ndef splitStringByN(string, n): \n    res = [string[i:i+n] for i in range(0, len(string), n)] \n    return res\n\n# Driver code\nstring = \"Hello World!\"\nn = 3\nsplitString = splitStringByN(string, n)\nprint(splitString)",
        "full_code": "\ndef list_split(S, step):\n    # Initialize an empty list to store the resulting sublists\n    result = []\n    \n    # Iterate over the list with a step size of 'step'\n    # The range function helps to create indices from 0 to the length of the list,\n    # incrementing by 'step' each time\n    for i in range(0, len(S), step):\n        # Append the sublist from the current index 'i' to 'i + step' to the result list\n        # This effectively splits the list into chunks of size 'step'\n        result.append(S[i:i + step])\n    \n    # Return the list of sublists\n    return result\n\n# Example usage:\n# S = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# step = 3\n# print(list_split(S, step))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "pass": "False"
    },
    {
        "task_id": 266,
        "text": "Write a function to find the lateral surface area of a cube.",
        "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cube(l):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "full_code": "\ndef lateralsurface_cube(l):\n    # The lateral surface area of a cube is the area of the four vertical faces.\n    # Each face of a cube is a square, and the area of one square face is l^2.\n    # Since there are four vertical faces, the total lateral surface area is 4 * l^2.\n    \n    # Calculate the area of one face\n    face_area = l ** 2\n    \n    # Calculate the total lateral surface area\n    lateral_surface_area = 4 * face_area\n    \n    # Return the result\n    return lateral_surface_area\n\n# Example usage:\n# print(lateralsurface_cube(3))  # Output should be 36\n",
        "pass": "True"
    },
    {
        "task_id": 267,
        "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "question_1": "Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.",
        "answer_1": "def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_",
        "question_2": "Write a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.",
        "answer_2": "def calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)",
        "question_3": "Write a python program to calculate the sum of the squares of the odd numbers between the given two numbers.",
        "answer_3": "def sum_square_odd(n1, n2):\n    sum = 0\n    for i in range(n1, n2+1):\n        if i % 2 != 0:\n            sum += i*i\n    return sum\n\nsum = sum_square_odd(n1, n2)\nprint(sum)",
        "full_code": "\ndef square_Sum(n):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    # Odd natural numbers start from 1 and increment by 2\n    # We can generate the first n odd numbers using a loop that starts at 1 and increments by 2\n    for i in range(1, 2*n, 2):\n        # Calculate the square of the current odd number\n        square = i * i\n        \n        # Add the square to the sum of squares\n        sum_of_squares += square\n    \n    # Return the final sum of squares\n    return sum_of_squares\n\n# Example usage:\n# n = 3\n# The first 3 odd natural numbers are 1, 3, and 5\n# Their squares are 1, 9, and 25\n# The sum of these squares is 1 + 9 + 25 = 35\n# So, square_Sum(3) should return 35\n",
        "pass": "True"
    },
    {
        "task_id": 268,
        "text": "Write a function to find the n'th star number.",
        "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_star_num(n):",
        "question_1": "Generate a Python function to print a pattern of stars",
        "answer_1": "def starPattern(n):\n    # outer loop to handle number of rows\n    for i in range(0, n):\n        # inner loop to handle number of columns\n        for j in range(0, i + 1):\n            # printing stars\n            print(\"* \", end=\"\")\n        # ending line after each row\n        print(\"\\r\")\n\n# Driver code\nn = 5\nstarPattern(n)",
        "question_2": "Generate a Python program that accepts an integer as an input and then outputs a string composed of stars",
        "answer_2": "# Get the number from the user\nnum = int(input(\"Enter a number: \"))\n\n# Generate a string of stars\nstar_string = '*' * num\n\nprint(star_string)",
        "question_3": "Rewrite the following algorithm using Python:",
        "answer_3": "def star_pattern(n):\n    # Outer loop to handle number of rows \n    # n in this case \n    for i in range(0, n): \n      \n        # Inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n          \n            # Printing stars \n            print(\"* \",end=\"\") \n       \n        # Ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 5\nstar_pattern(n)",
        "full_code": "\ndef find_star_num(n):\n    # The n'th star number can be calculated using the formula: 6n(n - 1) + 1\n    # This formula arises from the geometric arrangement of stars in a hexagonal pattern.\n    \n    # Step 1: Calculate the term 6n(n - 1)\n    # This term represents the number of stars in the hexagonal layers surrounding the central star.\n    hexagonal_layers = 6 * n * (n - 1)\n    \n    # Step 2: Add 1 to the result to account for the central star.\n    # This gives us the total number of stars in the n'th star number.\n    star_number = hexagonal_layers + 1\n    \n    # Step 3: Return the calculated star number.\n    return star_number\n\n# Example usage:\n# n = 2\n# print(find_star_num(n))  # Output should be 13\n",
        "pass": "True"
    },
    {
        "task_id": 269,
        "text": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value(k):",
        "question_1": "In Python, create a function that takes a character as input and returns its ASCII value.",
        "answer_1": "def getAsciiValue(char): \n    return ord(char)",
        "question_2": "Write a Python program that takes a user input of a number and prints out the corresponding character from the ASCII table.",
        "answer_2": "# Python program to get ASCII value of a character\n\nc = input('Enter a character: ')\n\n# ord() function to get the ASCII value \nprint('The ASCII value of ' + c + ' is', ord(c))",
        "question_3": "Develop a Python program to read a character from the user and print its ASCII value.",
        "answer_3": "# Get the character from user\nchar = input('Please enter a character: ')\n\n# Print the ASCII value\nprint(ord(char))",
        "full_code": "\ndef ascii_value(k):\n    # Step 1: Check if the input is a single character\n    # We use the len() function to ensure the input is exactly one character long\n    if len(k) != 1:\n        # If the input is not a single character, raise a ValueError\n        raise ValueError(\"Input must be a single character\")\n    \n    # Step 2: Use the ord() function to get the ASCII value of the character\n    # The ord() function takes a single character and returns its ASCII value\n    ascii_val = ord(k)\n    \n    # Step 3: Return the ASCII value\n    return ascii_val\n\n# The following code can be directly executed using exec()\n# exec(\"def ascii_value(k):\\n    if len(k) != 1:\\n        raise ValueError(\\\"Input must be a single character\\\")\\n    ascii_val = ord(k)\\n    return ascii_val\")\n",
        "pass": "True"
    },
    {
        "task_id": 270,
        "text": "Write a python function to find the sum of even numbers at even positions.",
        "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_even_and_even_index(arr,n):",
        "question_1": "Write a Python function that calculates the sum of all even numbers within a given range",
        "answer_1": "def sum_even_in_range(start, end):\n    # Initialise the result\n    result = 0\n\n    # Loop over the Range\n    for i in range(start, end+1):\n        # Check if number is even \n        if i % 2 == 0:\n            result += i\n            \n    return result",
        "question_2": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_2": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum",
        "question_3": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_3": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "full_code": "\ndef sum_even_and_even_index(arr, n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the array using index\n    for i in range(n):\n        # Check if the index is even\n        if i % 2 == 0:\n            # Check if the number at the even index is even\n            if arr[i] % 2 == 0:\n                # Add the even number at the even index to the total sum\n                total_sum += arr[i]\n    \n    # Return the total sum of even numbers at even indices\n    return total_sum\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5, 6]\n# n = len(arr)\n# print(sum_even_and_even_index(arr, n)) # Output should be 6 (2 at index 1 and 4 at index 3)\n",
        "pass": "True"
    },
    {
        "task_id": 271,
        "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_Power_Sum(n):",
        "question_1": "Create a Python script that prints out the sum of the first n even numbers.",
        "answer_1": "def sumOfEvenNumbers(n):\n    sum = 0\n    for i in range(1, (n * 2) + 1):\n        if i % 2 == 0:\n           sum += i\n    return sum\n\nprint(sumOfEvenNumbers(5))",
        "question_2": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_2": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "question_3": "Write a Python function that takes a list of numbers and returns the sum of all odd numbers in the list.",
        "answer_3": "def sum_odd_numbers(nums):\n    result = 0\n    for num in nums:\n        # check for odd number\n        if num % 2 != 0:\n            result += num\n    return result\n\nresult = sum_odd_numbers([1, 2, 3, 4, 5])\nprint(result)",
        "full_code": "\ndef even_Power_Sum(n):\n    # Initialize the sum variable to store the result\n    sum_of_powers = 0\n    \n    # Loop through the first n even natural numbers\n    # Since we are dealing with even numbers, we can start from 2 and increment by 2\n    for i in range(1, n + 1):\n        # Calculate the ith even number\n        even_number = 2 * i\n        \n        # Calculate the fifth power of the even number\n        fifth_power = even_number ** 5\n        \n        # Add the fifth power to the sum\n        sum_of_powers += fifth_power\n    \n    # Return the final sum of the fifth powers of the first n even natural numbers\n    return sum_of_powers\n\n# Example usage:\n# Calculate the sum of the fifth power of the first 3 even natural numbers\nresult = even_Power_Sum(3)\nprint(result)  # Output should be 2 ** 5 + 4 ** 5 + 6 ** 5 = 32 + 1024 + 7776 = 8832\n",
        "pass": "True"
    },
    {
        "task_id": 272,
        "text": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rear_extract(test_list):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to complete a given list of operations on a given data set.",
        "answer_2": "def apply_operations(dataset, operations):\n result = []\n for item in dataset:\n   item[0] = str(int(item[0]) - 1).upper()\n   item[1] = str(int(item[1]) - 1).upper()\n   result.append(item)\n return result\n\ndataset = [['Car', 'Red'], ['Bike', 'Blue'], ['Van', 'Green']]\noperations = [\"subtract 1 from each element and transform it to upper case\"]\n\nresult = apply_operations(dataset, operations)\nprint(result)",
        "question_3": "Design an algorithm in Python to generate all permutations of a given list.",
        "answer_3": "def permute(nums):\n  res = [] \n  backtrack(nums, res, [])\n  return res\n\ndef backtrack(nums, res, temp):\n  if(len(temp) == len(nums)):\n    res.append(temp[:])\n  else:\n    for num in nums:\n      if num not in temp:\n        temp.append(num)\n        backtrack(nums, res, temp)\n        temp.pop()\n\n#print the result \nnums = [1, 2, 3]\nperms = permute(nums)\nprint(perms)",
        "full_code": "\ndef rear_extract(test_list):\n    # Initialize an empty list to store the rear elements of each tuple\n    rear_elements = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Check if the tuple is not empty\n        if tup:\n            # Append the last element of the tuple to the rear_elements list\n            rear_elements.append(tup[-1])\n        else:\n            # If the tuple is empty, append None to the rear_elements list\n            rear_elements.append(None)\n    \n    # Return the list of rear elements\n    return rear_elements\n\n# Example usage\ntest_list = [(1, 2, 3), (4, 5), (6,), (), (7, 8, 9)]\nresult = rear_extract(test_list)\nprint(result)  # Output: [3, 5, 6, None, 9]\n",
        "pass": "True"
    },
    {
        "task_id": 273,
        "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def substract_elements(test_tup1, test_tup2):",
        "question_1": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_1": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_2": "Modify the given function to sort a list of tuples based on the second index of each tuple in Python.",
        "answer_2": "def sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list",
        "question_3": "Can you design a function in Python to sort a list of tuples based on the second item in the tuple?",
        "answer_3": "def sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]",
        "full_code": "\ndef substract_elements(test_tup1, test_tup2):\n    # Step 1: Check if both tuples have the same length\n    # This is necessary to ensure that we can subtract corresponding elements\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Step 2: Initialize an empty list to store the results\n    result = []\n    \n    # Step 3: Iterate through the indices of the tuples\n    for i in range(len(test_tup1)):\n        # Step 4: Subtract the elements at the current index and append the result to the list\n        result.append(test_tup1[i] - test_tup2[i])\n    \n    # Step 5: Convert the result list back to a tuple and return it\n    return tuple(result)\n\n# Example usage:\n# test_tup1 = (10, 20, 30)\n# test_tup2 = (5, 10, 15)\n# print(substract_elements(test_tup1, test_tup2))  # Output: (5, 10, 15)\n",
        "pass": "True"
    },
    {
        "task_id": 274,
        "text": "Write a python function to find sum of even index binomial coefficients.",
        "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef even_binomial_Coeff_Sum( n):",
        "question_1": "Develop a python code to evaluate the sum of all the even numbers in a given sequence.",
        "answer_1": "def sum_even_numbers(sequence):\n    result = 0\n    for num in sequence:\n        if num % 2 == 0:\n            result += num\n    \n    return result",
        "question_2": "Create a Python program to find the sum of all the even elements in a given list.",
        "answer_2": "def sum_even_elements(list):\n  sum = 0 \n  for item in list:\n    if item % 2 == 0:\n      sum += item\n  return sum",
        "question_3": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_3": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "full_code": "\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through all indices from 0 to n\n    for k in range(n + 1):\n        # Calculate the binomial coefficient C(n, k)\n        binomial_coeff = math.comb(n, k)\n        \n        # Check if the index k is even\n        if k % 2 == 0:\n            # If k is even, add the binomial coefficient to the total sum\n            total_sum += binomial_coeff\n    \n    # Return the total sum of even index binomial coefficients\n    return total_sum\n\n# Example usage:\n# print(even_binomial_Coeff_Sum(4))  # Output should be 8 (C(4,0) + C(4,2) + C(4,4))\n",
        "pass": "True"
    },
    {
        "task_id": 275,
        "text": "Write a python function to find the position of the last removed element from the given array.",
        "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "test_list": [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math as mt \r\ndef get_Position(a,n,m):",
        "question_1": "Write a function in Python to remove the last element from a given array.",
        "answer_1": "def remove_last_element(arr):\n  return arr[:-1]",
        "question_2": "Develop an algorithm in Python for deletion of an element from an array.",
        "answer_2": "def deleteElement(arr, element):\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == element:\n            index = i\n            break\n    if index != -1:\n        arr.pop(index)\n        return arr\n    else:\n        return -1\n\narr = [1, 2, 3, 4]\nelement = 3\nnew_arr = deleteElement(arr, element)\nprint(new_arr)",
        "question_3": "Generate an algorithm in Python to remove an element from a given array at a given index.",
        "answer_3": "def remove(arr, index): \n  \n      # If the array is empty or index is not in array range \n      if len(arr) == 0 or index >= len(arr): \n          return arr \n  \n      # Remove the element from the array \n      tempArr = arr[:index] + arr[index+1:] \n              \n      return tempArr",
        "full_code": "\nimport math as mt\n\ndef get_Position(a, n, m):\n    # Initialize the position variable to -1, which will be used to store the index of the last removed element.\n    position = -1\n    \n    # Iterate through the array to find the position of the last removed element.\n    for i in range(n):\n        # Check if the current element is equal to the element that was removed.\n        if a[i] == m:\n            # Update the position to the current index.\n            position = i\n    \n    # Return the position of the last removed element.\n    return position\n\n# Example usage:\n# a = [1, 2, 3, 4, 3, 5]\n# n = len(a)\n# m = 3\n# print(get_Position(a, n, m))  # Output should be 4, as the last occurrence of 3 is at index 4.\n",
        "pass": "False"
    },
    {
        "task_id": 276,
        "text": "Write a function to find the volume of a cylinder.",
        "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "test_list": [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cylinder(r,h):",
        "question_1": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_1": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_2": "Create a Python program to calculate the volume of a sphere.",
        "answer_2": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_3": "Design a function to calculate the volume of a cube in Python.",
        "answer_3": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "full_code": "\ndef volume_cylinder(r, h):\n    # Step 1: Understand the formula for the volume of a cylinder\n    # The volume V of a cylinder is given by the formula: V = \u03c0 * r^2 * h\n    # where r is the radius of the base and h is the height of the cylinder.\n    \n    # Step 2: Import the math module to use the value of \u03c0 (pi)\n    import math\n    \n    # Step 3: Calculate the volume using the formula\n    volume = math.pi * (r ** 2) * h\n    \n    # Step 4: Return the calculated volume\n    return volume\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 277,
        "text": "Write a function to filter a dictionary based on values.",
        "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_filter(dict,n):",
        "question_1": "Write a Python program to filter a dictionary by the criteria mentioned in the input.",
        "answer_1": "def filter_by_criteria(dictionary, criteria):\n    filtered_dict = {}\n\n    for key, value in dictionary.items():\n        # Check if key is present in criteria\n        if key in criteria:\n            filtered_dict[key] = value\n \n    return filtered_dict\n\n# Main program\ndictionary = {\n\"a\" : 1,\n\"b\" : 2,\n\"c\" : 3,\n\"d\" : 4\n}\ncriteria = [\"a\", \"b\"]\n\nresult = filter_by_criteria(dictionary, criteria)\nprint(result)",
        "question_2": "Create a Python function to filter a dictionary that contains strings only.",
        "answer_2": "def filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result",
        "question_3": "Write a Python 3 code snippet to check for the presence of a specific value in a dictionary.",
        "answer_3": "def is_value_in_dict(key, my_dict):\n  return key in my_dict",
        "full_code": "\ndef dict_filter(dict, n):\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate over each key-value pair in the input dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to the given number 'n'\n        if value >= n:\n            # If the condition is met, add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n\n    # Return the filtered dictionary\n    return filtered_dict\n\n# Example usage:\n# Define a dictionary\nexample_dict = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4\n}\n\n# Define the threshold value\nthreshold = 3\n\n# Call the function and print the result\nresult = dict_filter(example_dict, threshold)\nprint(result)\n",
        "pass": "True"
    },
    {
        "task_id": 278,
        "text": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_first_elements(test_tup):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_2": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_3": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_3": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count",
        "full_code": "\ndef count_first_elements(test_tup):\n    # Initialize a variable to keep track of the count of the first element\n    count = 0\n    \n    # Iterate over the tuple\n    for element in test_tup:\n        # Check if the current element is the first element of the tuple\n        if element == test_tup[0]:\n            # If it is, increment the count\n            count += 1\n        else:\n            # If the current element is not the first element, break the loop\n            break\n    \n    # Return the count of the first element that occurs before any other element\n    return count\n\n# Example usage:\n# test_tup = (1, 1, 1, 2, 3, 4)\n# print(count_first_elements(test_tup))  # Output: 3\n",
        "pass": "False"
    },
    {
        "task_id": 279,
        "text": "Write a function to find the nth decagonal number.",
        "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_decagonal(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the base-n number.",
        "answer_2": "def base_n(n, base):\n    result = \"\"\n    while n != 0:\n        result += str(n % base)\n        n //= base\n    return result[::-1]  # Reverse the string",
        "question_3": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_3": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y",
        "full_code": "\ndef is_num_decagonal(n):\n    # The formula for the nth decagonal number is given by:\n    # D(n) = 4n^2 - 3n\n    # To find the nth decagonal number, we can directly use this formula.\n    \n    # Step 1: Calculate 4 * n^2\n    part1 = 4 * (n ** 2)\n    \n    # Step 2: Calculate 3 * n\n    part2 = 3 * n\n    \n    # Step 3: Subtract part2 from part1 to get the nth decagonal number\n    decagonal_number = part1 - part2\n    \n    # Step 4: Return the result\n    return decagonal_number\n\n# The function is now complete and can be executed using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 280,
        "text": "Write a function to search an element in the given array by using sequential search.",
        "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequential_search(dlist, item):",
        "question_1": "Create a Python program that implements a search algorithm (e.g. binary search, linear search).",
        "answer_1": "def linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n\n return -1\n\narr = [1, 3, 4, 6, 8, 9, 11, 12, 14]\ntarget = 11\n\nresult = linear_search(arr, target)\nif result == -1:\n print('Element not found')\nelse:\n print(f'Element found at index {result}')\n\nOutput:\nElement found at index 6",
        "question_2": "Generate a Python code to search for an element in an array",
        "answer_2": "def linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1",
        "question_3": "Create a Python function that takes two parameters, an array and a search query and returns the indices of the array where the element matches with the search query.",
        "answer_3": "def searchIndex(arr, searchQuery): \n  indices = []\n  for i in range(len(arr)): \n    if arr[i] == searchQuery: \n      indices.append(i) \n      \n  return indices\n  \narr = [1, 2, 5, 3, 4]\nsearchQuery = 3\n\nresult = searchIndex(arr, searchQuery)\nprint(result)",
        "full_code": "\ndef sequential_search(dlist, item):\n    # Step 1: Initialize a variable to keep track of the current index.\n    # This will help us to iterate through the list and find the item.\n    index = 0\n    \n    # Step 2: Initialize a variable to keep track of whether the item is found.\n    # This will help us to determine if the item is not present in the list.\n    found = False\n    \n    # Step 3: Iterate through the list using a while loop.\n    # The loop will continue until we either find the item or reach the end of the list.\n    while index < len(dlist) and not found:\n        # Step 4: Check if the current element in the list matches the item we are searching for.\n        if dlist[index] == item:\n            # Step 5: If the item is found, set the 'found' variable to True.\n            found = True\n        else:\n            # Step 6: If the item is not found, move to the next element in the list.\n            index += 1\n    \n    # Step 7: After the loop, return the 'found' variable.\n    # If the item was found, 'found' will be True; otherwise, it will be False.\n    return found\n\n# Example usage:\ndlist = [1, 2, 32, 8, 17, 19, 42, 13, 0]\nitem = 3\n\n# Output the result of the sequential search\nprint(sequential_search(dlist, item))\n",
        "pass": "False"
    },
    {
        "task_id": 281,
        "text": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_unique(test_list):",
        "question_1": "Write a Python program to check if all the elements in a given list are unique.",
        "answer_1": "def is_list_unique(list):\n    unique_list = list(dict.fromkeys(list))\n    return len(list) == len(unique_list)",
        "question_2": "Write a Python program to identify which elements in a list are unique",
        "answer_2": "def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "question_3": "Write a Python code to check if a given list contains all unique elements.",
        "answer_3": "def is_unique_list (numbers):\n    return len(numbers) == len(set(numbers))",
        "full_code": "\ndef all_unique(test_list):\n    # Step 1: Convert the list to a set. This will remove any duplicate elements.\n    # Reasoning: Sets in Python do not allow duplicate elements, so converting a list to a set will automatically remove any duplicates.\n    unique_set = set(test_list)\n    \n    # Step 2: Compare the length of the original list with the length of the set.\n    # Reasoning: If the lengths are equal, it means no duplicates were removed, hence all elements are unique.\n    # If the lengths are not equal, it means there were duplicates, hence not all elements are unique.\n    if len(test_list) == len(unique_set):\n        return True\n    else:\n        return False\n\n# The entire function is now complete and can be executed directly using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 282,
        "text": "Write a function to substaract two lists using map and lambda function.",
        "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sub_list(nums1,nums2):",
        "question_1": "Write a Python program to apply a function to all the elements of a given list and return the mapped list.",
        "answer_1": "def applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))",
        "question_2": "Rewrite the following list comprehension in a more pythonic way.",
        "answer_2": "values = list(map(lambda x: x*2, range(10)))",
        "question_3": "Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists.",
        "answer_3": "def list_sum(list1, list2):\n # initialize sum with 0\n total_sum = 0 \n \n # iterate over each element in list1\n for num in list1: \n     # add to sum\n     total_sum += num \n\n # iterate over each element in list2\n for num in list2: \n     # add to sum\n     total_sum += num \n\nreturn total_sum",
        "full_code": "\ndef sub_list(nums1, nums2):\n    # Step 1: Check if the lengths of the two lists are the same.\n    # If not, subtraction is not possible element-wise, so raise a ValueError.\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    \n    # Step 2: Use the map function to apply a lambda function to each pair of elements from nums1 and nums2.\n    # The lambda function will subtract the corresponding elements.\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    \n    # Step 3: Return the resulting list.\n    return result\n\n# Example usage:\nnums1 = [10, 20, 30]\nnums2 = [5, 10, 15]\nprint(sub_list(nums1, nums2))  # Output should be [5, 10, 15]\n",
        "pass": "True"
    },
    {
        "task_id": 283,
        "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def validate(n):",
        "question_1": "Create a function in Python to check whether an input character is a digit or not.",
        "answer_1": "def is_digit(x):\n  return x.isdigit()",
        "question_2": "Construct a program in Python to check if a string contains only digits.",
        "answer_2": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False",
        "question_3": "Write a Python function to count the number of digits in a given number.",
        "answer_3": "def count_digits(num):\n    return len(str(abs(num)))",
        "full_code": "\ndef validate(n):\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    digit_count = {}\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character to an integer\n        digit = int(char)\n        \n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_count:\n            digit_count[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            digit_count[digit] = 1\n    \n    # Iterate over the dictionary to check the frequency condition\n    for digit, count in digit_count.items():\n        # Check if the frequency of the digit is greater than the digit itself\n        if count > digit:\n            # If the condition is violated, return False\n            return False\n    \n    # If all digits satisfy the condition, return True\n    return True\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_str = \"\"\"\ndef validate(n):\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    digit_count = {}\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character to an integer\n        digit = int(char)\n        \n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_count:\n            digit_count[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            digit_count[digit] = 1\n    \n    # Iterate over the dictionary to check the frequency condition\n    for digit, count in digit_count.items():\n        # Check if the frequency of the digit is greater than the digit itself\n        if count > digit:\n            # If the condition is violated, return False\n            return False\n    \n    # If all digits satisfy the condition, return True\n    return True\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_str)\n",
        "pass": "True"
    },
    {
        "task_id": 284,
        "text": "Write a function to check whether all items of a list are equal to a given string.",
        "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_element(list,element):",
        "question_1": "Write a Python function that takes a list of strings and checks if all the strings have the same length.",
        "answer_1": "def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True",
        "question_2": "Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match.",
        "answer_2": "def search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False",
        "question_3": "Generate a Python program to check if a list contains a given value.",
        "answer_3": "def check_if_contains(lst, val):\n    return val in lst",
        "full_code": "\ndef check_element(lst, element):\n    # Step 1: Iterate through each item in the list\n    # Reasoning: We need to compare each item in the list with the given element\n    for item in lst:\n        # Step 2: Check if the current item is not equal to the given element\n        # Reasoning: If any item is not equal to the element, we can immediately return False\n        if item != element:\n            return False\n    \n    # Step 3: If the loop completes without finding any unequal item, return True\n    # Reasoning: This means all items in the list are equal to the given element\n    return True\n\n# The entire function code as a plain string\nfunction_code = \"\"\"\ndef check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\"\"\"\n\n# Output the function code as a plain string\nprint(function_code)\n",
        "pass": "True"
    },
    {
        "task_id": 285,
        "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_two_three(text):",
        "question_1": "Write a Python code to generate all possible strings of 3 characters using the characters a, b and c.",
        "answer_1": "def generate_strings(characters, length):\n    strings = []\n    if length == 0:\n        strings.append('')\n    else:\n        for c in characters:\n            for s in generate_strings(characters, length-1):\n                strings.append(c + s) \n    return strings\n\ncharacters = ['a', 'b', 'c']\nlength = 3\n\nprint(generate_strings(characters, length))",
        "question_2": "Generate a Python function that, given two strings, will return the number of matches between the strings.",
        "answer_2": "def string_matches(string1, string2): \n    matches = 0\n    for i in range(len(string1)): \n        if string1[i] == string2[i]: \n            matches += 1\n    return matches",
        "question_3": "Write a function in Python which takes an array of strings and returns a new array containing only the strings with length greater than 3.",
        "answer_3": "def filter_by_length(strings):\n    return [s for s in strings if len(s) > 3]",
        "full_code": "\nimport re\n\ndef text_match_two_three(text):\n    # Step 1: Define the regular expression pattern\n    # We need to match a string that has 'a' followed by two to three 'b's.\n    # The pattern for 'a' followed by exactly two 'b's is 'ab{2}'\n    # The pattern for 'a' followed by exactly three 'b's is 'ab{3}'\n    # To match either of these, we can use the '|' operator which means 'or'\n    pattern = r'ab{2}|ab{3}'\n    \n    # Step 2: Use the re.search() function to check if the pattern exists in the text\n    # re.search() returns a match object if the pattern is found, otherwise it returns None\n    match = re.search(pattern, text)\n    \n    # Step 3: Return True if a match is found, otherwise return False\n    if match:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(text_match_two_three(\"abbb\"))  # Should return True\n# print(text_match_two_three(\"abb\"))   # Should return True\n# print(text_match_two_three(\"ab\"))    # Should return False\n# print(text_match_two_three(\"abc\"))   # Should return False\n",
        "pass": "False"
    },
    {
        "task_id": 286,
        "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sub_array_sum_repeated(a, n, k):",
        "question_1": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_1": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_2": "Write a python program to submit the following operation",
        "answer_2": "def max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "question_3": "Develop a program to find the maximum sum subarray of size k in an array in Python.",
        "answer_3": "def max_sum_subarray(arr, k): \n    maxSum = float(\"-inf\") \n    windowSum = 0\n    windowStart = 0\n  \n    for windowEnd in range(len(arr)): \n        windowSum += arr[windowEnd] \n  \n        if windowEnd >= k - 1: \n            maxSum = max(maxSum, windowSum) \n            windowSum -= arr[windowStart] \n            windowStart += 1\n  \n    return maxSum\n\narr = [1, 2, 3, 4, 5] \nk = 3\n\nmax_sum = max_sum_subarray(arr, k) \nprint(\"Maximum Sum: \" + str(max_sum))",
        "full_code": "\ndef max_sub_array_sum_repeated(a, n, k):\n    # Step 1: Calculate the sum of the entire array 'a'\n    total_sum = sum(a)\n    \n    # Step 2: If k is 1, the problem reduces to finding the maximum sum subarray in a single array\n    if k == 1:\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in a:\n            current_sum += num\n            if current_sum > max_sum:\n                max_sum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n        return max_sum\n    \n    # Step 3: If k is greater than 1, we need to consider the array repeated k times\n    # We can use the sliding window technique to find the maximum sum subarray of size n in the repeated array\n    \n    # Step 4: Create a new array that is the original array repeated k times\n    repeated_array = a * k\n    \n    # Step 5: Initialize variables for the sliding window technique\n    max_sum = float('-inf')\n    window_sum = 0\n    window_start = 0\n    \n    # Step 6: Iterate through the repeated array to find the maximum sum subarray of size n\n    for window_end in range(len(repeated_array)):\n        window_sum += repeated_array[window_end]\n        \n        # Step 7: When the window size exceeds n, slide the window by removing the element at window_start\n        if window_end >= n - 1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= repeated_array[window_start]\n            window_start += 1\n    \n    # Step 8: Return the maximum sum found\n    return max_sum\n\n# Example usage:\na = [1, 2, 5]\nn = len(a)\nk = 3\nprint(max_sub_array_sum_repeated(a, n, k))\n",
        "pass": "False"
    },
    {
        "task_id": 287,
        "text": "Write a python function to find the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "question_1": "Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.",
        "answer_1": "def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_",
        "question_2": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_2": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_3": "Write a Python program to calculate the sum of all even numbers less than or equal to n.",
        "answer_3": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result",
        "full_code": "\ndef square_Sum(n):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    # Even natural numbers start from 2 and increment by 2\n    for i in range(1, n + 1):\n        # Calculate the ith even natural number\n        even_number = 2 * i\n        \n        # Square the even number and add it to the sum\n        sum_of_squares += even_number ** 2\n    \n    # Return the final sum of squares\n    return sum_of_squares\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 288,
        "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def modular_inverse(arr, N, P):",
        "question_1": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_1": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_2": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_2": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_3": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_3": "def count_elements(arr): \n    return len(arr)",
        "full_code": "\ndef modular_inverse(arr, N, P):\n    # Step 1: Define a helper function to compute the modular inverse of a number under a given prime P\n    # The modular inverse of a number x under prime P is a number y such that (x * y) % P == 1\n    def mod_inverse(x, P):\n        # Using Fermat's Little Theorem to find modular inverse\n        # If P is prime, the modular inverse of x (mod P) is x^(P-2) % P\n        return pow(x, P - 2, P)\n\n    # Step 2: Initialize a counter to keep track of elements that satisfy the condition\n    count = 0\n\n    # Step 3: Iterate through each element in the array\n    for num in arr:\n        # Step 4: Compute the modular inverse of the current element\n        inverse = mod_inverse(num, P)\n        \n        # Step 5: Check if the modular inverse is equal to the element itself\n        if inverse == num:\n            # Step 6: If the condition is satisfied, increment the counter\n            count += 1\n\n    # Step 7: Return the count of elements that have their modular inverse equal to themselves\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nN = len(arr)\nP = 7  # Prime number\nprint(modular_inverse(arr, N, P))  # Output should be the count of elements with modular inverse equal to themselves\n",
        "pass": "False"
    },
    {
        "task_id": 289,
        "text": "Write a python function to calculate the number of odd days in a given year.",
        "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "test_list": [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Days(N):",
        "question_1": "Write a Python function to convert days to years.",
        "answer_1": "def days_to_years(days):\n    years = days / 365\n    return years",
        "question_2": "Provide a Python program to generate the number of days in a given year.",
        "answer_2": "def days_in_year(year): \n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): \n        return 366 \n    else: \n        return 365",
        "question_3": "Write a Python program to convert a given number of days into years, months and days.",
        "answer_3": "def convert_days_wm(Days):\n    y = Days//365\n    m = (Days%365)//30\n    d = (Days%365)%30\n    return y, m, d",
        "full_code": "\ndef odd_Days(N):\n    # Initialize the count of odd days\n    odd_days = 0\n    \n    # Check if the year is a leap year\n    # A year is a leap year if it is divisible by 4, but not by 100,\n    # unless it is also divisible by 400.\n    if (N % 4 == 0 and N % 100 != 0) or (N % 400 == 0):\n        # If it is a leap year, there are 2 odd days in February\n        odd_days += 2\n    else:\n        # If it is not a leap year, there is 1 odd day in February\n        odd_days += 1\n    \n    # For the remaining months, each month has 2 odd days except for:\n    # January, March, May, July, August, October, and December, which have 3 odd days each.\n    # April, June, September, and November, which have 2 odd days each.\n    # February has already been accounted for.\n    \n    # Add the odd days for the months with 3 odd days\n    odd_days += 3 * 7  # 7 months with 3 odd days each\n    \n    # Add the odd days for the months with 2 odd days\n    odd_days += 2 * 4  # 4 months with 2 odd days each\n    \n    # Return the total number of odd days\n    return odd_days\n\n# The function definition and code are complete.\n# This string can be directly executed using `exec()`.\n",
        "pass": "False"
    },
    {
        "task_id": 290,
        "text": "Write a function to find the list of lists with maximum length.",
        "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length(list1):",
        "question_1": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_1": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_2": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_2": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)",
        "question_3": "Create a Python program to search a list for the maximum value.",
        "answer_3": "def findMax(list): \n    max = list[0] \n    for i in range(1, len(list)): \n        if list[i] > max: \n            max = list[i] \n    return max\n\nlist = [1, 2, 3, 9, 8, 4] \nprint(\"The maximum element in the list is:\", findMax(list))",
        "full_code": "\ndef max_length(list1):\n    # Initialize a variable to keep track of the maximum length found so far\n    max_len = 0\n    # Initialize a variable to store the list with the maximum length\n    max_list = []\n    \n    # Iterate over each sublist in the main list\n    for sublist in list1:\n        # Calculate the length of the current sublist\n        current_len = len(sublist)\n        \n        # Check if the current sublist's length is greater than the maximum length found so far\n        if current_len > max_len:\n            # If it is, update the maximum length and store the current sublist\n            max_len = current_len\n            max_list = sublist\n    \n    # Return the sublist with the maximum length\n    return max_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(\"The list with maximum length is:\", max_length(list1))\n",
        "pass": "False"
    },
    {
        "task_id": 291,
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_no_of_ways(n, k):",
        "question_1": "Write a function in Python that takes two parameters \"n\" and \"k\" and returns the number of ways to jump \"k\" steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n.",
        "answer_1": "def steps(n, k):\n if k == 0 or n == k:\n  return 1\n if n > k:\n  return steps(n-1, k-1) + steps(n-2, k-1)\n else:\n  return 0",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Create a function in Python that takes an integer input and prints all combinations of the numbers.",
        "answer_3": "def permutations(n):\n for i in range(n+1):\n  for j in range(n+1):\n   for k in range(n+1):\n    for l in range(n+1):\n     print(i,j,k,l)\n\n# Calling the function\npermutations(4)",
        "full_code": "\ndef count_no_of_ways(n, k):\n    # Step 1: Handle edge cases where n or k is 0\n    # If there are no posts (n == 0), there are no ways to paint the fence.\n    # If there are no colors (k == 0), there are no ways to paint the fence.\n    if n == 0 or k == 0:\n        return 0\n    \n    # Step 2: Initialize the base cases\n    # If there is only one post (n == 1), there are k ways to paint it.\n    if n == 1:\n        return k\n    \n    # Step 3: Define the variables to store the number of ways to paint the fence\n    # dp1[i] will store the number of ways to paint the first i posts such that the last two posts are different.\n    # dp2[i] will store the number of ways to paint the first i posts such that the last two posts are the same.\n    dp1 = [0] * (n + 1)\n    dp2 = [0] * (n + 1)\n    \n    # Step 4: Initialize the base cases for dynamic programming\n    # For the first post, there are k ways to paint it (all different).\n    dp1[1] = k\n    dp2[1] = 0\n    \n    # Step 5: Fill the dp arrays using the recurrence relations\n    # For each post from 2 to n, calculate the number of ways to paint the fence\n    for i in range(2, n + 1):\n        # The number of ways to paint the i-th post such that the last two posts are different\n        # is the sum of the ways to paint the (i-1)-th post such that the last two posts are different\n        # and the ways to paint the (i-1)-th post such that the last two posts are the same.\n        dp1[i] = (dp1[i - 1] + dp2[i - 1]) * (k - 1)\n        \n        # The number of ways to paint the i-th post such that the last two posts are the same\n        # is the number of ways to paint the (i-1)-th post such that the last two posts are different.\n        dp2[i] = dp1[i - 1]\n    \n    # Step 6: The total number of ways to paint the fence is the sum of the ways to paint the last two posts\n    # such that they are different and the ways to paint the last two posts such that they are the same.\n    return dp1[n] + dp2[n]\n\n# Example usage:\n# print(count_no_of_ways(3, 2))  # Output should be 6\n",
        "pass": "True"
    },
    {
        "task_id": 292,
        "text": "Write a python function to find quotient of two numbers.",
        "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "question_1": "Write a Python program to divide two numbers and print the quotient and the remainder.",
        "answer_1": "def divide(num1, num2):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    return quotient, remainder\n\nquotient, remainder = divide(15, 4)\nprint(\"Quotient :\", quotient)\nprint(\"Remainder :\", remainder)",
        "question_2": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_2": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b",
        "question_3": "Generate a function to find the GCD of two numbers in Python.",
        "answer_3": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b)",
        "full_code": "\ndef find(n, m):\n    # Step 1: Check if the divisor (m) is zero to avoid division by zero error\n    if m == 0:\n        # Step 2: If the divisor is zero, return an error message\n        return \"Error: Division by zero is not allowed.\"\n    \n    # Step 3: If the divisor is not zero, proceed with the division\n    quotient = n // m  # Use integer division to get the quotient\n    \n    # Step 4: Return the quotient as the result\n    return quotient\n\n# The following code can be executed using exec()\n# It defines the function and calls it with example values\ncode = \"\"\"\ndef find(n, m):\n    if m == 0:\n        return \"Error: Division by zero is not allowed.\"\n    quotient = n // m\n    return quotient\n\n# Example usage:\nresult = find(15, 4)\nprint(\"Quotient:\", result)\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code)\n",
        "pass": "True"
    },
    {
        "task_id": 293,
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef otherside_rightangle(w,h):",
        "question_1": "Create a Python function to calculate the length of the hypotenuse of a right triangle.",
        "answer_1": "def hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0",
        "question_2": "Create a Python program to find the area of a triangle given 3 sides",
        "answer_2": "def findArea(a,b,c):\n    #calculate the semiperimeter \n    s = (a + b + c) / 2.0\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area",
        "question_3": "Write a Python program to calculate the hypotenuse of a right-angled triangle.",
        "answer_3": "import math\n\n# calculate the hypotenuse\ndef calc_hypotenuse(a, b):\n    hyp = math.sqrt(a**2 + b**2)\n    print(\"The length of the hypotenuse is\", hyp)\n\n# input lengths of triangle sides\na = 5\nb = 12\n\n# call the function\ncalc_hypotenuse(a, b)",
        "full_code": "\nimport math\n\ndef otherside_rightangle(w, h):\n    # We need to find the third side of a right-angled triangle given two sides.\n    # There are two possible scenarios:\n    # 1. One of the given sides is the hypotenuse.\n    # 2. Neither of the given sides is the hypotenuse.\n    \n    # First, let's determine if one of the sides is the hypotenuse.\n    # The hypotenuse is always the longest side in a right-angled triangle.\n    if w > h:\n        hypotenuse = w\n        leg1 = h\n    elif h > w:\n        hypotenuse = h\n        leg1 = w\n    else:\n        # If both sides are equal, it's not a valid right-angled triangle.\n        raise ValueError(\"Both sides cannot be equal in a right-angled triangle.\")\n    \n    # Now, we need to find the third side.\n    # If one of the sides is the hypotenuse, we can use the Pythagorean theorem:\n    # c^2 = a^2 + b^2, where c is the hypotenuse.\n    # Therefore, the third side (the other leg) can be found using:\n    # b = sqrt(c^2 - a^2)\n    \n    if hypotenuse == w:\n        # w is the hypotenuse, h is one of the legs\n        leg2 = math.sqrt(w**2 - h**2)\n        return leg2\n    elif hypotenuse == h:\n        # h is the hypotenuse, w is one of the legs\n        leg2 = math.sqrt(h**2 - w**2)\n        return leg2\n\n# Example usage:\n# print(otherside_rightangle(5, 4))  # Should print the length of the other leg\n",
        "pass": "False"
    },
    {
        "task_id": 294,
        "text": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_val(listval):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Edit the given Python code to return the maximum value from a list",
        "answer_2": "def max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]",
        "question_3": "Given a list of numbers, write a Python program to find the element in the list having the highest value.",
        "answer_3": "def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value",
        "full_code": "\ndef max_val(listval):\n    # Initialize a variable to store the maximum value found.\n    # Since the list is heterogeneous, we need to handle different types.\n    # We'll start by assuming the first element is the maximum.\n    max_value = listval[0]\n    \n    # Iterate through each element in the list\n    for item in listval:\n        # Check if the current item is of a type that can be compared (e.g., int, float, str)\n        # We'll skip any items that are not comparable (e.g., lists, dicts, etc.)\n        if isinstance(item, (int, float, str)):\n            # Compare the current item with the current maximum value\n            if item > max_value:\n                # If the current item is greater, update the maximum value\n                max_value = item\n    \n    # Return the maximum value found\n    return max_value\n\n# Example usage:\n# listval = [1, 3.5, 'apple', 10, 'banana']\n# print(max_val(listval))  # Output: 'banana'\n",
        "pass": "False"
    },
    {
        "task_id": 295,
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_div(number):",
        "question_1": "Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors",
        "answer_1": "def sum_of_divisors(n): \n    divisors = [i for i in range(1,n+1) if n%i == 0] \n    return sum(divisors) \n  \nn = 24\nprint(\"Sum of the positive divisors of 24 is:\",sum_of_divisors(n))",
        "question_2": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_2": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_3": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_3": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))",
        "full_code": "\ndef sum_div(number):\n    # Initialize a variable to store the sum of divisors\n    total_sum = 0\n    \n    # Loop through all numbers from 1 to the given number (inclusive)\n    for i in range(1, number + 1):\n        # Check if the current number is a divisor of the given number\n        if number % i == 0:\n            # If it is a divisor, add it to the total sum\n            total_sum += i\n    \n    # Return the total sum of all divisors\n    return total_sum\n\n# Example usage:\n# number = 24\n# print(\"Sum of all divisors of 24 is:\", sum_div(number))\n",
        "pass": "False"
    },
    {
        "task_id": 296,
        "text": "Write a python function to count inversions in an array.",
        "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Inv_Count(arr,n):",
        "question_1": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_1": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_2": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_2": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_3": "Write an algorithm in Python to find the number of inversions in an array.",
        "answer_3": "def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count",
        "full_code": "\ndef get_Inv_Count(arr, n):\n    # Initialize the inversion count to 0\n    inv_count = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # For each element, compare it with every subsequent element\n        for j in range(i + 1, n):\n            # If the current element is greater than the subsequent element,\n            # it means there is an inversion\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    # Return the total count of inversions\n    return inv_count\n\n# Example usage:\narr = [3, 5, 2, 1, 4]\nn = len(arr)\nprint(get_Inv_Count(arr, n))\n",
        "pass": "True"
    },
    {
        "task_id": 297,
        "text": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def flatten_list(list1):",
        "question_1": "Create a function in Python that flattens a nested list.",
        "answer_1": "def flatten_list(lst):\n flattened = []\n for i in lst:\n  if type(i) == list:\n   flattened += flatten_list(i)\n  else:\n   flattened.append(i)\n return flattened",
        "question_2": "Create a function in Python for recursively flattening a nested list",
        "answer_2": "def flatten(lst):\n flat_list = []\n for x in lst:\n if type(x) == list:\n flat_list.extend(flatten(x))\n else:\n flat_list.append(x)\n return flat_list\n\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten(sample_list))\n\n# Output: [1, 2, 3, 4, 5]",
        "question_3": "How would you write a code to flatten a given nested list in Python?",
        "answer_3": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "full_code": "\ndef flatten_list(list1):\n    # Initialize an empty list to store the flattened elements\n    flattened = []\n    \n    # Iterate over each element in the input list\n    for element in list1:\n        # Check if the current element is a list\n        if isinstance(element, list):\n            # If it is a list, recursively flatten it and extend the flattened list with the result\n            flattened.extend(flatten_list(element))\n        else:\n            # If it is not a list, append the element directly to the flattened list\n            flattened.append(element)\n    \n    # Return the flattened list\n    return flattened\n\n# Example usage:\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten_list(sample_list))  # Output: [1, 2, 3, 4, 5]\n",
        "pass": "True"
    },
    {
        "task_id": 298,
        "text": "Write a function to find the nested list elements which are present in another list.",
        "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "test_list": [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_nested_lists(l1, l2):",
        "question_1": "Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second",
        "answer_1": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True",
        "question_2": "Write a Python function to flatten a nested list of lists into a single list containing all elements.",
        "answer_2": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]",
        "question_3": "Generate a Python program to flatten a given nested list.",
        "answer_3": "def flatten(lst):\n  #Empty list to add the flatten items\n  flat_list = []\n  #Loop through the list items\n  for item in lst:\n    #If the item is a list, then call the flatten function recursively\n    if type(item) is list:\n      flat_list.extend(flatten(item))\n    # Else append the item to the list\n    else:\n      flat_list.append(item)\n  #Return the list\n  return flat_list\n  \n# Sample \nnested_list = [[1,2,[3]],4]\nflat_list = flatten(nested_list)\nprint (flat_list)\n# Output: [1, 2, 3, 4]",
        "full_code": "\ndef intersection_nested_lists(l1, l2):\n    # Initialize an empty list to store the intersection results\n    intersection = []\n    \n    # Helper function to recursively check for intersections in nested lists\n    def recursive_intersection(sublist1, sublist2):\n        # Iterate through each element in the first sublist\n        for item in sublist1:\n            # If the item is a list, recursively check for intersections\n            if isinstance(item, list):\n                recursive_intersection(item, sublist2)\n            # If the item is not a list, check if it is in the second list\n            else:\n                if item in sublist2:\n                    # If it is, add it to the intersection list\n                    intersection.append(item)\n    \n    # Call the helper function with the two main lists\n    recursive_intersection(l1, l2)\n    recursive_intersection(l2, l1)\n    \n    # Return the intersection list\n    return intersection\n\n# Example usage:\nl1 = [1, 2, [3, 4, [5, 6]], 7]\nl2 = [4, 5, [6, 7, [8, 9]], 10]\nprint(intersection_nested_lists(l1, l2))\n# Output: [4, 5, 6, 7]\n",
        "pass": "False"
    },
    {
        "task_id": 299,
        "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):",
        "question_1": "Refactor this piece of Python code to increase its readability.",
        "answer_1": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum",
        "question_2": "Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.",
        "answer_2": "max_value = lambda num_list: max(num_list)",
        "question_3": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_3": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)",
        "full_code": "\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Initialize a defaultdict to store the sum of values for each key\n    aggregate_sums = defaultdict(int)\n    \n    # Iterate through each tuple in the input list\n    for key, value in stdata:\n        # Add the value to the corresponding key in the defaultdict\n        aggregate_sums[key] += value\n    \n    # Find the key with the maximum aggregate sum\n    max_key = max(aggregate_sums, key=aggregate_sums.get)\n    \n    # Return the maximum aggregate sum\n    return aggregate_sums[max_key]\n\n# Example usage:\nstdata = [('A', 10), ('B', 20), ('A', 30), ('C', 15), ('B', 5)]\nresult = max_aggregate(stdata)\nprint(result)  # Output should be 40, as 'A' has the highest aggregate sum of 40 (10 + 30)\n",
        "pass": "False"
    },
    {
        "task_id": 300,
        "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "test_list": [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_binary_seq(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a python program to count the total number of \"1\"s present in a binary string",
        "answer_2": "def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count",
        "question_3": "Design an algorithm in Python to print out binary numbers between 1 and N.",
        "answer_3": "def print_binary(n):\n if n == 0:\n  return\n \n print_binary(n-1)\n print(bin(n))\n \nprint_binary(3)\n \n# Output: \n# 0b1\n# 0b10\n# 0b11",
        "full_code": "\ndef count_binary_seq(n):\n    # Step 1: Define a helper function to generate all binary sequences of length 2n\n    # We will use itertools.product to generate all possible combinations of 0s and 1s\n    # of length 2n. This will give us all possible binary sequences of length 2n.\n    from itertools import product\n    \n    # Step 2: Define a function to check if the sum of the first n bits is equal to the sum of the last n bits\n    # This function will take a binary sequence and split it into two halves.\n    # It will then compare the sum of the first half with the sum of the second half.\n    def is_valid_sequence(seq):\n        first_half = seq[:n]\n        second_half = seq[n:]\n        return sum(first_half) == sum(second_half)\n    \n    # Step 3: Initialize a counter to keep track of valid sequences\n    valid_count = 0\n    \n    # Step 4: Generate all binary sequences of length 2n\n    all_sequences = product([0, 1], repeat=2*n)\n    \n    # Step 5: Iterate through each sequence and check if it is valid\n    for seq in all_sequences:\n        if is_valid_sequence(seq):\n            valid_count += 1\n    \n    # Step 6: Return the count of valid sequences\n    return valid_count\n\n# Example usage:\n# n = 2\n# print(count_binary_seq(n))  # Output should be 6 (0000, 0101, 0110, 1001, 1010, 1111)\n",
        "pass": "True"
    },
    {
        "task_id": 301,
        "text": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_depth(d):",
        "question_1": "Create an algorithm in Python to find the maximum nested depth of a given dictionary.",
        "answer_1": "def max_nested_depth(dictionary):\n    max_depth = 0\n    stack = []\n    stack.append((dictionary, 1))\n\n    while len(stack) > 0:\n        item, depth = stack.pop()\n        if depth > max_depth:\n            max_depth = depth\n        if type(item) is dict:\n            for value in item.values():\n                stack.append((value, depth+1))\n    \n    return max_depth\n\nprint(max_nested_depth(dictionary))",
        "question_2": "Write a Python script to flatten a nested dictionary.",
        "answer_2": "def flatten_dictionary(d):\n result = {}\n \n def traverse(k, v):\n  if isinstance(v, dict):\n   for k1, v1 in v.items():\n    traverse(k+\".\"+k1, v1)\n  else:\n   result[k] = v\n \n traverse(\"\", d)\n \n return result",
        "question_3": "Write a Python function to access a given key from a given dictionary.",
        "answer_3": "def access_key(key, dictionary): \n    if key not in dictionary: \n        return -1\n    return dictionary[key]",
        "full_code": "\ndef dict_depth(d):\n    # Initialize the maximum depth to 0\n    max_depth = 0\n    \n    # Define a helper function to recursively traverse the dictionary\n    def traverse(current_dict, current_depth):\n        # Use the nonlocal keyword to modify the max_depth variable from the outer scope\n        nonlocal max_depth\n        \n        # Update the max_depth if the current depth is greater\n        if current_depth > max_depth:\n            max_depth = current_depth\n        \n        # Iterate over the items in the dictionary\n        for key, value in current_dict.items():\n            # If the value is a dictionary, recursively traverse it with increased depth\n            if isinstance(value, dict):\n                traverse(value, current_depth + 1)\n    \n    # Start the traversal with the initial dictionary and depth of 1\n    traverse(d, 1)\n    \n    # Return the maximum depth found\n    return max_depth\n\n# Example usage:\n# d = {'a': {'b': {'c': {}}}}\n# print(dict_depth(d))  # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 302,
        "text": "Write a python function to find the most significant bit number which is also a set bit.",
        "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "test_list": [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_Bit_Number(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_3": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "full_code": "\ndef set_Bit_Number(n):\n    # Step 1: Check if the number is zero\n    # If the number is zero, there are no set bits, so return -1\n    if n == 0:\n        return -1\n    \n    # Step 2: Initialize a variable to keep track of the position of the most significant bit\n    msb_position = 0\n    \n    # Step 3: Use a loop to find the most significant bit\n    # We will right shift the number until it becomes zero\n    # Each time we right shift, we increment the position counter\n    while n > 0:\n        n = n >> 1\n        msb_position += 1\n    \n    # Step 4: The most significant bit position is one less than the position counter\n    # because the position is counted from 1 to the length of the binary representation\n    msb_position -= 1\n    \n    # Step 5: Return the most significant bit position\n    return msb_position\n\n# Example usage:\n# n = 18 (binary: 10010)\n# The most significant bit is at position 4 (counting from 0)\n# print(set_Bit_Number(18))  # Output should be 4\n",
        "pass": "False"
    },
    {
        "task_id": 303,
        "text": "Write a python function to check whether the count of inversion of two types are same or not.",
        "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys \r\ndef solve(a,n):",
        "question_1": "Write an algorithm in Python to find the number of inversions in an array.",
        "answer_1": "def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count",
        "question_2": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_2": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_3": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_3": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "full_code": "\nimport sys\n\ndef solve(a, n):\n    # Step 1: Define a helper function to count inversions for a specific type\n    def count_inversions(arr):\n        inversion_count = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    inversion_count += 1\n        return inversion_count\n\n    # Step 2: Separate the array into two types based on the given condition\n    # For simplicity, let's assume the types are defined by even and odd indices\n    type1 = [a[i] for i in range(n) if i % 2 == 0]\n    type2 = [a[i] for i in range(n) if i % 2 != 0]\n\n    # Step 3: Count the inversions for each type\n    inversions_type1 = count_inversions(type1)\n    inversions_type2 = count_inversions(type2)\n\n    # Step 4: Compare the inversion counts and return the result\n    if inversions_type1 == inversions_type2:\n        return \"The count of inversions for both types is the same.\"\n    else:\n        return \"The count of inversions for both types is different.\"\n\n# Example usage:\na = [3, 5, 2, 1, 4]\nn = len(a)\nprint(solve(a, n))\n",
        "pass": "False"
    },
    {
        "task_id": 304,
        "text": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Element(arr,ranges,rotations,index) :",
        "question_1": "Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements.",
        "answer_1": "def rotate(arr, d):\n    for _ in range(d):\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nd = 2\n\nrotated_arr = rotate(arr, d)\nprint(rotated_arr) # [3, 4, 5, 1, 2]",
        "question_2": "Write a python program to rotate an array of size n by d elements",
        "answer_2": "def rotateArray(arr, d):\n    \n    result = []\n    for i in range(len(arr)-d, len(arr)): \n        result.append(arr[i])\n \n    for i in range(0, len(arr)-d):  \n        result.append(arr[i])\n \n    return result",
        "question_3": "How would you code a function in Python to rotate elements of an array?",
        "answer_3": "def rotate_array(array, n):\n    '''\n    This function takes in an array and an integer n and rotates the elements of the array by n positions.\n    '''\n    return array[n:] + array[:n]",
        "full_code": "\ndef find_Element(arr, ranges, rotations, index):\n    # Step 1: Understand the problem\n    # We need to find the element at a given index after performing a number of rotations.\n    # Each rotation is defined by a range (start, end) within the array.\n    # We will simulate the rotations and then find the element at the given index.\n\n    # Step 2: Simulate the rotations\n    # For each rotation, we will rotate the subarray defined by the range.\n    for _ in range(rotations):\n        for (start, end) in ranges:\n            # Rotate the subarray from start to end\n            temp = arr[end]\n            for i in range(end, start, -1):\n                arr[i] = arr[i-1]\n            arr[start] = temp\n\n    # Step 3: Return the element at the given index\n    return arr[index]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nranges = [(0, 2), (1, 3)]\nrotations = 2\nindex = 2\n\nresult = find_Element(arr, ranges, rotations, index)\nprint(result)  # Output should be the element at index 2 after 2 rotations\n",
        "pass": "False"
    },
    {
        "task_id": 305,
        "text": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef start_withp(words):",
        "question_1": "Generate a list in Python that contains all the words from a source string that start with a certain letter.",
        "answer_1": "def generate_list(source_string, letter):\n  words = source_string.split()\n  result = []\n  for word in words:\n    if word[0].lower() == letter:\n      result.append(word)\n  return result\n\nprint(generate_list(source_string, letter))",
        "question_2": "Write a Python program to extract all the words starting with a specific letter",
        "answer_2": "\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))",
        "question_3": "Generate a python program to extract all the words starting with a given letter",
        "answer_3": "def extract_words(word_list, given_letter):\n    extracted_words=[]\n    for word in word_list:\n        if word[0]==given_letter:\n            extracted_words.append(word)\n    return extracted_words",
        "full_code": "\nimport re\n\ndef start_withp(words):\n    # Step 1: Initialize an empty list to store words starting with 'p'\n    p_words = []\n    \n    # Step 2: Iterate through each word in the input list\n    for word in words:\n        # Step 3: Check if the word starts with the letter 'p'\n        if word.startswith('p'):\n            # Step 4: If it does, add the word to the list of 'p' words\n            p_words.append(word)\n    \n    # Step 5: Initialize an empty list to store matched pairs of words\n    matched_pairs = []\n    \n    # Step 6: Iterate through the list of 'p' words to find pairs\n    for i in range(len(p_words)):\n        for j in range(i + 1, len(p_words)):\n            # Step 7: Check if the two words are different\n            if p_words[i] != p_words[j]:\n                # Step 8: If they are different, add them as a tuple to the matched pairs list\n                matched_pairs.append((p_words[i], p_words[j]))\n    \n    # Step 9: Return the list of matched pairs\n    return matched_pairs\n\n# Example usage:\nwords = ['python', 'parrot', 'peach', 'plum', 'apple', 'pear']\nprint(start_withp(words))\n",
        "pass": "False"
    },
    {
        "task_id": 306,
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_increasing_subseq(a, n, index, k):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_2": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_3": "Write a Python program to find the longest increasing subsequence of a given array of integers",
        "answer_3": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n \n    # An array to store increasing subsequences\n    dp = [1]*n\n \n    # Compute optimal values in bottom up manner\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 :\n                dp[i] = dp[j]+1\n \n    # Pick maximum of dp[i]\n    # Initialize result\n    maximum = 0\n \n    # Pick maximum of all dp[i]\n    for i in range(n):\n        maximum = max(maximum , dp[i])\n \n    return maximum",
        "full_code": "\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Step 1: Initialize a list to store the maximum sum of increasing subsequences up to each index\n    max_sum = [0] * n\n    \n    # Step 2: Initialize the max_sum list with the values of the array itself\n    for i in range(n):\n        max_sum[i] = a[i]\n    \n    # Step 3: Compute the maximum sum of increasing subsequences up to each index\n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    \n    # Step 4: Include the kth element in the subsequence if it is greater than the last element in the subsequence\n    if a[k] > a[index]:\n        max_sum[index] += a[k]\n    \n    # Step 5: Return the maximum sum of the increasing subsequence up to the given index including the kth element\n    return max_sum[index]\n\n# Example usage:\na = [10, 12, 4, 6, 5, 3]\nn = len(a)\nindex = 2  # Example index\nk = 4      # Example k\nprint(max_sum_increasing_subseq(a, n, index, k))\n# Output: 15 (4 + 6 + 5)\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing a list `max_sum` to store the maximum sum of increasing subsequences up to each index. Each element in this list is initially set to the corresponding element in the input array `a`.\n\n2. **Computing Maximum Sum**: We then compute the maximum sum of increasing subsequences for all indices up to the given `index`. This is done using a nested loop where we check if the current element is greater than the previous elements and update the `max_sum` accordingly.\n\n3. **Including the kth Element**: After computing the maximum sum up to the given `index`, we check if the `kth` element is greater than the element at the `index`. If it is, we add the `kth` element to the maximum sum up to the `index`.\n\n4. **Return Result**: Finally, we return the maximum sum of the increasing subsequence up to the given `index` including the `kth` element.\n\nThis code can be directly executed using `exec()` in Python.",
        "pass": "Error"
    },
    {
        "task_id": 307,
        "text": "Write a function to get a colon of a tuple.",
        "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "How can you return two values from a Python function?",
        "answer_3": "There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)",
        "full_code": "\nfrom copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    # Step 1: Check if the input tuple is empty\n    # If the tuple is empty, return an empty tuple as there's nothing to slice\n    if not tuplex:\n        return ()\n    \n    # Step 2: Check if the indices m and n are within the bounds of the tuple\n    # If either index is out of bounds, return an empty tuple\n    if m < 0 or n >= len(tuplex) or m > n:\n        return ()\n    \n    # Step 3: Create a deep copy of the tuple to avoid modifying the original tuple\n    # This ensures that the original tuple remains unchanged\n    copied_tuplex = deepcopy(tuplex)\n    \n    # Step 4: Slice the tuple from index m to index n (inclusive of m and exclusive of n)\n    # This will give us the desired \"colon\" of the tuple\n    colon_tuple = copied_tuplex[m:n+1]\n    \n    # Step 5: Return the sliced tuple\n    return colon_tuple\n\n# Example usage:\n# tuplex = (1, 2, 3, 4, 5)\n# result = colon_tuplex(tuplex, 1, 3)\n# print(result)  # Output: (2, 3, 4)\n",
        "pass": "False"
    },
    {
        "task_id": 308,
        "text": "Write a function to find the specified number of largest products from two given lists.",
        "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def large_product(nums1, nums2, N):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_2": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))",
        "question_3": "Generate a correct python program to return the second biggest element in a given list.",
        "answer_3": "def second_biggest(lst):\n max1 = 0\n max2 = 0\n for num in lst:\n if num > max1:\n max1 = num\n elif num > max2:\n max2 = num\n return max2\n\nsecond_largest_num = second_biggest([1, 5, 9, 4, 16, 11])\nprint(second_largest_num)",
        "full_code": "\ndef large_product(nums1, nums2, N):\n    # Step 1: Initialize a list to store the products of all pairs from nums1 and nums2\n    products = []\n    \n    # Step 2: Calculate the product of each pair (nums1[i], nums2[j]) and store it in the products list\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    # Step 3: Sort the products list in descending order to get the largest products first\n    products.sort(reverse=True)\n    \n    # Step 4: Return the first N elements from the sorted products list\n    return products[:N]\n\n# Example usage:\n# nums1 = [1, 2, 3]\n# nums2 = [4, 5, 6]\n# N = 3\n# print(large_product(nums1, nums2, N))  # Output: [18, 15, 12]\n",
        "pass": "True"
    },
    {
        "task_id": 309,
        "text": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximum(a,b):",
        "question_1": "Create a function to compute the maximum of two numbers in Python.",
        "answer_1": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "question_2": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_2": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_3": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_3": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "full_code": "\ndef maximum(a, b):\n    # Step 1: Check if the first number (a) is greater than the second number (b)\n    # Reasoning: If a is greater than b, then a is the maximum.\n    if a > b:\n        # Step 2: If the condition is true, return the first number (a)\n        return a\n    else:\n        # Step 3: If the condition is false, return the second number (b)\n        # Reasoning: If a is not greater than b, then b must be the maximum.\n        return b\n",
        "pass": "True"
    },
    {
        "task_id": 310,
        "text": "Write a function to convert a given string to a tuple.",
        "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_tuple(str1):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
        "full_code": "\ndef string_to_tuple(str1):\n    # Step 1: Convert the string to a list of characters\n    # Reasoning: Tuples are immutable, and converting a string directly to a tuple will treat the entire string as a single element.\n    #            To create a tuple of individual characters, we first need to convert the string to a list.\n    char_list = list(str1)\n    \n    # Step 2: Convert the list of characters to a tuple\n    # Reasoning: Now that we have a list of characters, we can easily convert it to a tuple.\n    char_tuple = tuple(char_list)\n    \n    # Step 3: Return the resulting tuple\n    # Reasoning: The function should return the tuple of characters.\n    return char_tuple\n\n# The following code can be directly executed using exec()\n# exec(\"\"\"\n# def string_to_tuple(str1):\n#     # Step 1: Convert the string to a list of characters\n#     # Reasoning: Tuples are immutable, and converting a string directly to a tuple will treat the entire string as a single element.\n#     #            To create a tuple of individual characters, we first need to convert the string to a list.\n#     char_list = list(str1)\n#     \n#     # Step 2: Convert the list of characters to a tuple\n#     # Reasoning: Now that we have a list of characters, we can easily convert it to a tuple.\n#     char_tuple = tuple(char_list)\n#     \n#     # Step 3: Return the resulting tuple\n#     # Reasoning: The function should return the tuple of characters.\n#     return char_tuple\n# \"\"\")\n",
        "pass": "False"
    },
    {
        "task_id": 311,
        "text": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_left_most_unset_bit(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_2": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "full_code": "\ndef set_left_most_unset_bit(n):\n    # Step 1: Check if the number is zero\n    # If the number is zero, setting the leftmost unset bit means setting the first bit to 1\n    if n == 0:\n        return 1\n    \n    # Step 2: Find the position of the leftmost unset bit\n    # We need to find the highest bit that is not set (0) in the number\n    # To do this, we can use a loop to check each bit from the leftmost side\n    position = 0\n    temp = n\n    \n    # Step 3: Loop through the bits from the leftmost side\n    # We shift the number to the right until it becomes zero\n    while temp > 0:\n        # If we find a bit that is not set, we record its position\n        if temp & 1 == 0:\n            break\n        # Shift the number to the right to check the next bit\n        temp >>= 1\n        position += 1\n    \n    # Step 4: Set the leftmost unset bit\n    # To set the bit at the recorded position, we use the bitwise OR operator with a mask\n    # The mask is created by shifting 1 to the left by the position number of times\n    n = n | (1 << position)\n    \n    return n\n\n# Example usage:\n# n = 12 (binary: 1100)\n# The leftmost unset bit is at position 2 (from the right, starting at 0)\n# Setting this bit will result in 1100 | 0100 = 1110 (binary) which is 14 in decimal\n# print(set_left_most_unset_bit(12))  # Output should be 14\n",
        "pass": "False"
    },
    {
        "task_id": 312,
        "text": "Write a function to find the volume of a cone.",
        "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "test_list": [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_cone(r,h):",
        "question_1": "Create a Python program to calculate the volume of a sphere.",
        "answer_1": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_2": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_2": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_3": "Construct a function in Python to calculate the volume of a sphere.",
        "answer_3": "def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))",
        "full_code": "\nimport math\n\ndef volume_cone(r, h):\n    # Step 1: Understand the formula for the volume of a cone\n    # The formula for the volume of a cone is V = (1/3) * \u03c0 * r^2 * h\n    # where r is the radius of the base and h is the height of the cone.\n    \n    # Step 2: Implement the formula in Python\n    # We will use the math module to get the value of \u03c0 (pi).\n    # The formula can be directly translated into Python code.\n    \n    # Step 3: Calculate the volume using the formula\n    volume = (1/3) * math.pi * (r**2) * h\n    \n    # Step 4: Return the calculated volume\n    return volume\n\n# Example usage:\n# radius = 5\n# height = 10\n# print(\"Volume of the cone:\", volume_cone(radius, height))\n",
        "pass": "False"
    },
    {
        "task_id": 313,
        "text": "Write a python function to print positive numbers in a list.",
        "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "test_list": [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_nos(list1):",
        "question_1": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_1": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_2": "Create a basic Python program to classify a list of positive and negative integer numbers.",
        "answer_2": "positive_numbers = []\nnegative_numbers = []\n\nfor num in numbers:\n if num > 0:\n  positive_numbers.append(num)\n else:\n  negative_numbers.append(num)\n\nprint('Positive numbers:', positive_numbers)\nprint('Negative numbers:', negative_numbers)",
        "question_3": "Compose a code in Python that counts the number of positive integers in a list.",
        "answer_3": "def count_positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count",
        "full_code": "\ndef pos_nos(list1):\n    # Initialize an empty list to store the positive numbers\n    positive_numbers = []\n    \n    # Iterate through each number in the input list\n    for num in list1:\n        # Check if the number is greater than 0\n        if num > 0:\n            # If the number is positive, append it to the positive_numbers list\n            positive_numbers.append(num)\n    \n    # Print the list of positive numbers\n    print(positive_numbers)\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 314,
        "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "test_list": [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_rectangular_grid(grid, n) :",
        "question_1": "Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum.",
        "answer_1": "def find_largest_sum(lst):\n    largest_sum = 0\n    for i in range(len(lst) - 1):\n        current_sum = lst[i] + lst[i+1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum",
        "question_2": "Create a Python script that optimizes a 2D matrix for maximal sum.",
        "answer_2": "def find_max_sum(matrix):\n    row = len(matrix)\n    col = len(matrix[0])\n    max_sum = 0\n    max_row = 0\n    max_col = 0\n\n    for i in range(row):\n        for j in range(col):\n            # Iterating over top, bottom, left, right columns\n            top_val = 0\n            left_val = 0\n            if i > 0:\n                top_val = matrix[i - 1][j]\n            if j > 0:\n                left_val = matrix[i][j - 1]\n            cur_sum = matrix[i][j] + top_val + left_val\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                max_row = i\n                max_col = j\n\n    return max_sum\n\nresult = find_max_sum(\n    [[1, 2, 3], \n    [4, 5, 6], \n    [7, 8, 9]]\n)\nprint(result)",
        "question_3": "Design a Python program to compute the maximum sum of any subpolygon within a given array of N points",
        "answer_3": "def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')",
        "full_code": "\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize a DP array to store the maximum sum up to each column\n    dp = [0] * n\n    \n    # Initialize the first column of the DP array\n    dp[0] = max(grid[0][0], grid[1][0])\n    \n    # If there's only one column, return the maximum value in that column\n    if n == 1:\n        return dp[0]\n    \n    # Initialize the second column of the DP array\n    dp[1] = max(dp[0], max(grid[0][1], grid[1][1]))\n    \n    # Iterate through each column starting from the third column\n    for i in range(2, n):\n        # The maximum sum up to the current column is the maximum of:\n        # 1. The maximum sum up to the previous column (not choosing the current column)\n        # 2. The maximum sum up to the second previous column plus the maximum value in the current column\n        dp[i] = max(dp[i-1], dp[i-2] + max(grid[0][i], grid[1][i]))\n    \n    # The answer will be the maximum sum up to the last column\n    return dp[-1]\n\n# Example usage:\ngrid = [\n    [1, 2, 3],\n    [4, 5, 6]\n]\nn = 3\nresult = max_sum_rectangular_grid(grid, n)\nprint(result)  # Output should be 12 (choosing 6 and 5)\n",
        "pass": "True"
    },
    {
        "task_id": 315,
        "text": "Write a python function to find the first maximum length of even word.",
        "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "test_list": [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Len_Even(str):",
        "question_1": "Write a function in Python to find out the longest word in a string",
        "answer_1": "def longestWord(str):\n    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in words:\n        if len(word) == max_len:\n            return word",
        "question_2": "Write a Python program that would take a string and return the length of its longest word.",
        "answer_2": "def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "question_3": "Create a Python function to find the longest word in a given sentence.",
        "answer_3": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "full_code": "\ndef find_Max_Len_Even(str):\n    # Step 1: Split the input string into words\n    words = str.split()\n    \n    # Step 2: Initialize variables to keep track of the maximum length of even words and the corresponding word\n    max_len_even = 0\n    max_len_even_word = \"\"\n    \n    # Step 3: Iterate through each word in the list of words\n    for word in words:\n        # Step 4: Check if the length of the word is even\n        if len(word) % 2 == 0:\n            # Step 5: If the length of the current even word is greater than the previously recorded maximum length of even words\n            if len(word) > max_len_even:\n                # Step 6: Update the maximum length of even words and the corresponding word\n                max_len_even = len(word)\n                max_len_even_word = word\n    \n    # Step 7: Return the first maximum length even word found\n    return max_len_even_word\n\n# The entire function code as a plain string\nfunction_code = \"\"\"\ndef find_Max_Len_Even(str):\n    # Step 1: Split the input string into words\n    words = str.split()\n    \n    # Step 2: Initialize variables to keep track of the maximum length of even words and the corresponding word\n    max_len_even = 0\n    max_len_even_word = \"\"\n    \n    # Step 3: Iterate through each word in the list of words\n    for word in words:\n        # Step 4: Check if the length of the word is even\n        if len(word) % 2 == 0:\n            # Step 5: If the length of the current even word is greater than the previously recorded maximum length of even words\n            if len(word) > max_len_even:\n                # Step 6: Update the maximum length of even words and the corresponding word\n                max_len_even = len(word)\n                max_len_even_word = word\n    \n    # Step 7: Return the first maximum length even word found\n    return max_len_even_word\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(function_code)\n",
        "pass": "False"
    },
    {
        "task_id": 316,
        "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "test_list": [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_last_occurrence(A, x):",
        "question_1": "Generate a Python program to return the index of the last occurrence of an item in a given list",
        "answer_1": "def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1",
        "question_2": "Generate a function in Python that returns the index of the first occurrence of a given number in an array.",
        "answer_2": "def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1",
        "question_3": "Generate a Python function to return the index of a given number in a sorted list.",
        "answer_3": "def index_of(number, lst): \n    hi = len(lst) \n    lo = 0\n    index = -1\n\n    while hi > lo: \n        mid = (hi + lo)//2\n        if lst[mid] < number: \n            lo = mid + 1\n        elif lst[mid] > number: \n            hi = mid \n        else: \n            index = mid \n            return index \n    return index",
        "full_code": "\ndef find_last_occurrence(A, x):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(A) - 1\n    # Initialize the result to -1, which will be returned if the element is not found\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # If the middle element is equal to the target element\n        if A[mid] == x:\n            # Update the result to the current middle index\n            result = mid\n            # Move to the right half to find the last occurrence\n            low = mid + 1\n        # If the middle element is less than the target element\n        elif A[mid] < x:\n            # Move the low pointer to mid + 1\n            low = mid + 1\n        # If the middle element is greater than the target element\n        else:\n            # Move the high pointer to mid - 1\n            high = mid - 1\n\n    # Return the result, which will be the index of the last occurrence or -1 if not found\n    return result\n\n# Example usage:\n# A = [1, 2, 2, 2, 3, 4, 4, 5]\n# x = 2\n# print(find_last_occurrence(A, x))  # Output: 3\n",
        "pass": "True"
    },
    {
        "task_id": 317,
        "text": "Write a function to reflect the modified run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "test_list": [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef modified_encode(alist):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Solve the following problem using python",
        "answer_2": "def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))",
        "question_3": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_3": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']",
        "full_code": "\nfrom itertools import groupby\n\ndef modified_encode(alist):\n    # Initialize an empty list to store the encoded result\n    encoded_list = []\n    \n    # Iterate over each group of consecutive elements in the input list\n    for key, group in groupby(alist):\n        # Calculate the length of the current group\n        group_length = len(list(group))\n        \n        # If the group length is greater than 1, append the key and the length\n        if group_length > 1:\n            encoded_list.append(f\"{key}{group_length}\")\n        # If the group length is 1, just append the key\n        else:\n            encoded_list.append(key)\n    \n    # Return the encoded list\n    return encoded_list\n\n# Example usage:\nalist = [\"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\"]\nprint(modified_encode(alist))  # Output: ['a3', 'b', 'c2', 'd4']\n",
        "pass": "False"
    },
    {
        "task_id": 318,
        "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "test_list": [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_volume (s):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "full_code": "\ndef max_volume(s):\n    # To find the maximum volume of a cuboid with a given sum of sides 's',\n    # we need to maximize the product of the three dimensions (length, breadth, height).\n    # The sum of the sides is given by: length + breadth + height = s\n    \n    # We can use the AM-GM inequality (Arithmetic Mean - Geometric Mean Inequality)\n    # which states that for any non-negative numbers a, b, c:\n    # (a + b + c) / 3 >= (a * b * c) ** (1/3)\n    # This implies that the maximum product a * b * c is achieved when a = b = c.\n    \n    # Therefore, to maximize the volume, we should distribute the sum 's' equally\n    # among the three dimensions. This gives us:\n    # length = breadth = height = s / 3\n    \n    # However, since the dimensions must be non-negative integers, we need to handle\n    # the case where 's' is not perfectly divisible by 3. In such cases, we can\n    # distribute the remainder as evenly as possible among the three dimensions.\n    \n    # Calculate the base dimension (which is the integer part of s/3)\n    base_dimension = s // 3\n    \n    # Calculate the remainder when 's' is divided by 3\n    remainder = s % 3\n    \n    # If there is no remainder, all dimensions are equal to base_dimension\n    if remainder == 0:\n        length = breadth = height = base_dimension\n    # If there is a remainder of 1, we can add 1 to one of the dimensions\n    elif remainder == 1:\n        length = base_dimension + 1\n        breadth = height = base_dimension\n    # If there is a remainder of 2, we can add 1 to two of the dimensions\n    else:\n        length = breadth = base_dimension + 1\n        height = base_dimension\n    \n    # Calculate the maximum volume\n    max_vol = length * breadth * height\n    \n    return max_vol\n\n# Example usage:\n# print(max_volume(10))  # Output should be 36 (since 3x3x4 = 36)\n",
        "pass": "True"
    },
    {
        "task_id": 319,
        "text": "Write a function to find all five characters long word in the given string by using regex.",
        "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "test_list": [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_long_word(text):",
        "question_1": "Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters.",
        "answer_1": "def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words",
        "question_2": "Create a Python lambda expression to return all strings that longer than 5 characters long.",
        "answer_2": "words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar']",
        "question_3": "Write a Python program to filter out the words of length greater than 5 from a given list of words",
        "answer_3": "def filter_long_words(words):\n  return [word for word in words if len(word) > 5]",
        "full_code": "\nimport re\n\ndef find_long_word(text):\n    # Step 1: Define the regex pattern to match words that are exactly 5 characters long.\n    # The pattern \\b\\w{5}\\b matches a word boundary (\\b), followed by exactly 5 word characters (\\w{5}),\n    # and then another word boundary (\\b). This ensures that we match whole words of exactly 5 characters.\n    pattern = r'\\b\\w{5}\\b'\n    \n    # Step 2: Use the findall method from the re module to find all occurrences of the pattern in the text.\n    # findall returns a list of all non-overlapping matches in the string as a list of strings.\n    five_char_words = re.findall(pattern, text)\n    \n    # Step 3: Return the list of words that are exactly 5 characters long.\n    return five_char_words\n\n# The function is now complete and can be executed directly using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 320,
        "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_difference(n):",
        "question_1": "Create a function in Python to calculate the sum of squares of all numbers up to a given value n.",
        "answer_1": "def sumOfSquares(n):\n  sum = 0\n  for i in range(n + 1):\n    sum += (i ** 2)\n  return sum\n\nprint(sumOfSquares(10))",
        "question_2": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_2": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_3": "Design a Python script to calculate the sum of the squares of the first 100 natural numbers",
        "answer_3": "def sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 2\n    return total\n \nprint(sum_of_squares(100))",
        "full_code": "\ndef sum_difference(n):\n    # Step 1: Calculate the sum of the first n natural numbers\n    # The formula for the sum of the first n natural numbers is (n * (n + 1)) / 2\n    sum_of_n = (n * (n + 1)) // 2\n    \n    # Step 2: Calculate the square of the sum of the first n natural numbers\n    square_of_sum = sum_of_n ** 2\n    \n    # Step 3: Calculate the sum of the squares of the first n natural numbers\n    # The formula for the sum of the squares of the first n natural numbers is (n * (n + 1) * (2n + 1)) / 6\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Step 4: Calculate the difference between the square of the sum and the sum of the squares\n    difference = square_of_sum - sum_of_squares\n    \n    # Step 5: Return the calculated difference\n    return difference\n\n# Example usage:\nprint(sum_difference(10))  # Output the difference for the first 10 natural numbers\n",
        "pass": "True"
    },
    {
        "task_id": 321,
        "text": "Write a function to find the demlo number for the given number.",
        "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "test_list": [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_demlo(s):",
        "question_1": "Create a python program to calculate the Mertens function over a given range.",
        "answer_1": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)",
        "question_2": "Create a function in Python that evaluates a given expression and returns the result. The function must be able to handle basic operations (e.g. +, -, /, *) and arbitrary number of input values.",
        "answer_2": "def arithmetic_eval(expression):\n return eval(expression)\n \n# Example\narithmetic_eval('2 + 3 * 5')\n# Output: 17",
        "question_3": "Create a python program to display the numbers divisible by 3 in the given range",
        "answer_3": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)",
        "full_code": "\ndef find_demlo(s):\n    # Step 1: Convert the input string to an integer\n    # This is necessary because the Demlo number is based on the integer representation of the number\n    n = int(s)\n    \n    # Step 2: Initialize an empty string to store the result\n    # This will be used to build the Demlo number as a string\n    result = \"\"\n    \n    # Step 3: Loop through the range from 1 to n (inclusive)\n    # For each number in this range, we will append the number to the result string\n    for i in range(1, n + 1):\n        result += str(i)\n    \n    # Step 4: Return the result string\n    # This string now represents the Demlo number for the given input\n    return result\n\n# Example usage:\n# find_demlo('3') will return '123'\n```\n\nThis code defines a function `find_demlo` that takes a string `s` as input, converts it to an integer, and then constructs the Demlo number by concatenating the string representations of numbers from 1 to `n`. The result is returned as a string.",
        "pass": "Error"
    },
    {
        "task_id": 322,
        "text": "Write a function to find all index positions of the minimum values in a given list.",
        "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "test_list": [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_min(list1):",
        "question_1": "Generate a code in Python to find the index of the smallest element in a given list of numbers.",
        "answer_1": "def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index",
        "question_2": "Construct a Python script for finding the second smallest element in a given list.",
        "answer_2": "def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;",
        "question_3": "Optimize the following python program and reduce its runtime.",
        "answer_3": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "full_code": "\ndef position_min(list1):\n    # Step 1: Find the minimum value in the list\n    # This is necessary to identify the value we are looking for in the list\n    min_value = min(list1)\n    \n    # Step 2: Initialize an empty list to store the index positions\n    # This list will hold all the indices where the minimum value is found\n    min_positions = []\n    \n    # Step 3: Iterate through the list to find all occurrences of the minimum value\n    # We use enumerate to get both the index and the value at each position\n    for index, value in enumerate(list1):\n        # Step 4: Check if the current value is equal to the minimum value\n        if value == min_value:\n            # Step 5: If it is, append the index to the list of positions\n            min_positions.append(index)\n    \n    # Step 6: Return the list of indices where the minimum value occurs\n    return min_positions\n\n# Example usage:\n# list1 = [3, 1, 4, 1, 5, 9, 1]\n# print(position_min(list1))  # Output should be [1, 3, 6]\n",
        "pass": "True"
    },
    {
        "task_id": 323,
        "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "test_list": [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def right_rotate(arr, n, out_of_place, cur):",
        "question_1": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_1": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)",
        "question_2": "Develop a Python program for reversing the order of a given array.",
        "answer_2": "def reverse_array(arr):\n  start = 0\n  end = len(arr) - 1\n  while start < end:\n    arr[start], arr[end] = arr[end], arr[start]\n    start += 1\n    end -= 1\n  return arr",
        "question_3": "Write a function in Python that takes an array of integer values and reverses the order of the values.",
        "answer_3": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order",
        "full_code": "\ndef right_rotate(arr, n, out_of_place, cur):\n    # Store the element at the out_of_place index\n    temp = arr[cur]\n    # Shift elements to the right starting from out_of_place to cur-1\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    # Place the stored element at the out_of_place index\n    arr[out_of_place] = temp\n    return arr\n\ndef rearrange_alternating(arr):\n    n = len(arr)\n    # Initialize out_of_place to -1 indicating no out of place element yet\n    out_of_place = -1\n    \n    # Iterate through the array\n    for index in range(n):\n        # If there is an out of place element\n        if out_of_place >= 0:\n            # Check if we need to place a positive number at out_of_place\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                # Right rotate the array to bring the correct element to out_of_place\n                arr = right_rotate(arr, n, out_of_place, index)\n                \n                # If the index is more than 2 positions away from out_of_place,\n                # the new out_of_place will be 2 positions to the right\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        \n        # If there's no out of place element, check if the current element is out of place\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 1) or (arr[index] < 0 and index % 2 == 0):\n                out_of_place = index\n    \n    return arr\n\n# Example usage\narr = [1, -3, 5, 6, -3, 6, 7, -4, 9, 10]\nprint(rearrange_alternating(arr))\n",
        "pass": "False"
    },
    {
        "task_id": 324,
        "text": "Write a function to extract the sum of alternate chains of tuples.",
        "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "test_list": [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_alternates(test_tuple):",
        "question_1": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_1": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]",
        "question_2": "Rewrite the following code using reduce() method in Python",
        "answer_2": "from functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10",
        "question_3": "Implement a function in Python that takes a 2-dimensional list of integers and returns a list with the same shape, containing the sums of previous elements from left to right.",
        "answer_3": "def accumulator_add(matrix):\n   output_matrix = []\n   #iterates over all sublists\n   for row in matrix:\n       #creates a new sublist to store the sums\n       output_sublist = []\n       sum = 0\n       #iterates over all elements in the sublist\n       for sublist_element in rows:\n           #adds the element to the total sum\n           sum +=sublist_element\n           #appends the updated total sum to the new sublist\n           output_sublist.append(sum)\n       #appends the new sublist to the new list\n       output_matrix.append(output_sublist)\n   #returns the new matrix\n   return output_matrix",
        "full_code": "\ndef sum_of_alternates(test_tuple):\n    # Initialize a variable to store the sum of alternate chains\n    total_sum = 0\n    \n    # Iterate over the tuple with an index to keep track of the position\n    for i, value in enumerate(test_tuple):\n        # Check if the index is even (0, 2, 4, ...)\n        if i % 2 == 0:\n            # Add the value to the total sum if the index is even\n            total_sum += value\n    \n    # Return the total sum of alternate chains\n    return total_sum\n\n# Example usage:\n# test_tuple = (1, 2, 3, 4, 5, 6)\n# print(sum_of_alternates(test_tuple))  # Output should be 9 (1 + 3 + 5)\n",
        "pass": "False"
    },
    {
        "task_id": 325,
        "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "test_list": [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Min_Squares(n):",
        "question_1": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_1": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_2": "Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.",
        "answer_2": "def sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))",
        "question_3": "Create a function in Python that takes a list of numbers and returns the sum of all of the squared elements in the list.",
        "answer_3": "def sum_squares(nums): \n  total = 0\n  for num in nums:\n    total += num**2\n  return total\n\nprint(sum_squares([1, 2, 3, 4])) \n# Output: 30",
        "full_code": "\ndef get_Min_Squares(n):\n    # Initialize a list to store the minimum number of squares for each number up to n\n    # dp[i] will hold the minimum number of squares that sum to i\n    dp = [float('inf')] * (n + 1)\n    \n    # Base case: The minimum number of squares that sum to 0 is 0\n    dp[0] = 0\n    \n    # Iterate through each number from 1 to n\n    for i in range(1, n + 1):\n        # Try to find the minimum number of squares that sum to i\n        # For each i, check all possible squares less than or equal to i\n        for j in range(1, int(i**0.5) + 1):\n            # If i is greater than or equal to j^2, update dp[i]\n            if i >= j*j:\n                dp[i] = min(dp[i], dp[i - j*j] + 1)\n    \n    # The answer for n is stored in dp[n]\n    return dp[n]\n\n# Example usage:\n# print(get_Min_Squares(12))  # Output: 3 (12 = 4 + 4 + 4)\n# print(get_Min_Squares(13))  # Output: 2 (13 = 4 + 9)\n",
        "pass": "True"
    },
    {
        "task_id": 326,
        "text": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "test_list": [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):",
        "question_1": "Design and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.",
        "answer_1": "def most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word",
        "question_2": "Generate a program in Python to count the most frequent words in a string.",
        "answer_2": "from collections import Counter\ndef frequent_words(string): \n    # Break the string into words  \n    words = string.split(\" \") \n  \n    # Count each word using Counter Method \n    cnt = Counter(words)  \n  \n    # Find the 5 most frequent words \n    frequent_words = cnt.most_common(5) \n  \n    print(\"The 5 most frequent words are : \") \n    for word, count in frequent_words: \n        print('%s : %d' % (word, count)) \n  \n# Driver Program  \nstring = \"This is a test string\"\nfrequent_words(string) \n\n# Output:\n# The 5 most frequent words are : \n# This : 1\n# is : 1\n# a : 1\n# test : 1\n# string : 1",
        "question_3": "Develop an algorithm in Python that finds the most frequent word in a string.",
        "answer_3": "def most_frequent(input_string): \n  \n    # split the string into words & get each word's frequency \n    splitted_string = input_string.split() \n    freq_table = {} \n    for words in splitted_string: \n        if words in freq_table: \n            freq_table[words] += 1\n        else: \n            freq_table[words] = 1\n\n \n    # find the most frequent word \n    most_freq_word = ''\n    most_freq_count = 0\n    for words in freq_table: \n        if freq_table[words] > most_freq_count: \n            most_freq_word = words \n            most_freq_count = freq_table[words]\n  \n    return most_freq_word \n  \n# Driver program \ninput_string = \"This is a sample string\"\nprint(most_frequent(input_string))",
        "full_code": "\nfrom collections import defaultdict \n\ndef most_occurrences(test_list):\n    # Initialize a defaultdict to store the frequency of each word\n    word_frequency = defaultdict(int)\n    \n    # Iterate over each string in the list\n    for string in test_list:\n        # Split the string into individual words\n        words = string.split()\n        \n        # Update the frequency count for each word\n        for word in words:\n            word_frequency[word] += 1\n    \n    # Initialize variables to track the most frequent word and its count\n    most_frequent_word = None\n    max_frequency = 0\n    \n    # Iterate over the word frequency dictionary to find the most frequent word\n    for word, frequency in word_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            most_frequent_word = word\n    \n    # Return the word with the most occurrences\n    return most_frequent_word\n\n# Example usage:\ntest_list = [\"This is a test\", \"This is another test\", \"This is the final test\"]\nprint(most_occurrences(test_list))  # Output: \"This\"\n",
        "pass": "True"
    },
    {
        "task_id": 327,
        "text": "Write a function to print check if the triangle is isosceles or not.",
        "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_isosceles(x,y,z):",
        "question_1": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_1": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_2": "Create a Python program to identify the type of triangles given three sides.",
        "answer_2": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_3": "Create a python program to classify the type of a triangle based on the side lengths.",
        "answer_3": "def get_triangle_type(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"",
        "full_code": "\ndef check_isosceles(x, y, z):\n    # Step 1: Check if all sides are greater than zero\n    # Reasoning: A triangle cannot have a side with zero or negative length\n    if x > 0 and y > 0 and z > 0:\n        \n        # Step 2: Check if any two sides are equal\n        # Reasoning: An isosceles triangle has at least two sides of equal length\n        if x == y or y == z or x == z:\n            \n            # Step 3: Print the result indicating the triangle is isosceles\n            print(\"The triangle is isosceles.\")\n        \n        # Step 4: If no two sides are equal, print that the triangle is not isosceles\n        else:\n            print(\"The triangle is not isosceles.\")\n    \n    # Step 5: If any side is zero or negative, print that the input is invalid\n    else:\n        print(\"Invalid input: Triangle sides must be greater than zero.\")\n\n# Example usage:\n# check_isosceles(5, 5, 7)  # This should print \"The triangle is isosceles.\"\n# check_isosceles(3, 4, 5)  # This should print \"The triangle is not isosceles.\"\n# check_isosceles(0, 4, 5)  # This should print \"Invalid input: Triangle sides must be greater than zero.\"\n",
        "pass": "False"
    },
    {
        "task_id": 328,
        "text": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "test_list": [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rotate_left(list1,m,n):",
        "question_1": "Write a Python function to rotate a list by n items to the left.",
        "answer_1": "def rotate(list, n): \n    return list[n:] + list[:n]",
        "question_2": "Create a python program to rotate a list of numbers by a given number.",
        "answer_2": "def rotate_list(nums, n):\n  return nums[n:] + nums[:n]",
        "question_3": "Make a Python program to rotate a list by n elements to the left.",
        "answer_3": "# Function to rotate a list by n elements to the left \ndef rotateList(input_list, n): \n    return input_list[n:] + input_list[:n]  \n\n# Driver Code \nif __name__ == \"__main__\": \n    input_list = [1, 2, 3, 4, 5, 6] \n    print(rotateList(input_list, 3))",
        "full_code": "\ndef rotate_left(list1, m, n):\n    # Step 1: Check if the list is empty or if the rotation amount is zero\n    # If the list is empty or the rotation amount is zero, return the list as is\n    if not list1 or n == 0:\n        return list1\n    \n    # Step 2: Normalize the rotation amount to be within the length of the list\n    # This ensures that rotating by more than the length of the list is handled correctly\n    n = n % len(list1)\n    \n    # Step 3: Perform the rotation by slicing the list\n    # The first part of the list is taken from the nth element to the end\n    # The second part of the list is taken from the start to the nth element\n    rotated_list = list1[n:] + list1[:n]\n    \n    # Step 4: Return the rotated list\n    return rotated_list\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5]\n# m = 2  # This parameter is not used in the function, but is kept for consistency with the function signature\n# n = 2  # Number of items to rotate to the left\n# print(rotate_left(list1, m, n))  # Output: [3, 4, 5, 1, 2]\n",
        "pass": "False"
    },
    {
        "task_id": 329,
        "text": "Write a python function to count negative numbers in a list.",
        "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "test_list": [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_count(list):",
        "question_1": "Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.",
        "answer_1": "def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)",
        "question_2": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_2": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_3": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_3": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)",
        "full_code": "\ndef neg_count(list):\n    # Initialize a counter to keep track of the number of negative numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in list:\n        # Check if the current number is negative\n        if number < 0:\n            # If it is negative, increment the counter\n            count += 1\n    \n    # Return the count of negative numbers\n    return count\n\n# Example usage:\n# numList = [-2, 4, 3, -3, -4, 5]\n# print(neg_count(numList))  # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 330,
        "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "test_list": [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_char(text):",
        "question_1": "Create a Python lambda expression to return all strings that longer than 5 characters long.",
        "answer_1": "words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar']",
        "question_2": "Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters.",
        "answer_2": "def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words",
        "question_3": "Create a Python program to filter out words containing five characters or less from a list of words.",
        "answer_3": "# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)",
        "full_code": "\nimport re\n\ndef find_char(text):\n    # Step 1: Define the regex pattern to match words of length 3, 4, or 5\n    # We use \\b to denote word boundaries and \\w{3,5} to match words with 3 to 5 characters\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Step 2: Use re.findall to find all matches in the given text\n    # re.findall returns a list of all non-overlapping matches in the string\n    matches = re.findall(pattern, text)\n    \n    # Step 3: Return the list of matched words\n    return matches\n\n# Example usage:\ntext = \"This is a test string to find words of specific lengths.\"\nresult = find_char(text)\nprint(result)  # Output: ['This', 'is', 'a', 'test', 'to', 'find', 'of', 'spec', 'ific', 'leng']\n",
        "pass": "True"
    },
    {
        "task_id": 331,
        "text": "Write a python function to count unset bits of a given number.",
        "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "test_list": [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_unset_bits(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Generate a code to find the number of 1-bits in an integer",
        "answer_3": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))",
        "full_code": "\ndef count_unset_bits(n):\n    # Step 1: Convert the number to its binary representation\n    # We use the bin() function which returns a string starting with '0b' followed by the binary digits\n    binary_representation = bin(n)\n    \n    # Step 2: Remove the '0b' prefix from the binary string\n    # This is necessary because we only want the actual binary digits\n    binary_digits = binary_representation[2:]\n    \n    # Step 3: Count the total number of bits in the binary representation\n    total_bits = len(binary_digits)\n    \n    # Step 4: Count the number of '1' bits in the binary representation\n    # This can be done by counting the occurrences of '1' in the binary string\n    ones_count = binary_digits.count('1')\n    \n    # Step 5: Calculate the number of unset bits (i.e., '0' bits)\n    # The number of unset bits is the total number of bits minus the number of '1' bits\n    unset_bits_count = total_bits - ones_count\n    \n    # Step 6: Return the count of unset bits\n    return unset_bits_count\n\n# Example usage:\n# n = 23 (binary: 10111)\n# The function should return 2, as there are 2 unset bits (0s) in the binary representation of 23\nprint(count_unset_bits(23))  # Output should be 2\n",
        "pass": "True"
    },
    {
        "task_id": 332,
        "text": "Write a function to count character frequency of a given string.",
        "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "test_list": [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def char_frequency(str1):",
        "question_1": "Generate a programming code with Python to count the frequency of each character in a given string.",
        "answer_1": "def count_frequency(text):\n  char_frequency = {}\n  for i in text:\n    if i in char_frequency:\n      char_frequency[i] += 1\n    else:\n      char_frequency[i] = 1\n  return char_frequency\n\nstr1 = 'hello'\nres = count_frequency(str1) \n\nprint (\"Per character frequency is : \\n\" +  str(res))",
        "question_2": "Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character.",
        "answer_2": "def char_freq(s):\n    freq = dict()\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\nstring = 'hello'\nresult = char_freq(string)\n\nprint(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}",
        "question_3": "Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character.",
        "answer_3": "def count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts",
        "full_code": "\ndef char_frequency(str1):\n    # Initialize an empty dictionary to store the frequency of each character\n    frequency = {}\n    \n    # Iterate over each character in the input string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in frequency:\n            # If it is, increment its count by 1\n            frequency[char] += 1\n        else:\n            # If it is not, add the character to the dictionary with a count of 1\n            frequency[char] = 1\n    \n    # Return the dictionary containing the frequency of each character\n    return frequency\n\n# Example usage:\n# str1 = 'hello'\n# result = char_frequency(str1)\n# print(result)  # Output will be {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n",
        "pass": "True"
    },
    {
        "task_id": 333,
        "text": "Write a python function to sort a list according to the second element in sublist.",
        "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "test_list": [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Sort(sub_li):",
        "question_1": "Write a function in Python to sort a given list according to the second element of the sublists.",
        "answer_1": "def sort_by_second_element(arr):\n    def get_second_element(item):\n        return item[1]\n    return sorted(arr, key = get_second_element)\n\narr = [[1,2], [2,3], [3,1]]\nresult = sort_by_second_element(arr)\nprint(result)",
        "question_2": "Write a function in Python to sort a given list according to the second element in the sublist",
        "answer_2": "def sort_by_second_element(list):\n    list.sort(key= lambda x : x[1])\n    return list\n\nlist = [['B', 'b'], ['A', 'a'], ['C', 'c']]\n\nprint(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]",
        "question_3": "Generate a python program to sort a list according to its second element",
        "answer_3": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst",
        "full_code": "\ndef Sort(sub_li):\n    # Step 1: Define a lambda function to extract the second element of each sublist.\n    # This will be used as the key for sorting.\n    key_func = lambda x: x[1]\n    \n    # Step 2: Use the sort method of the list with the key function to sort the list.\n    # The sort method will sort the list in place.\n    sub_li.sort(key=key_func)\n    \n    # Step 3: Return the sorted list.\n    return sub_li\n\n# Example usage:\n# sub_li = [[1, 2], [3, 1], [2, 3]]\n# print(Sort(sub_li))  # Output: [[3, 1], [1, 2], [2, 3]]\n",
        "pass": "True"
    },
    {
        "task_id": 334,
        "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "test_list": [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Validity(a,b,c):",
        "question_1": "Develop a Python program to check if a triangle is valid or not.",
        "answer_1": "# A function to check if the triangle is valid \ndef valid_triangle(side1, side2, side3): \n    # Check the sum of any two sides should be\n    # greater than the third one. \n    a = side1 + side2 \n    b = side1 + side3 \n    c = side2 + side3 \n       \n    if (a > side3) and (b > side2) and (c > side1): \n        return True\n    else: \n        return False\n\n# Driver Code \nside1 = 3 \nside2 = 4 \nside3 = 5  \nif valid_triangle(side1, side2, side3): \n    print(\"The triangle is valid\")\nelse: \n    print(\"The triangle is not valid\")",
        "question_2": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
        "answer_2": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
        "question_3": "Create a Python program that can identify a triangle using the 3 provided side lengths.",
        "answer_3": "\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))",
        "full_code": "\n\"\"\"\nThis function checks whether a triangle is valid or not based on the given side lengths a, b, and c.\nThe function follows these steps:\n1. Check if the sum of any two sides is greater than the third side.\n2. If all three conditions are satisfied, the triangle is valid.\n3. Otherwise, the triangle is not valid.\n\"\"\"\n\ndef check_Validity(a, b, c):\n    # Step 1: Check if the sum of sides a and b is greater than side c\n    if a + b > c:\n        # Step 2: Check if the sum of sides b and c is greater than side a\n        if b + c > a:\n            # Step 3: Check if the sum of sides a and c is greater than side b\n            if a + c > b:\n                # If all conditions are satisfied, the triangle is valid\n                return True\n    # If any condition fails, the triangle is not valid\n    return False\n\n# Example usage:\n# Uncomment the following lines to test the function\n# print(check_Validity(3, 4, 5))  # Should return True\n# print(check_Validity(1, 1, 3))  # Should return False\n",
        "pass": "True"
    },
    {
        "task_id": 335,
        "text": "Write a function to find the sum of arithmetic progression.",
        "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "test_list": [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ap_sum(a,n,d):",
        "question_1": "Create a function to calculate the sum of a sequence of integers.",
        "answer_1": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "question_2": "Optimize a function in Python that calculates the sum of numbers from 0 to n.",
        "answer_2": "def fast_sum(n):\n    return ((n+1)*n)/2",
        "question_3": "Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.",
        "answer_3": "import re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)",
        "full_code": "\ndef ap_sum(a, n, d):\n    # Step 1: Understand the formula for the sum of an arithmetic progression.\n    # The sum S of the first n terms of an arithmetic progression can be calculated using the formula:\n    # S = n/2 * (2*a + (n-1)*d)\n    # where:\n    # a = first term of the sequence\n    # n = number of terms\n    # d = common difference\n\n    # Step 2: Implement the formula in the function.\n    # Calculate the sum using the formula.\n    sum = (n / 2) * (2 * a + (n - 1) * d)\n\n    # Step 3: Return the calculated sum.\n    return sum\n\n# Example usage:\n# a = 1 (first term), n = 5 (number of terms), d = 2 (common difference)\n# The sequence would be: 1, 3, 5, 7, 9\n# The sum of this sequence is 25\n# result = ap_sum(1, 5, 2)\n# print(result)  # Output should be 25\n",
        "pass": "True"
    },
    {
        "task_id": 336,
        "text": "Write a function to check whether the given month name contains 28 days or not.",
        "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnum(monthname1):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a Python program to find the number of days in a month using a given year and month.",
        "answer_3": "import calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1]",
        "full_code": "\ndef check_monthnum(monthname1):\n    # Step 1: Define a list of month names that have 31 days\n    # We will use this list to check if the given month name is in it\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    \n    # Step 2: Define a list of month names that have 30 days\n    # We will use this list to check if the given month name is in it\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Step 3: Check if the given month name is \"February\"\n    # If it is, it has 28 days (or 29 in a leap year, but we are only checking for 28 days here)\n    if monthname1 == \"February\":\n        return True\n    \n    # Step 4: Check if the given month name is in the list of months with 31 days\n    # If it is, it does not have 28 days, so return False\n    elif monthname1 in months_with_31_days:\n        return False\n    \n    # Step 5: Check if the given month name is in the list of months with 30 days\n    # If it is, it does not have 28 days, so return False\n    elif monthname1 in months_with_30_days:\n        return False\n    \n    # Step 6: If the month name is not recognized, return False\n    else:\n        return False\n\n# Example usage:\n# monthname1 = \"February\"\n# print(check_monthnum(monthname1))  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 337,
        "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_word(text):",
        "question_1": "Create a Python program to format a string of text using basic punctuation rules.",
        "answer_1": "def punctuate(text):\n    text = text.strip()\n    if not text.endswith('.'):\n        text += '.'\n    if not text.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        text = text[0].upper() + text[1:]\n    for char in ['!', '?', ':', ';', ',', '\"']:\n        if char in text:\n            text = text[:-1] + char + ' '\n    return text\n\npunctuate('this is a string of text')\n# Output: 'This is a string of text.'",
        "question_2": "Write a Python function to determine if a string contains any punctuation characters",
        "answer_2": "def contains_punctuation(string):\n    for character in string:\n        if character in string.punctuation:\n            return True\n    return False\n\nresult = contains_punctuation('Hello world!')\nprint(result)",
        "question_3": "Generate Python code to tokenize the given text.",
        "answer_3": "import re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens",
        "full_code": "\nimport re\n\ndef text_match_word(text):\n    # Step 1: Define the regular expression pattern\n    # We want to match a word at the end of the string, with optional punctuation.\n    # The pattern should look for a sequence of word characters (\\w+) followed by\n    # optional punctuation characters (.,!?;:) at the end of the string ($).\n    pattern = r'\\b\\w+[.,!?;:]*$'\n    \n    # Step 2: Use re.search to find the match\n    # re.search will look for the pattern anywhere in the string, but since we use $\n    # it will effectively match only at the end of the string.\n    match = re.search(pattern, text)\n    \n    # Step 3: Return the matched word or None if no match is found\n    # If a match is found, we return the matched word.\n    # If no match is found, we return None.\n    if match:\n        return match.group(0)\n    else:\n        return None\n\n# Example usage:\n# result = text_match_word(\"Hello world!\")\n# print(result)  # Output: \"world!\"\n",
        "pass": "False"
    },
    {
        "task_id": 338,
        "text": "Write a python function to count the number of substrings with same first and last characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "question_1": "Generate an algorithm to count substrings in Python.",
        "answer_1": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "question_2": "Develop a Python script to count the number of strings where the string length is 2 or more and the first and last characters are the same.",
        "answer_2": "# Define a function to count the strings\ndef count_strings(lst):\n count = 0\n \n # Iterate through the list\n for s in lst:\n \n # Check if string length is greater than 2 and first and last character is same\n if len(s) >= 2 and s[0] == s[-1]:\n count += 1\n \n return count\n \n# Driver Code\nlst = ['abc', 'xyz', 'aba', '1221']\nprint(count_strings(lst))",
        "question_3": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_3": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))",
        "full_code": "\ndef check_Equality(s):\n    # Initialize a counter to keep track of the number of valid substrings\n    count = 0\n    \n    # Get the length of the string to use in the loop\n    n = len(s)\n    \n    # Iterate over each possible starting index of the substring\n    for i in range(n):\n        # Iterate over each possible ending index of the substring\n        for j in range(i, n):\n            # Check if the first and last characters of the substring are the same\n            if s[i] == s[j]:\n                # If they are the same, increment the counter\n                count += 1\n    \n    # Return the total count of substrings with the same first and last characters\n    return count\n\n# Example usage\ns = \"abca\"\nprint(check_Equality(s))  # Output should be 7 (a, b, c, a, aba, aca, aa)\n",
        "pass": "False"
    },
    {
        "task_id": 339,
        "text": "Write a python function to find the maximum occuring divisor in an interval.",
        "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "test_list": [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Divisor(x,y):",
        "question_1": "Create an optimization program in Python that is able to find the maximum number given its constraints.",
        "answer_1": "import numpy as np\n\n# original constraints \nx_constraints = (x <= 16, x % 2 == 0, x % 4 == 0)\n\n# objective function\nf = lambda x: x\n\n# initializing the variables \nx = np.arange(0, 16)\n\n# searching for maximum value \nmax_value = max(x[np.logical_and.reduce(x_constraints)])\n\nprint(\"The maximum value for the number is {}\".format(max_value))",
        "question_2": "Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers.",
        "answer_2": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\nresult = greatest_common_divisor(12, 24)\nprint(result)",
        "question_3": "Create a function in Python to find the greatest common divisor of two given numbers.",
        "answer_3": "def get_gcd(num1, num2):\n    for i in range(max(num1, num2), 0, -1):\n        if num1 % i == 0 and num2 % i == 0:\n            return i\n\nresult = get_gcd(7, 8)\nprint(result)\n# Output: 1",
        "full_code": "\ndef find_Divisor(x, y):\n    # Step 1: Define a helper function to find all divisors of a given number\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Step 2: Create a dictionary to count the occurrences of each divisor in the interval [x, y]\n    divisor_count = {}\n\n    # Step 3: Iterate through each number in the interval [x, y]\n    for num in range(x, y + 1):\n        # Step 4: Find all divisors of the current number\n        divisors = find_divisors(num)\n        # Step 5: Update the count of each divisor in the dictionary\n        for divisor in divisors:\n            if divisor in divisor_count:\n                divisor_count[divisor] += 1\n            else:\n                divisor_count[divisor] = 1\n\n    # Step 6: Find the divisor with the maximum count\n    max_count = 0\n    max_divisor = None\n    for divisor, count in divisor_count.items():\n        if count > max_count:\n            max_count = count\n            max_divisor = divisor\n\n    # Step 7: Return the divisor with the maximum count\n    return max_divisor\n\n# Example usage:\nresult = find_Divisor(1, 10)\nprint(result)  # Output: 2 (since 2 is the most frequent divisor in the range [1, 10])\n",
        "pass": "False"
    },
    {
        "task_id": 340,
        "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "test_list": [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_three_smallest_nums(lst):",
        "question_1": "Create a Python function that takes a list of integers and returns the summation of the largest and smallest numbers.",
        "answer_1": "def sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation",
        "question_2": "Optimize a function in Python which takes a list and returns the sum of all its elements.",
        "answer_2": "def sum_list_elements(lst):\n \u00a0 \u00a0sum = 0\n \u00a0 \u00a0for item in lst:\n \u00a0 \u00a0 \u00a0 \u00a0sum += item\n \u00a0 \u00a0return sum\n\nprint(sum_list_elements([1, 2, 3]))",
        "question_3": "Optimize the following Python function that returns the sum of all the elements in a given list.",
        "answer_3": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total",
        "full_code": "\ndef sum_three_smallest_nums(lst):\n    # Step 1: Filter out non-positive numbers from the list\n    # We are only interested in positive numbers, so we filter out any number that is less than or equal to 0.\n    positive_nums = [num for num in lst if num > 0]\n    \n    # Step 2: Sort the list of positive numbers in ascending order\n    # Sorting the list will help us easily access the smallest numbers.\n    positive_nums.sort()\n    \n    # Step 3: Sum the first three elements of the sorted list\n    # Since the list is sorted in ascending order, the first three elements will be the smallest positive numbers.\n    # We use slicing to get the first three elements and then sum them up.\n    sum_of_three_smallest = sum(positive_nums[:3])\n    \n    # Step 4: Return the result\n    # Finally, we return the sum of the three smallest positive numbers.\n    return sum_of_three_smallest\n\n# Example usage:\n# print(sum_three_smallest_nums([10, -5, 3, 2, 1, 0, 7, 4]))  # Output should be 6 (1 + 2 + 3)\n",
        "pass": "True"
    },
    {
        "task_id": 341,
        "text": "Write a function to convert the given set into ordered tuples.",
        "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "test_list": [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_to_tuple(s):",
        "question_1": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_1": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_2": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_2": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_3": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]",
        "full_code": "\ndef set_to_tuple(s):\n    # Step 1: Convert the set to a list\n    # Reasoning: Sets in Python are unordered collections, and we need to convert it to a list to maintain order.\n    list_from_set = list(s)\n    \n    # Step 2: Convert each element in the list to a tuple\n    # Reasoning: The task requires us to convert the set into ordered tuples. Each element in the list will be converted to a tuple.\n    tuple_list = [tuple([item]) for item in list_from_set]\n    \n    # Step 3: Return the list of tuples\n    # Reasoning: The function should return the list of tuples as the final output.\n    return tuple_list\n\n# Example usage:\ns = {1, 2, 3, 4}\nprint(set_to_tuple(s))  # Output: [(1,), (2,), (3,), (4,)]\n",
        "pass": "False"
    },
    {
        "task_id": 342,
        "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "test_list": [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):",
        "question_1": "Write a python program to find the smallest element in an array.",
        "answer_1": "def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest",
        "question_2": "Write a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.",
        "answer_2": "def find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item",
        "question_3": "Implement a Python function to find the smallest element in an array",
        "answer_3": "def findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1",
        "full_code": "\nfrom heapq import heappop, heappush\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef find_smallest_range(arrays):\n    # Initialize variables to keep track of the smallest range\n    min_range_start = 0\n    min_range_end = float('inf')\n    max_value = float('-inf')\n    \n    # Min-heap to keep track of the smallest elements from each array\n    min_heap = []\n    \n    # Step 1: Push the first element of each array into the min-heap\n    for i in range(len(arrays)):\n        if arrays[i]:  # Ensure the array is not empty\n            heappush(min_heap, Node(arrays[i][0], i, 0))\n            max_value = max(max_value, arrays[i][0])\n    \n    # Step 2: Continue until one of the arrays is exhausted\n    while min_heap:\n        # Extract the smallest element from the heap\n        min_node = heappop(min_heap)\n        \n        # Calculate the current range\n        current_range = max_value - min_node.value\n        \n        # Update the smallest range if the current range is smaller\n        if current_range < (min_range_end - min_range_start):\n            min_range_start = min_node.value\n            min_range_end = max_value\n        \n        # Move to the next element in the array from which the smallest element was extracted\n        next_index = min_node.index + 1\n        if next_index < len(arrays[min_node.list_num]):\n            next_value = arrays[min_node.list_num][next_index]\n            heappush(min_heap, Node(next_value, min_node.list_num, next_index))\n            max_value = max(max_value, next_value)\n        else:\n            # If any array is exhausted, break the loop\n            break\n    \n    # Return the smallest range found\n    return (min_range_start, min_range_end)\n\n# Example usage:\narrays = [\n    [4, 10, 15, 24, 26],\n    [0, 9, 12, 20],\n    [5, 18, 22, 30]\n]\nprint(find_smallest_range(arrays))\n# Output: (20, 24)\n",
        "pass": "False"
    },
    {
        "task_id": 343,
        "text": "Write a function to calculate the number of digits and letters in a string.",
        "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "test_list": [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dig_let(s):",
        "question_1": "Write a Python function to calculate the sum of the digits in a given string of numbers and letters.",
        "answer_1": "def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum",
        "question_2": "Generate the Python code that calculates the numbers of characters in a given string.",
        "answer_2": "myString = \"Hello, World!\"\n\ncharCount = 0\nfor char in myString:\n    charCount += 1\n    \nprint(\"Number of characters:\", charCount)",
        "question_3": "Write a Python function to count the number of digits in a given number.",
        "answer_3": "def count_digits(num):\n    return len(str(abs(num)))",
        "full_code": "\ndef dig_let(s):\n    # Initialize counters for digits and letters\n    digit_count = 0\n    letter_count = 0\n    \n    # Iterate through each character in the string\n    for ch in s:\n        # Check if the character is a digit\n        if ch.isdigit():\n            digit_count += 1\n        # Check if the character is a letter\n        elif ch.isalpha():\n            letter_count += 1\n    \n    # Return the counts of digits and letters as a tuple\n    return digit_count, letter_count\n\n# The function dig_let is now complete and can be executed directly.\n",
        "pass": "False"
    },
    {
        "task_id": 344,
        "text": "Write a python function to find number of elements with odd factors in a given range.",
        "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "test_list": [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Odd_Squares(n,m):",
        "question_1": "Create a function that computes an array of odd numbers within a given range",
        "answer_1": "# Python3 program to find odd numbers in a range  \n\ndef odd_numbers(n): \n    odd_numbers = [] \n      \n    # looping through each number \n    for i in range(1, n + 1): \n        if i % 2 != 0: \n            odd_numbers.append(i) \n    return odd_numbers",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Modify the following line of code in Python to generate a list of odd numbers in the range [1,n].",
        "answer_3": "[i for i in range (1, 10) if i % 2 != 0]",
        "full_code": "\ndef count_Odd_Squares(n, m):\n    # Initialize a counter to keep track of numbers with odd factors\n    count = 0\n    \n    # Loop through each number in the given range [n, m]\n    for i in range(n, m + 1):\n        # A number has odd factors if and only if it is a perfect square\n        # This is because factors generally come in pairs, but a perfect square\n        # has a middle factor that is repeated (e.g., 9 has factors 1, 3, 9, where 3 is repeated)\n        \n        # Check if the number is a perfect square\n        if int(i**0.5)**2 == i:\n            # If it is a perfect square, increment the counter\n            count += 1\n    \n    # Return the count of numbers with odd factors (perfect squares) in the range\n    return count\n\n# Example usage:\n# print(count_Odd_Squares(1, 10))  # Output should be 3 (1, 4, 9 are perfect squares)\n",
        "pass": "True"
    },
    {
        "task_id": 345,
        "text": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diff_consecutivenums(nums):",
        "question_1": "Write Python code to get the difference between two lists.",
        "answer_1": "def difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list",
        "question_2": "Create a program in Python to find all pairs of elements in a list with the given difference.",
        "answer_2": "def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)",
        "question_3": "Generate a Python program to find the value of two positions in an array that have the greatest difference.",
        "answer_3": "def max_difference(arr):\n    # Initialize max_difference to a negative value\n    max_difference = -float(\"inf\")\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n\nresult = max_difference([7, 1, 3, 8, 25])\nprint(result)",
        "full_code": "\ndef diff_consecutivenums(nums):\n    # Initialize an empty list to store the differences\n    differences = []\n    \n    # Iterate through the list, stopping one element before the end\n    # This is because we are comparing each element with the next one\n    for i in range(len(nums) - 1):\n        # Calculate the difference between the current element and the next element\n        diff = nums[i + 1] - nums[i]\n        \n        # Append the calculated difference to the differences list\n        differences.append(diff)\n    \n    # Return the list of differences\n    return differences\n\n# Example usage:\n# nums = [1, 3, 6, 10]\n# result = diff_consecutivenums(nums)\n# print(result)  # Output should be [2, 3, 4]\n",
        "pass": "True"
    },
    {
        "task_id": 346,
        "text": "Write a function to find entringer number e(n, k).",
        "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "test_list": [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zigzag(n, k):",
        "question_1": "Create a Python function that takes in two parameters (n,k) and returns the value of n^k.",
        "answer_1": "def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result",
        "question_2": "Generate a Python program to calculate the average of the the numbers 1-k.",
        "answer_2": "def average(k):\n    sum = 0\n    for i in range(1, k+1):\n        sum += i\n\n    return sum / k",
        "question_3": "Write a function in Python that takes two parameters \"n\" and \"k\" and returns the number of ways to jump \"k\" steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n.",
        "answer_3": "def steps(n, k):\n if k == 0 or n == k:\n  return 1\n if n > k:\n  return steps(n-1, k-1) + steps(n-2, k-1)\n else:\n  return 0",
        "full_code": "\ndef zigzag(n, k):\n    # The Entringer number E(n, k) can be calculated using a recursive relation.\n    # The base cases are:\n    # E(0, 0) = 1\n    # E(n, 0) = 0 for n > 0\n    # E(n, n) = 1 for n >= 0\n    # The recursive relation is:\n    # E(n, k) = E(n, k-1) + E(n-1, n-k)\n    \n    # First, we handle the base cases\n    if k == 0 and n == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k == n:\n        return 1\n    \n    # If not a base case, use the recursive relation\n    return zigzag(n, k-1) + zigzag(n-1, n-k)\n\n# The function zigzag(n, k) is now defined and can be executed directly.\n",
        "pass": "False"
    },
    {
        "task_id": 347,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Develop a Python function that squares a given number.",
        "answer_3": "def square(number):\n \u00a0 \u00a0return number * number",
        "full_code": "\ndef count_Squares(m, n):\n    # Initialize a counter to keep track of the number of squares\n    count = 0\n    \n    # The largest possible square that can fit in the rectangle is the smaller of the two dimensions\n    # Start with the largest possible square and work downwards\n    for size in range(1, min(m, n) + 1):\n        # For each possible square size, calculate how many such squares fit in the rectangle\n        # The number of squares of size 'size' that fit horizontally is (m - size + 1)\n        # The number of squares of size 'size' that fit vertically is (n - size + 1)\n        # Multiply these two values to get the total number of squares of that size\n        count += (m - size + 1) * (n - size + 1)\n    \n    # Return the total count of squares\n    return count\n\n# Example usage:\n# result = count_Squares(3, 3)\n# print(result)  # Output should be 14 (1x1: 9, 2x2: 4, 3x3: 1)\n",
        "pass": "True"
    },
    {
        "task_id": 348,
        "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "test_list": [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bin_coff(n, r):",
        "question_1": "Design a Python algorithm to perform a Prefix Sum operation on an array.",
        "answer_1": "def prefix_sum(arr):\nresult = []\ns = 0\nfor x in arr:\n    s += x\n    result.append(s)\nreturn result\n\narr = [1, 2, 3, 4]\nprefix_sum(arr)",
        "question_2": "Optimize this Python code to make it more efficient.",
        "answer_2": "def count_numbers(lst):\n    count = sum(map(str.isdigit, lst))\n    return count",
        "question_3": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_3": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)",
        "full_code": "\ndef bin_coff(n, r):\n    # Step 1: Check if r is greater than n\n    # If r is greater than n, the binomial coefficient is 0 because it's not possible to choose more elements than are available.\n    if r > n:\n        return 0\n    \n    # Step 2: Initialize the result to 1\n    # The binomial coefficient (n choose r) is calculated as n! / (r! * (n-r)!)\n    # We start with the result set to 1 because we will be multiplying it.\n    result = 1\n    \n    # Step 3: Calculate the binomial coefficient using an iterative approach\n    # We iterate from 0 to r-1 and multiply by (n-i) and divide by (i+1)\n    # This avoids the need to compute large factorials directly, which can be inefficient.\n    for i in range(r):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    # Step 4: Return the result\n    # After the loop, result will contain the binomial coefficient (n choose r)\n    return result\n\n# Example usage:\n# print(bin_coff(5, 2))  # Output should be 10\n",
        "pass": "False"
    },
    {
        "task_id": 349,
        "text": "Write a python function to check whether the given string is a binary string or not.",
        "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "test_list": [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check(string) :",
        "question_1": "Create a Python function which takes an integer as input and prints it in binary.",
        "answer_1": "def int_to_binary(n):\n    if n == 0:\n        return '0'\n    bin_string = \"\"\n    while n > 0:\n        bin_string = str(n%2) + bin_string\n        n = n // 2\n    return bin_string",
        "question_2": "Generate a code in Python to convert a number into binary format.",
        "answer_2": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010",
        "question_3": "Design a function in Python that takes a decimal number and returns its binary equivalent.",
        "answer_3": "def dec_to_bin(number):\n  # Convert decimal to binary\n  binary = bin(number)\n  # Remove prefix \"0b\"\n  binary = binary[2:]\n  # Return binary\n  return binary\n  \ndecimal = 10\nbinary = dec_to_bin(decimal)\nprint(binary)",
        "full_code": "\ndef check(string):\n    # Step 1: Check if the string is empty\n    # An empty string cannot be a binary string, so we return False\n    if not string:\n        return False\n    \n    # Step 2: Iterate through each character in the string\n    # We need to check if each character is either '0' or '1'\n    for char in string:\n        # Step 3: Check if the character is not '0' and not '1'\n        # If any character is not '0' or '1', the string is not a binary string\n        if char != '0' and char != '1':\n            return False\n    \n    # Step 4: If all characters are '0' or '1', the string is a binary string\n    # We return True\n    return True\n\n# Example usage:\n# print(check(\"101010\"))  # Should return True\n# print(check(\"102010\"))  # Should return False\n",
        "pass": "False"
    },
    {
        "task_id": 350,
        "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "test_list": [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum_Length(s) :",
        "question_1": "Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters.",
        "answer_1": "def min_length_index(arr):\n  min = float('infinity')\n  min_i = 0\n  for i in range(len(arr)):\n    if len(arr[i]) < min:\n      min = len(arr[i])\n      min_i = i\n  return min_i\n\nprint(min_length_index([\"Hello\", \"World\", \"Python\", \"is\", \"Fun\"])) # 3",
        "question_2": "Find the longest substring in the given input using Python.",
        "answer_2": "def longest_substring(s):\n    # create set\n    seen_characters = set()\n    # initialize variables\n    max_length = i = 0\n    # loop through string\n    while i < len(s):\n        # if character is not in seen_characters\n        if s[i] not in seen_characters:\n            # increment max_length and update seen_characters\n            seen_characters.add(s[i])\n            max_length = max(max_length, len(seen_characters))\n            i += 1\n        else:\n            # remove first character from seen_characters\n            seen_characters.remove(s[i-max_length])\n    # return max_length\n    return max_length\n\nstring = 'abcabcbb'\nresult = longest_substring(string)\nprint(result)",
        "question_3": "Create a Python program to find the shortest string in a given list of strings.",
        "answer_3": "def shortest_string(strings):\n    shortest_string = strings[0]\n   \n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    \n    return shortest_string",
        "full_code": "\ndef minimum_Length(s):\n    # Initialize the minimum length to the length of the original string\n    min_length = len(s)\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Create a new string by removing all occurrences of the current character\n        new_string = s.replace(char, '')\n        \n        # Calculate the length of the new string\n        new_length = len(new_string)\n        \n        # If the new length is smaller than the current minimum length, update the minimum length\n        if new_length < min_length:\n            min_length = new_length\n    \n    # Return the minimum length found\n    return min_length\n\n# Example usage\nprint(minimum_Length(\"abracadabra\"))  # Output should be 6, as removing 'a' results in \"brcdbr\"\n",
        "pass": "True"
    },
    {
        "task_id": 351,
        "text": "Write a python function to find the first element occurring k times in a given array.",
        "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "test_list": [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Element(arr,n,k):",
        "question_1": "Generate a function in Python that returns the index of the first occurrence of a given number in an array.",
        "answer_1": "def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1",
        "question_2": "Create an algorithm in Python to find the first index of an item in an array.",
        "answer_2": "def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "question_3": "Generate a code in Python to find the Kth smallest element in an array.",
        "answer_3": "def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]",
        "full_code": "\ndef first_Element(arr, n, k):\n    # Step 1: Create a dictionary to store the frequency of each element in the array\n    frequency = {}\n    \n    # Step 2: Iterate through the array and populate the frequency dictionary\n    for element in arr:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    \n    # Step 3: Iterate through the array again to find the first element that occurs exactly k times\n    for element in arr:\n        if frequency[element] == k:\n            return element\n    \n    # Step 4: If no element occurs exactly k times, return -1\n    return -1\n\n# Example usage:\narr = [1, 7, 4, 3, 4, 8, 7]\nn = len(arr)\nk = 2\nprint(first_Element(arr, n, k))  # Output should be 4\n",
        "pass": "True"
    },
    {
        "task_id": 352,
        "text": "Write a python function to check whether all the characters in a given string are unique.",
        "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "test_list": [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def unique_Characters(str):",
        "question_1": "Write a function in Python to check if a string contains all unique characters.",
        "answer_1": "def is_unique(string):\n  characters = set()\n  for char in string:\n    if char in characters:\n      return False\n    characters.add(char)\n  return True",
        "question_2": "Create a function in Python that takes in a string and returns true if all characters in the string are unique and false if there is at least one repeated character.",
        "answer_2": "def check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True",
        "question_3": "Write a Python program to identify strings with all unique characters",
        "answer_3": "def is_unique_string(s):\n    d = {} \n    for i in s:\n        if i in d:\n            return False\n        d[i] =1\n    return True",
        "full_code": "\ndef unique_Characters(str):\n    # Step 1: Initialize an empty set to keep track of characters we have seen so far.\n    seen_characters = set()\n    \n    # Step 2: Iterate through each character in the string.\n    for char in str:\n        # Step 3: Check if the character is already in the set.\n        if char in seen_characters:\n            # Step 4: If the character is found in the set, it means the character is repeated.\n            # Return False immediately since the string does not have all unique characters.\n            return False\n        # Step 5: If the character is not in the set, add it to the set.\n        seen_characters.add(char)\n    \n    # Step 6: If the loop completes without finding any repeated characters, return True.\n    return True\n\n# The entire function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 353,
        "text": "Write a function to remove a specified column from a given nested list.",
        "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "test_list": [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_column(list1, n):",
        "question_1": "Create a Python function to remove a given item from a list.",
        "answer_1": "def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))",
        "question_2": "Generate code in Python to remove a given element from a given list.",
        "answer_2": "list = [2, 3, 4, 5, 6]\n\nlist.remove(5)",
        "question_3": "Create a function in Python to remove the given element from any list if it is present.",
        "answer_3": "def remove_item(lst, item):\n    try:\n        lst.remove(item)\n        return lst\n\n    except ValueError:\n        return lst",
        "full_code": "\ndef remove_column(list1, n):\n    # Step 1: Check if the input list is empty or if the column index is out of bounds\n    # This ensures that we don't attempt to access elements that don't exist\n    if not list1 or n < 0 or n >= len(list1[0]):\n        return list1  # Return the original list if the input is invalid\n\n    # Step 2: Iterate through each sublist in the nested list\n    # We will use a list comprehension to create a new list with the specified column removed\n    new_list = [\n        [item for index, item in enumerate(sublist) if index != n]\n        for sublist in list1\n    ]\n\n    # Step 3: Return the new list with the specified column removed\n    return new_list\n\n# Example usage:\n# list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(remove_column(list1, 1))  # Output should be [[1, 3], [4, 6], [7, 9]]\n",
        "pass": "True"
    },
    {
        "task_id": 354,
        "text": "Write a function to find t-nth term of arithemetic progression.",
        "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "test_list": [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tn_ap(a,n,d):",
        "question_1": "Write a Python function to generate the Fibonacci series up to the nth term.",
        "answer_1": "def fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib",
        "question_2": "Write a Python program to find the nth term of Fibonacci Series.",
        "answer_2": "def nth_term_fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b",
        "question_3": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_3": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum",
        "full_code": "\ndef tn_ap(a, n, d):\n    # Step 1: Define the formula for the nth term of an arithmetic progression\n    # The nth term (tn) of an arithmetic progression can be calculated using the formula:\n    # tn = a + (n - 1) * d\n    # where:\n    # a = first term of the series\n    # n = the term number we want to find\n    # d = common difference between consecutive terms\n\n    # Step 2: Implement the formula in the function\n    # We will directly use the formula to calculate the nth term\n    tn = a + (n - 1) * d\n\n    # Step 3: Return the calculated nth term\n    return tn\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 355,
        "text": "Write a python function to count the number of rectangles in a circle of radius r.",
        "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Rectangles(radius):",
        "question_1": "Rewrite the code in Python to improve its readability.",
        "answer_1": "import math\n\ndef calculate_area(radius):\n    return math.pi * (radius ** 2)",
        "question_2": "Create a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle).",
        "answer_2": "import math\n\ndef calculate_area(shape, *args):\n if shape == 'circle':\n radius = args[0]\n return math.pi * radius * radius\n \n elif shape == 'square':\n side_length = args[0]\n return side_length * side_length\n \n elif shape == 'triangle':\n base, height = args\n return 0.5 * base * height\n \n elif shape == 'rectangle':\n length, width = args\n return length * width\n \nelse:\n return 'Invalid shape'\n\nif __name__ == '__main__':\n print(calculate_area('circle', 5))",
        "question_3": "Create a Python program to calculate the area of given shapes (triangle, square and rectangle).",
        "answer_3": "def calculate_area(shape, *args):\n if shape == 'triangle':\n base= args[0]\n height= args[1]\n return (0.5 * base * height)\n\n elif shape == 'square':\n side = args[0]\n return (side ** 2)\n\n elif shape == 'rectangle':\n length = args[0]\n breadth = args[1]\n return (length * breadth)\n\n elif shape == 'circle':\n radius = args[0]\n return (3.142 * radius * radius)\n\nelse:\n return \"Incorrect shape\"",
        "full_code": "\ndef count_Rectangles(radius):\n    # Step 1: Define the maximum side length of the rectangle\n    # The maximum side length of the rectangle that can fit inside the circle\n    # is equal to the diameter of the circle (2 * radius).\n    max_side_length = 2 * radius\n\n    # Step 2: Initialize a counter for the number of rectangles\n    rectangle_count = 0\n\n    # Step 3: Iterate through possible side lengths of the rectangle\n    # We need to consider all possible integer side lengths from 1 to max_side_length.\n    for length in range(1, max_side_length + 1):\n        for width in range(1, max_side_length + 1):\n            # Step 4: Check if the rectangle can fit inside the circle\n            # The diagonal of the rectangle should be less than or equal to the diameter of the circle.\n            # The diagonal can be calculated using the Pythagorean theorem: diagonal = sqrt(length^2 + width^2)\n            if (length**2 + width**2) <= (max_side_length**2):\n                # Step 5: Increment the rectangle count if the rectangle fits\n                rectangle_count += 1\n\n    # Step 6: Return the total count of rectangles\n    return rectangle_count\n\n# Example usage:\n# radius = 5\n# print(count_Rectangles(radius))\n",
        "pass": "True"
    },
    {
        "task_id": 356,
        "text": "Write a function to find the third angle of a triangle using two angles.",
        "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "test_list": [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_angle(a,b):",
        "question_1": "Create a Python program to identify the type of triangles given three sides.",
        "answer_1": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_2": "Create a Python program to find the area of a triangle given 3 sides",
        "answer_2": "def findArea(a,b,c):\n    #calculate the semiperimeter \n    s = (a + b + c) / 2.0\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area",
        "question_3": "Can you create a function in Python to find the area of a triangle given the three sides?",
        "answer_3": "def area_triangle(a, b, c):\n\ts = (a + b + c)/2\n\n\tarea = math.sqrt(s*(s-a)*(s-b)*(s-c))\n\treturn area\n\narea = area_triangle(3, 4, 5)\nprint(\"The area of the triangle is: {}\".format(area))",
        "full_code": "\ndef find_angle(a, b):\n    # Step 1: Verify that the input angles are valid\n    # The sum of the angles in a triangle must be 180 degrees\n    # Therefore, each angle must be greater than 0 and less than 180\n    if a <= 0 or b <= 0 or a >= 180 or b >= 180:\n        return \"Invalid input angles\"\n    \n    # Step 2: Calculate the third angle\n    # The sum of the angles in a triangle is always 180 degrees\n    # So, the third angle can be found by subtracting the sum of the given angles from 180\n    third_angle = 180 - (a + b)\n    \n    # Step 3: Return the calculated third angle\n    return third_angle\n\n# Example usage:\n# result = find_angle(60, 60)\n# print(result)  # Output should be 60\n",
        "pass": "True"
    },
    {
        "task_id": 357,
        "text": "Write a function to find the maximum element of all the given tuple records.",
        "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "test_list": [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_max(test_list):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Edit a Python program to output the maximum value",
        "answer_2": "def find_max(lst):\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max",
        "question_3": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_3": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)",
        "full_code": "\ndef find_max(test_list):\n    # Initialize a variable to store the maximum element found so far.\n    # We start by assuming the first element of the first tuple is the maximum.\n    max_element = test_list[0][0]\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Iterate through each element in the current tuple\n        for element in tup:\n            # Compare the current element with the maximum element found so far\n            if element > max_element:\n                # If the current element is greater, update the maximum element\n                max_element = element\n    \n    # Return the maximum element found\n    return max_element\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nresult = find_max(test_list)\nprint(result)  # Output should be 9\n",
        "pass": "True"
    },
    {
        "task_id": 358,
        "text": "Write a function to find modulo division of two lists using map and lambda function.",
        "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def moddiv_list(nums1,nums2):",
        "question_1": "Write a Python function to create a new list filled with the divided result of a given list and a specific number.",
        "answer_1": "def divide_list(numbers, divisor):\n return [i/divisor for i in numbers]",
        "question_2": "Write a Python program to divide a list of numbers into two equal lists.",
        "answer_2": "list_a = [1,2,3,4,5]\nlist_b = [6,7,8,9,10]",
        "question_3": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_3": "def get_remainder(a, b):\n    return a % b",
        "full_code": "\ndef moddiv_list(nums1, nums2):\n    # Step 1: Check if both lists have the same length\n    # This is necessary because modulo division requires corresponding elements from both lists\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Step 2: Use the map function to apply a lambda function to each pair of elements from nums1 and nums2\n    # The lambda function will take two arguments (x, y) and return x % y\n    result = list(map(lambda x, y: x % y, nums1, nums2))\n    \n    # Step 3: Return the resulting list\n    return result\n\n# Example usage:\n# nums1 = [10, 20, 30]\n# nums2 = [3, 4, 5]\n# print(moddiv_list(nums1, nums2))  # Output: [1, 0, 0]\n",
        "pass": "True"
    },
    {
        "task_id": 359,
        "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Check_Solution(a,b,c):",
        "question_1": "Create a Python program to find the root of a quadratic equation.",
        "answer_1": "def roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))/(2*a)\n    root2 = (-b - math.sqrt(disc))/(2*a)\n    return root1, root2",
        "question_2": "Develop a valid Python script which computes the root of a given quadratic equation",
        "answer_2": "import math\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) / (2*a)\n    x2 = (-b - math.sqrt(d)) / (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\"",
        "question_3": "Create a function in Python that calculates the roots of a quadratic equation?",
        "answer_3": "\"\"\"\nFunction to calculate the roots of a quadratic equation\n\"\"\"\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n \n    # calculate the two roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n \n    return (root1,root2)\n\nif __name__ == '__main__':\n    roots = quadratic_roots(1, 4, 4)\n    print('Roots are: {} and {}'.format(*roots))",
        "full_code": "\ndef Check_Solution(a, b, c):\n    # Step 1: Calculate the discriminant of the quadratic equation\n    # The discriminant (D) is given by b^2 - 4ac\n    discriminant = b**2 - 4*a*c\n    \n    # Step 2: Check if the discriminant is non-negative\n    # If the discriminant is negative, the quadratic equation has no real roots,\n    # so we can immediately return False\n    if discriminant < 0:\n        return False\n    \n    # Step 3: Calculate the roots of the quadratic equation\n    # The roots are given by (-b \u00b1 sqrt(discriminant)) / (2a)\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Step 4: Check if one root is twice the other\n    # We need to check if root1 is twice root2 or if root2 is twice root1\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(Check_Solution(1, -3, 2))  # Should return True, since roots are 1 and 2\n# print(Check_Solution(1, 2, 1))   # Should return False, since roots are -1 and -1\n",
        "pass": "False"
    },
    {
        "task_id": 360,
        "text": "Write a function to find the n\u2019th carol number.",
        "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "test_list": [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_carol(n):",
        "question_1": "Create a Python program to print the multiplication table of the given number n.",
        "answer_1": "def print_table(n):\n for i in range(1, n+1):\n for j in range(1, n+1):\n print(f'{i} x {j} = {i * j}')\n print()",
        "question_2": "Generate code in Python to find the factorial of a given number.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)",
        "question_3": "Using Python, create a function that calculates the factorial of any given number.",
        "answer_3": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "full_code": "\ndef get_carol(n):\n    # Step 1: Define the formula for the n'th Carol number.\n    # The n'th Carol number is given by the formula: (2^n - 1)^2 - 2\n    # We will use this formula to calculate the n'th Carol number.\n\n    # Step 2: Calculate 2^n.\n    # We use the built-in pow function to calculate 2 raised to the power of n.\n    power_of_two = pow(2, n)\n\n    # Step 3: Subtract 1 from the result of 2^n.\n    # This gives us (2^n - 1).\n    minus_one = power_of_two - 1\n\n    # Step 4: Square the result from Step 3.\n    # This gives us (2^n - 1)^2.\n    squared = minus_one ** 2\n\n    # Step 5: Subtract 2 from the result of Step 4.\n    # This gives us (2^n - 1)^2 - 2, which is the n'th Carol number.\n    carol_number = squared - 2\n\n    # Step 6: Return the calculated Carol number.\n    return carol_number\n\n# The function is now complete and can be executed directly using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 361,
        "text": "Write a function to remove empty lists from a given list of lists.",
        "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "test_list": [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_empty(list1):",
        "question_1": "Create a Python script to remove all empty elements from a list.",
        "answer_1": "list = [\"a\", \"\", \"b\", \"\", \"c\", \"\"] \n\nresult = [element for element in list if len(element) > 0] \n\nprint(result)",
        "question_2": "Write a Python program to edit this list of lists and remove any empty lists from the beginning, middle and end of the list.",
        "answer_2": "def remove_empty_lists(lst):\n  new_lst = []\n  for li in lst:\n    if li:\n      new_lst.append(li)\n  return new_lst\n\n# call the function  \nmodified_list = remove_empty_lists([[], [2, 3], [], [4, 5], [], [6]])\n\nprint(modified_list)  \n# Output: [[2, 3], [4, 5], [6]]",
        "question_3": "Create a Python code snippet to remove all elements within a list with value 0.",
        "answer_3": "my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)",
        "full_code": "\ndef remove_empty(list1):\n    # Initialize an empty list to store the non-empty lists\n    result = []\n    \n    # Iterate over each sublist in the given list of lists\n    for sublist in list1:\n        # Check if the sublist is not empty\n        if sublist:\n            # If the sublist is not empty, append it to the result list\n            result.append(sublist)\n    \n    # Return the result list containing only non-empty sublists\n    return result\n\n# Example usage:\n# list1 = [[], [1, 2], [], [3, 4], []]\n# print(remove_empty(list1))  # Output: [[1, 2], [3, 4]]\n",
        "pass": "True"
    },
    {
        "task_id": 362,
        "text": "Write a python function to find the item with maximum occurrences in a given list.",
        "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "test_list": [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_occurrences(nums):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Create a Python code to find the most frequent item in a list",
        "answer_2": "def most_frequent_item(myList):\n    max_item = myList[0]\n    max_count = 1\n    for i in range(1, len(myList)):\n        count = 1\n        for j in range(i+1, len(myList)):\n            if(myList[i] == myList[j]):\n                count += 1\n                if(count > max_count):\n                    max_count = count\n                    max_item = myList[i]\n    \n    return (max_item)\n\nmyList = [1, 2, 3, 2, 4, 2]\nprint(most_frequent_item(myList))",
        "question_3": "Write a Python program to find the most frequent item in a given list of data.",
        "answer_3": "max_count = 0\nmax_element = None\nfor element in data:\n  count = data.count(element)\n  if count > max_count:\n    max_element = element\n    max_count = count\nprint(max_element)",
        "full_code": "\ndef max_occurrences(nums):\n    # Initialize variables to keep track of the maximum count and the corresponding element\n    max_count = 0\n    max_element = None\n    \n    # Iterate through each element in the list\n    for element in nums:\n        # Count the occurrences of the current element in the list\n        count = nums.count(element)\n        \n        # Check if the current count is greater than the maximum count found so far\n        if count > max_count:\n            # Update the maximum count and the corresponding element\n            max_count = count\n            max_element = element\n    \n    # Return the element with the maximum occurrences\n    return max_element\n\n# Example usage:\n# nums = [1, 2, 3, 2, 4, 2]\n# print(max_occurrences(nums))  # Output should be 2\n",
        "pass": "True"
    },
    {
        "task_id": 363,
        "text": "Write a function to add the k elements to each element in the tuple.",
        "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "test_list": [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_K_element(test_list, K):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Convert a given list into a list of tuples using Python.",
        "answer_2": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_3": "Create a Python function to create a dictionary from a given list of tuples with the first elements of each tuple as the key.",
        "answer_3": "def create_dict(tuples): \n  dictionary = {} \n  \n  for item in tuples: \n    dictionary[item[0]] = item[1]\n  \n  return dictionary \n  \ntuples = [(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]\nprint(create_dict(tuples)) \n\n# Output\n{'a': 'b', 'c': 'd', 'e': 'f'}",
        "full_code": "\ndef add_K_element(test_list, K):\n    # Initialize an empty list to store the modified tuples\n    modified_list = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Convert the tuple to a list to allow modification\n        temp_list = list(tup)\n        \n        # Add the K element to the list\n        temp_list.append(K)\n        \n        # Convert the list back to a tuple and add it to the modified list\n        modified_list.append(tuple(temp_list))\n    \n    # Return the list of modified tuples\n    return modified_list\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6)]\nK = 7\nprint(add_K_element(test_list, K))\n# Expected output: [(1, 2, 7), (3, 4, 7), (5, 6, 7)]\n",
        "pass": "False"
    },
    {
        "task_id": 364,
        "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "test_list": [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def make_flip(ch):",
        "question_1": "Write a Python program to generate all binary strings of a given length n.",
        "answer_1": "def generate_binary_str(n): \n    result = []\n    for i in range(2 ** n): \n        s = bin(i)[2:] \n        s = (n - len(s)) * \"0\" + s \n        result.append(s) \n    return result\n\nresult = generate_binary_str(3)\nprint(result)\n\n# Output: ['000', '001', '010', '011', '100', '101', '110', '111']",
        "question_2": "Generate a Python function that takes a string and reverses its order of characters.",
        "answer_2": "def reverse_string(my_string):\n  reversed_string = ''\n  for i in range(len(my_string) - 1, -1, -1):\n    reversed_string += my_string[i]\n\n  return reversed_string",
        "question_3": "Implement a recursive function in Python that takes a (string) as input and returns a reversed version of the input string.",
        "answer_3": "def rev_string(input_str):\n    if len(input_str) == 0:\n        return input_str\n    else:\n        return rev_string(input_str[1:]) + input_str[0]",
        "full_code": "\ndef make_flip(ch):\n    # Step 1: Define the two possible alternating patterns for a given length of the string\n    # Pattern 1: Starts with '0' and alternates (e.g., '010101')\n    # Pattern 2: Starts with '1' and alternates (e.g., '101010')\n    \n    # Step 2: Initialize counters for the number of flips required for each pattern\n    flips_pattern1 = 0\n    flips_pattern2 = 0\n    \n    # Step 3: Iterate through the string and compare each character with the expected character in both patterns\n    for i in range(len(ch)):\n        # Determine the expected character for Pattern 1\n        if i % 2 == 0:\n            expected_char_pattern1 = '0'\n        else:\n            expected_char_pattern1 = '1'\n        \n        # Determine the expected character for Pattern 2\n        if i % 2 == 0:\n            expected_char_pattern2 = '1'\n        else:\n            expected_char_pattern2 = '0'\n        \n        # Compare the current character with the expected character for Pattern 1\n        if ch[i] != expected_char_pattern1:\n            flips_pattern1 += 1\n        \n        # Compare the current character with the expected character for Pattern 2\n        if ch[i] != expected_char_pattern2:\n            flips_pattern2 += 1\n    \n    # Step 4: Return the minimum number of flips required to make the string alternate\n    return min(flips_pattern1, flips_pattern2)\n\n# Example usage:\nbinary_string = \"010101\"\nprint(make_flip(binary_string))  # Output should be 0 if the string is already alternating\n",
        "pass": "False"
    },
    {
        "task_id": 365,
        "text": "Write a python function to count the number of digits of a given number.",
        "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "test_list": [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Digit(n):",
        "question_1": "Write a Python function to count the number of digits in a given number.",
        "answer_1": "def count_digits(num):\n    return len(str(abs(num)))",
        "question_2": "Generate a Python function for counting the number of digits in a given number",
        "answer_2": "def count_digits(num):\n    \"\"\"\n    Counts the number of digits in a given number.\n    \"\"\"\n    count = 0\n    while num > 0:\n        num //= 10\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    num = int(input('Enter number: '))\n    print(count_digits(num))",
        "question_3": "Develop a Python function to count number of digits in a number.",
        "answer_3": "def count_digits(number):\n    count = 0\n    while (number > 0):\n        number = number // 10\n        count = count + 1\n    return count\n\nnum = 8594\nprint(\"Number of digits : \", count_digits(num))",
        "full_code": "\ndef count_Digit(n):\n    # Step 1: Convert the number to its absolute value to handle negative numbers\n    n = abs(n)\n    \n    # Step 2: Initialize a counter to keep track of the number of digits\n    count = 0\n    \n    # Step 3: Use a while loop to repeatedly divide the number by 10 until it becomes 0\n    while n > 0:\n        n = n // 10  # Integer division by 10 removes the last digit\n        count += 1   # Increment the counter for each digit removed\n    \n    # Step 4: If the number was originally 0, it should have one digit\n    if count == 0:\n        count = 1\n    \n    # Step 5: Return the count of digits\n    return count\n\n# Example usage:\n# num = 12345\n# print(\"Number of digits:\", count_Digit(num))\n",
        "pass": "True"
    },
    {
        "task_id": 366,
        "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "test_list": [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def adjacent_num_product(list_nums):",
        "question_1": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_1": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))",
        "question_2": "Generate a Python program that given a list of numbers, finds the largest pair sum.",
        "answer_2": "def max_pair_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum",
        "question_3": "Write a Python function to find the maximum product of three integers from a given list.",
        "answer_3": "def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n )",
        "full_code": "\ndef adjacent_num_product(list_nums):\n    # Initialize a variable to store the maximum product of adjacent elements\n    max_product = float('-inf')\n    \n    # Iterate through the list, stopping at the second last element\n    for i in range(len(list_nums) - 1):\n        # Calculate the product of the current element and the next element\n        current_product = list_nums[i] * list_nums[i + 1]\n        \n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n    \n    # Return the maximum product found\n    return max_product\n\n# Example usage:\n# print(adjacent_num_product([1, 2, 3, 4]))  # Output should be 12 (3 * 4)\n",
        "pass": "True"
    },
    {
        "task_id": 367,
        "text": "Write a function to check if a binary tree is balanced or not.",
        "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
        "challenge_test_list": [],
        "def_code": "class Node: \r\n\tdef __init__(self, data):",
        "question_1": "Generate a Python program to determine if a given binary tree is balanced",
        "answer_1": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))",
        "question_2": "Write a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.",
        "answer_2": "def rotateNodes(root): \n    # if node has a left child \n    if root.left is not None: \n        # we rotate clockwise \n        newRoot = root.left \n        root.left = newRoot.right \n        newRoot.right = root \n        root = newRoot \n  \n    # if node has a right child \n    if root.right is not None: \n        # we rotate counter clockwise \n        newRoot = root.right \n        root.right = newRoot.left  \n        newRoot.left = root \n        root = newRoot \n\n    return root",
        "question_3": "Design an algorithm in Python to detect if a given tree is a binary search tree.",
        "answer_3": "\"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv",
        "full_code": "\nclass Node: \n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    # Base case: if the tree is empty, it is balanced\n    if root is None:\n        return True\n    \n    # Helper function to get the height of a tree\n    def get_height(node):\n        if node is None:\n            return 0\n        # Recursively calculate the height of the left and right subtrees\n        left_height = get_height(node.left)\n        right_height = get_height(node.right)\n        # Return the height of the tree rooted at this node\n        return 1 + max(left_height, right_height)\n    \n    # Get the height of the left and right subtrees\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    \n    # Check if the current node is balanced\n    if abs(left_height - right_height) > 1:\n        return False\n    \n    # Recursively check if the left and right subtrees are balanced\n    return is_balanced(root.left) and is_balanced(root.right)\n\n# Example usage:\n# root = Node(1)\n# root.left = Node(2)\n# root.right = Node(3)\n# root.left.left = Node(4)\n# root.left.right = Node(5)\n# root.left.left.left = Node(8)\n\n# print(is_balanced(root))  # Output: False\n",
        "pass": "False"
    },
    {
        "task_id": 368,
        "text": "Write a function to repeat the given tuple n times.",
        "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "test_list": [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def repeat_tuples(test_tup, N):",
        "question_1": "Write a function in Python that takes two arguments\u2014a string and a positive integer n\u2014and returns a list of size n containing the string repeated n times.",
        "answer_1": "def repeat_string(string, n):\n     return [string]*n\n     \n# example\nprint(repeat_string(\"Hello\", 4)) \n# Output: ['Hello', 'Hello', 'Hello', 'Hello']",
        "question_2": "Optimize this Python code to reduce run time complexity",
        "answer_2": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result",
        "question_3": "Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer.",
        "answer_3": "def repeat_string(s, n):\n    return s*n\n\nprint(repeat_string('Hello', 3))\n# Output: 'HelloHelloHello'",
        "full_code": "\ndef repeat_tuples(test_tup, N):\n    # Step 1: Initialize an empty list to store the repeated tuples\n    repeated_tuples = []\n    \n    # Step 2: Use a for loop to append the tuple to the list N times\n    for _ in range(N):\n        repeated_tuples.append(test_tup)\n    \n    # Step 3: Return the list of repeated tuples\n    return repeated_tuples\n\n# Example usage:\ntest_tup = (1, 2, 3)\nN = 3\nprint(repeat_tuples(test_tup, N))\n# Output: [(1, 2, 3), (1, 2, 3), (1, 2, 3)]\n",
        "pass": "False"
    },
    {
        "task_id": 369,
        "text": "Write a function to find the lateral surface area of cuboid",
        "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cuboid(l,w,h):",
        "question_1": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_1": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "full_code": "\ndef lateralsurface_cuboid(l, w, h):\n    # The lateral surface area of a cuboid is the sum of the areas of its four lateral faces.\n    # Each lateral face is a rectangle with one side equal to the height (h) and the other side equal to the length (l) or width (w).\n    # Therefore, the lateral surface area is given by the formula: 2*(l*h + w*h)\n    \n    # Calculate the area of the two faces with dimensions (l x h)\n    area_l_h = l * h\n    \n    # Calculate the area of the two faces with dimensions (w x h)\n    area_w_h = w * h\n    \n    # Sum the areas of the four lateral faces\n    lateral_surface_area = 2 * (area_l_h + area_w_h)\n    \n    # Return the calculated lateral surface area\n    return lateral_surface_area\n\n# Example usage:\n# print(lateralsurface_cuboid(2, 3, 4))  # Output should be 28\n",
        "pass": "True"
    },
    {
        "task_id": 370,
        "text": "Write a function to sort a tuple by its float element.",
        "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "test_list": [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def float_sort(price):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_2": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_3": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_3": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])",
        "full_code": "\ndef float_sort(price):\n    # Step 1: Identify the tuple to be sorted. The input 'price' is expected to be a tuple.\n    # Step 2: Determine the element in the tuple that should be used as the key for sorting.\n    #         In this case, we need to sort by the float element, so we need to identify which element is the float.\n    # Step 3: Use the sorted() function to sort the tuple. The key parameter of sorted() will be a lambda function\n    #         that extracts the float element from each tuple.\n    # Step 4: Return the sorted tuple.\n\n    # Assuming the float element is the first element in the tuple (index 0)\n    # If the float element is at a different index, adjust the lambda function accordingly.\n    sorted_price = sorted(price, key=lambda x: x[0])\n    \n    return sorted_price\n",
        "pass": "False"
    },
    {
        "task_id": 371,
        "text": "Write a function to find the smallest missing element in a sorted array.",
        "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "test_list": [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_missing(A, left_element, right_element):",
        "question_1": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_1": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
        "question_2": "Write a function in Python to find the kth smallest element in an unsorted array.",
        "answer_2": "def kth_smallest(input_array, k):\n    input_array.sort()\n    return input_array[k-1]",
        "question_3": "Create a function in Python to find the smallest positive number which is not present in a given unsorted array.",
        "answer_3": "def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4",
        "full_code": "\ndef smallest_missing(A, left_element, right_element):\n    # The array A is sorted, so we can use binary search to find the smallest missing element.\n    # If the array is empty, the smallest missing element is 0.\n    if left_element > right_element:\n        return left_element\n    \n    # Find the middle index of the array\n    mid_element = (left_element + right_element) // 2\n    \n    # If the middle element is equal to the middle index, it means all elements to the left are in their correct positions.\n    # So, the smallest missing element must be on the right side.\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    else:\n        # If the middle element is not equal to the middle index, it means there is a missing element on the left side.\n        return smallest_missing(A, left_element, mid_element - 1)\n\n# Example usage:\nA = [0, 1, 2, 6, 9]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 3\n",
        "pass": "True"
    },
    {
        "task_id": 372,
        "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "test_list": [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_assending(nums):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Generate an efficient heap sort algorithm for a Python list containing random numbers.",
        "answer_2": "def heapify(arr, n, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]  # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0) \n  \n# Driver code to test above \narr = [2, 4, 5, 1, 7, 6, 0, 8] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),",
        "question_3": "Write a Python script to sort the given array using Heap sort algorithm",
        "answer_3": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1  \n    r = 2 * i + 2\n \n    if l < n and arr[i] < arr[l]:\n        largest = l\n \n    if r < n and arr[largest] < arr[r]:\n        largest = r\n \n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n        heapify(arr, n, largest)\n \ndef heapSort(arr):\n    n = len(arr) \n \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n \narr = [8, 5, 2, 1, 8]\nheapSort(arr)\nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"% d\" %arr[i]),",
        "full_code": "\nimport heapq as hq\n\ndef heap_assending(nums):\n    # Step 1: Initialize an empty list to use as the heap\n    heap = []\n    \n    # Step 2: Push all elements from the input list 'nums' into the heap\n    # This will automatically maintain the heap property (min-heap in this case)\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    # Step 3: Initialize an empty list to store the sorted elements\n    sorted_nums = []\n    \n    # Step 4: Pop elements from the heap one by one and append them to the sorted list\n    # This will give us the elements in ascending order\n    while heap:\n        sorted_nums.append(hq.heappop(heap))\n    \n    # Step 5: Return the sorted list\n    return sorted_nums\n\n# Example usage:\n# nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n# print(heap_assending(nums))\n",
        "pass": "True"
    },
    {
        "task_id": 373,
        "text": "Write a function to find the volume of a cuboid.",
        "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "test_list": [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cuboid(l,w,h):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Create a python program to compute the volume of a cube given its edge length as an input.",
        "answer_3": "length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)",
        "full_code": "\ndef volume_cuboid(l, w, h):\n    # Step 1: Identify the formula for the volume of a cuboid\n    # The volume V of a cuboid is given by the formula: V = l * w * h\n    # where l is the length, w is the width, and h is the height of the cuboid.\n    \n    # Step 2: Implement the formula in the function\n    # We will multiply the length, width, and height to get the volume.\n    volume = l * w * h\n    \n    # Step 3: Return the calculated volume\n    # The function will return the volume of the cuboid.\n    return volume\n\n# The function is now complete and can be executed directly using `exec()`.\n",
        "pass": "True"
    },
    {
        "task_id": 374,
        "text": "Write a function to print all permutations of a given string including duplicates.",
        "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "test_list": [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permute_string(str):",
        "question_1": "Design an algorithm in Python to print all the permutations of a given string.",
        "answer_1": "def permutations(s):\n    result = []\n    if len(s) == 1:\n        result = [s]\n\n    else:\n        for i, letter in enumerate(s):\n            for perm in permutations(s[:i] + s[i+1:]):\n                result += [letter + perm]\n\n    return result",
        "question_2": "Develop a Python script to print all the permutations of a given string.",
        "answer_2": "def permutations(string):\n perms = []\n if len(string) == 1:\n perms.append(string)\n return perms\n \n for i in range(len(string)):  \n substring = string[:i] + string[i+1:]\n for permutation in permutations(substring):  \n perms.append(string[i] + permutation)\n return perms\n\npermutations('ABC')",
        "question_3": "Design a Python function to print out all permutations of a given string.",
        "answer_3": "def permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))",
        "full_code": "\ndef permute_string(str):\n    # Step 1: Define a helper function to generate permutations\n    # This function will take the string and an index as arguments\n    # The index will help in swapping characters to generate permutations\n    def generate_permutations(s, index):\n        # If the index is equal to the length of the string, we have a complete permutation\n        if index == len(s):\n            print(''.join(s))  # Print the permutation\n        else:\n            # Loop through the string starting from the current index\n            for i in range(index, len(s)):\n                # Swap the current character with the character at the current index\n                s[index], s[i] = s[i], s[index]\n                # Recursively generate permutations for the rest of the string\n                generate_permutations(s, index + 1)\n                # Swap back to backtrack and generate other permutations\n                s[index], s[i] = s[i], s[index]\n\n    # Step 2: Convert the input string to a list of characters\n    # This allows us to swap characters easily\n    str_list = list(str)\n    \n    # Step 3: Call the helper function to generate permutations\n    # Start with the first character (index 0)\n    generate_permutations(str_list, 0)\n\n# The function permute_string is now complete and can be executed\n# The following line is not part of the function but is used to demonstrate how to call it\n# permute_string(\"ABC\")\n",
        "pass": "False"
    },
    {
        "task_id": 375,
        "text": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "test_list": [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_num(n,m):",
        "question_1": "Implement a method in Python to round off any given number to the nearest integer.",
        "answer_1": "def roundNum(num): \n    if (num - int(num)) >= 0.5: \n        return int(num) + 1\n    else: \n        return int(num) \n  \nnum = 5.66\nroundedNum = roundNum(num) \nprint(roundedNum)",
        "question_2": "Generate code for rounding a given number to the nearest integer in Python.",
        "answer_2": "def round_nearest_int(num):\n    return round(num)\n\nresult = round_nearest_int(2.6)\nprint(result)",
        "question_3": "Construct a Python program to round the number up to the nearest integer",
        "answer_3": "def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))",
        "full_code": "\ndef round_num(n, m):\n    # Step 1: Determine the remainder when n is divided by m\n    # This will help us understand how far n is from the nearest multiple of m\n    remainder = n % m\n    \n    # Step 2: Check if the remainder is less than half of m\n    # If it is, we should round down to the nearest multiple of m\n    if remainder < m / 2:\n        rounded = n - remainder\n    # Step 3: If the remainder is greater than or equal to half of m\n    # We should round up to the nearest multiple of m\n    else:\n        rounded = n + (m - remainder)\n    \n    # Step 4: Return the rounded number\n    return rounded\n\n# Example usage:\n# n = 17, m = 5\n# The nearest multiple of 5 to 17 is 15\n# So, the function should return 15\nprint(round_num(17, 5))  # Output should be 15\n",
        "pass": "False"
    },
    {
        "task_id": 376,
        "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "test_list": [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_replica(test_tup):",
        "question_1": "Write a Python function that takes in a list of elements and removes all the duplicate elements.",
        "answer_1": "def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n  \nresult = remove_duplicates([1, 2, 2, 3, 3, 3])\nprint(result)",
        "question_2": "Produce a Python script to remove duplicate values from a list.",
        "answer_2": "def remove_duplicates(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return unique_lst",
        "question_3": "Create a function in Python that takes a list as an argument and removes any duplicate values in the list.",
        "answer_3": "def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list",
        "full_code": "\ndef remove_replica(test_tup):\n    # Step 1: Initialize an empty list to store the unique tuples\n    unique_tuples = []\n    \n    # Step 2: Initialize an empty list to store the final result\n    result = []\n    \n    # Step 3: Iterate through each element in the input tuple\n    for tup in test_tup:\n        # Step 4: Check if the tuple is already in the unique_tuples list\n        if tup in unique_tuples:\n            # Step 5: If it is a duplicate, append a custom value (e.g., None) to the result list\n            result.append(None)\n        else:\n            # Step 6: If it is not a duplicate, append the tuple to both unique_tuples and result lists\n            unique_tuples.append(tup)\n            result.append(tup)\n    \n    # Step 7: Return the result list\n    return result\n\n# Example usage:\ntest_tup = ((1, 2), (3, 4), (1, 2), (5, 6))\nprint(remove_replica(test_tup))  # Output: [(1, 2), (3, 4), None, (5, 6)]\n",
        "pass": "False"
    },
    {
        "task_id": 377,
        "text": "Write a python function to remove all occurrences of a character in a given string.",
        "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "test_list": [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_Char(s,c) :",
        "question_1": "Write a Python code snippet to remove all occurrences of a character from a string.",
        "answer_1": "def remove_char(s, c):\n  return s.replace(c, '')",
        "question_2": "Write a function in Python to remove all occurrences of a specific character from a string.",
        "answer_2": "def remove_char_from_string(string, remove_char):\n    new_string = \"\"\n    for char in string:\n        if char != remove_char:\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n     string = \"computer science\"\n     remove_char = \"c\"\n     print(remove_char_from_string(string, remove_char))",
        "question_3": "Generate a Python program to remove all occurrences of the character 'x' from a list",
        "answer_3": "def remove_x(lst):\n    \"\"\"\n    Function to remove all occurrences of a character 'x' from a list.\n\n    Args:\n        lst (list): The list to process.\n\n    Returns:\n        A list with all occurrences of the character 'x' removed.\n    \"\"\"\n    \n    return [item for item in lst if item != 'x']",
        "full_code": "\ndef remove_Char(s, c):\n    # Step 1: Initialize an empty string to store the result\n    # This will help us build the new string without the specified character\n    result = \"\"\n    \n    # Step 2: Iterate over each character in the input string\n    # This allows us to check each character individually\n    for char in s:\n        # Step 3: Check if the current character is not the one we want to remove\n        # If it is not the character to be removed, add it to the result string\n        if char != c:\n            result += char\n    \n    # Step 4: Return the result string which now contains no occurrences of the specified character\n    return result\n\n# The following code is not part of the function but can be used to test the function\n# Uncomment the lines below to test the function\n# if __name__ == '__main__':\n#     test_string = \"hello world\"\n#     char_to_remove = \"o\"\n#     print(remove_Char(test_string, char_to_remove))  # Expected output: \"hell wrld\"\n",
        "pass": "True"
    },
    {
        "task_id": 378,
        "text": "Write a python function to shift last element to first position in the given list.",
        "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "test_list": [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def move_first(test_list):",
        "question_1": "Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.",
        "answer_1": "def move_last_3(list):\n  last3 = list[-3:]\n  del list[-3:]\n  list = last3 + list\n  return list",
        "question_2": "Write a Python function to display the first and last elements of a list.",
        "answer_2": "def display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1])",
        "question_3": "Develop a function in Python to swap the first and last elements of a given input list.",
        "answer_3": "def swap(list):\n    # swapping first and last elements \n    temp = list[0] \n    list[0] = list[-1] \n    list[-1] = temp \n\nlist = [1, 2, 3, 4, 5]\nswap(list)\n\nprint(list)",
        "full_code": "\ndef move_first(test_list):\n    # Step 1: Check if the list is empty or has only one element\n    # If the list is empty or has only one element, there's nothing to shift, so return the list as is.\n    if len(test_list) <= 1:\n        return test_list\n    \n    # Step 2: Extract the last element of the list\n    # Use list indexing to get the last element.\n    last_element = test_list[-1]\n    \n    # Step 3: Remove the last element from the list\n    # Use the pop() method to remove the last element from the list.\n    test_list.pop()\n    \n    # Step 4: Insert the last element at the beginning of the list\n    # Use the insert() method to add the last element at the first position (index 0).\n    test_list.insert(0, last_element)\n    \n    # Step 5: Return the modified list\n    return test_list\n\n# Example usage:\n# test_list = [1, 2, 3, 4, 5]\n# print(move_first(test_list))  # Output should be [5, 1, 2, 3, 4]\n",
        "pass": "True"
    },
    {
        "task_id": 379,
        "text": "Write a function to find the surface area of a cuboid.",
        "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cuboid(l,w,h):",
        "question_1": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_1": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "full_code": "\ndef surfacearea_cuboid(l, w, h):\n    # Step 1: Understand the formula for the surface area of a cuboid.\n    # The surface area of a cuboid is given by the formula:\n    # 2 * (length * width + width * height + height * length)\n    \n    # Step 2: Implement the formula in the function.\n    # We will calculate each term separately and then sum them up.\n    \n    # Calculate the area of the two sides with dimensions length and width\n    area_lw = l * w\n    \n    # Calculate the area of the two sides with dimensions width and height\n    area_wh = w * h\n    \n    # Calculate the area of the two sides with dimensions height and length\n    area_hl = h * l\n    \n    # Step 3: Sum up the areas of all sides and multiply by 2 to account for both sides of each face.\n    total_surface_area = 2 * (area_lw + area_wh + area_hl)\n    \n    # Step 4: Return the total surface area.\n    return total_surface_area\n\n# Example usage:\n# print(surfacearea_cuboid(2, 3, 4))  # This should output 52\n",
        "pass": "True"
    },
    {
        "task_id": 380,
        "text": "Write a function to generate a two-dimensional array.",
        "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "test_list": [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multi_list(rownum,colnum):",
        "question_1": "Generate a two-dimensional array of ones using Python.",
        "answer_1": "import numpy as np \n\narr = np.ones((r,c))",
        "question_2": "Generate a 2-dimensional array with 7 columns and 5 rows in Python.",
        "answer_2": "import numpy as np \n  \n# creating 2-dimensional array \narr = np.array([[0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0]]) \n  \n# displaying the array \nprint (\"2-dimensional array is:: \", arr)",
        "question_3": "Create a Python function to generate a 2-dimensional array of random numbers between 0 and 1.",
        "answer_3": "def generate_random_array(m, n):\n    array = [[random.random() for i in range(m)] for j in range(n)]\n    return array",
        "full_code": "\ndef multi_list(rownum, colnum):\n    # Step 1: Import the necessary library\n    # We need to import numpy as it provides convenient functions for array operations\n    import numpy as np\n\n    # Step 2: Create the 2-dimensional array\n    # We use numpy's zeros function to create an array filled with zeros\n    # The shape of the array is determined by the rownum and colnum parameters\n    array = np.zeros((rownum, colnum))\n\n    # Step 3: Return the created array\n    return array\n\n# The following line ensures that the function definition is returned as a string\n# This allows the function to be executed using exec()\nfunction_definition = \"\"\"\ndef multi_list(rownum, colnum):\n    import numpy as np\n    array = np.zeros((rownum, colnum))\n    return array\n\"\"\"\n\n# Output the function definition as a plain string\nprint(function_definition)\n",
        "pass": "False"
    },
    {
        "task_id": 381,
        "text": "Write a function to sort a list of lists by a given index of the inner list.",
        "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "test_list": [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):",
        "question_1": "Generate a Python program to demonstrate a sorting algorithm.",
        "answer_1": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
        "question_2": "Create a Python program to sort a given list according to the second element",
        "answer_2": "def sortList(list):\n    list.sort(key=lambda x: x[1]) \n    return list\n\nlist = [[2,4], [3,2], [4,1], [1,3]]\nsorted_list = sortList(list)\n\nprint(sorted_list)\n\n# output\n[[4, 1], [3, 2], [1, 3], [2, 4]]",
        "question_3": "Generate a python program to sort a list according to its second element",
        "answer_3": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst",
        "full_code": "\nfrom operator import itemgetter\n\ndef index_on_inner_list(list_data, index_no):\n    # Step 1: Check if the input list is empty\n    # If the list is empty, return it as there's nothing to sort\n    if not list_data:\n        return list_data\n    \n    # Step 2: Validate the index_no\n    # Ensure that the index_no is within the valid range of the inner lists\n    # We will assume that all inner lists have the same length for simplicity\n    if index_no < 0 or index_no >= len(list_data[0]):\n        raise ValueError(\"Index out of range for the inner lists\")\n    \n    # Step 3: Use the itemgetter function to sort the list by the specified index\n    # itemgetter(index_no) will create a function that retrieves the element at index_no\n    # This function will be used as the key in the sort method\n    sorted_list = sorted(list_data, key=itemgetter(index_no))\n    \n    # Step 4: Return the sorted list\n    return sorted_list\n\n# Example usage:\n# list_data = [[1, 3, 2], [3, 2, 1], [2, 1, 3]]\n# index_no = 1\n# print(index_on_inner_list(list_data, index_no))\n# Output: [[3, 2, 1], [2, 1, 3], [1, 3, 2]]\n",
        "pass": "True"
    },
    {
        "task_id": 382,
        "text": "Write a function to find the number of rotations in a circularly sorted array.",
        "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "test_list": [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rotation_count(A):",
        "question_1": "Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements.",
        "answer_1": "def rotate(arr, d):\n    for _ in range(d):\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nd = 2\n\nrotated_arr = rotate(arr, d)\nprint(rotated_arr) # [3, 4, 5, 1, 2]",
        "question_2": "Create an algorithm in Python to rotate an array of numbers by k elements.",
        "answer_2": "def rotate_array(arr, k):\n n = len(arr)\n \n for i in range(k):\n  temp = arr[n-1]\n  for i in range(n-1,0,-1):\n   arr[i] = arr[i-1]\n  arr[0] = temp\n  \n return arr\n \nprint(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]",
        "question_3": "Write a python program to rotate an array of size n by d elements",
        "answer_3": "def rotateArray(arr, d):\n    \n    result = []\n    for i in range(len(arr)-d, len(arr)): \n        result.append(arr[i])\n \n    for i in range(0, len(arr)-d):  \n        result.append(arr[i])\n \n    return result",
        "full_code": "\ndef find_rotation_count(A):\n    # The idea is to find the pivot point where the array is rotated.\n    # The pivot is the smallest element in the array.\n    # We can use a modified binary search to find this pivot.\n    \n    # Initialize the start and end indices for the binary search.\n    start = 0\n    end = len(A) - 1\n    \n    # Perform a binary search to find the pivot.\n    while start <= end:\n        # If the array is already sorted and not rotated, return 0.\n        if A[start] <= A[end]:\n            return start\n        \n        # Calculate the middle index.\n        mid = (start + end) // 2\n        \n        # Calculate the indices of the next and previous elements.\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        \n        # Check if the middle element is the pivot.\n        # The pivot is smaller than both its next and previous elements.\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        \n        # If the middle element is greater than or equal to the start element,\n        # the pivot must be in the right half of the array.\n        elif A[mid] >= A[start]:\n            start = mid + 1\n        \n        # Otherwise, the pivot must be in the left half of the array.\n        else:\n            end = mid - 1\n    \n    # If no pivot is found, the array is not rotated.\n    return 0\n\n# Example usage:\n# A = [4, 5, 6, 7, 0, 1, 2]\n# print(find_rotation_count(A))  # Output: 4\n",
        "pass": "True"
    },
    {
        "task_id": 383,
        "text": "Write a python function to toggle all odd bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "question_1": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_1": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "question_2": "Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.",
        "answer_2": "def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "question_3": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_3": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"",
        "full_code": "\ndef even_bit_toggle_number(n):\n    # Step 1: Create a mask with all even bits set to 1 and all odd bits set to 0.\n    # This can be done by creating a number where every even bit is 1.\n    # For example, for 8-bit numbers, the mask would be 01010101 (binary) or 85 (decimal).\n    # This can be generalized by using the formula (0x55555555 << (32 - bit_length(n))) >> (32 - bit_length(n))\n    # where 0x55555555 is a hexadecimal representation of the binary pattern 01010101...\n    # For simplicity, we assume 32-bit numbers and use 0x55555555 directly.\n    mask = 0x55555555\n    \n    # Step 2: Toggle the even bits of the number using the XOR operation.\n    # XORing a bit with 1 toggles it, and XORing with 0 leaves it unchanged.\n    # Therefore, n ^ mask will toggle all even bits in n.\n    toggled_number = n ^ mask\n    \n    # Step 3: Return the toggled number.\n    return toggled_number\n\n# The entire function is now complete and can be executed directly.\n",
        "pass": "False"
    },
    {
        "task_id": 384,
        "text": "Write a python function to find the frequency of the smallest value in a given array.",
        "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Smallest(n,arr):",
        "question_1": "Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.",
        "answer_1": "def find_smallest_number(array):\n    smallest = array[0]\n    for element in array:\n        if element < smallest:\n            smallest = element\n    return smallest",
        "question_2": "Create a function in Python to find the minimum value in a given array.",
        "answer_2": "def findMin(arr): \n   \n    # Initialize minimum element \n    min = arr[0] \n   \n    # Traverse array elements starting from \n    # 1st to the last \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i]\n   \n    return min\n\narr = [10, 11, 8, 9, 2] \nprint(findMin(arr))",
        "question_3": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_3": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
        "full_code": "\ndef frequency_Of_Smallest(n, arr):\n    # Step 1: Find the smallest element in the array\n    # We can use the min() function to find the smallest element in the array\n    smallest = min(arr)\n    \n    # Step 2: Count the frequency of the smallest element in the array\n    # We can use the count() method of the list to count the occurrences of the smallest element\n    frequency = arr.count(smallest)\n    \n    # Step 3: Return the frequency of the smallest element\n    return frequency\n\n# Example usage:\n# arr = [10, 11, 8, 9, 2, 2, 2]\n# n = len(arr)\n# print(frequency_Of_Smallest(n, arr))  # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 385,
        "text": "Write a function to find the n'th perrin number using recursion.",
        "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "test_list": [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_perrin(n):",
        "question_1": "Optimize and refactor an existing Python function.",
        "answer_1": "def factorial(n):\n if n == 0:\n return 1\n \n result = 1 \n while n > 0:\n result = result * n\n n = n - 1\n \n return result",
        "question_2": "Compute the factorial of a given number using a recursive function in Python.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "question_3": "Write a recursive Python function to calculate a factorial of positive integer",
        "answer_3": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)",
        "full_code": "\ndef get_perrin(n):\n    # The Perrin sequence is defined as follows:\n    # P(0) = 3, P(1) = 0, P(2) = 2\n    # For n > 2, P(n) = P(n-2) + P(n-3)\n    \n    # Base cases:\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    # Recursive case:\n    # For n > 2, we need to calculate P(n) by summing P(n-2) and P(n-3)\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)\n\n# The function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 386,
        "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "test_list": [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_count(s):",
        "question_1": "Design a Python program to check if a given string has balanced parenthesis.",
        "answer_1": "def is_balanced(string): \n    stack = [] \n    for char in string: \n        if char == '(': \n            stack.append(char) \n        elif char == ')': \n            if len(stack)==0: \n                return False\n            stack.pop() \n  \n    if len(stack) == 0: \n        return True\n    else: \n        return False",
        "question_2": "Write a Python program to find the minimum number of swaps needed to sort the given array in ascending order.",
        "answer_2": "def min_swaps(nums):\n n = len(nums)\n count = 0\n for i in range(n):\n while nums[i] != i + 1:\n swap(nums, i, nums[i] - 1)\n count += 1\n return count\n\ndef swap(nums, i, j):\n nums[i], nums[j] = nums[j], nums[i]",
        "question_3": "Implement an algorithm in Python that evaluates an expression with multiple parentheses.",
        "answer_3": "def evaluateExpression(exp):\n  st = [] \n  exp = list(exp) \n\n  # Traverse the expression \n  for i in exp:\n    # If the current character in exp is a \n    # opening parenthesis, then push it  \n    # in stack \n    if i == \"(\": \n      st.append(i)\n\n    # If the current character in exp is a \n    # closing parenthesis, then pop from stack \n    elif i == \")\": \n      st.pop() \n      \n  # After complete traversal, if there \n  # is some starting parenthesis left in \n  # stack then \u201cnot balanced\u201d \n  if len(st) != 0:\n    return \"Not Balanced\"\n  else:\n    return \"Balanced\"",
        "full_code": "\ndef swap_count(s):\n    # Initialize a counter to keep track of the number of swaps needed\n    swaps = 0\n    \n    # Initialize two pointers, one for the leftmost unmatched '[' and one for the rightmost unmatched ']'\n    left = 0\n    right = len(s) - 1\n    \n    # Convert the string to a list to allow for easier manipulation\n    s = list(s)\n    \n    # Iterate through the string from both ends towards the center\n    while left < right:\n        # Move the left pointer to the right until an unmatched '[' is found\n        while left < right and s[left] == '[':\n            left += 1\n        \n        # Move the right pointer to the left until an unmatched ']' is found\n        while left < right and s[right] == ']':\n            right -= 1\n        \n        # If the left pointer is still less than the right pointer, it means we have found an unmatched '[' and ']'\n        if left < right:\n            # Swap the unmatched '[' and ']'\n            s[left], s[right] = s[right], s[left]\n            # Increment the swap counter\n            swaps += 1\n            # Move the pointers inward to continue checking the rest of the string\n            left += 1\n            right -= 1\n    \n    # Return the total number of swaps needed\n    return swaps\n\n# Example usage:\n# s = \"[]][][[]\"\n# print(swap_count(s))  # Output should be the minimum number of swaps needed to balance the brackets\n",
        "pass": "False"
    },
    {
        "task_id": 387,
        "text": "Write a python function to check whether the hexadecimal number is even or odd.",
        "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "test_list": [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_or_odd(N):",
        "question_1": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_1": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "question_2": "Create a Python script to check whether a given number is an even number or an odd number.",
        "answer_2": "def is_even(n):\n if n % 2 == 0:\n return True\n else:\n return False",
        "question_3": "Create a python script that takes in a number and tells whether it is odd or even.",
        "answer_3": "def evenOdd(number): \n    if (number % 2 == 0): \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n\nevenOdd(number)",
        "full_code": "\ndef even_or_odd(N):\n    # Step 1: Convert the hexadecimal number to an integer\n    # Hexadecimal numbers are base 16, so we use the int() function with base 16\n    num = int(N, 16)\n    \n    # Step 2: Check if the integer is even or odd\n    # An integer is even if it is divisible by 2 (i.e., num % 2 == 0)\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# The entire function is provided as a plain string that can be executed using exec()\ncode = \"\"\"\ndef even_or_odd(N):\n    # Step 1: Convert the hexadecimal number to an integer\n    # Hexadecimal numbers are base 16, so we use the int() function with base 16\n    num = int(N, 16)\n    \n    # Step 2: Check if the integer is even or odd\n    # An integer is even if it is divisible by 2 (i.e., num % 2 == 0)\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\"\"\"\n\n# Output the code as a plain string\nprint(code)\n",
        "pass": "True"
    },
    {
        "task_id": 388,
        "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "question_1": "Optimize the following python program such that it reaches an O(logN) complexity",
        "answer_1": "def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y",
        "question_2": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_2": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_3": "Provide an algorithm in python to calculate the power of an integer.",
        "answer_3": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)",
        "full_code": "\ndef highest_Power_of_2(n):\n    # Step 1: Initialize a variable to store the result\n    # We start with the assumption that the highest power of 2 is 1 (2^0)\n    highest_power = 1\n    \n    # Step 2: Iterate through powers of 2 to find the highest one less than or equal to n\n    # We use a loop to multiply the current highest power by 2 each time\n    # until the result exceeds n\n    while highest_power * 2 <= n:\n        highest_power *= 2\n    \n    # Step 3: Return the highest power of 2 found\n    return highest_power\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 389,
        "text": "Write a function to find the n'th lucas number.",
        "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lucas(n):",
        "question_1": "Generate a function in Python that takes a number as input and prints out the n-th Fibonacci number.",
        "answer_1": "def nthFibonacciNumber(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2)\n\nresult = nthFibonacciNumber(6)\nprint(result)",
        "question_2": "Create a Python program to find the n'th Fibonacci number.",
        "answer_2": "def fibonacci_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fibonacci_number(n-1) + fibonacci_number(n-2))\n\nn = int(input(\"Enter the n'th Fibonacci number: \"))\n\nprint(\"Fibonacci number at %d is: %d\" % (n,fibonacci_number(n)))",
        "question_3": "Create a Python program to find the nth Fibonacci number",
        "answer_3": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
        "full_code": "\ndef find_lucas(n):\n    # The Lucas sequence is similar to the Fibonacci sequence but starts with 2, 1 instead of 0, 1.\n    # The nth Lucas number can be defined recursively as:\n    # L(n) = L(n-1) + L(n-2) for n > 1\n    # L(0) = 2\n    # L(1) = 1\n    \n    # First, we handle the base cases:\n    if n == 0:\n        return 2  # L(0) is 2\n    elif n == 1:\n        return 1  # L(1) is 1\n    \n    # For other values of n, we use the recursive definition:\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Example usage:\n# n = 5\n# print(find_lucas(n))  # This should print the 5th Lucas number\n",
        "pass": "True"
    },
    {
        "task_id": 390,
        "text": "Write a function to insert a given string at the beginning of all items in a list.",
        "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_string(list,string):",
        "question_1": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_1": "# Insert the given string at the beginning of all list items \nnew_list = [\"prefix_\" + item for item in mylist]\n\n# Print the new list \nprint(new_list) # Output: [\"prefix_one\", \"prefix_two\", \"prefix_three\"]",
        "question_2": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_2": "def add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']",
        "question_3": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_3": "my_list = [\"hello\", \"world\", \"python\"]\nprefix = \"Programming - \"\n\n# Insert the prefix to all items in the list\nnew_list = [prefix + item for item in my_list]\n\nprint(new_list)",
        "full_code": "\ndef add_string(list, string):\n    # Initialize an empty list to store the modified items\n    new_list = []\n    \n    # Iterate over each item in the input list\n    for item in list:\n        # Concatenate the given string with the current item\n        # and append the result to the new_list\n        new_list.append(string + item)\n    \n    # Return the new list containing the modified items\n    return new_list\n\n# Example usage:\n# list_items = [\"apple\", \"banana\", \"cherry\"]\n# prefix_string = \"fruit_\"\n# print(add_string(list_items, prefix_string))  # Output: ['fruit_apple', 'fruit_banana', 'fruit_cherry']\n",
        "pass": "False"
    },
    {
        "task_id": 391,
        "text": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def convert_list_dictionary(l1, l2, l3):",
        "question_1": "Write a function in Python to convert following input into a dictionary",
        "answer_1": "def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict",
        "question_2": "Can you create a function in python code to flatten a nested dictionary?",
        "answer_2": "def flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())",
        "question_3": "Write a Python program to flatten a dictionary of nested dictionaries.",
        "answer_3": "def flatten(d): \n  flatten_d = {} \n  for key, value in d.items():\n    if isinstance(value, dict):\n      value = flatten(value) \n      for sub_key, sub_value in value.items(): \n        flatten_d[key + '.' + sub_key] = sub_value \n    else: \n      flatten_d[key] = value \n  return flatten_d",
        "full_code": "\ndef convert_list_dictionary(l1, l2, l3):\n    # Initialize an empty dictionary to store the nested structure\n    nested_dict = {}\n    \n    # Iterate over the first list (l1) to create the top-level keys\n    for i, key in enumerate(l1):\n        # For each key in l1, initialize a dictionary to hold the nested structure\n        nested_dict[key] = {}\n        \n        # Check if the corresponding index in l2 exists and is not None\n        if i < len(l2) and l2[i] is not None:\n            # Assign the value from l2 to the nested dictionary under the current key\n            nested_dict[key]['nested_key'] = l2[i]\n        \n        # Check if the corresponding index in l3 exists and is not None\n        if i < len(l3) and l3[i] is not None:\n            # Assign the value from l3 to the nested dictionary under the current key\n            nested_dict[key]['nested_value'] = l3[i]\n    \n    # Return the constructed nested dictionary\n    return nested_dict\n\n# Example usage:\n# l1 = ['a', 'b', 'c']\n# l2 = [1, 2, 3]\n# l3 = ['x', 'y', 'z']\n# result = convert_list_dictionary(l1, l2, l3)\n# print(result)\n",
        "pass": "False"
    },
    {
        "task_id": 392,
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_sum (n):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Write a Python code that finds the sum of the two largest numbers in a given list.",
        "answer_2": "def find_largest_sum(list):\n    largestNum = max(list)\n    list.remove(largestNum)\n    secondLargestNum = max(list)\n    return largestNum+secondLargestNum\n\nprint(find_largest_sum([1,2,3,4,5])) # 9",
        "question_3": "Modify the Python program to calculate the sum of an array so that it finds the largest number in the array.",
        "answer_3": "def array_sum(arr):\n largest = 0\n for num in arr:\n largest = max(largest, num)\n return largest\n\nprint(array_sum([1, 2, 3, 4, 5]))",
        "full_code": "\ndef get_max_sum(n):\n    # We need to use memoization to store the results of subproblems to avoid redundant calculations.\n    memo = {}\n\n    # Define a helper function that will perform the recursive calculation.\n    def helper(x):\n        # Base case: if x is 0 or negative, the maximum sum is 0.\n        if x <= 0:\n            return 0\n        \n        # If the result for x is already computed, return it from the memo dictionary.\n        if x in memo:\n            return memo[x]\n        \n        # Calculate the sum of the results of f(x/2), f(x/3), f(x/4), and f(x/5).\n        sum_of_divisions = helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5)\n        \n        # The result for x is the maximum of the sum of divisions and x itself.\n        result = max(sum_of_divisions, x)\n        \n        # Store the result in the memo dictionary for future use.\n        memo[x] = result\n        \n        return result\n\n    # Call the helper function with the initial value of n.\n    return helper(n)\n\n# Example usage:\nprint(get_max_sum(10))  # Output will depend on the equation and the value of n.\n```\n\nThis code defines a function `get_max_sum` that uses a helper function with memoization to efficiently compute the maximum sum possible by using the given equation. The memoization ensures that we do not recompute the results for the same values of `n`, thus optimizing the solution.",
        "pass": "Error"
    },
    {
        "task_id": 393,
        "text": "Write a function to find the list with maximum length using lambda function.",
        "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length_list(input_list):",
        "question_1": "Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.",
        "answer_1": "max_value = lambda num_list: max(num_list)",
        "question_2": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_2": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_3": "Create a lambda expression in Python to return the largest number from a list of numbers.",
        "answer_3": "largestNum = lambda a: max(a)",
        "full_code": "\ndef max_length_list(input_list):\n    # Step 1: Define a lambda function that takes a list and returns its length.\n    # This lambda function will be used as the key in the max() function.\n    length = lambda lst: len(lst)\n    \n    # Step 2: Use the max() function to find the list with the maximum length.\n    # The key parameter of max() will use the lambda function defined in Step 1.\n    max_list = max(input_list, key=length)\n    \n    # Step 3: Return the list with the maximum length.\n    return max_list\n\n# Example usage:\ninput_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(\"List with maximum length is : \", max_length_list(input_list))\n",
        "pass": "False"
    },
    {
        "task_id": 394,
        "text": "Write a function to check if given tuple is distinct or not.",
        "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_distinct(test_tup):",
        "question_1": "Generate a python function that takes an array as an argument and returns the distinct elements in the array.",
        "answer_1": "def distinct_values(arr):\n    distinct_arr = []\n    for element in arr:\n        if element not in distinct_arr:\n            distinct_arr.append(element)\n    return distinct_arr",
        "question_2": "Write a Python program to print out all the distinct elements of an array.",
        "answer_2": "def print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct)",
        "question_3": "Generate a function in Python that takes a list of integers and returns a boolean indicating whether or not there are any duplicates in the input list.",
        "answer_3": "def contains_duplicates(list):\n \n seen = set()\n \n for element in list:\n if element in seen:\n return True\n seen.add(element)\n \n return False",
        "full_code": "\ndef check_distinct(test_tup):\n    # Step 1: Convert the tuple to a set\n    # Reasoning: Sets in Python automatically remove duplicate elements, so if the length of the set is the same as the length of the tuple, the tuple is distinct.\n    unique_elements = set(test_tup)\n    \n    # Step 2: Compare the length of the set with the length of the tuple\n    # Reasoning: If the lengths are equal, it means all elements in the tuple are unique.\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef check_distinct(test_tup):\n    # Step 1: Convert the tuple to a set\n    # Reasoning: Sets in Python automatically remove duplicate elements, so if the length of the set is the same as the length of the tuple, the tuple is distinct.\n    unique_elements = set(test_tup)\n    \n    # Step 2: Compare the length of the set with the length of the tuple\n    # Reasoning: If the lengths are equal, it means all elements in the tuple are unique.\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False\n\"\"\"\n",
        "pass": "True"
    },
    {
        "task_id": 395,
        "text": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_non_repeating_character(str1):",
        "question_1": "Write a Python program to find the first non-repeated character of a given string.",
        "answer_1": "def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch",
        "question_2": "Code a generalized function in Python that takes a string as input and returns the first non-repeating character.",
        "answer_2": "def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1",
        "question_3": "Write a function in Python to find the first non-repeating character in a given string.",
        "answer_3": "def non_repeating_char(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    for c in s:\n        if char_freq[c] == 1:\n            return c\n\nif __name__ == '__main__':\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\"))",
        "full_code": "\ndef first_non_repeating_character(str1):\n    # Step 1: Create a dictionary to store the frequency of each character in the string.\n    # This will help us quickly check how many times each character appears.\n    char_frequency = {}\n    \n    # Step 2: Iterate through each character in the string to populate the dictionary.\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    \n    # Step 3: Iterate through the string again to find the first character with a frequency of 1.\n    # This ensures that we return the first non-repeated character in the order they appear.\n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n    \n    # Step 4: If no non-repeated character is found, return None.\n    return None\n\n# The function is now complete and can be executed directly using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 396,
        "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string):",
        "question_1": "Design a function in Python to check if a string starts with a certain substring.",
        "answer_1": "def starts_with(string, substring):\n  if string[:len(substring)] == substring:\n    return True\n  else:\n    return False",
        "question_2": "Create a Python program to check if a string ends with a given substring.",
        "answer_2": "def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True",
        "question_3": "How would you check if a string ends with a given substring in Python?",
        "answer_3": "if InputString.endswith(Substring):\n    print('The input string ends with the given substring.')\nelse:\n    print('The input string does not end with the given substring.')",
        "full_code": "\nimport re  \n\n# Define the regex pattern\n# The pattern r'^[a-z]$|^([a-z]).*\\1$' is used to match strings that start and end with the same character.\n# - r'^[a-z]$' matches a single character string (e.g., 'a', 'z')\n# - r'^([a-z]).*\\1$' matches a string that starts with a character (captured in group 1) and ends with the same character (referenced by \\1)\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    # Use re.match to check if the string matches the regex pattern\n    # re.match checks the pattern from the start of the string\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(check_char('aba'))  # Should return True\n# print(check_char('abc'))  # Should return False\n",
        "pass": "False"
    },
    {
        "task_id": 397,
        "text": "Write a function to find the median of three specific numbers.",
        "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_numbers(a,b,c):",
        "question_1": "Develop a program in Python to compute the median of three numbers.",
        "answer_1": "def median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median",
        "question_2": "Write a Python program to determine the median of three numbers.",
        "answer_2": "def median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4)))",
        "question_3": "Can you generate a Python program for computing the median of three numbers?",
        "answer_3": "def median(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c\n\nmedian_value = median(6, 8, 7)\nprint(median_value)",
        "full_code": "\ndef median_numbers(a, b, c):\n    # Step 1: Compare a and b to determine the order of the first two numbers.\n    # If a is less than or equal to b, then a is the smaller number.\n    # If a is greater than b, then b is the smaller number.\n    \n    if a <= b:\n        # Step 2: Now compare the smaller number (a or b) with c.\n        # If c is greater than or equal to the smaller number (a), then c is the largest number.\n        # If c is less than the smaller number (a), then a is the largest number.\n        \n        if c >= a:\n            # Step 3: Determine the median based on the order of a, b, and c.\n            # If c is the largest, then the median is the middle number between a and b.\n            # Since a <= b, the median is b.\n            median = b\n        else:\n            # If c is the smallest, then the median is the middle number between a and b.\n            # Since a <= b, the median is a.\n            median = a\n    else:\n        # Step 2: Now compare the smaller number (b) with c.\n        # If c is greater than or equal to the smaller number (b), then c is the largest number.\n        # If c is less than the smaller number (b), then b is the largest number.\n        \n        if c >= b:\n            # Step 3: Determine the median based on the order of a, b, and c.\n            # If c is the largest, then the median is the middle number between a and b.\n            # Since b < a, the median is a.\n            median = a\n        else:\n            # If c is the smallest, then the median is the middle number between a and b.\n            # Since b < a, the median is b.\n            median = b\n    \n    return median\n\n# Example usage:\n# median_value = median_numbers(6, 8, 7)\n# print(median_value)\n",
        "pass": "True"
    },
    {
        "task_id": 398,
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_digits(nums):",
        "question_1": "Write a function in Python to calculate the sum of the digits in a given number.",
        "answer_1": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total",
        "question_2": "Generate a Python function to find the sum of the digits in a given number.",
        "answer_2": "def sum_of_digits(n):\n  result = 0\n  while (n > 0):\n    result += n % 10;\n    n //= 10;\n  return result",
        "question_3": "Write a Python program to calculate the sum of the digits of a given number.",
        "answer_3": "def sum_of_digits(n): \n  \n   sum = 0\n  \n   # Separate the digits of the number  \n   while n > 0: \n      digit = n % 10\n      sum += digit\n      n //= 10\n  \n   return sum",
        "full_code": "\ndef sum_of_digits(nums):\n    # Initialize an empty list to store the sum of digits for each number in the input list\n    sums = []\n    \n    # Iterate over each number in the input list\n    for num in nums:\n        # Initialize a variable to store the sum of digits for the current number\n        total = 0\n        \n        # Convert the number to a string to easily iterate over each digit\n        num_str = str(num)\n        \n        # Iterate over each character (digit) in the string representation of the number\n        for digit in num_str:\n            # Convert the character back to an integer and add it to the total sum\n            total += int(digit)\n        \n        # Append the total sum of digits for the current number to the sums list\n        sums.append(total)\n    \n    # Return the list of sums\n    return sums\n\n# Example usage:\n# nums = [123, 456, 789]\n# print(sum_of_digits(nums))  # Output: [6, 15, 24]\n",
        "pass": "False"
    },
    {
        "task_id": 399,
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bitwise_xor(test_tup1, test_tup2):",
        "question_1": "Generate an XOR function in Python that takes two integers as parameters and returns a boolean.",
        "answer_1": "def xor(a, b):\nreturn (a or b) and not (a and b)",
        "question_2": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_2": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_3": "Create a algorithm in Python to convert any given number to binary form.",
        "answer_3": "def toBinary(n): \n    if (n > 1): \n        toBinary(n//2) \n    print(n%2,end = '') \n \n# Driver Code \nnum = 8\ntoBinary(num)",
        "full_code": "\ndef bitwise_xor(test_tup1, test_tup2):\n    # Step 1: Check if the lengths of the tuples are the same\n    # This is necessary because bitwise XOR requires corresponding elements to be paired\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The tuples must be of the same length\")\n    \n    # Step 2: Initialize an empty list to store the result of the XOR operation\n    result = []\n    \n    # Step 3: Iterate through the tuples using the index\n    for i in range(len(test_tup1)):\n        # Step 4: Perform the XOR operation on the corresponding elements\n        # The XOR operation is performed using the ^ operator in Python\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # Step 5: Append the result of the XOR operation to the result list\n        result.append(xor_result)\n    \n    # Step 6: Convert the result list to a tuple and return it\n    return tuple(result)\n\n# Example usage:\n# test_tup1 = (10, 20, 30)\n# test_tup2 = (5, 15, 25)\n# print(bitwise_xor(test_tup1, test_tup2))  # Output: (15, 27, 5)\n",
        "pass": "True"
    },
    {
        "task_id": 400,
        "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_freq(test_list):",
        "question_1": "Write a python program to create a frequency table for the following list.",
        "answer_1": "from collections import Counter\n\ndata = [1, 8, 9, 11, 2, 10, 1, 5, 6, 8]\ncounter = Counter(data)\n\n# print the frequency table\nprint('Frequency Table:')\nfor item in counter.most_common():\n    print(item)",
        "question_2": "Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.",
        "answer_2": "def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]",
        "question_3": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_3": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "full_code": "\ndef extract_freq(test_list):\n    # Step 1: Import the necessary module\n    # We need to use the Counter class from the collections module to count the frequencies of the tuples.\n    from collections import Counter\n\n    # Step 2: Count the frequencies of each tuple in the list\n    # The Counter object will automatically count the occurrences of each unique tuple.\n    tuple_counter = Counter(test_list)\n\n    # Step 3: Convert the Counter object to a list of tuples\n    # The items() method of the Counter object returns a list of (tuple, count) pairs.\n    frequency_list = list(tuple_counter.items())\n\n    # Step 4: Return the list of tuples containing the frequency of each unique tuple\n    return frequency_list\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2)]\nprint(extract_freq(test_list))\n",
        "pass": "False"
    },
    {
        "task_id": 401,
        "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_nested_tuples(test_tup1, test_tup2):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_2": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]",
        "question_3": "Generate a function for vector addition in Python.",
        "answer_3": "def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)",
        "full_code": "\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Initialize an empty list to store the result of the addition\n    result = []\n    \n    # Iterate over the elements of the first nested tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the sum of the current nested tuple elements\n        nested_result = []\n        \n        # Iterate over the elements of the current nested tuple\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements from both nested tuples\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        \n        # Append the result of the current nested tuple addition to the result list\n        result.append(tuple(nested_result))\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)\n\n# Example usage:\ntest_tup1 = ((1, 2), (3, 4))\ntest_tup2 = ((5, 6), (7, 8))\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: ((6, 8), (10, 12))\n",
        "pass": "True"
    },
    {
        "task_id": 402,
        "text": "Write a function to compute the value of ncr%p.",
        "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ncr_modp(n, r, p):",
        "question_1": "Create a python program to calculate the compound interest for a given principal amount and a given interest rate.",
        "answer_1": "# Python program to calculate the compound interest  \n  \ndef compound_interest(principal, rate, time): \n  \n    # Calculates compound interest  \n    CI = principal * (pow((1 + rate / 100), time)) \n    print(\"Compound interest is\", CI) \n  \n# Driver Code  \ncompound_interest(1000, 9, 2)",
        "question_2": "Write a Python function to calculate the compound interest given the principal amount, rate, and number of years.",
        "answer_2": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate)**time\n\nresult = compound_interest(1000, 0.03, 5)\nprint(result)",
        "question_3": "Generate a function in Python to calculate the future value of an investment.",
        "answer_3": "def calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years",
        "full_code": "\ndef ncr_modp(n, r, p):\n    # Step 1: Calculate the factorial of n, r, and (n-r) modulo p\n    # We need to compute n! % p, r! % p, and (n-r)! % p\n    # This is because nCr % p = (n! / (r! * (n-r)!)) % p\n    # However, division modulo p is not straightforward, so we use modular inverses\n\n    # Function to compute factorial modulo p\n    def factorial_mod(x, p):\n        fact = 1\n        for i in range(2, x + 1):\n            fact = (fact * i) % p\n        return fact\n\n    # Step 2: Compute the factorials modulo p\n    fact_n = factorial_mod(n, p)\n    fact_r = factorial_mod(r, p)\n    fact_nr = factorial_mod(n - r, p)\n\n    # Step 3: Compute the modular inverses of r! and (n-r)! modulo p\n    # We use Fermat's Little Theorem to find the modular inverse\n    # a^(p-2) % p is the modular inverse of a modulo p if p is prime\n\n    # Function to compute modular inverse using Fermat's Little Theorem\n    def mod_inverse(a, p):\n        return pow(a, p - 2, p)\n\n    # Step 4: Compute the modular inverses\n    inv_fact_r = mod_inverse(fact_r, p)\n    inv_fact_nr = mod_inverse(fact_nr, p)\n\n    # Step 5: Compute the final result\n    # nCr % p = (n! * inv_fact_r * inv_fact_nr) % p\n    result = (fact_n * inv_fact_r * inv_fact_nr) % p\n\n    return result\n\n# Example usage\nprint(ncr_modp(5, 2, 13))  # Output should be 10 (5C2 % 13)\n",
        "pass": "False"
    },
    {
        "task_id": 403,
        "text": "Write a function to check if a url is valid or not using regex.",
        "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "test_list": [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_valid_URL(str):",
        "question_1": "Generate a method in Python that determines if a given string contains a URL.",
        "answer_1": "import re\n\ndef isUrl(string): \n    urlPattern = re.compile(r'https?://(www\\.)?(\\w+)(\\.\\w+)') \n    match = urlPattern.search(string) \n    return bool(match)",
        "question_2": "Write a python program to validate internet URLs.",
        "answer_2": "import re\n\ndef is_valid_url(url):\n regex = re.compile(\n r'^(?:http|ftp)s?://' # http:// or https://\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n r'localhost|' # localhost...\n r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n r'(?::\\d+)?' # optional port\n r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n \n return url is not None and regex.search(url)\n\nprint(is_valid_url('https://www.google.com')) # Output: True",
        "question_3": "Create a Python script to check a given URL and see if it is active or not.",
        "answer_3": "import requests \n  \ndef check_url(url): \n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return True\n        else:\n            return False\n    except:\n        return False",
        "full_code": "\nimport re\n\ndef is_valid_URL(str):\n    # Step 1: Define the regex pattern for a valid URL\n    # The pattern should cover common URL formats including http, https, and ftp protocols,\n    # domain names, IP addresses, and optional ports and paths.\n    url_pattern = re.compile(\n        r'^(https?|ftp)://'  # Protocol part: http, https, or ftp\n        r'(?:(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}|'  # Domain name part: e.g., www.example.com\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # IP address part: e.g., 192.168.1.1\n        r'(?::\\d+)?'  # Optional port number: e.g., :8080\n        r'(?:/.*)?$'  # Optional path: e.g., /path/to/resource\n    )\n    \n    # Step 2: Use the regex pattern to search for a match in the given string\n    match = url_pattern.match(str)\n    \n    # Step 3: Return True if a match is found, otherwise return False\n    return bool(match)\n\n# Example usage:\n# print(is_valid_URL('https://www.example.com'))  # Output: True\n# print(is_valid_URL('ftp://192.168.1.1:8080/path'))  # Output: True\n# print(is_valid_URL('invalid-url'))  # Output: False\n",
        "pass": "True"
    },
    {
        "task_id": 404,
        "text": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum(a,b):",
        "question_1": "Generate Python code for finding the minimum of two given numbers.",
        "answer_1": "def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5",
        "question_2": "In Python, create a function to return the minimum of two numbers.",
        "answer_2": "def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "question_3": "Find the minimum of two numbers using Python.",
        "answer_3": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3",
        "full_code": "\ndef minimum(a, b):\n    # Step 1: Check if the first number 'a' is less than the second number 'b'\n    # Reasoning: If 'a' is less than 'b', then 'a' is the minimum.\n    if a < b:\n        # Step 2: Return 'a' if it is the smaller number\n        return a\n    else:\n        # Step 3: If 'a' is not less than 'b', then 'b' must be the smaller number\n        # Reasoning: Since 'a' is not less than 'b', 'b' is the minimum.\n        return b\n\n# Example usage:\n# result = minimum(5, 3)\n# print(result) # Output should be 3\n",
        "pass": "True"
    },
    {
        "task_id": 405,
        "text": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_tuplex(tuplex,tuple1):",
        "question_1": "Write a Python function to check if an element exists in a list.",
        "answer_1": "def check_list(list_, element): \n    return element in list_",
        "question_2": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_2": "def element_exists(elem, list_int):\n  return elem in list_int",
        "question_3": "Write a Python program to check if an item exists in a given list.",
        "answer_3": "def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result)",
        "full_code": "\ndef check_tuplex(tuplex, tuple1):\n    # Step 1: Define the function with the given parameters\n    # tuplex: The tuple in which we need to check for the existence of an element\n    # tuple1: The element we need to check for in the tuple\n\n    # Step 2: Use the 'in' operator to check if tuple1 exists in tuplex\n    # The 'in' operator returns True if the element is found in the tuple, otherwise False\n    return tuple1 in tuplex\n\n# Step 3: Output the entire Python code as a plain string that can be directly executed using `exec()`\n# The code is already in the correct format, so we just need to return it as a string\npython_code = \"\"\"\ndef check_tuplex(tuplex, tuple1):\n    # Step 1: Define the function with the given parameters\n    # tuplex: The tuple in which we need to check for the existence of an element\n    # tuple1: The element we need to check for in the tuple\n\n    # Step 2: Use the 'in' operator to check if tuple1 exists in tuplex\n    # The 'in' operator returns True if the element is found in the tuple, otherwise False\n    return tuple1 in tuplex\n\"\"\"\n\n# Return the Python code as a string\npython_code\n",
        "pass": "True"
    },
    {
        "task_id": 406,
        "text": "Write a python function to find the parity of a given number.",
        "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "test_list": [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Parity(x):",
        "question_1": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_1": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"",
        "question_2": "Write a Python program to classify a given set of integers depending on the parity of the remainder when they are divided by 2.",
        "answer_2": "def classifyIntegersByOddEven(arr):\n    evens = []\n    odds = []\n    \n    for num in arr:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    \n    return evens, odds\n\nevens, odds = classifyIntegersByOddEven([1, 8, 4, 120])\nprint('Evens: ', evens)\nprint('Odds: ', odds)",
        "question_3": "Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way.",
        "answer_3": "even_list = []\nodd_list = []\n\nfor num in input_list:\n if num % 2 == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list)",
        "full_code": "\ndef find_Parity(x):\n    # Step 1: Check if the number is divisible by 2\n    # Reasoning: A number is even if it is divisible by 2, otherwise it is odd.\n    if x % 2 == 0:\n        # Step 2: If divisible by 2, return \"even\"\n        return \"even\"\n    else:\n        # Step 3: If not divisible by 2, return \"odd\"\n        return \"odd\"\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 407,
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rearrange_bigger(n):",
        "question_1": "Develop a Python program to print the digits of a given integer in reverse order.",
        "answer_1": "\"\"\"\nPython script to print the digits of a given integer in reverse order\n\"\"\"\n\nnum = int(input('Enter an integer: '))\n\n# Initializing the variable to hold the reversed digits \nreverse = 0\n\nwhile (num > 0):\n    # Extracting the last digit\n    remainder = num % 10\n\n    # Multiplying the reverse variable by 10 and adding the remainder\n    reverse = (reverse * 10) + remainder\n\n    # Removing the last digit of the original number\n    num = num // 10\n\n# printing the reversed digits\nprint(reverse)",
        "question_2": "Develop a Python script that prints out the numbers from 0 to 9 in descending order?",
        "answer_2": "for n in reversed(range(0,10)):\n    print(n)",
        "question_3": "Write a python program to convert a number into a list of its digits",
        "answer_3": "def number_to_digits(number):\n  digits = []\n  while (number>0):\n    digits.append(number % 10)\n    number = number // 10\n  \n  digits.reverse()\n  return digits",
        "full_code": "\ndef rearrange_bigger(n):\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Find the first digit that is smaller than the digit next to it\n    # This is the point where we can potentially rearrange to get a bigger number\n    for i in range(len(str_n) - 2, -1, -1):\n        if str_n[i] < str_n[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number is already the largest permutation\n        return n\n    \n    # Find the smallest digit on the right of the identified digit that is larger than it\n    for j in range(len(str_n) - 1, i, -1):\n        if str_n[j] > str_n[i]:\n            break\n    \n    # Swap the identified digits\n    str_n = list(str_n)\n    str_n[i], str_n[j] = str_n[j], str_n[i]\n    \n    # Reverse the digits to the right of the identified digit to get the smallest permutation\n    str_n = str_n[:i + 1] + str_n[i + 1:][::-1]\n    \n    # Convert the list back to a string and then to an integer\n    next_bigger = int(''.join(str_n))\n    \n    return next_bigger\n\n# Example usage:\n# print(rearrange_bigger(1234))  # Output: 1243\n",
        "pass": "False"
    },
    {
        "task_id": 408,
        "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Develop an algorithm in Python for merging k sorted arrays.",
        "answer_3": "def mergeKArrays(arrays):\n    '''\n    This function will merge k sorted\n    arrays in to one sorted array.\n    '''\n    # initialize the resulting array\n    result = []\n\n    # loop through all the arrays\n    for array in arrays:\n       # merge this array with existing result\n       result = mergeTwoArrays(result, array)\n\n    # return the result array\n    return result\n\n\ndef mergeTwoArrays(arr1, arr2):\n    # define the resulting array\n    result = []\n    i, j = 0, 0\n\n    # loop through both the arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    # add the remaining elements from both arrays\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n\n    return result\n\n\narrays = [[1, 3, 5],\n          [2, 4, 6],\n          [7, 8, 9]]\n\nprint(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "full_code": "\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Initialize an empty list to store the result pairs\n    result = []\n    \n    # Initialize a min-heap to keep track of the smallest sums\n    min_heap = []\n    \n    # Push the first element from nums1 and all elements from nums2 into the heap\n    # We use a tuple (sum, i, j) where sum is the sum of nums1[i] and nums2[j]\n    # This ensures that the heap is ordered by the sum of the pairs\n    for j in range(len(nums2)):\n        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))\n    \n    # While there are still pairs to extract and we haven't reached k pairs\n    while min_heap and len(result) < k:\n        # Pop the smallest element from the heap\n        current_sum, i, j = heapq.heappop(min_heap)\n        \n        # Add the pair (nums1[i], nums2[j]) to the result list\n        result.append((nums1[i], nums2[j]))\n        \n        # If there is a next element in nums1, push it into the heap\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    # Return the result list containing the k smallest pairs\n    return result\n\n# Example usage:\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))  # Output: [(1, 2), (1, 4), (1, 6)]\n",
        "pass": "False"
    },
    {
        "task_id": 409,
        "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_product_tuple(list1):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Modify the below Python function to make it efficient.",
        "answer_2": "def min_product(a, b):\n    if a > b:\n        return a * b\n    else:\n        return a * b * (a - b)",
        "question_3": "Optimize the following python program and reduce its runtime.",
        "answer_3": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "full_code": "\ndef min_product_tuple(list1):\n    # Initialize a variable to store the minimum product found.\n    # We start with a very large number to ensure any product will be smaller.\n    min_product = float('inf')\n    \n    # Iterate over each tuple in the list.\n    for pair in list1:\n        # Calculate the product of the current pair.\n        product = pair[0] * pair[1]\n        \n        # Check if the current product is smaller than the minimum product found so far.\n        if product < min_product:\n            # Update the minimum product if the current product is smaller.\n            min_product = product\n    \n    # Return the minimum product found.\n    return min_product\n\n# Example usage:\nlist1 = [(2, 3), (4, 1), (6, 4), (5, 8)]\nprint(min_product_tuple(list1))  # Output: 4\n",
        "pass": "True"
    },
    {
        "task_id": 410,
        "text": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_val(listval):",
        "question_1": "Optimize the following python program and reduce its runtime.",
        "answer_1": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "question_2": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_2": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_3": "Generate a Python code snippet to find the minimum value of a list of integers.",
        "answer_3": "def find_min(list):\n    min_value = list[0]\n\n    for value in list:\n        if value < min_value:\n            min_value = value\n\n    return min_value",
        "full_code": "\ndef min_val(listval):\n    # Initialize the minimum value with None to handle the case where the list is empty\n    min_value = None\n    \n    # Iterate through each element in the list\n    for item in listval:\n        # Check if the current item is a number (integer or float)\n        if isinstance(item, (int, float)):\n            # If min_value is None (first valid number found) or item is smaller than min_value\n            if min_value is None or item < min_value:\n                # Update min_value to the current item\n                min_value = item\n    \n    # Return the minimum value found, or None if no valid numbers were found\n    return min_value\n\n# The entire function as a plain string\nfunction_str = \"\"\"\ndef min_val(listval):\n    # Initialize the minimum value with None to handle the case where the list is empty\n    min_value = None\n    \n    # Iterate through each element in the list\n    for item in listval:\n        # Check if the current item is a number (integer or float)\n        if isinstance(item, (int, float)):\n            # If min_value is None (first valid number found) or item is smaller than min_value\n            if min_value is None or item < min_value:\n                # Update min_value to the current item\n                min_value = item\n    \n    # Return the minimum value found, or None if no valid numbers were found\n    return min_value\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(function_str)\n",
        "pass": "True"
    },
    {
        "task_id": 411,
        "text": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef snake_to_camel(word):",
        "question_1": "Write a Python program to convert a string in camel case format to snake case format",
        "answer_1": "my_name_is_ryan",
        "question_2": "Convert the given string from Upper Camel Case notation to lower snake case notation in Python.",
        "answer_2": "lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",
        "question_3": "Generate a function in Python to transform a string from camelCase to snake_case.",
        "answer_3": "def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))",
        "full_code": "\nimport re\n\ndef snake_to_camel(word):\n    # Step 1: Split the snake_case string by underscores using regex\n    # We use re.split to split the string at each underscore\n    parts = re.split(r'_', word)\n    \n    # Step 2: Capitalize the first letter of each part except the first one\n    # The first part remains as it is, but all subsequent parts are capitalized\n    camel_case_parts = [parts[0]] + [part.capitalize() for part in parts[1:]]\n    \n    # Step 3: Join the parts together to form the camelCase string\n    # We use the join method to concatenate the parts without any separators\n    camel_case_string = ''.join(camel_case_parts)\n    \n    return camel_case_string\n\n# Example usage:\n# word = \"this_is_example\"\n# print(snake_to_camel(word))  # Output should be \"thisIsExample\"\n",
        "pass": "False"
    },
    {
        "task_id": 412,
        "text": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(l):",
        "question_1": "Create a python program to remove odd numbers from a list of numbers.",
        "answer_1": "def remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result",
        "question_2": "Write a Python program to print the given list after removing even numbers from it.",
        "answer_2": "list_odd = [] \nfor num in [3, 5, 7, 4, 8, 10]:\n    if num %2 != 0:\n        list_odd.append(num)\n        \nprint(list_odd)",
        "question_3": "Generate Python code to filter a given list of numbers such that only the odd numbers are removed.",
        "answer_3": "def filter_odd(list):\n    return [num for num in list if num % 2 == 0]",
        "full_code": "\ndef remove_odd(l):\n    # Step 1: Initialize an empty list to store the even numbers\n    even_numbers = []\n    \n    # Step 2: Iterate through each number in the input list\n    for num in l:\n        # Step 3: Check if the number is even (i.e., num % 2 == 0)\n        if num % 2 == 0:\n            # Step 4: If the number is even, append it to the even_numbers list\n            even_numbers.append(num)\n    \n    # Step 5: Return the list of even numbers\n    return even_numbers\n\n# The entire code as a plain string\ncode_string = \"\"\"\ndef remove_odd(l):\n    # Step 1: Initialize an empty list to store the even numbers\n    even_numbers = []\n    \n    # Step 2: Iterate through each number in the input list\n    for num in l:\n        # Step 3: Check if the number is even (i.e., num % 2 == 0)\n        if num % 2 == 0:\n            # Step 4: If the number is even, append it to the even_numbers list\n            even_numbers.append(num)\n    \n    # Step 5: Return the list of even numbers\n    return even_numbers\n\"\"\"\n\n# Output the code string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 413,
        "text": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_nth_element(list1, n):",
        "question_1": "Generate a function in Python to get the nth element of a given list.",
        "answer_1": "def get_nth_item(lst, n):\n  \"\"\"\n  This function returns the nth item of a given list.\n  \"\"\"\n  return lst[n]",
        "question_2": "Write a Python program to extract the n-th element from the given list of lists.",
        "answer_2": "def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]",
        "question_3": "Design a python program to return the n-th element of a given list.",
        "answer_3": "def get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))",
        "full_code": "\ndef extract_nth_element(list1, n):\n    # Step 1: Initialize an empty list to store the nth elements from each tuple.\n    nth_elements = []\n    \n    # Step 2: Iterate over each tuple in the given list of tuples.\n    for tup in list1:\n        # Step 3: Check if the tuple has at least n+1 elements.\n        if len(tup) > n:\n            # Step 4: If the tuple has enough elements, append the nth element to the result list.\n            nth_elements.append(tup[n])\n        else:\n            # Step 5: If the tuple does not have enough elements, append None or handle as needed.\n            nth_elements.append(None)\n    \n    # Step 6: Return the list of nth elements.\n    return nth_elements\n\n# Example usage:\n# list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# n = 1\n# print(extract_nth_element(list1, n))  # Output: [2, 5, 8]\n",
        "pass": "True"
    },
    {
        "task_id": 414,
        "text": "Write a python function to check whether the value exists in a sequence or not.",
        "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def overlapping(list1,list2):",
        "question_1": "Create a Python function to detect a specific sequence",
        "answer_1": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_2": "Write a python program to check whether two sequences are equal or not.",
        "answer_2": "def is_equal(seq_1, seq_2):\n  return sorted(seq_1) == sorted(seq_2)",
        "question_3": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_3": "def element_exists(elem, list_int):\n  return elem in list_int",
        "full_code": "\ndef overlapping(list1, list2):\n    # Step 1: Initialize a flag to indicate if any overlap is found\n    overlap_found = False\n    \n    # Step 2: Iterate through each element in the first list\n    for elem in list1:\n        # Step 3: Check if the current element from list1 is in list2\n        if elem in list2:\n            # Step 4: If an overlap is found, set the flag to True and break the loop\n            overlap_found = True\n            break\n    \n    # Step 5: Return the flag indicating if an overlap was found\n    return overlap_found\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef overlapping(list1, list2):\n    # Step 1: Initialize a flag to indicate if any overlap is found\n    overlap_found = False\n    \n    # Step 2: Iterate through each element in the first list\n    for elem in list1:\n        # Step 3: Check if the current element from list1 is in list2\n        if elem in list2:\n            # Step 4: If an overlap is found, set the flag to True and break the loop\n            overlap_found = True\n            break\n    \n    # Step 5: Return the flag indicating if an overlap was found\n    return overlap_found\n\"\"\"\n",
        "pass": "True"
    },
    {
        "task_id": 415,
        "text": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Product(arr):",
        "question_1": "Implement a function in Python that takes in an array of integers and returns the pair of integers that have the greatest product.",
        "answer_1": "def calculate_greatest_product(array):\n    greatest_product = float('-inf')\n    first_pair = None\n    second_pair = None\n    \n    for i in range(0, len(array)-1):\n        for j in range(i+1, len(array)):\n            product = array[i] * array[j]\n            if product > greatest_product:\n                greatest_product = product\n                first_pair = array[i]\n                second_pair = array[j]\n    \n    return first_pair, second_pair\n\ngreatest_product = calculate_greatest_product(array)\nprint(greatest_product) # Output: (-10, 6)",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_3": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))",
        "full_code": "\ndef max_Product(arr):\n    # Step 1: Check if the array has fewer than 2 elements\n    # If the array has fewer than 2 elements, we cannot form a pair, so return None\n    if len(arr) < 2:\n        return None\n    \n    # Step 2: Initialize variables to store the maximum and second maximum elements\n    # We need to find the two largest numbers in the array to maximize the product\n    max1 = max2 = float('-inf')\n    \n    # Step 3: Initialize variables to store the minimum and second minimum elements\n    # We also need to consider the possibility of negative numbers, as two negatives can produce a large positive product\n    min1 = min2 = float('inf')\n    \n    # Step 4: Iterate through the array to find the two largest and two smallest numbers\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Step 5: Calculate the product of the two largest numbers and the product of the two smallest numbers\n    # The highest product will be the maximum of these two products\n    highest_product = max(max1 * max2, min1 * min2)\n    \n    # Step 6: Return the highest product found\n    return highest_product\n\n# Example usage:\nprint(max_Product([4, -2, 10, 8, 9]))  # Output should be 90 (10 * 9)\n",
        "pass": "False"
    },
    {
        "task_id": 416,
        "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "test_list": [
            "assert breakSum(12) == 13",
            "assert breakSum(24) == 27",
            "assert breakSum(23) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 1000000\r\ndef breakSum(n):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Refactor this piece of Python code to increase its readability.",
        "answer_2": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum",
        "question_3": "Improve the following Python program to reduce its time complexity.",
        "answer_3": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum",
        "full_code": "\nMAX = 1000000\n\ndef breakSum(n):\n    # Initialize a list to store the maximum sums for each number from 0 to n\n    # This will help in dynamic programming to avoid recalculating sums\n    max_sums = [0] * (n + 1)\n    \n    # Base case: the maximum sum for 0 is 0 (no parts to sum)\n    max_sums[0] = 0\n    \n    # Base case: the maximum sum for 1 is 1 (only one part, itself)\n    max_sums[1] = 1\n    \n    # Iterate from 2 to n to fill the max_sums list\n    for i in range(2, n + 1):\n        # The maximum sum for i can be either:\n        # 1. i itself (if we don't break it)\n        # 2. The maximum sum of breaking i into two parts (i//2 and i - i//2)\n        # 3. The maximum sum of breaking i into three parts (i//3, i//3, and i - 2*(i//3))\n        # We need to consider all these possibilities and take the maximum\n        \n        # Option 1: i itself\n        max_sums[i] = i\n        \n        # Option 2: Breaking into two parts\n        max_sums[i] = max(max_sums[i], max_sums[i//2] + max_sums[i - i//2])\n        \n        # Option 3: Breaking into three parts\n        max_sums[i] = max(max_sums[i], max_sums[i//3] + max_sums[i//3] + max_sums[i - 2*(i//3)])\n    \n    # The answer for n is stored in max_sums[n]\n    return max_sums[n]\n\n# Example usage:\nprint(breakSum(24))  # Output should be the maximum sum possible by breaking 24 into parts\n```\n\n### Explanation:\n1. **Initialization**: We initialize a list `max_sums` to store the maximum sums for each number from 0 to `n`. This helps in dynamic programming by avoiding recalculations.\n2. **Base Cases**: \n   - For `n = 0`, the maximum sum is `0` (no parts to sum).\n   - For `n = 1`, the maximum sum is `1` (only one part, itself).\n3. **Dynamic Programming Loop**:\n   - For each number `i` from `2` to `n`, we consider three possibilities for the maximum sum:\n     - `i` itself.\n     - Breaking `i` into two parts: `i//2` and `i - i//2`.\n     - Breaking `i` into three parts: `i//3`, `i//3`, and `i - 2*(i//3)`.\n   - We update `max_sums[i]` with the maximum of these three possibilities.\n4. **Result**: The maximum sum for the given number `n` is stored in `max_sums[n]`.\n\nThis approach ensures that we efficiently compute the maximum sum by leveraging dynamic programming to avoid redundant calculations.",
        "pass": "Error"
    },
    {
        "task_id": 417,
        "text": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_tuples(Input):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_2": "first_element = (3, 4, 5)[0]",
        "question_3": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_3": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "full_code": "\ndef group_tuples(Input):\n    # Initialize an empty dictionary to store the groups of tuples\n    grouped_dict = {}\n    \n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # Extract the first element of the tuple\n        first_element = tup[0]\n        \n        # Check if the first element is already a key in the dictionary\n        if first_element in grouped_dict:\n            # If it is, append the current tuple to the list of tuples for this key\n            grouped_dict[first_element].append(tup)\n        else:\n            # If it is not, create a new list with the current tuple and add it to the dictionary\n            grouped_dict[first_element] = [tup]\n    \n    # Return the dictionary containing the grouped tuples\n    return grouped_dict\n\n# Example usage:\n# Input = [(1, 'a'), (2, 'b'), (1, 'c'), (3, 'd'), (2, 'e')]\n# print(group_tuples(Input))\n# Output: {1: [(1, 'a'), (1, 'c')], 2: [(2, 'b'), (2, 'e')], 3: [(3, 'd')]}\n",
        "pass": "False"
    },
    {
        "task_id": 418,
        "text": "Write a python function to find the sublist having maximum length.",
        "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Max(lst):",
        "question_1": "Code a function in Python that returns the length of the longest increasing subsequence in a given list of integers.",
        "answer_1": "def longestIncreasingSubsequence(list):\n n = len(list)\n maxLength = 0\n\n# Create a list to store the maximum length \n# of the increasing subsequence ending at 'i' \nlengthList = [1] * n\n\n# Compute optimized values in bottom up manner \nfor i in range(1, n):\n for j in range(0, i):\n  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):\n   lengthList[i] = lengthList[j] + 1\n\n# Pick maximum of all computed values \nmaxLength = max(lengthList)\n\nreturn maxLength",
        "question_2": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_2": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_3": "Given a list of strings, write a Python program to calculate the maximum length of a string.",
        "answer_3": "max_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length)",
        "full_code": "\ndef Find_Max(lst):\n    # Initialize a variable to store the maximum length of sublists found\n    max_length = 0\n    # Initialize a variable to store the sublist with the maximum length\n    max_sublist = []\n    \n    # Iterate over each sublist in the given list\n    for sublist in lst:\n        # Check if the current sublist's length is greater than the maximum length found so far\n        if len(sublist) > max_length:\n            # Update the maximum length\n            max_length = len(sublist)\n            # Update the sublist with the maximum length\n            max_sublist = sublist\n    \n    # Return the sublist with the maximum length\n    return max_sublist\n\n# Example usage:\n# lst = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n# print(Find_Max(lst))  # Output: [6, 7, 8, 9]\n",
        "pass": "True"
    },
    {
        "task_id": 419,
        "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_and_sum(list1):",
        "question_1": "Can you develop a function in Python to iteratively sum all the numbers in a list of numbers?",
        "answer_1": "def sum_list(list): \n  total = 0\n  for num in list:\n    total += num  \n  return total\n\nprint(sum_list([4, 9, 13, 5])) # Output: 31",
        "question_2": "Transform the following algorithm description into a working python function.",
        "answer_2": "def sum_list(nums_list):\n    total = 0\n    for num in nums_list:\n        total += num\n    return total",
        "question_3": "Develop a program in Python that sums up all the numbers of a list.",
        "answer_3": "# define the list\nmy_list = [1, 2, 3, 4, 5]\n\n# compute the total\ntotal = 0\nfor num in my_list:\n total += num\n\n# print the result\nprint(\"The sum of all numbers in the list is: \" + str(total))",
        "full_code": "\ndef round_and_sum(list1):\n    # Step 1: Initialize a variable to store the total sum of the rounded numbers\n    total_sum = 0\n    \n    # Step 2: Iterate through each number in the list\n    for num in list1:\n        # Step 3: Round the current number to the nearest integer\n        rounded_num = round(num)\n        \n        # Step 4: Add the rounded number to the total sum\n        total_sum += rounded_num\n    \n    # Step 5: Calculate the final result by multiplying the total sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Step 6: Print the final result\n    print(result)\n\n# Example usage:\nround_and_sum([1.5, 2.7, 3.2, 4.8])  # Output: 36\n",
        "pass": "False"
    },
    {
        "task_id": 420,
        "text": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_Sum(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Develop a Python program to find the sum of first n even numbers.",
        "answer_2": "def find_sum(n):\n \u00a0 \u00a0sum = 0\n \u00a0 \u00a0for i in range(1, n+1):\n \u00a0 \u00a0 \u00a0 \u00a0if i % 2 == 0:\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sum += i\n \u00a0 \u00a0return sum\n\nn = 7\nprint(\"The sum of first n even numbers is:\", find_sum(n))",
        "question_3": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_3": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum",
        "full_code": "\ndef cube_Sum(n):\n    # Initialize the sum variable to store the cumulative sum of cubes\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    # Even natural numbers start from 2 and increment by 2\n    # We can generate the ith even number using the formula 2*i\n    for i in range(1, n+1):\n        # Calculate the ith even number\n        even_number = 2 * i\n        \n        # Calculate the cube of the even number\n        cube = even_number ** 3\n        \n        # Add the cube to the sum\n        sum += cube\n    \n    # Return the final sum of cubes\n    return sum\n\n# Example usage:\n# n = 3\n# print(cube_Sum(n))  # Output should be 224 (2^3 + 4^3 + 6^3)\n",
        "pass": "True"
    },
    {
        "task_id": 421,
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_tuple(test_tup):",
        "question_1": "Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.",
        "answer_1": "def concatenate_strings(strings, separator):\n return separator.join(strings)",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.",
        "answer_3": "def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3]",
        "full_code": "\ndef concatenate_tuple(test_tup):\n    # Step 1: Initialize an empty list to store the concatenated results\n    concatenated_list = []\n    \n    # Step 2: Iterate through each element in the tuple\n    for element in test_tup:\n        # Step 3: Concatenate the element with the delimiter (which is a space ' ')\n        concatenated_element = element + ' '\n        \n        # Step 4: Append the concatenated element to the list\n        concatenated_list.append(concatenated_element)\n    \n    # Step 5: Return the list of concatenated elements\n    return concatenated_list\n\n# Example usage:\n# test_tup = ('apple', 'banana', 'cherry')\n# print(concatenate_tuple(test_tup))  # Output: ['apple ', 'banana ', 'cherry ']\n",
        "pass": "False"
    },
    {
        "task_id": 422,
        "text": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Average_Of_Cube(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Write a Python program that outputs the average of 3 given numbers.",
        "answer_2": "def find_average(num1, num2, num3):\n return (num1 + num2 + num3) / 3",
        "question_3": "Write a Python function that computes the average of 3 numbers.",
        "answer_3": "def average(a, b, c):\n    return (a + b + c) / 3.0\n\nprint(average(1,2,3)) # Output: 2.0",
        "full_code": "\ndef find_Average_Of_Cube(n):\n    # Step 1: Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # Step 2: Loop through the first n natural numbers\n    for i in range(1, n + 1):\n        # Step 3: Calculate the cube of the current number and add it to the sum\n        sum_of_cubes += i ** 3\n    \n    # Step 4: Calculate the average by dividing the sum of cubes by n\n    average_of_cubes = sum_of_cubes / n\n    \n    # Step 5: Return the calculated average\n    return average_of_cubes\n\n# Example usage:\n# print(find_Average_Of_Cube(3))  # Output: 12.0 (since (1^3 + 2^3 + 3^3) / 3 = (1 + 8 + 27) / 3 = 36 / 3 = 12.0)\n",
        "pass": "True"
    },
    {
        "task_id": 423,
        "text": "Write a function to solve gold mine problem.",
        "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "test_list": [
            "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
            "assert get_maxgold([[10,20],[30,40]],2,2)==70",
            "assert get_maxgold([[4,9],[3,7]],2,2)==13"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_maxgold(gold, m, n):",
        "question_1": "Create a Python program to optimize a given function using the Nelder-Mead method.",
        "answer_1": "from scipy.optimize import minimize\ndef f(x):\n    return x[0]**2 + 4*x[1]**2\n\nres = minimize(f, [3, -2], method='nelder-mead')\n\nprint(res.x)",
        "question_2": "Create a python function that computes the Goldbach conjecture for a given positive even number n.",
        "answer_2": "def Goldbach_conjecture(n):\n    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n\t# list to hold all the prime pairs that add to n\n    prime_pairs = []\n    # find all prime numbers less than n\n    primes = [x for x in range(2, n+1) if isprime(x)]\n    # loop through all prime numbers\n    for prime_x in primes:\n        # check if prime_x added to any prime number less than prime_x \n        # equals n. If true, add that prime pair to the prime_pairs list\n        for prime_y in primes:\n            if prime_y < prime_x and prime_x + prime_y == n:\n                prime_pairs.append((prime_x, prime_y))\n    return prime_pairs\n\ndef isprime(n):\n    # check if n is prime\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "question_3": "Write a Python program to optimize a given set of equations using gradient descent.",
        "answer_3": "import numpy as np\n \n# define the function\ndef f(x):\n    return x**2 + 2*x + 5 + 2*x**2 + 4*x + 1\n \n# define the gradient\ndef grad_f(x):\n    return 2*x + 2 + 4*x + 4\n \n# define the learning rate (eta)\neta = 0.01\n \n# define the number of times we need to loop\nn_iterations = 15\n \n# define the initial value for x\nx = 0\n \n# loop and print\nfor i in range(n_iterations):\n    x_next = x - eta * grad_f(x)\n    x = x_next\n    print(x, f(x))",
        "full_code": "\ndef get_maxgold(gold, m, n):\n    # Initialize a 2D array to store the maximum gold collected at each cell\n    max_gold = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Iterate over each cell in the grid\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            # If we are in the last column, the maximum gold is the gold in that cell\n            if col == n-1:\n                max_gold[row][col] = gold[row][col]\n            # If we are in the first row, we can only move right or diagonally down-right\n            elif row == 0:\n                max_gold[row][col] = gold[row][col] + max(max_gold[row][col+1], max_gold[row+1][col+1])\n            # If we are in the last row, we can only move right or diagonally up-right\n            elif row == m-1:\n                max_gold[row][col] = gold[row][col] + max(max_gold[row][col+1], max_gold[row-1][col+1])\n            # For all other rows, we can move right, diagonally up-right, or diagonally down-right\n            else:\n                max_gold[row][col] = gold[row][col] + max(max_gold[row][col+1], max_gold[row-1][col+1], max_gold[row+1][col+1])\n    \n    # The maximum gold collected will be the maximum value in the first column\n    max_gold_collected = max(max_gold[row][0] for row in range(m))\n    \n    return max_gold_collected\n\n# Example usage:\ngold = [\n    [1, 3, 1, 5],\n    [2, 2, 4, 1],\n    [5, 0, 2, 3],\n    [0, 6, 1, 2]\n]\nm = 4\nn = 4\nprint(get_maxgold(gold, m, n))  # Output should be the maximum gold collected\n",
        "pass": "True"
    },
    {
        "task_id": 424,
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_rear(test_tuple):",
        "question_1": "Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.",
        "answer_1": "def search_string(lst, s):\n for i, item in enumerate(lst):\n if item == s:\n return i\n return -1",
        "question_2": "Implement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.",
        "answer_2": "def find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices",
        "question_3": "Create a Python program to search a string and print the index of all instances of a specific character.",
        "answer_3": "def search_character(string, character):\n indices = []\n for i in range(len(string)):\n  if string[i] == character:\n   indices.append(i)\n return indices\n\nprint(search_character(string, character)) # [3]",
        "full_code": "\ndef extract_rear(test_tuple):\n    # Initialize an empty list to store the rear index elements\n    rear_indices = []\n    \n    # Iterate over each string in the tuple\n    for string in test_tuple:\n        # Check if the string is not empty to avoid errors\n        if string:\n            # Append the last character of the string to the rear_indices list\n            rear_indices.append(string[-1])\n        else:\n            # If the string is empty, append None or any placeholder you find appropriate\n            rear_indices.append(None)\n    \n    # Return the list of rear index elements\n    return rear_indices\n\n# Example usage:\n# test_tuple = (\"hello\", \"world\", \"python\")\n# print(extract_rear(test_tuple))  # Output: ['o', 'd', 'n']\n",
        "pass": "True"
    },
    {
        "task_id": 425,
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_element_in_list(list1, x):",
        "question_1": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_1": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count",
        "question_2": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_2": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_3": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_3": "def count_elements(arr): \n    return len(arr)",
        "full_code": "\ndef count_element_in_list(list1, x):\n    # Initialize a counter to keep track of the number of sublists containing the element x\n    count = 0\n    \n    # Iterate over each sublist in the given list\n    for sublist in list1:\n        # Check if the sublist is a list itself (to handle nested lists)\n        if isinstance(sublist, list):\n            # If the sublist contains the element x, increment the counter\n            if x in sublist:\n                count += 1\n        else:\n            # If the sublist is not a list (e.g., a single element), check if it is equal to x\n            if sublist == x:\n                count += 1\n    \n    # Return the final count of sublists containing the element x\n    return count\n\n# Example usage:\n# list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 1], [10, 1]]\n# x = 1\n# print(count_element_in_list(list1, x))  # Output should be 2\n",
        "pass": "True"
    },
    {
        "task_id": 426,
        "text": "Write a function to filter odd numbers using lambda function.",
        "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_oddnumbers(nums):",
        "question_1": "Generate Python code to filter a given list of numbers such that only the odd numbers are removed.",
        "answer_1": "def filter_odd(list):\n    return [num for num in list if num % 2 == 0]",
        "question_2": "Design a Python program to filter out the odd numbers from a list.",
        "answer_2": "def filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]",
        "question_3": "Rewrite a Python program from imperative to functional style.",
        "answer_3": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)",
        "full_code": "\ndef filter_oddnumbers(nums):\n    # Step 1: Define the lambda function to check if a number is odd\n    # The lambda function will take a number 'x' and return True if x % 2 != 0 (i.e., x is odd)\n    is_odd = lambda x: x % 2 != 0\n    \n    # Step 2: Use the filter function to apply the lambda function to each element in the list 'nums'\n    # The filter function will return an iterator of elements that satisfy the condition (i.e., are odd)\n    odd_numbers = filter(is_odd, nums)\n    \n    # Step 3: Convert the filter object to a list to get the final result\n    # This step is necessary because filter returns an iterator, and we need a list to return\n    odd_numbers_list = list(odd_numbers)\n    \n    # Step 4: Return the list of odd numbers\n    return odd_numbers_list\n\n# Example usage:\n# nums = [1, 2, 3, 4, 5, 6]\n# print(filter_oddnumbers(nums))  # Output: [1, 3, 5]\n",
        "pass": "True"
    },
    {
        "task_id": 427,
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef change_date_format(dt):",
        "question_1": "Write a Python function to recognize a date (in \u201cDD/MM/YYYY\u201d format) in a string",
        "answer_1": "def recognize_date(s):\n    '''This function recognizes a date (in DD/MM/YYYY format) in a string.'''\n    # Regex for DD/MM/YYYY format\n    format_regex = re.compile(r'\\d{2}/\\d{2}/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None",
        "question_2": "Transform string of format \u2018YYYY-MM-DD\u2019 to date type in Python",
        "answer_2": "import datetime\n\ndef date_string_to_datetime(date_str):\n  return datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date()",
        "question_3": "Write a function in Python to convert a given date in the format mm-dd-yyyy to the format dd-mm-yyyy.",
        "answer_3": "def convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat",
        "full_code": "\nimport re\n\ndef change_date_format(dt):\n    # Step 1: Define the regex pattern to match the input date format 'yyyy-mm-dd'\n    # The pattern '\\d{4}-\\d{2}-\\d{2}' matches exactly 4 digits, followed by '-', \n    # then exactly 2 digits, followed by '-', and finally exactly 2 digits.\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Step 2: Use re.sub() to replace the matched pattern with the desired format 'dd-mm-yyyy'\n    # The replacement string uses backreferences \\3, \\2, and \\1 to rearrange the matched groups\n    # \\3 corresponds to the day (dd), \\2 to the month (mm), and \\1 to the year (yyyy)\n    new_format = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    # Step 3: Return the newly formatted date string\n    return new_format\n\n# Example usage:\n# print(change_date_format('2023-10-05'))  # Output should be '05-10-2023'\n",
        "pass": "True"
    },
    {
        "task_id": 428,
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def shell_sort(my_list):",
        "question_1": "Develop a Python Program to sort an array without using any built-in functions.",
        "answer_1": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array",
        "question_2": "Develop a function in Python to sort a given array of strings.",
        "answer_2": "def sort_strings(strings):\n  return sorted(strings)",
        "question_3": "Create a python script to sort the numbers in an array",
        "answer_3": "def sort_array(arr):\n    for i in range(0, len(arr)-1):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "full_code": "\ndef shell_sort(my_list):\n    # Shell sort is an optimization over insertion sort.\n    # It works by comparing elements that are far apart and then progressively reducing the gap between them.\n    # The gap starts as half the length of the list and is reduced by half each time until it becomes 1.\n    \n    # Step 1: Determine the initial gap.\n    n = len(my_list)\n    gap = n // 2\n    \n    # Step 2: Continue the sorting process while the gap is greater than 0.\n    while gap > 0:\n        # Step 3: Perform insertion sort on sublists defined by the current gap.\n        for i in range(gap, n):\n            # Step 4: Store the current element to be compared.\n            temp = my_list[i]\n            j = i\n            \n            # Step 5: Shift earlier gap-sorted elements until the correct position for temp is found.\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Step 6: Place temp (the original my_list[i]) in its correct position.\n            my_list[j] = temp\n        \n        # Step 7: Reduce the gap for the next iteration.\n        gap //= 2\n    \n    # Step 8: Return the sorted list.\n    return my_list\n\n# The function is now complete and can be executed using exec().\n",
        "pass": "True"
    },
    {
        "task_id": 429,
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def and_tuples(test_tup1, test_tup2):",
        "question_1": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_1": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)",
        "question_2": "Write a python program to transform input set of numbers into a list of tuples.",
        "answer_2": "[(1, 2), (3, 4), (5, None)]",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)",
        "full_code": "\ndef and_tuples(test_tup1, test_tup2):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # For each element in the first tuple, perform a bitwise AND with the corresponding element in the second tuple\n        and_result = test_tup1[i] & test_tup2[i]\n        \n        # Append the result of the bitwise AND operation to the result list as a tuple with the original elements\n        result.append((test_tup1[i], test_tup2[i], and_result))\n    \n    # Return the result list containing the elementwise AND tuples\n    return result\n\n# Example usage:\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 15, 25)\nprint(and_tuples(test_tup1, test_tup2))\n",
        "pass": "False"
    },
    {
        "task_id": 430,
        "text": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_directrix(a, b, c):",
        "question_1": "Generate a graphical representation of a function using Python.",
        "answer_1": "import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()",
        "question_2": "Create a numerical optimization algorithm using Python that minimizes the function f(x,y) = x^2 + 2y^2",
        "answer_2": "import numpy as np\n\n# Define the function to be optimized\ndef f(x, y):\n    return np.square(x) + 2 * np.square(y)\n\n# Initialize the parameters\nx = 0\ny = 0\nlearning_rate = 10\n\n# Gradient Descent Algorithm\nfor i in range(1000):\n    # Calculate the derivatives\n    grad_x = 2 * x\n    grad_y = 4 * y\n\n    # Calculate the new values\n    x -= learning_rate * grad_x\n    y -= learning_rate * grad_y\n\n# Print the minimum\nprint(\"The minimum is: {:.4f}\".format(f(x, y)))",
        "question_3": "Create an optimization problem in Python to optimize the function.",
        "answer_3": "import numpy as np\nfrom scipy.optimize import minimize\ndef f(x):\n    x, y = x\n    return x + y**2\n\nx0 = np.array([0,0])\nres = minimize(f, x0, method='nelder-mead')\nprint(res.x)",
        "full_code": "\ndef parabola_directrix(a, b, c):\n    # The general form of a parabola is given by y = ax^2 + bx + c\n    # The directrix of a parabola y = ax^2 + bx + c is given by y = k - p,\n    # where k is the y-coordinate of the vertex and p is the distance from the vertex to the focus.\n    \n    # Step 1: Find the vertex of the parabola\n    # The x-coordinate of the vertex is given by x = -b / (2a)\n    x_vertex = -b / (2 * a)\n    \n    # Step 2: Substitute the x-coordinate of the vertex back into the equation to find the y-coordinate of the vertex\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    \n    # Step 3: Calculate the distance p from the vertex to the focus\n    # For a parabola y = ax^2 + bx + c, the distance p is given by 1 / (4a)\n    p = 1 / (4 * a)\n    \n    # Step 4: Calculate the y-coordinate of the directrix\n    # The directrix is given by y = y_vertex - p\n    y_directrix = y_vertex - p\n    \n    # Return the y-coordinate of the directrix\n    return y_directrix\n\n# Example usage:\n# a = 1, b = 0, c = 0 (parabola: y = x^2)\n# The directrix should be y = -1/4\nprint(parabola_directrix(1, 0, 0))  # Output should be -0.25\n",
        "pass": "False"
    },
    {
        "task_id": 431,
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_element(list1, list2):",
        "question_1": "Given two lists of integers, write a python function that returns a list of all common elements shared between them.",
        "answer_1": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))",
        "question_2": "Compare two lists and extract the common elements of both the lists in Python.",
        "answer_2": "def commonElements(l1, l2):\n    return set(l1).intersection(l2)",
        "question_3": "Write a Python function to compare two given lists and return a list containing only the common elements.",
        "answer_3": "def common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)",
        "full_code": "\ndef common_element(list1, list2):\n    # Step 1: Convert both lists to sets to leverage set operations\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Step 2: Use the intersection operation to find common elements\n    # The intersection of two sets returns a set containing elements present in both sets\n    common_elements = set1.intersection(set2)\n    \n    # Step 3: Check if the intersection result is non-empty\n    # If the intersection set is not empty, it means there is at least one common element\n    if common_elements:\n        return True\n    else:\n        return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\nprint(common_element(list1, list2))  # Output: True\n",
        "pass": "False"
    },
    {
        "task_id": 432,
        "text": "Write a function to find the median of a trapezium.",
        "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_trapezium(base1,base2,height):",
        "question_1": "Generate a python script to calculate the median of a given data set.",
        "answer_1": "def median(data):\n    n = len(data)\n    if n % 2 == 0:\n        return (data[n//2] + data[(n//2)-1])/2\n    else:\n        return data[n//2]\n\ndata = [5, 6, 7, 8, 9]\nmedian = median(data)\nprint('Median:', median)",
        "question_2": "Given a set X, suggest a Python program to calculate the median of X",
        "answer_2": "def median(X): \n    sorted_X = sorted(X) \n    mid_index = (len(sorted_X) - 1) // 2 \n    if len(sorted_X) % 2 == 0: \n        return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2\n    else: \n        return sorted_X[mid_index]",
        "question_3": "Using the given data, write a Python function to calculate the median of the numbers.",
        "answer_3": "def calculate_median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        first_num = data[int(len(data) / 2) - 1]\n        second_num = data[int(len(data) / 2)]\n        median = (first_num + second_num) / 2\n    else:\n        median = data[int((len(data) - 1) / 2)]\n    return median\n\nresult = calculate_median(data)\nprint(result)",
        "full_code": "\ndef median_trapezium(base1, base2, height):\n    # Step 1: Calculate the median of the trapezium\n    # The median of a trapezium is the average of the two bases.\n    # This is because the median line of a trapezium is parallel to the bases and divides the height into two equal parts.\n    median = (base1 + base2) / 2\n    \n    # Step 2: Return the calculated median\n    return median\n\n# Example usage:\n# base1 = 5, base2 = 10, height = 7\n# The median of the trapezium should be (5 + 10) / 2 = 7.5\nresult = median_trapezium(5, 10, 7)\nprint(result)\n",
        "pass": "True"
    },
    {
        "task_id": 433,
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
            "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_greater(arr, number):",
        "question_1": "Create a python script that checks if all numbers in an array are greater than, equal to, or less than a given number.",
        "answer_1": "def checkNum(arr, num):\n    response = []\n    for element in arr: \n        if element > num: \n            response.append('greater than')\n        elif element < num:\n            response.append('less than')\n        else:\n            response.append('equal to')\n    return response\n\nnums = [3,5,7]\nout = checkNum(nums, 4)\nprint(out)",
        "question_2": "Write a code in Python to display a sorted array of the numbers in an array that are greater than the given value.",
        "answer_2": "def sort_greater_numbers(arr, num):\n    result = [x for x in arr if  x > num]\n    result.sort()\n    return result",
        "question_3": "Implement a Python function to check if all n numbers in an array are equal.",
        "answer_3": "def checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr)",
        "full_code": "\ndef check_greater(arr, number):\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate through each element in the array\n    for element in arr:\n        # Check if the current element is less than the given number\n        if element < number:\n            # Append 'True' to the results list if the condition is met\n            results.append(True)\n        else:\n            # Append 'False' to the results list if the condition is not met\n            results.append(False)\n    \n    # Return the list of results\n    return results\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# number = 3\n# print(check_greater(arr, number))  # Output: [True, True, False, False, False]\n",
        "pass": "False"
    },
    {
        "task_id": 434,
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "test_list": [
            "assert text_match_one(\"ac\")==('Not matched!')",
            "assert text_match_one(\"dc\")==('Not matched!')",
            "assert text_match_one(\"abba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_one(text):",
        "question_1": "Generate a Python function that, given two strings, will return the number of matches between the strings.",
        "answer_1": "def string_matches(string1, string2): \n    matches = 0\n    for i in range(len(string1)): \n        if string1[i] == string2[i]: \n            matches += 1\n    return matches",
        "question_2": "Write a Python program to create a FuzzyWuzzy string matching for the given two strings.",
        "answer_2": "from fuzzywuzzy import fuzz \ndef fuzzy_match(str1, str2): \n    return fuzz.ratio(str1, str2)",
        "question_3": "Create a function in Python to compare two strings and return true if the strings only differ by one character.",
        "answer_3": "def compare_strings(s1, s2):\n    mismatch_count = 0\n\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if mismatch_count > 0:\n                return False\n\n            mismatch_count += 1\n\n    return mismatch_count == 1\n\ncompare_strings('apple', 'acple')",
        "full_code": "\nimport re\n\ndef text_match_one(text):\n    # Step 1: Define the regular expression pattern\n    # We want to match a string that starts with 'a' followed by one or more 'b's.\n    # The pattern for this is 'ab+', where 'a' is the literal 'a', 'b' is the literal 'b',\n    # and '+' means one or more occurrences of the preceding element (in this case, 'b').\n    pattern = r'ab+'\n    \n    # Step 2: Use the re.search() function to search for the pattern in the given text\n    # re.search() returns a match object if the pattern is found, otherwise it returns None.\n    match = re.search(pattern, text)\n    \n    # Step 3: Return True if a match is found, otherwise return False\n    # If match is not None, it means the pattern was found in the text.\n    return bool(match)\n\n# Example usage:\n# print(text_match_one(\"ab\"))  # True\n# print(text_match_one(\"abb\"))  # True\n# print(text_match_one(\"a\"))  # False\n# print(text_match_one(\"abc\"))  # True\n",
        "pass": "False"
    },
    {
        "task_id": 435,
        "text": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n) :\r\n    return (n % 10) ",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def last_Digit(n) :",
        "question_1": "Write a Python function to extract the last digits of a given integer.",
        "answer_1": "def extract_last_digits(n):\n  return int(str(n)[-2:])\n\nresult = extract_last_digits(12345)\nprint(result)",
        "question_2": "Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits.",
        "answer_2": "def remove_last_two_digits(num):\n    num = str(num)\n    return [int(x) for x in num[:-2]]",
        "question_3": "Create a function in Python that takes two parameters: a list of numbers and a number called \u2018n\u2019 and returns the last n numbers in the list.",
        "answer_3": "def last_n_numbers(myList, n):\n  return myList[-n:]\n  \nres = last_n_numbers(myList, n)\nprint(res) \n\n# Output\n[8, 9, 10]",
        "full_code": "\ndef last_Digit(n):\n    # Step 1: Convert the number to a string\n    # This allows us to easily access individual digits\n    n_str = str(n)\n    \n    # Step 2: Access the last character of the string\n    # Since strings are indexed from 0, the last character is at index -1\n    last_char = n_str[-1]\n    \n    # Step 3: Convert the last character back to an integer\n    # This gives us the last digit of the original number\n    last_digit = int(last_char)\n    \n    # Step 4: Return the last digit\n    return last_digit\n\n# Example usage:\nresult = last_Digit(12345)\nprint(result)  # Output should be 5\n",
        "pass": "True"
    },
    {
        "task_id": 436,
        "text": "Write a python function to print negative numbers in a list.",
        "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == -1,-6",
            "assert neg_nos([-1,-2,3,4]) == -1,-2",
            "assert neg_nos([-7,-6,8,9]) == -7,-6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_nos(list1):",
        "question_1": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_1": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_2": "Create a function in Python to find all elements in a list that are negative, and print them.",
        "answer_2": "def find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9]",
        "question_3": "Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers",
        "answer_3": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list",
        "full_code": "\ndef neg_nos(list1):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for num in list1:\n        # Check if the current number is negative\n        if num < 0:\n            # If it is negative, append it to the negative_numbers list\n            negative_numbers.append(num)\n    \n    # Print the list of negative numbers\n    print(negative_numbers)\n\n# Example usage:\n# neg_nos([1, -2, 3, -4, 5])  # This will print [-2, -4]\n",
        "pass": "False"
    },
    {
        "task_id": 437,
        "text": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(str1):",
        "question_1": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_1": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_2": "Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.",
        "answer_2": "def remove_odd_ascii_chars(str):\n    new_str = \"\"\n    for ch in str:\n        if ord(ch) % 2 == 0:\n            new_str += ch\n    return new_str\n\nstr = \"Hello world!\"\nnew_str = remove_odd_ascii_chars(str)\nprint(new_str)",
        "question_3": "Formulate a python code to remove the characters of odd index in a given string.",
        "answer_3": "def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe",
        "full_code": "\ndef remove_odd(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string with both index and character using enumerate\n    for i, ch in enumerate(str1):\n        # Check if the index is even (i.e., not odd)\n        if i % 2 == 0:\n            # Append the character to the result string\n            result += ch\n    \n    # Return the resulting string with odd characters removed\n    return result\n\n# Example usage\nprint(remove_odd(\"Hello World\"))  # Output: \"HloWrd\"\n",
        "pass": "False"
    },
    {
        "task_id": 438,
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_bidirectional(test_list):",
        "question_1": "Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.",
        "answer_1": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))",
        "question_2": "Generate a Python program to count the number of pairs with given sum x",
        "answer_2": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count",
        "question_3": "Create a python program for the following purpose:",
        "answer_3": "def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n",
        "full_code": "\ndef count_bidirectional(test_list):\n    # Initialize a counter to keep track of the number of bidirectional pairs\n    count = 0\n    \n    # Create a set to store the pairs we have already counted\n    # This helps in avoiding duplicate counting of pairs\n    seen_pairs = set()\n    \n    # Iterate over each element in the list to form pairs\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Form the pair (a, b)\n            pair1 = (test_list[i], test_list[j])\n            # Form the reverse pair (b, a)\n            pair2 = (test_list[j], test_list[i])\n            \n            # Check if neither of the pairs have been seen before\n            if pair1 not in seen_pairs and pair2 not in seen_pairs:\n                # If not seen, count this pair as a bidirectional pair\n                count += 1\n                # Add both pairs to the seen_pairs set to avoid counting them again\n                seen_pairs.add(pair1)\n                seen_pairs.add(pair2)\n    \n    # Return the total count of bidirectional pairs\n    return count\n\n# Example usage:\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 1), (2, 1), (3, 2), (4, 3), (1, 4)]\nprint(count_bidirectional(test_list))  # Output should be 4\n",
        "pass": "False"
    },
    {
        "task_id": 439,
        "text": "Write a function to convert a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiple_to_single(L):",
        "question_1": "Write a Python function to convert a list of multiple integers into a single integer.",
        "answer_1": "def convert_list_to_integer(my_list):\n    result = 0\n    multiplier = 1\n \n    for i in range(len(my_list)-1, -1, -1):\n        result += my_list[i]*multiplier\n        multiplier *= 10\n \n    return result\n \nprint(convert_list_to_integer(my_list))",
        "question_2": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_2": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "question_3": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_3": "def convert_to_integers(lst):\n    return [int(i) for i in lst]",
        "full_code": "\ndef multiple_to_single(L):\n    # Initialize an empty string to store the concatenated integers\n    concatenated_string = \"\"\n    \n    # Iterate through each integer in the list\n    for num in L:\n        # Convert the integer to a string and concatenate it to the existing string\n        concatenated_string += str(num)\n    \n    # Convert the concatenated string back to an integer\n    result_integer = int(concatenated_string)\n    \n    # Return the resulting integer\n    return result_integer\n\n# Example usage:\n# L = [1, 2, 3, 4, 5]\n# print(multiple_to_single(L))  # Output should be 12345\n",
        "pass": "True"
    },
    {
        "task_id": 440,
        "text": "Write a function to find all adverbs and their positions in a given sentence.",
        "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_adverb_position(text):",
        "question_1": "Define a function in Python that takes as input a sentence and returns a list of all noun phrases in the sentence.",
        "answer_1": "def get_noun_phrases(sentence):\n    noun_phrases = []\n    \n    words = word_tokenize(sentence)  \n    tagged_sentence = pos_tag(words)\n    chunks = ne_chunk(tagged_sentence)\n\n    for chunk in chunks:\n        if type(chunk) == Tree:\n            phrase = \" \".join([word[0] for word in chunk])\n            noun_phrases.append(phrase)\n    \n    return noun_phrases",
        "question_2": "Using Python, write a program to classify the input provided in the input field.",
        "answer_2": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\n# Create a function to classify the sentence\ndef classify_sentence(sentence):\n    # Create a list of words derived from the sentence\n    words = word_tokenize(sentence)\n\n    # Collect words and their corresponding part of speech tags\n    words_tags = nltk.pos_tag(words)\n    \n    # Create lists to contain nouns, verbs, adjectives and adverbs\n    nouns = []\n    verbs = []\n    adjectives = []\n    adverbs = []\n\n    # Iterate through each word and tag in the sentence\n    for word, tag in words_tags:\n        if tag in ['NN', 'NNS', 'NNP', 'NNPS']:\n            nouns.append(word)\n        elif tag in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']:\n            verbs.append(word)\n        elif tag in ['JJ', 'JJR', 'JJS']:\n            adjectives.append(word)\n        elif tag in ['RB', 'RBR', 'RBS']:\n            adverbs.append(word)\n\n    # Return a dictionary containing the detected words\n    return {\n        'nouns': nouns,\n        'verbs': verbs,\n        'adjectives': adjectives,\n        'adverbs': adverbs\n    }\n\nsentence = 'The dog barked at the cat.'\n\n# Classify the sentence\nclassified_sentence = classify_sentence(sentence)\n\n# Print the results\nprint(classified_sentence)\n\n# Output:\n# {'nouns': ['dog', 'cat'], 'verbs': ['barked'], 'adjectives': [], 'adverbs': []}",
        "question_3": "Develop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.",
        "answer_3": "def parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate",
        "full_code": "\nimport re\n\ndef find_adverb_position(text):\n    # Step 1: Tokenize the sentence into words\n    # We use regular expressions to split the text by spaces and punctuation marks\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Step 2: Tag each word with its part of speech\n    # We use NLTK's pos_tag function to get the part of speech for each word\n    import nltk\n    nltk.download('averaged_perceptron_tagger')  # Ensure the tagger is downloaded\n    tagged_words = nltk.pos_tag(words)\n    \n    # Step 3: Identify adverbs and their positions\n    # Adverbs are tagged as RB, RBR, or RBS in the Penn Treebank tagset\n    adverbs_with_positions = []\n    for index, (word, tag) in enumerate(tagged_words):\n        if tag in ['RB', 'RBR', 'RBS']:\n            # Store the adverb and its position in the original text\n            adverbs_with_positions.append((word, index))\n    \n    # Step 4: Return the list of adverbs and their positions\n    return adverbs_with_positions\n\n# Example usage:\n# text = \"She quickly and quietly walked to the store.\"\n# print(find_adverb_position(text))\n# Output: [('quickly', 1), ('quietly', 3)]\n",
        "pass": "False"
    },
    {
        "task_id": 441,
        "text": "Write a function to find the surface area of a cube.",
        "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cube(l):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "full_code": "\ndef surfacearea_cube(l):\n    # Step 1: Understand the formula for the surface area of a cube\n    # The surface area of a cube is given by the formula: 6 * (side length)^2\n    # Here, 'l' represents the side length of the cube.\n\n    # Step 2: Implement the formula in the function\n    # We will calculate the surface area using the formula and return the result.\n    return 6 * (l ** 2)\n\n# The function is now complete and can be executed directly.\n",
        "pass": "True"
    },
    {
        "task_id": 442,
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef positive_count(nums):",
        "question_1": "Create a Python program that accepts two numbers as an input and prints out the ratio of the two numbers.",
        "answer_1": "def calculateRatio(number1, number2):\n    return number1/number2\n    \nnumber1 = 13\nnumber2 = 24\nratioOfNumbers = calculateRatio(number1, number2)\n\nprint(\"The ratio of the two numbers is: \" + str(ratioOfNumbers))",
        "question_2": "Write a Python program to optimize a given array of integers such that each element is greater than or equal to the previous element in the array.",
        "answer_2": "def optimize_array(array):\n    optimized_array = []\n    prev = -float(\"inf\")\n    for n in array:\n        if(n>=prev):\n            optimized_array.append(n)\n            prev = n\n    return optimized_array\n\narray = [7, 2, 5, 8, 4, 0]\nprint(optimize_array(array))\n# Output: [7, 5, 8, 4]",
        "question_3": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_3": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)",
        "full_code": "\nfrom array import array\n\ndef positive_count(nums):\n    # Initialize a counter to keep track of the number of positive integers\n    positive_counter = 0\n    \n    # Iterate through each number in the array\n    for num in nums:\n        # Check if the current number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            positive_counter += 1\n    \n    # Calculate the ratio of positive numbers to the total number of elements in the array\n    total_elements = len(nums)\n    positive_ratio = positive_counter / total_elements\n    \n    # Return the calculated ratio\n    return positive_ratio\n\n# Example usage\nnums = array('i', [3, -1, 0, 5, -2, 4])\nprint(positive_count(nums))\n",
        "pass": "False"
    },
    {
        "task_id": 443,
        "text": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def largest_neg(list1):",
        "question_1": "Given a list of integers as input, write a Python code snippet to find the largest number.",
        "answer_1": "max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)",
        "question_2": "Optimize a Python program that reads a list of numbers and finds the largest and smallest number in the list.",
        "answer_2": "my_list = [1, -2, 9, 4, -7, 0]\n\n# Initialize variables\nlargest_number = my_list[0]\nsmallest_number = my_list[0]\n\n# Loop through list\nfor number in my_list:\n    # Update variables\n    if number > largest_number:\n        largest_number = number\n    if number < smallest_number:\n        smallest_number = number\n\nprint(\"Largest number:\", largest_number)\nprint(\"Smallest number:\", smallest_number)",
        "question_3": "Create a Python script that will automatically detect the largest number in a given list.",
        "answer_3": "def find_largest_number(list):\n largest = list[0]\n for number in list:\n if number > largest:\n largest = number\n return largest\n\nlist = [7, 2, -4, 5, 8, 1]\nprint(find_largest_number(list))\n# Output: 8",
        "full_code": "\ndef largest_neg(list1):\n    # Initialize a variable to store the largest negative number\n    # We start with a value that is guaranteed to be smaller than any negative number,\n    # which is 0. If no negative number is found, this value will remain 0.\n    largest_negative = 0\n    \n    # Iterate through each number in the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If the current largest_negative is 0 (meaning no negative number has been found yet)\n            # or if the current number is larger than the current largest_negative,\n            # update the largest_negative with the current number\n            if largest_negative == 0 or num > largest_negative:\n                largest_negative = num\n    \n    # Return the largest negative number found, or 0 if no negative number was found\n    return largest_negative\n\n# Example usage:\nlist1 = [-3, -5, 2, -1, 7, -10]\nprint(largest_neg(list1))  # Output should be -1\n",
        "pass": "False"
    },
    {
        "task_id": 444,
        "text": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def trim_tuple(test_list, K):",
        "question_1": "Write a Python program to convert a list into a tuple.",
        "answer_1": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_2": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]",
        "question_3": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "full_code": "\ndef trim_tuple(test_list, K):\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than 2*K (to ensure there are enough elements to trim)\n        if len(tup) > 2 * K:\n            # Trim the first K elements and the last K elements from the tuple\n            trimmed_tuple = tup[K:-K]\n        else:\n            # If the tuple is not long enough to trim K elements from both ends, return an empty tuple\n            trimmed_tuple = ()\n        \n        # Append the trimmed tuple to the result list\n        trimmed_list.append(trimmed_tuple)\n    \n    # Return the list of trimmed tuples\n    return trimmed_list\n\n# Example usage:\ntest_list = [(1, 2, 3, 4, 5, 6), (7, 8, 9, 10), (11, 12, 13, 14, 15)]\nK = 2\nprint(trim_tuple(test_list, K))\n# Output: [(3, 4), (), (13, 14)]\n",
        "pass": "False"
    },
    {
        "task_id": 445,
        "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def index_multiplication(test_tup1, test_tup2):",
        "question_1": "Write a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two.",
        "answer_1": "def list_multiplication(nums):\n    output_list = []\n    for i in range(len(nums)):\n        output_list.append(nums[i] * 2)\n    return output_list",
        "question_2": "Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.",
        "answer_2": "def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))",
        "question_3": "Write a Python program to create a new list that contains all the elements of the given list multiplied by each other.",
        "answer_3": "def multiply(nums):\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result.append(nums[i] * nums[j]) \n    return result",
        "full_code": "\ndef index_multiplication(test_tup1, test_tup2):\n    # Initialize an empty list to store the result of the index-wise multiplication\n    result = []\n    \n    # Check if the lengths of the two tuples are the same\n    # This is necessary because we need to perform index-wise multiplication\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # Iterate over the range of the length of the tuples\n    # This ensures we access each element at the same index in both tuples\n    for i in range(len(test_tup1)):\n        # Multiply the elements at the current index from both tuples\n        product = test_tup1[i] * test_tup2[i]\n        # Append the result to the result list\n        result.append(product)\n    \n    # Return the result list containing the index-wise multiplication results\n    return result\n\n# Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: [4, 10, 18]\n",
        "pass": "False"
    },
    {
        "task_id": 446,
        "text": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst):",
        "question_1": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_1": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_2": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_2": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_3": "Write a Python program to check how many times a given element occurs in a list.",
        "answer_3": "def count_element_occurrence(lst, target):\n count = 0\n for element in lst:\n     if element == target:\n         count += 1\n return count",
        "full_code": "\nfrom collections import Counter \n\ndef count_Occurrence(tup, lst):\n    # Initialize a Counter object to keep track of the occurrences of each element in the tuple\n    element_count = Counter()\n    \n    # Iterate over each element in the list\n    for element in lst:\n        # Check if the element is present in the tuple\n        if element in tup:\n            # If the element is present, increment its count in the Counter object\n            element_count[element] += 1\n    \n    # Return the Counter object which contains the count of each element in the list that is also in the tuple\n    return element_count\n\n# Example usage:\n# tup = (1, 2, 3, 4, 5)\n# lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n# print(count_Occurrence(tup, lst))\n# Output: Counter({5: 5, 4: 4, 3: 3, 2: 2, 1: 1})\n",
        "pass": "False"
    },
    {
        "task_id": 447,
        "text": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_nums(nums):",
        "question_1": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_1": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum",
        "question_2": "Generate a list comprehension in Python that prints the cubes of the first 5 numbers.",
        "answer_2": "[x**3 for x in range(1, 6)]",
        "question_3": "Create a Python lambda expression that prints out the square of each item in an input list.",
        "answer_3": "square = lambda nums: [x*x for x in nums]\n\nsquares = square([1,2,3])\nprint(squares)",
        "full_code": "\ndef cube_nums(nums):\n    # Step 1: Define a lambda function that takes a single number and returns its cube.\n    # This lambda function will be used to map over the list of numbers.\n    cube = lambda x: x**3\n    \n    # Step 2: Use the map function to apply the lambda function to each element in the list.\n    # The map function returns an iterator, so we convert it to a list to get the final result.\n    cubes = list(map(cube, nums))\n    \n    # Step 3: Return the list of cubes.\n    return cubes\n\n# Example usage:\n# cubes = cube_nums([1, 2, 3, 4, 5])\n# print(cubes)  # Output: [1, 8, 27, 64, 125]\n",
        "pass": "True"
    },
    {
        "task_id": 448,
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_sum(n):",
        "question_1": "Generate an optimized version of the following Python program.",
        "answer_1": "def calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum)",
        "question_2": "Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors",
        "answer_2": "def sum_of_divisors(n): \n    divisors = [i for i in range(1,n+1) if n%i == 0] \n    return sum(divisors) \n  \nn = 24\nprint(\"Sum of the positive divisors of 24 is:\",sum_of_divisors(n))",
        "question_3": "Edit the following Python code to make it run without any errors",
        "answer_3": "def find_sum(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum",
        "full_code": "\ndef cal_sum(n):\n    # Initialize the first three Perrin numbers\n    # Perrin sequence starts with P(0) = 3, P(1) = 0, P(2) = 2\n    perrin_numbers = [3, 0, 2]\n    \n    # If n is less than 3, return the corresponding Perrin number directly\n    if n < 3:\n        return perrin_numbers[n]\n    \n    # Generate Perrin numbers up to the nth term\n    for i in range(3, n + 1):\n        # Perrin number P(n) is defined as P(n) = P(n-2) + P(n-3)\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum all Perrin numbers up to the nth term\n    sum_perrin = sum(perrin_numbers)\n    \n    return sum_perrin\n\n# Example usage:\nn = 10\nprint(f\"Sum of Perrin numbers up to index {n} is: {cal_sum(n)}\")\n",
        "pass": "True"
    },
    {
        "task_id": 449,
        "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "test_list": [
            "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
            "assert check_Triangle(1,1,1,4,1,5) == 'No'",
            "assert check_Triangle(1,1,1,1,1,1) == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Triangle(x1,y1,x2,y2,x3,y3):",
        "question_1": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
        "answer_1": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
        "question_2": "Create a Python program that can identify a triangle using the 3 provided side lengths.",
        "answer_2": "\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))",
        "question_3": "Develop a Python program to check if a triangle is valid or not.",
        "answer_3": "# A function to check if the triangle is valid \ndef valid_triangle(side1, side2, side3): \n    # Check the sum of any two sides should be\n    # greater than the third one. \n    a = side1 + side2 \n    b = side1 + side3 \n    c = side2 + side3 \n       \n    if (a > side3) and (b > side2) and (c > side1): \n        return True\n    else: \n        return False\n\n# Driver Code \nside1 = 3 \nside2 = 4 \nside3 = 5  \nif valid_triangle(side1, side2, side3): \n    print(\"The triangle is valid\")\nelse: \n    print(\"The triangle is not valid\")",
        "full_code": "\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Step 1: Calculate the lengths of the sides of the triangle using the distance formula\n    # Distance between point 1 (x1, y1) and point 2 (x2, y2)\n    side1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    \n    # Distance between point 2 (x2, y2) and point 3 (x3, y3)\n    side2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    \n    # Distance between point 3 (x3, y3) and point 1 (x1, y1)\n    side3 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n    \n    # Step 2: Check if the sum of any two sides is greater than the third side\n    # This is a necessary and sufficient condition for three sides to form a triangle\n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2):\n        return True  # The points form a valid triangle\n    else:\n        return False  # The points do not form a valid triangle\n\n# Example usage:\n# x1, y1, x2, y2, x3, y3 = 0, 0, 4, 0, 0, 3\n# print(check_Triangle(x1, y1, x2, y2, x3, y3))  # Should return True\n",
        "pass": "False"
    },
    {
        "task_id": 450,
        "text": "Write a function to extract specified size of strings from a give list of string values.",
        "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_string(str, l):",
        "question_1": "Generate a function in Python that takes a list of strings and a integer, and returns a new list with the strings that have length greater than or equal to the given integer.",
        "answer_1": "def filter_within_length(strings, length):\n    result = []\n    for string in strings:\n        if len(string) >= length:\n            result.append(string)\n    return result\n\nstrings = [\"Java\", \"C++\", \"Swift\", \"Python\", \"Kotlin\"]\nresult = filter_within_length(strings, 4)\nprint(result)",
        "question_2": "Create a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.",
        "answer_2": "def string_to_length(list_strings):\n    return [len(string) for string in list_strings]",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
        "full_code": "\ndef extract_string(str, l):\n    # Initialize an empty list to store the strings that match the specified length\n    result = []\n    \n    # Iterate over each string in the input list\n    for s in str:\n        # Check if the length of the current string is equal to the specified length 'l'\n        if len(s) == l:\n            # If the condition is met, append the string to the result list\n            result.append(s)\n    \n    # Return the list of strings that have the specified length\n    return result\n\n# Example usage:\n# Define a list of strings\nstrings = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]\n# Specify the desired length of the strings to extract\nlength = 5\n# Call the function and store the result\nextracted_strings = extract_string(strings, length)\n# Print the result\nprint(extracted_strings)\n",
        "pass": "True"
    },
    {
        "task_id": 451,
        "text": "Write a function to remove all whitespaces from the given string using regex.",
        "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_whitespaces(text1):",
        "question_1": "Create a Python program to remove all whitespaces from a string.",
        "answer_1": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")\n\nprint(remove_whitespace(\"This is a string with whitespaces\"))",
        "question_2": "Develop a function in Python to remove all the whitespaces from a given string.",
        "answer_2": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")",
        "question_3": "Generate a python program that removes all whitespace from a string.",
        "answer_3": "def remove_whitespace(x):\n   return x.replace(\" \", \"\")",
        "full_code": "\nimport re\n\ndef remove_whitespaces(text1):\n    # Step 1: Import the 're' module for regular expressions\n    # This module is necessary for performing regex operations in Python\n\n    # Step 2: Define the regex pattern to match all whitespace characters\n    # The pattern '\\s' matches any whitespace character (spaces, tabs, newlines, etc.)\n    pattern = r'\\s'\n\n    # Step 3: Use the re.sub() function to replace all occurrences of the pattern with an empty string\n    # re.sub(pattern, replacement, string) replaces all occurrences of the pattern in the string with the replacement\n    result = re.sub(pattern, '', text1)\n\n    # Step 4: Return the resulting string with all whitespaces removed\n    return result\n\n# Example usage:\n# print(remove_whitespaces(\"This is a string with whitespaces\"))\n",
        "pass": "True"
    },
    {
        "task_id": 452,
        "text": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def loss_amount(actual_cost,sale_amount):",
        "question_1": "Write a PYTHON program to find the profit or loss after selling a product.",
        "answer_1": "def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit",
        "question_2": "Modify this Python code to add an exception for invalid input.",
        "answer_2": "def calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a / b\n        return c\n    else:\n        raise ValueError",
        "question_3": "Translate the following pseudocode into Python:",
        "answer_3": "if number > 0:\n    print(\"positive\")\nelse:\n    print(\"negative\")",
        "full_code": "\ndef loss_amount(actual_cost, sale_amount):\n    # Step 1: Check if the sale amount is less than the actual cost\n    # If true, it indicates a loss\n    if sale_amount < actual_cost:\n        # Step 2: Calculate the loss amount by subtracting sale amount from actual cost\n        loss = actual_cost - sale_amount\n        # Step 3: Return the calculated loss amount\n        return loss\n    else:\n        # Step 4: If there is no loss (sale amount is greater than or equal to actual cost), return None\n        return None\n\n# The entire code as a plain string that can be directly executed using `exec()`\ncode_string = \"\"\"\ndef loss_amount(actual_cost, sale_amount):\n    # Step 1: Check if the sale amount is less than the actual cost\n    # If true, it indicates a loss\n    if sale_amount < actual_cost:\n        # Step 2: Calculate the loss amount by subtracting sale amount from actual cost\n        loss = actual_cost - sale_amount\n        # Step 3: Return the calculated loss amount\n        return loss\n    else:\n        # Step 4: If there is no loss (sale amount is greater than or equal to actual cost), return None\n        return None\n\"\"\"\n",
        "pass": "False"
    },
    {
        "task_id": 453,
        "text": "Write a python function to find the sum of even factors of a number.",
        "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef sumofFactors(n) :",
        "question_1": "Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number.",
        "answer_1": "def get_sum_even_factors(n):\n    sum = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n# Test \ninput_num = 50\nprint(get_sum_even_factors(input_num)) # returns 196",
        "question_2": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_2": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "question_3": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_3": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum",
        "full_code": "\nimport math\n\ndef sumofFactors(n):\n    # Initialize the sum of even factors to 0\n    even_sum = 0\n    \n    # Iterate through all numbers from 1 to the square root of n\n    # This is because a factor less than the square root of n will have a corresponding factor greater than the square root\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # If i is even, add it to the sum\n            if i % 2 == 0:\n                even_sum += i\n            # Find the corresponding factor (n // i) and check if it is even\n            corresponding_factor = n // i\n            if corresponding_factor != i and corresponding_factor % 2 == 0:\n                even_sum += corresponding_factor\n    \n    # Return the sum of even factors\n    return even_sum\n\n# Example usage:\n# print(sumofFactors(50))  # Output should be 196\n",
        "pass": "True"
    },
    {
        "task_id": 454,
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
            "assert text_match_wordz(\"xyz.\")==('Found a match!')",
            "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_wordz(text):",
        "question_1": "Write Python code to generate a random letter from A to Z.",
        "answer_1": "import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)",
        "question_2": "Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).",
        "answer_2": "import re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')",
        "question_3": "Formulate a regular expression in Python that matches words that starts with any two letters followed by two digits.",
        "answer_3": "regex = r\"^[a-zA-Z]{2}\\d{2}\"",
        "full_code": "\nimport re\n\ndef text_match_wordz(text):\n    # Step 1: Define the regular expression pattern\n    # We need a pattern that matches any word containing the letter 'z'\n    # The pattern should be case-insensitive to match both 'z' and 'Z'\n    # We use the `\\b` word boundary to ensure we match whole words\n    # The `(?i)` flag makes the pattern case-insensitive\n    pattern = r'\\b(?i)z\\w*\\b'\n    \n    # Step 2: Use the re.findall() function to find all matches in the text\n    # re.findall() returns a list of all non-overlapping matches in the string\n    matches = re.findall(pattern, text)\n    \n    # Step 3: Return the list of matches\n    return matches\n\n# Example usage:\ntext = \"The lazy dog jumps over the quick brown fox.\"\nresult = text_match_wordz(text)\nprint(result)  # Output should be ['lazy', 'jumps']\n",
        "pass": "Error"
    },
    {
        "task_id": 455,
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumb_number(monthnum2):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a python program that prints the number of days in a month.",
        "answer_3": "# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31",
        "full_code": "\ndef check_monthnumb_number(monthnum2):\n    # Step 1: Define a list of month numbers that have 31 days\n    # Months with 31 days are: January (1), March (3), May (5), July (7), August (8), October (10), and December (12)\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Step 2: Check if the given month number is in the list of months with 31 days\n    if monthnum2 in months_with_31_days:\n        # Step 3: If the month number is in the list, return True\n        return True\n    else:\n        # Step 4: If the month number is not in the list, return False\n        return False\n\n# Example usage:\n# monthnum2 = 3  # March\n# print(check_monthnumb_number(monthnum2))  # Output: True\n",
        "pass": "True"
    },
    {
        "task_id": 456,
        "text": "Write a function to reverse strings in a given list of string values.",
        "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_string_list(stringlist):",
        "question_1": "Create a program in Python that takes a list of strings and returns a new list with each string reversed.",
        "answer_1": "def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))",
        "question_2": "create a function in Python that takes an array of integers and returns a string of the array in reverse order.",
        "answer_2": "def reverse_list(arr):\n    rev_arr = []\n    for i in range(len(arr)-1,-1,-1):\n        rev_arr.append(arr[i])\n    return ''.join(map(str,rev_arr))\n\narr = [1, 3, 5, 7]\noutput_string = reverse_list(arr) \nprint(output_string)",
        "question_3": "Create a function in Python which takes a string and returns the reversed string",
        "answer_3": "def reverseString(string):\n    reversedString = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversedString += string[i]\n    return reversedString",
        "full_code": "\ndef reverse_string_list(stringlist):\n    # Initialize an empty list to store the reversed strings\n    reversed_list = []\n    \n    # Iterate over each string in the input list\n    for string in stringlist:\n        # Reverse the current string using slicing\n        reversed_string = string[::-1]\n        \n        # Append the reversed string to the reversed_list\n        reversed_list.append(reversed_string)\n    \n    # Return the list of reversed strings\n    return reversed_list\n\n# Example usage\nstringlist = [\"Hello\", \"World\", \"Python\"]\nprint(reverse_string_list(stringlist))\n",
        "pass": "True"
    },
    {
        "task_id": 457,
        "text": "Write a python function to find the sublist having minimum length.",
        "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min(lst):",
        "question_1": "Create a Python script to find the maximum and minimum values for each sublist in a list",
        "answer_1": "def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]",
        "question_2": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_2": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele",
        "full_code": "\ndef Find_Min(lst):\n    # Initialize a variable to store the minimum length found so far.\n    # We start with a very large number to ensure any sublist length will be smaller.\n    min_length = float('inf')\n    \n    # Initialize a variable to store the sublist with the minimum length.\n    min_sublist = []\n    \n    # Iterate through each sublist in the given list.\n    for sublist in lst:\n        # Check the length of the current sublist.\n        current_length = len(sublist)\n        \n        # If the current sublist's length is smaller than the minimum length found so far,\n        # update the minimum length and store the current sublist.\n        if current_length < min_length:\n            min_length = current_length\n            min_sublist = sublist\n    \n    # Return the sublist with the minimum length.\n    return min_sublist\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(Find_Min(lst))  # Output: [10]\n",
        "pass": "True"
    },
    {
        "task_id": 458,
        "text": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rectangle_area(l,b):",
        "question_1": "Develop a Python function to calculate the area of a rectangle given its length and width.",
        "answer_1": "def calculate_rectangle_area(length, width):\n    return length * width",
        "question_2": "Write a Python class to represent a rectangle with length and width variables and a method to calculate the area.",
        "answer_2": "class Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width\n\n  def calculate_area(self):\n    return self.length * self.width\n\nrect = Rectangle(3, 4)\nprint(rect.calculate_area())",
        "question_3": "Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width.",
        "answer_3": "def area_rectangle(length, width):\n return length * width\n\nprint(area_rectangle(2, 3)) # Output: 6",
        "full_code": "\ndef rectangle_area(l, b):\n    # Step 1: Define the function with parameters l (length) and b (breadth)\n    # Step 2: Calculate the area of the rectangle using the formula: area = length * breadth\n    # Step 3: Return the calculated area\n    \n    # Calculate the area\n    area = l * b\n    \n    # Return the area\n    return area\n\n# The following code is the output that can be directly executed using exec()\n\"\"\"\ndef rectangle_area(l, b):\n    # Step 1: Define the function with parameters l (length) and b (breadth)\n    # Step 2: Calculate the area of the rectangle using the formula: area = length * breadth\n    # Step 3: Return the calculated area\n    \n    # Calculate the area\n    area = l * b\n    \n    # Return the area\n    return area\n\"\"\"\n",
        "pass": "True"
    },
    {
        "task_id": 459,
        "text": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_uppercase(str1):",
        "question_1": "Create a Python script to convert a given string into uppercase and lowercase.",
        "answer_1": "# Python program to convert string into\n# uppercase and lowercase\n \n# Function to convert the string \n# into uppercase and lowercase \ndef string_case(str): \n    upper_case = str.upper() # convert into uppercase \n    lower_case = str.lower() # convert into lowercase \n  \n    print(\"Original String: \", str) \n    print(\"Uppercase String: \", upper_case) \n    print(\"Lowercase String: \", lower_case) \n  \nstr = 'Hello, World!'\nstring_case(str)",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Create a Python program to edit the following string and make all characters in the string uppercase.",
        "answer_3": "def to_uppercase(input):\n    output = \"\"\n    for char in input:\n        output += char.upper()\n    return output",
        "full_code": "\nimport re\n\ndef remove_uppercase(str1):\n    # Step 1: Identify the pattern to match uppercase substrings\n    # We use the regex pattern '[A-Z]+' to match one or more consecutive uppercase letters\n    pattern = r'[A-Z]+'\n    \n    # Step 2: Use the re.sub() function to replace all matches of the pattern with an empty string\n    # This effectively removes all uppercase substrings from the input string\n    result = re.sub(pattern, '', str1)\n    \n    # Step 3: Return the modified string\n    return result\n\n# Example usage:\n# str1 = \"HelloWORLD\"\n# print(remove_uppercase(str1))  # Output: \"ello\"\n",
        "pass": "True"
    },
    {
        "task_id": 460,
        "text": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Extract(lst):",
        "question_1": "Write a Python script that takes in a Python list and returns every other element as a sublist.",
        "answer_1": "def every_other_sublist(input_list):\n sublist = []\n for i in range(len(input_list)):\n if i % 2 == 0:\n sublist.append(input_list[i])\n return sublist",
        "question_2": "Generate a python program to print the first n elements of a given list.",
        "answer_2": "def print_n_elements(n, list):\n    for i in range(n):\n        print(list[i])",
        "question_3": "Develop a Python program to find and print all the sublists in a given list.",
        "answer_3": "def find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list)",
        "full_code": "\ndef Extract(lst):\n    # Initialize an empty list to store the first elements of each sublist\n    first_elements = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Append the first element of the sublist to the first_elements list\n            first_elements.append(sublist[0])\n    \n    # Return the list of first elements\n    return first_elements\n\n# Example usage:\n# lst = [[1, 2, 3], [4, 5], [6], [], [7, 8, 9]]\n# print(Extract(lst))  # Output: [1, 4, 6, 7]\n",
        "pass": "True"
    },
    {
        "task_id": 461,
        "text": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def upper_ctr(str):",
        "question_1": "Create a Python program to count the number of upper case and lower case letters in a given string",
        "answer_1": "def countLetters(s): \n   uppercase, lowercase = 0, 0\n   for x in s: \n      if x.islower(): \n         lowercase+= 1\n      elif x.isupper(): \n         uppercase+= 1\n   print (\"No. of Upper case characters : \", uppercase) \n   print (\"No. of Lower case Characters : \", lowercase) \n\ncountLetters('Hello World')",
        "question_2": "Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.",
        "answer_2": "def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World'))",
        "question_3": "Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters.",
        "answer_3": "def count_uppercase_lowercase(s):\n  lowercase_count = 0\n  uppercase_count = 0\n  for c in s:\n    if c.isupper():\n      uppercase_count+=1\n    elif c.islower():\n      lowercase_count+=1\n  return uppercase_count, lowercase_count\n\nuppercase_count, lowercase_count =  count_uppercase_lowercase(\"This Is A Test String\")\nprint(\"Number of Uppercase letters : \", uppercase_count)\nprint(\"Number of Lowercase letters : \", lowercase_count)",
        "full_code": "\ndef upper_ctr(str):\n    # Initialize a counter to keep track of the number of uppercase characters\n    uppercase_count = 0\n    \n    # Iterate through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Increment the counter if the character is uppercase\n            uppercase_count += 1\n    \n    # Return the count of uppercase characters\n    return uppercase_count\n\n# Example usage:\n# print(upper_ctr('Hello World'))  # Output should be 2\n",
        "pass": "False"
    },
    {
        "task_id": 462,
        "text": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def combinations_list(list1):",
        "question_1": "Generate a Python script to generate all combinations of a list.",
        "answer_1": "import itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')",
        "question_2": "Develop a function to generate all combinations of a given list in Python.",
        "answer_2": "def all_combinations(list_of_numbers): \n    if len(list_of_numbers) == 0: \n        return [] \n  \n    if len(list_of_numbers) == 1: \n        return [list_of_numbers] \n  \n    combinations = [] \n    for combination in all_combinations(list_of_numbers[1:]): \n        combinations.append(combination) \n        combinations.append([list_of_numbers[0]] + combination) \n  \n    return combinations",
        "question_3": "Create a Python script to generate all the combinations of a given list of integers.",
        "answer_3": "def generate_combinations(input_list):\n    import itertools\n    comb_list = []\n    # Get all possible combinations of the list\n    for subset in itertools.combinations(input_list,\n                                       len(input_list)):\n        comb_list.append(subset)\n    return comb_list",
        "full_code": "\ndef combinations_list(list1):\n    # Import the itertools module which provides the combinations function\n    import itertools\n    \n    # Initialize an empty list to store all combinations\n    all_combinations = []\n    \n    # Iterate over the range from 1 to the length of the list (inclusive)\n    # This is to generate combinations of all possible lengths\n    for r in range(1, len(list1) + 1):\n        # Use itertools.combinations to generate combinations of length r\n        # Convert each combination from a tuple to a list and add to all_combinations\n        all_combinations.extend([list(comb) for comb in itertools.combinations(list1, r)])\n    \n    # Return the list of all combinations\n    return all_combinations\n\n# Example usage:\n# list1 = [1, 2, 3]\n# print(combinations_list(list1))\n",
        "pass": "False"
    },
    {
        "task_id": 463,
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_subarray_product(arr):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Write a Python function to implement an algorithm.",
        "answer_3": "def largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len",
        "full_code": "\ndef max_subarray_product(arr):\n    # Initialize variables to store the maximum product found so far,\n    # the maximum product ending at the current position,\n    # and the minimum product ending at the current position.\n    # We need to keep track of the minimum product because multiplying\n    # two negative numbers can result in a positive number, which might\n    # be the maximum product.\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is negative, we swap the max and min\n        # because multiplying a negative number with a maximum product\n        # can result in a minimum product, and vice versa.\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        # Update the maximum product ending at the current position\n        # by either continuing the subarray or starting a new subarray\n        # with the current element.\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        # Update the minimum product ending at the current position\n        # similarly.\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # Update the overall maximum product found so far.\n        max_product = max(max_product, max_ending_here)\n\n    # Return the maximum product found.\n    return max_product\n\n# The entire function as a plain string that can be directly executed using `exec()`.\ncode = \"\"\"\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n\"\"\"\n",
        "pass": "True"
    },
    {
        "task_id": 464,
        "text": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_value(dict, n):",
        "question_1": "Generate a Python code snippet to check if all the values of a dictionary are True.",
        "answer_1": "all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.",
        "question_2": "Write a Python program to print all unique values in a dictionary.",
        "answer_2": "def printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)",
        "question_3": "Given a Python dictionary, print out the keys and values that are duplicated.",
        "answer_3": "for key, value in my_dict.items():\n    if my_dict.values().count(value) > 1:\n        print(key, value)",
        "full_code": "\ndef check_value(dict, n):\n    # Step 1: Initialize a variable to store the first value of the dictionary\n    # This will be used to compare with other values in the dictionary\n    first_value = None\n    \n    # Step 2: Iterate through the dictionary items\n    for key, value in dict.items():\n        # Step 3: If the first_value is None, assign the current value to it\n        if first_value is None:\n            first_value = value\n        # Step 4: If the current value is not equal to the first_value, return False\n        elif value != first_value:\n            return False\n    \n    # Step 5: If the loop completes without returning False, it means all values are the same\n    # Check if the number of values in the dictionary matches the expected number 'n'\n    if len(dict) == n:\n        return True\n    else:\n        return False\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 465,
        "text": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def drop_empty(dict1):",
        "question_1": "Create a function in Python to build an empty dictionary.",
        "answer_1": "def buildDictionary():\n  dictionary = dict()\n  return dictionary",
        "question_2": "Generate a Python code to create a class which creates an empty dictionary with the given keys.",
        "answer_2": "class EmptyDictionary:\n    def __init__(self, keys):\n        self.keys = [k.strip() for k in keys.split(\",\")]\n        self.dictionary = {k: None for k in self.keys}\n            \n    def get_dictionary(self):\n        return self.dictionary",
        "question_3": "Generate a valid Python code that will create an empty dictionary",
        "answer_3": "my_dict = {}",
        "full_code": "\ndef drop_empty(dict1):\n    # Initialize an empty dictionary to store the result\n    result = {}\n    \n    # Iterate over each key-value pair in the input dictionary\n    for key, value in dict1.items():\n        # Check if the value is not empty (None, empty string, empty list, etc.)\n        if value:\n            # If the value is not empty, add it to the result dictionary\n            result[key] = value\n    \n    # Return the result dictionary with empty items dropped\n    return result\n\n# The entire code as a plain string\ncode_string = \"\"\"\ndef drop_empty(dict1):\n    # Initialize an empty dictionary to store the result\n    result = {}\n    \n    # Iterate over each key-value pair in the input dictionary\n    for key, value in dict1.items():\n        # Check if the value is not empty (None, empty string, empty list, etc.)\n        if value:\n            # If the value is not empty, add it to the result dictionary\n            result[key] = value\n    \n    # Return the result dictionary with empty items dropped\n    return result\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 466,
        "text": "Write a function to find the peak element in the given array.",
        "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "test_list": [
            "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
            "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
            "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_peak_util(arr, low, high, n):",
        "question_1": "Optimize this program in Python to find the highest peak in a given array.",
        "answer_1": "def find_highest_peak(arr):\n  highest_peak = arr[0]\n  for i in range(1, len(arr)): \n    highest_peak = max(highest_peak, arr[i]) \n  return highest_peak",
        "question_2": "Utilizing the given data, write a Python program to identify the peak of maximum values in the data.",
        "answer_2": "def find_peaks(data):\n    max_val = None\n    max_idx = None\n    for i, val in enumerate(data):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_idx = i\n    return max_idx\n\ndata = [9, 2, 10, 5, 4, 8, 3, 7]\npeak_index = find_peaks(data)\nprint('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index]))",
        "question_3": "Can you create a loop in Python to find the highest value in an array?",
        "answer_3": "max_val = arr[0]\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val)",
        "full_code": "\ndef find_peak_util(arr, low, high, n):\n    # Step 1: Find the middle index of the current subarray\n    mid = low + (high - low) // 2\n    \n    # Step 2: Check if the middle element is a peak\n    # A peak is an element that is greater than its neighbors\n    # If the middle element is at the boundaries, we only need to compare it with one neighbor\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    \n    # Step 3: If the middle element is not a peak and the element on the left is greater,\n    # then the peak must be on the left side of the middle element\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n    \n    # Step 4: If the middle element is not a peak and the element on the right is greater,\n    # then the peak must be on the right side of the middle element\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n# Example usage:\narr = [1, 3, 20, 4, 1, 0]\nn = len(arr)\npeak_index = find_peak_util(arr, 0, n - 1, n)\nprint(f\"The peak element is at index {peak_index} with value {arr[peak_index]}\")\n",
        "pass": "False"
    },
    {
        "task_id": 467,
        "text": "Write a python function to convert decimal number to octal number.",
        "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_Octal(deciNum):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_3": "Implement a Python function to convert a float to a string with two decimal places.",
        "answer_3": "def float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num)",
        "full_code": "\ndef decimal_to_Octal(deciNum):\n    # Step 1: Initialize an empty list to store the octal digits\n    octal_digits = []\n    \n    # Step 2: Use a loop to repeatedly divide the decimal number by 8\n    #         and store the remainder (which is the octal digit)\n    while deciNum > 0:\n        remainder = deciNum % 8  # Get the remainder\n        octal_digits.append(remainder)  # Store the remainder\n        deciNum = deciNum // 8  # Update the decimal number by dividing it by 8\n    \n    # Step 3: If the list of octal digits is empty, it means the input was 0\n    #         In that case, the octal representation of 0 is \"0\"\n    if not octal_digits:\n        octal_digits.append(0)\n    \n    # Step 4: The digits are stored in reverse order, so reverse the list\n    octal_digits.reverse()\n    \n    # Step 5: Convert the list of digits to a string\n    octal_str = ''.join(map(str, octal_digits))\n    \n    # Step 6: Return the octal string\n    return octal_str\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 468,
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
            "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product(arr, n ):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.",
        "answer_3": "def maxProduct(arr): \n    n = len(arr) \n    max_prod = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > 0 and arr[j] > 0: \n                max_prod = max(max_prod, arr[i] * arr[j]) \n  \n    return max_prod \n\n# Input\narray = [6, -3, -10, 0, 2]\n\n# Output\nresult = maxProduct(array)\nprint(result)",
        "full_code": "\ndef max_product(arr, n):\n    # Step 1: Initialize a variable to store the maximum product\n    max_product = 0\n    \n    # Step 2: Iterate through each element in the array\n    for i in range(n):\n        # Step 3: For each element, iterate through the subsequent elements\n        for j in range(i + 1, n):\n            # Step 4: Check if the current element is less than the subsequent element\n            if arr[i] < arr[j]:\n                # Step 5: Calculate the product of the two elements\n                product = arr[i] * arr[j]\n                # Step 6: Update the maximum product if the current product is greater\n                if product > max_product:\n                    max_product = product\n    \n    # Step 7: Return the maximum product found\n    return max_product\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nresult = max_product(arr, n)\nprint(result)\n",
        "pass": "False"
    },
    {
        "task_id": 469,
        "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "test_list": [
            "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
            "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
            "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_profit(price, k):",
        "question_1": "Create an algorithm in Python to calculate the maximum profit that one can achieve from stock purchasing.",
        "answer_1": "def max_profit(prices):\n   max_profit = 0\n   for i in range(len(prices) - 1): \n      for j in range(i + 1, len(prices)): \n         if prices[j] - prices[i] > max_profit: \n            max_profit = prices[j] - prices[i]\n   return max_profit \n\nprices = [15, 12, 13, 10, 11, 16] \nprint(\"Maximum profit :\", max_profit(prices))",
        "question_2": "Write a Python program to calculate the maximum profit for a given stock over a given time period.",
        "answer_2": "def max_profit(stock):\n  current_max, max_profit = 0, 0\n  for i in range(1, len(stock)):\n    current_max = max(0, current_max + stock[i] - stock[i - 1])\n    max_profit = max(current_max, max_profit)\n  return max_profit\n\nprofit = max_profit([9, 11, 8, 12, 10, 15, 8])\nprint(f\"The maximum profit is: {profit}\")",
        "question_3": "Write a Python function to find the maximum profit when given a list of stock prices per day.",
        "answer_3": "def max_profit(stock_prices):\n    max_profit = 0\n    for i in range(len(stock_prices) - 1):\n        for j in range(i + 1, len(stock_prices)):\n            if stock_prices[j] - stock_prices[i] > max_profit:\n                max_profit = stock_prices[j] - stock_prices[i]\n    return max_profit\n\nif __name__ == \"__main__\":\n    stock_prices = [7, 1, 5, 3, 6, 4]\n    result = max_profit(stock_prices)\n    print(result)",
        "full_code": "\ndef max_profit(price, k):\n    # Initialize a 2D list to store the maximum profit for up to k transactions\n    # dp[i][j] will store the maximum profit using up to i transactions up to the j-th day\n    n = len(price)\n    dp = [[0] * n for _ in range(k + 1)]\n\n    # Iterate over the number of transactions\n    for i in range(1, k + 1):\n        # Initialize the maximum difference for the current transaction\n        max_diff = -price[0]\n        \n        # Iterate over the days\n        for j in range(1, n):\n            # Update the maximum profit for i transactions up to the j-th day\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            \n            # Update the maximum difference for the next iteration\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n\n    # The maximum profit with up to k transactions is stored in dp[k][n-1]\n    return dp[k][n - 1]\n\n# Example usage:\nprice = [2, 5, 7, 1, 4, 3, 1, 3]\nk = 3\nprint(\"Maximum profit:\", max_profit(price, k))\n",
        "pass": "True"
    },
    {
        "task_id": 470,
        "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_pairwise(test_tup):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Generate a function for vector addition in Python.",
        "answer_2": "def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)",
        "question_3": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_3": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]",
        "full_code": "\ndef add_pairwise(test_tup):\n    # Step 1: Check if the input tuple has an even number of elements\n    # This is necessary because pairwise addition requires pairs of elements\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"The input tuple must have an even number of elements for pairwise addition.\")\n    \n    # Step 2: Initialize an empty list to store the results of pairwise addition\n    result = []\n    \n    # Step 3: Iterate over the tuple in steps of 2 to get pairs of elements\n    for i in range(0, len(test_tup), 2):\n        # Step 4: Add the pair of elements and append the result to the result list\n        result.append(test_tup[i] + test_tup[i + 1])\n    \n    # Step 5: Return the result list containing the pairwise sums\n    return result\n\n# Example usage:\n# test_tup = (1, 2, 3, 4)\n# result = add_pairwise(test_tup)\n# print(result)  # Output: [3, 7]\n",
        "pass": "False"
    },
    {
        "task_id": 471,
        "text": "Write a python function to find remainder of array multiplication divided by n.",
        "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
            "assert find_remainder([1,1,1],3,1) == 0",
            "assert find_remainder([1,2,1],3,2) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_remainder(arr, lens, n):",
        "question_1": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_1": "def get_remainder(a, b):\n    return a % b",
        "question_2": "Write a Python program to divide a given list into n equal lists.",
        "answer_2": "# Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]]",
        "question_3": "Compute with a Python program which elements of an array can be used as the divisor of other elements in the array.",
        "answer_3": "arr = [18, 30, 42, 45, 24]\n\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] != 0 and arr[j] % arr[i] == 0:\n            print(str(arr[i]) + ' divides ' + str(arr[j]))",
        "full_code": "\ndef find_remainder(arr, lens, n):\n    # Step 1: Initialize a variable to store the product of all elements in the array\n    product = 1\n    \n    # Step 2: Iterate through each element in the array\n    for num in arr:\n        # Step 3: Multiply the current product by the current element\n        product *= num\n    \n    # Step 4: Calculate the remainder of the product when divided by n\n    remainder = product % n\n    \n    # Step 5: Return the remainder\n    return remainder\n\n# Example usage:\narr = [1, 2, 3, 4]\nlens = len(arr)\nn = 5\nprint(find_remainder(arr, lens, n))  # Output should be 4\n",
        "pass": "True"
    },
    {
        "task_id": 472,
        "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Consecutive(l):",
        "question_1": "Create a function in Python to identify consecutive numbers in a given list.",
        "answer_1": "def consecutive_numbers(lst):\n  count = 0\n  for i in range(len(lst)-1):\n    if lst[i+1] - lst[i] == 1:\n      count += 1\n    else:\n      count = 0\n  return count\n\n# Test Code\nlst = [1, 4, 6, 5, 2, 7, 9]\nresult = consecutive_numbers(lst)\nprint(result)\n\n# Output --> 2",
        "question_2": "Write a code to check how many consecutive elements are equal in a given Python list.",
        "answer_2": "def check_consecutive_equal(lst): \n    count = 1\n    max_count = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]: \n            count+=1\n        else:\n            if max_count < count:\n                max_count = count\n            count = 1\n  \n    return max(max_count, count)",
        "question_3": "Write a python code to find a set of consecutive numbers in a given list.",
        "answer_3": "def get_consecutive_numbers(numbers):\n  consecutive_numbers = []\n  for i in range(len(numbers)):\n    temp = [numbers[i]]\n    for j in range(i+1, len(numbers)):\n      if numbers[j] == numbers[i] + 1:\n        temp.append(numbers[j])\n        i += 1\n      else:\n        break\n    if len(temp) > 1:\n      consecutive_numbers.append(temp)\n\n  return consecutive_numbers\n\nif __name__ == '__main__':\n    print(get_consecutive_numbers([2, 3, 4, 5, 6, 7, 8, 10, 11, 12]))",
        "full_code": "\ndef check_Consecutive(l):\n    # Step 1: Check if the list is empty or has only one element\n    # If the list is empty or has only one element, it cannot have consecutive numbers\n    if len(l) < 2:\n        return False\n    \n    # Step 2: Sort the list to easily check for consecutive numbers\n    l.sort()\n    \n    # Step 3: Iterate through the sorted list and check if each element is consecutive\n    for i in range(len(l) - 1):\n        # If the difference between the next element and the current element is not 1,\n        # then the list does not contain consecutive numbers\n        if l[i + 1] - l[i] != 1:\n            return False\n    \n    # Step 4: If all elements are consecutive, return True\n    return True\n\n# Test Code\nlst = [2, 3, 4, 5, 6, 7, 8, 10, 11, 12]\nresult = check_Consecutive(lst)\nprint(result)\n",
        "pass": "True"
    },
    {
        "task_id": 473,
        "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_intersection(test_list1, test_list2):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_2": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_3": "Write a function to sort the given list of tuples in Python according to the second element of the tuple.",
        "answer_3": "def sort_by_second_elem(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1])",
        "full_code": "\ndef tuple_intersection(test_list1, test_list2):\n    # Step 1: Convert each tuple in both lists to a frozenset.\n    # This allows us to use set operations on tuples, treating them as unordered collections.\n    set1 = {frozenset(t) for t in test_list1}\n    set2 = {frozenset(t) for t in test_list2}\n    \n    # Step 2: Find the intersection of the two sets of frozensets.\n    # This will give us the frozensets that are present in both lists, irrespective of their order.\n    intersection_set = set1 & set2\n    \n    # Step 3: Convert the frozensets back to tuples.\n    # This step is necessary to return the result in the same format as the input.\n    intersection_list = [tuple(fs) for fs in intersection_set]\n    \n    # Step 4: Return the list of tuples that represent the intersection.\n    return intersection_list\n\n# Example usage:\n# test_list1 = [(1, 2), (3, 4), (5, 6)]\n# test_list2 = [(2, 1), (4, 3), (7, 8)]\n# print(tuple_intersection(test_list1, test_list2))  # Output: [(1, 2), (3, 4)]\n",
        "pass": "False"
    },
    {
        "task_id": 474,
        "text": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_char(str1,ch,newch):",
        "question_1": "Create a Python function to replace a specific character in a string?",
        "answer_1": "def replace_char(string, character, replacement):\n   return string.replace(character, replacement)\n\nstring = \"Hello World\"\ncharacter = \"l\"\nreplacement = \"X\"\nprint(replace_char(string, character, replacement))",
        "question_2": "Generate a python function that takes in a string and replaces certain characters",
        "answer_2": "def replaceChar(s, charToReplace, replacementChar): \n    newStr = \"\"\n    for char in s:\n        if char == charToReplace:\n            newStr += replacementChar\n        else: \n            newStr += char\n    return newStr\n\nprint(replaceChar(\"hello world\", \"l\", \"a\")) # Output: \"heaaao worad\"",
        "question_3": "Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'.",
        "answer_3": "def replace_character(string, index):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i == index:\n            new_string += \"*\"\n        else:\n            new_string += string[i]\n    return new_string\n\nprint(replace_character(\"Hello world\", 3)) # Output: Hel*lo world",
        "full_code": "\ndef replace_char(str1, ch, newch):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in str1:\n        # Check if the current character matches the character to be replaced\n        if char == ch:\n            # If it matches, append the new character to the result string\n            result += newch\n        else:\n            # If it doesn't match, append the original character to the result string\n            result += char\n    \n    # Return the modified string\n    return result\n\n# Example usage:\n# print(replace_char(\"hello world\", \"l\", \"X\"))  # Output: \"heXXo worXd\"\n",
        "pass": "True"
    },
    {
        "task_id": 475,
        "text": "Write a function to sort counter by value.",
        "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef sort_counter(dict1):",
        "question_1": "Generate a python script to sort a list of numbers.",
        "answer_1": "def sort_numbers(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums",
        "question_2": "Generate a script in Python that takes in a collection of numbers and returns a collection of the same numbers sorted in ascending order.",
        "answer_2": "def sortCollection(arr):\n    sortedArr = arr.sort()\n    return sortedArr",
        "question_3": "Generate a sort function to order a list of numbers by their frequency in Python.",
        "answer_3": "def sort_by_freq(nums):\n    \"\"\"\n    A sort function to order a list of numbers by their frequency.\n\n    Parameters\n    ----------\n    nums : List\n        A list of numbers\n\n    Returns\n    -------\n    List\n        The given list of numbers sorted by their frequency\n    \"\"\"\n    freq_map = {}\n    for num in nums:\n        if num not in freq_map:\n            freq_map[num] = 0\n        freq_map[num] += 1\n\n    sorted_nums = sorted(freq_map, key=freq_map.get, reverse=True)\n    return sorted_nums",
        "full_code": "\nfrom collections import Counter\n\ndef sort_counter(dict1):\n    # Step 1: Convert the input dictionary to a Counter object if it isn't already\n    # This ensures that we are working with a Counter object, which has useful methods for counting and sorting\n    if not isinstance(dict1, Counter):\n        dict1 = Counter(dict1)\n\n    # Step 2: Sort the Counter by its values in descending order\n    # The most_common() method of Counter sorts the elements by their count in descending order\n    sorted_counter = dict1.most_common()\n\n    # Step 3: Convert the sorted list of tuples back to a dictionary\n    # This step is optional depending on the desired output format\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    # Step 4: Return the sorted dictionary\n    return sorted_dict\n\n# Example usage:\n# exec(open('path_to_this_script.py').read())\n# result = sort_counter({'a': 3, 'b': 1, 'c': 2})\n# print(result)  # Output: {'a': 3, 'c': 2, 'b': 1}\n",
        "pass": "False"
    },
    {
        "task_id": 476,
        "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def big_sum(nums):",
        "question_1": "Modify the Python program to calculate the sum of an array so that it finds the largest number in the array.",
        "answer_1": "def array_sum(arr):\n largest = 0\n for num in arr:\n largest = max(largest, num)\n return largest\n\nprint(array_sum([1, 2, 3, 4, 5]))",
        "question_2": "Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum.",
        "answer_2": "def find_largest_sum(lst):\n    largest_sum = 0\n    for i in range(len(lst) - 1):\n        current_sum = lst[i] + lst[i+1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum",
        "question_3": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.",
        "answer_3": "def findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum",
        "full_code": "\ndef big_sum(nums):\n    # Initialize variables to store the largest and smallest values\n    # We assume the first element is both the largest and smallest to start with\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Iterate through the array to find the actual largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num  # Update largest if current number is greater\n        if num < smallest:\n            smallest = num  # Update smallest if current number is smaller\n    \n    # Calculate the sum of the largest and smallest values\n    result = largest + smallest\n    \n    # Return the result\n    return result\n\n# Example usage:\n# print(big_sum([1, 2, 3, 4, 5]))  # Output should be 6 (5 + 1)\n",
        "pass": "True"
    },
    {
        "task_id": 477,
        "text": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(string):\r\n  return (string.lower())",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_lower(string):",
        "question_1": "Write a Python program to convert strings from upper case to lower case.",
        "answer_1": "def convert_lowercase(string):\n    return string.lower()",
        "question_2": "Create a Python program to convert a given string from lower to upper case.",
        "answer_2": "def convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string)",
        "question_3": "Write a python program to make all the characters of a string into lowercase.",
        "answer_3": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string",
        "full_code": "\ndef is_lower(string):\n    # Step 1: Define the function is_lower that takes a single argument 'string'\n    # Step 2: Use the built-in string method 'lower()' to convert the entire string to lowercase\n    # Step 3: Return the converted lowercase string\n    \n    return string.lower()\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 478,
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "question_1": "Write a python program to make all the characters of a string into lowercase.",
        "answer_1": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string",
        "question_2": "Write a Python program to convert strings from upper case to lower case.",
        "answer_2": "def convert_lowercase(string):\n    return string.lower()",
        "question_3": "Create a Python function that processes a string and returns the string in lowercase.",
        "answer_3": "def process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\"",
        "full_code": "\nimport re\n\ndef remove_lowercase(str1):\n    # Step 1: Identify the pattern for lowercase substrings\n    # We use a regular expression to match any sequence of lowercase letters\n    # The pattern '[a-z]+' matches one or more lowercase letters\n    \n    # Step 2: Use re.sub() to replace all occurrences of the pattern with an empty string\n    # re.sub() takes three arguments: the pattern to match, the replacement string, and the input string\n    # Here, we replace all lowercase substrings with an empty string ''\n    \n    # Step 3: Return the modified string\n    # The result of re.sub() is the input string with all lowercase substrings removed\n    \n    return re.sub('[a-z]+', '', str1)\n\n# Example usage:\n# remove_lowercase(\"HelloWorld123\") will return \"HW123\"\n",
        "pass": "True"
    },
    {
        "task_id": 479,
        "text": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Digit(n) :",
        "question_1": "Create a basic function in Python to extract the first digit from a number.",
        "answer_1": "def firstDigit(num):\n\treturn int(str(num)[0])\n\nnum = 2458\nprint(firstDigit(num)) # 2",
        "question_2": "Design a function in Python that takes a positive integer and returns the sum of its digits.",
        "answer_2": "def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total",
        "question_3": "Write a Python list comprehension to extract the individual digits of a given number.",
        "answer_3": "[int(d) for d in str(num)]",
        "full_code": "\ndef first_Digit(n):\n    # Step 1: Convert the number to a string to easily access each digit\n    num_str = str(n)\n    \n    # Step 2: Access the first character of the string, which represents the first digit\n    first_char = num_str[0]\n    \n    # Step 3: Convert the first character back to an integer\n    first_digit = int(first_char)\n    \n    # Step 4: Return the first digit\n    return first_digit\n\n# Example usage:\n# n = 2458\n# print(first_Digit(n)) # Output should be 2\n",
        "pass": "True"
    },
    {
        "task_id": 480,
        "text": "Write a python function to find the maximum occurring character in a given string.",
        "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "test_list": [
            "assert get_max_occuring_char(\"data\") == \"a\"",
            "assert get_max_occuring_char(\"create\") == \"e\"",
            "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_occuring_char(str1):",
        "question_1": "Generate a python function that finds the maximum occurring character in a given string.",
        "answer_1": "\"\"\"\nA function that finds the maximum occurring character in a given string.\n\"\"\"\n\ndef maxCharFinder(string):\n    charDict = dict()\n\n    for char in string:\n        if char in charDict:\n            charDict[char] += 1\n        else:\n            charDict[char] = 1\n\n    maximumOccurChar = max(charDict, key=charDict.get)\n\n    return maximumOccurChar\n\nif __name__ == '__main__':\n    string = \"worldwide\"\n    print(maxCharFinder(string))",
        "question_2": "Develop a code to find out the maximum occurring character in a given String.",
        "answer_2": "my_string = \"Python is an interesting language\"\n\n# create an empty dictionary\ndi = {}\n\n# iterate through each character\nfor char in my_string:\n    # check if the character is already present in the dict\n    if char in di.keys():\n        # if present, increment the value of the character\n        di[char] += 1\n    else:\n        # if not present, set the value to 1\n        di[char] = 1\n\n# find the character with the maximum count\nmax_char = max(di, key=di.get)\n\n# display the maximum occurring character\nprint(f\"Maximum occurring character is: {max_char}\")",
        "question_3": "Design a program in Python to find the highest occurring character in a given string.",
        "answer_3": "def highest_occurring_char(str):\n    char_dict = {}\n    highest_count = 0\n    highest_char = \"\"\n    for char in str:\n        if char in char_dict:\n           char_dict[char] += 1 \n        else:\n            char_dict[char] = 1\n            \n        if char_dict[char] > highest_count:\n            highest_count = char_dict[char]\n            highest_char = char\n            \n    return highest_char\n\nmy_str = \"test string\"\nhighest_char = highest_occurring_char(my_str)\nprint(highest_char)",
        "full_code": "\n\"\"\"\nThis function finds the maximum occurring character in a given string.\nThe function follows these steps:\n1. Initialize an empty dictionary to store character counts.\n2. Iterate through each character in the string.\n3. Update the dictionary with the count of each character.\n4. Find the character with the maximum count using the dictionary.\n5. Return the character with the maximum count.\n\"\"\"\n\ndef get_max_occuring_char(str1):\n    # Step 1: Initialize an empty dictionary to store character counts\n    char_count = {}\n    \n    # Step 2: Iterate through each character in the string\n    for char in str1:\n        # Step 3: Update the dictionary with the count of each character\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    \n    # Step 4: Find the character with the maximum count using the dictionary\n    max_char = max(char_count, key=char_count.get)\n    \n    # Step 5: Return the character with the maximum count\n    return max_char\n\n# Example usage:\n# str1 = \"hello world\"\n# print(get_max_occuring_char(str1))  # Output should be 'l'\n",
        "pass": "True"
    },
    {
        "task_id": 481,
        "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "test_list": [
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_subset_sum(set, n, sum):",
        "question_1": "Write a function to find all the possible subset sums of a given array.",
        "answer_1": "# Python program to find all possible subset sums\n\ndef find_subset_sums(arr):\n    sums = set()\n    for i in range(2**len(arr)):\n        csum = 0\n        for j in range(len(arr)):\n            if i & (1<<j):\n                csum += arr[j]\n        sums.add(csum)\n    return sums",
        "question_2": "Write a python program to check if a list contains a pair of elements that sum up to a given total.",
        "answer_2": "def is_sum_possible(nums, target_sum):\n    num_set = set(nums)\n\n    for num in num_set:\n        if (target_sum - num) in num_set:\n            return True\n    return False",
        "question_3": "Generate a python code for an algorithmic solution for the following problem:",
        "answer_3": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False",
        "full_code": "\ndef is_subset_sum(set, n, sum):\n    # Step 1: Base Cases\n    # If the required sum is 0, then an empty subset is a solution\n    if sum == 0:\n        return True\n    # If there are no elements in the set and the sum is not 0, then no solution exists\n    if n == 0 and sum != 0:\n        return False\n\n    # Step 2: Recursive Case\n    # If the last element is greater than the sum, then ignore it\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    # Step 3: Include the last element or exclude it\n    # Check if sum can be obtained by including the last element or excluding it\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n# Example usage:\n# set = [3, 34, 4, 12, 5, 2]\n# sum = 9\n# n = len(set)\n# print(is_subset_sum(set, n, sum))  # Output should be True\n",
        "pass": "True"
    },
    {
        "task_id": 482,
        "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "test_list": [
            "assert match(\"Geeks\") == 'Yes'",
            "assert match(\"geeksforGeeks\") == 'Yes'",
            "assert match(\"geeks\") == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re \r\ndef match(text):",
        "question_1": "Create an algorithm in Python to convert a string to upper and lower case letters alternately.",
        "answer_1": "def alternatingCase(s): \n    result = \"\" \n    for i in range(len(s)):\n        if i % 2 == 0: \n            result = result + s[i].upper() \n        else: \n            result = result + s[i].lower() \n    return result \n\ns = \"Hello World\"\nprint(alternatingCase(s))",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Write a Python program to convert all the lower case letters in a string to upper case.",
        "answer_3": "print(''.join([i.upper() for i in \"hello World\"])) # HELLO WORLD",
        "full_code": "\nimport re \n\ndef match(text):\n    # Step 1: Define the regex pattern\n    # We need to find sequences where an uppercase letter is followed by one or more lowercase letters.\n    # The pattern for an uppercase letter is [A-Z]\n    # The pattern for one or more lowercase letters is [a-z]+\n    # Combining these, the pattern we need is [A-Z][a-z]+\n    pattern = r'[A-Z][a-z]+'\n    \n    # Step 2: Use the re.findall() function to find all matches in the input string\n    # re.findall() returns a list of all non-overlapping matches in the string as strings\n    matches = re.findall(pattern, text)\n    \n    # Step 3: Return the list of matches\n    return matches\n\n# Example usage:\ntext = \"Hello World! This is a Test String.\"\nprint(match(text))  # Output: ['Hello', 'World', 'This', 'Test', 'String']\n",
        "pass": "False"
    },
    {
        "task_id": 483,
        "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "test_list": [
            "assert first_Factorial_Divisible_Number(10) == 5",
            "assert first_Factorial_Divisible_Number(15) == 5",
            "assert first_Factorial_Divisible_Number(5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Factorial_Divisible_Number(x):",
        "question_1": "Design a Python function to compute the factorial of a given number.",
        "answer_1": "def factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "question_2": "Define a Python function to calculate the factorial of an integer number.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)",
        "question_3": "Design a function in Python to compute the factorial of a given number.",
        "answer_3": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)",
        "full_code": "\ndef first_Factorial_Divisible_Number(x):\n    # Initialize the starting number to check\n    n = 1\n    \n    # Loop until we find the first natural number whose factorial is divisible by x\n    while True:\n        # Calculate the factorial of the current number n\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        \n        # Check if the factorial of n is divisible by x\n        if factorial % x == 0:\n            # If divisible, return the current number n\n            return n\n        \n        # If not divisible, increment n and check the next number\n        n += 1\n\n# Example usage:\n# exec('''\n# def first_Factorial_Divisible_Number(x):\n#     # Initialize the starting number to check\n#     n = 1\n#     \n#     # Loop until we find the first natural number whose factorial is divisible by x\n#     while True:\n#         # Calculate the factorial of the current number n\n#         factorial = 1\n#         for i in range(1, n + 1):\n#             factorial *= i\n#         \n#         # Check if the factorial of n is divisible by x\n#         if factorial % x == 0:\n#             # If divisible, return the current number n\n#             return n\n#         \n#         # If not divisible, increment n and check the next number\n#         n += 1\n# ''')\n",
        "pass": "False"
    },
    {
        "task_id": 484,
        "text": "Write a function to remove the matching tuples from the given two tuples.",
        "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "test_list": [
            "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
            "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
            "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_matching_tuple(test_list1, test_list2):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.",
        "answer_2": "def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))",
        "question_3": "Write a function in Python to remove duplicate entries from a list.",
        "answer_3": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))",
        "full_code": "\ndef remove_matching_tuple(test_list1, test_list2):\n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Iterate through each tuple in the first list\n    for tup1 in test_list1:\n        # Check if the current tuple from the first list is not in the second list\n        if tup1 not in test_list2:\n            # If it is not in the second list, add it to the result list\n            result_list.append(tup1)\n    \n    # Return the result list containing tuples from the first list that are not in the second list\n    return result_list\n\n# Example usage\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(3, 4), (7, 8)]\nprint(remove_matching_tuple(test_list1, test_list2))\n# Expected output: [(1, 2), (5, 6)]\n",
        "pass": "True"
    },
    {
        "task_id": 485,
        "text": "Write a function to find the largest palindromic number in the given array.",
        "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "test_list": [
            "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
            "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
            "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_palindrome(n) :",
        "question_1": "Construct a Python algorithm to find the largest palindrome from the given array.",
        "answer_1": "def largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332]))",
        "question_2": "Write a Python program to find the largest palindrome number less than 4400.",
        "answer_2": "max_palindrome = 0\nfor i in range(4400, 0, -1): \n    if str(i) == str(i)[::-1]: \n        max_palindrome = i \n        break\nprint(max_palindrome) # Output: 4331",
        "question_3": "Develop a Python program to find the largest palindrome number in a given range.",
        "answer_3": "def get_largest_palindrome_in_range(min, max):\n    max_palindrome = 0\n    # Iterate over range\n    for x in range(min, max+1):\n        # Check if number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # If this palindrome is larger, update the maximum\n            if x > max_palindrome:\n                max_palindrome = x\n\n    return max_palindrome",
        "full_code": "\ndef is_palindrome(n):\n    # Convert the number to a string to easily check if it reads the same forwards and backwards\n    str_n = str(n)\n    # Check if the string representation of the number is equal to its reverse\n    return str_n == str_n[::-1]\n\ndef find_largest_palindrome(arr):\n    # Initialize a variable to keep track of the largest palindrome found\n    max_palindrome = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Check if the current number is a palindrome\n        if is_palindrome(num):\n            # If it is a palindrome and larger than the current largest palindrome, update max_palindrome\n            if num > max_palindrome:\n                max_palindrome = num\n    \n    # Return the largest palindrome found in the array\n    return max_palindrome\n\n# Example usage:\nprint(find_largest_palindrome([12, 521, 1212, 84561, 91332]))\n",
        "pass": "False"
    },
    {
        "task_id": 486,
        "text": "Write a function to compute binomial probability for the given number.",
        "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def nCr(n, r):",
        "question_1": "Create a Python function to generate an array of random numbers that follows a binomial distribution.",
        "answer_1": "import numpy as np\n\ndef binomial(n, p):\n  return np.random.binomial(n, p)\n\ndist = binomial(n, p)",
        "question_2": "Create a Python function to find the probability of an event using the binomial distribution.",
        "answer_2": "from math import factorial\n\ndef binomial_probability(n, p, x):\n    \"\"\"Find the probability of an event using the binomial distribution.\n\n    Args:\n        n (int): The number of trials.\n        p (float): The probability of success of the event.\n        x (int): The number of successes.\n\n    Returns:\n        float: The probability of x successes in n trials.\n    \"\"\"\n    return factorial(n)/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)\n\nif __name__ == '__main__':\n    n = 10\n    p = 0.5\n    x = 6\n    result = binomial_probability(n, p, x)\n    print(result)",
        "question_3": "Write a Python function to calculate the probability of an event occurring.",
        "answer_3": "def probability(p): \n    return p \n  \nprint(f\"The probability of the event occurring is {probability(p)}\")",
        "full_code": "\ndef nCr(n, r):\n    # Step 1: Import the necessary function to compute factorial\n    # We need the factorial function to compute the binomial coefficient\n    from math import factorial\n\n    # Step 2: Compute the binomial coefficient using the formula nCr = n! / (r! * (n-r)!)\n    # This formula is derived from the combination formula which counts the number of ways to choose r items from n items without regard to order.\n    binomial_coefficient = factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Step 3: Return the computed binomial coefficient\n    return binomial_coefficient\n\n# Example usage:\n# n = 5, r = 2\n# The function should return 10, as there are 10 ways to choose 2 items from 5 items.\nprint(nCr(5, 2))\n",
        "pass": "False"
    },
    {
        "task_id": 487,
        "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "test_list": [
            "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
            "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
            "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_tuple(tup):",
        "question_1": "Write a Python program to sort a list of tuples by increasing order of the second item of each tuple.",
        "answer_1": "def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples",
        "question_2": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_3": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_3": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "full_code": "\ndef sort_tuple(tup):\n    # Step 1: We need to sort the list of tuples based on the last element of each tuple.\n    # To achieve this, we can use the 'sorted' function with a custom key.\n    # The key will be a lambda function that extracts the last element of each tuple.\n    \n    # Step 2: Define the lambda function to extract the last element of a tuple.\n    # This lambda function will take a tuple 'x' and return the last element 'x[-1]'.\n    \n    # Step 3: Use the 'sorted' function with the lambda key to sort the list of tuples.\n    # The 'sorted' function will return a new list of tuples sorted by the last element.\n    \n    # Step 4: Return the sorted list of tuples.\n    \n    return sorted(tup, key=lambda x: x[-1])\n\n# The entire code as a plain string that can be directly executed using `exec()`.\ncode_string = \"\"\"\ndef sort_tuple(tup):\n    # Step 1: We need to sort the list of tuples based on the last element of each tuple.\n    # To achieve this, we can use the 'sorted' function with a custom key.\n    # The key will be a lambda function that extracts the last element of each tuple.\n    \n    # Step 2: Define the lambda function to extract the last element of a tuple.\n    # This lambda function will take a tuple 'x' and return the last element 'x[-1]'.\n    \n    # Step 3: Use the 'sorted' function with the lambda key to sort the list of tuples.\n    # The 'sorted' function will return a new list of tuples sorted by the last element.\n    \n    # Step 4: Return the sorted list of tuples.\n    \n    return sorted(tup, key=lambda x: x[-1])\n\"\"\"\n\n# Output the entire Python code as a plain string\nprint(code_string)\n",
        "pass": "True"
    },
    {
        "task_id": 488,
        "text": "Write a function to find the area of a pentagon.",
        "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "test_list": [
            "assert area_pentagon(5)==43.01193501472417",
            "assert area_pentagon(10)==172.0477400588967",
            "assert area_pentagon(15)==387.10741513251753"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef area_pentagon(a):",
        "question_1": "Write a Python program to calculate the area of a regular hexagon",
        "answer_1": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_2": "Extend a Python program to calculate the area of any regular polygon.",
        "answer_2": "def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)",
        "question_3": "Write a Python function to return the area of an equilateral triangle.",
        "answer_3": "def area_equilateral(side):\n    \"\"\"Calculate the area of an equilateral triangle from the side length.\"\"\"\n    return (math.sqrt(3)/4)*side**2;",
        "full_code": "\nimport math\n\ndef area_pentagon(a):\n    # Step 1: Understand the formula for the area of a regular pentagon\n    # The formula for the area of a regular pentagon with side length 'a' is:\n    # Area = (1/4) * sqrt(5 * (5 + 2 * sqrt(5))) * a^2\n    \n    # Step 2: Implement the formula in Python\n    # We will use the math module to compute the square root and other mathematical operations.\n    \n    # Step 3: Calculate the constant part of the formula\n    # This part is (1/4) * sqrt(5 * (5 + 2 * sqrt(5)))\n    constant_part = (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5)))\n    \n    # Step 4: Calculate the area using the side length 'a'\n    # Multiply the constant part by a^2 to get the area\n    area = constant_part * (a ** 2)\n    \n    # Step 5: Return the calculated area\n    return area\n\n# Example usage:\n# print(area_pentagon(5))  # This will print the area of a pentagon with side length 5\n",
        "pass": "True"
    },
    {
        "task_id": 489,
        "text": "Write a python function to find the frequency of the largest value in a given array.",
        "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
            "assert frequency_Of_Largest(3,[5,6,5]) == 1",
            "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Largest(n,arr):",
        "question_1": "Write a Python code to return the highest frequency element in a given array of integers.",
        "answer_1": "from collections import Counter\n\ndef highest_frequency(arr):\n    arr_counts = Counter(arr)\n    max_freq = 0\n    max_freq_num = 0\n    for num in arr_counts:\n        if arr_counts[num] > max_freq:\n            max_freq = arr_counts[num]\n            max_freq_num = num\n    return max_freq_num\n\nprint(highest_frequency(arr))",
        "question_2": "Write a Python script to take an array of integers and find the number with the highest frequency.",
        "answer_2": "def find_most_frequent(numbers):\n    frequency_dict = {}\n    for n in numbers:\n        if n in frequency_dict:\n            frequency_dict[n] += 1\n        else:\n            frequency_dict[n] = 1\n            \n    max_frequency = 0\n    most_frequent = 0\n    for k, v in frequency_dict.items():\n        if v > max_frequency:\n            max_frequency = v\n            most_frequent = k\n            \n    return most_frequent\n    \n# Usage\nnumbers = [1, 2, 3, 1, 2, 2]\nmost_frequent = find_most_frequent(numbers)\nprint(most_frequent) # Outputs 2",
        "question_3": "Make an algorithm in Python for printing the maximum frequency of an element in an array.",
        "answer_3": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2",
        "full_code": "\ndef frequency_Of_Largest(n, arr):\n    # Step 1: Find the largest value in the array\n    # We can use the built-in max() function to find the largest value in the array\n    largest_value = max(arr)\n    \n    # Step 2: Count the frequency of the largest value in the array\n    # We can use the count() method of the list to count occurrences of the largest value\n    frequency = arr.count(largest_value)\n    \n    # Step 3: Return the frequency of the largest value\n    return frequency\n\n# Example usage:\narr = [1, 2, 3, 4, 4, 4, 5, 5, 6]\nn = len(arr)\nprint(frequency_Of_Largest(n, arr))  # Output should be 3, since 6 is the largest and appears 3 times\n",
        "pass": "True"
    },
    {
        "task_id": 490,
        "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "test_list": [
            "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
            "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
            "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_symmetric(test_list):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_3": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)",
        "full_code": "\ndef extract_symmetric(test_list):\n    # Initialize an empty list to store the symmetric pairs\n    symmetric_pairs = []\n    \n    # Iterate through each pair in the input list\n    for pair in test_list:\n        # Check if the reverse of the current pair exists in the list\n        if (pair[1], pair[0]) in test_list:\n            # If it does, add the pair to the symmetric pairs list\n            symmetric_pairs.append(pair)\n    \n    # Return the list of symmetric pairs\n    return symmetric_pairs\n\n# Example usage:\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\nprint(extract_symmetric(test_list))\n# Expected output: [(1, 2), (3, 4)]\n",
        "pass": "False"
    },
    {
        "task_id": 491,
        "text": "Write a function to find the sum of geometric progression series.",
        "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "test_list": [
            "assert sum_gp(1,5,2)==31",
            "assert sum_gp(1,5,4)==341",
            "assert sum_gp(2,6,3)==728"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef sum_gp(a,n,r):",
        "question_1": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_1": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum",
        "question_2": "Write a python function to calculate an exponential series",
        "answer_2": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "question_3": "Develop a program in Python to calculate the sum of the following series:",
        "answer_3": "def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))",
        "full_code": "\nimport math\n\ndef sum_gp(a, n, r):\n    # Step 1: Check if the common ratio (r) is 1\n    # If r is 1, the series is just a repeated addition of the first term 'a'\n    # The sum of the series in this case is simply a * n\n    if r == 1:\n        return a * n\n    \n    # Step 2: If r is not 1, use the formula for the sum of a geometric progression\n    # The formula is: S = a * (1 - r^n) / (1 - r)\n    # Here, S is the sum, a is the first term, r is the common ratio, and n is the number of terms\n    sum_series = a * (1 - r**n) / (1 - r)\n    \n    # Step 3: Return the calculated sum\n    return sum_series\n\n# Example usage:\n# a = 2, n = 5, r = 3\n# The function should return the sum of the series 2, 6, 18, 54, 162\nprint(sum_gp(2, 5, 3))\n",
        "pass": "True"
    },
    {
        "task_id": 492,
        "text": "Write a function to search an element in the given array by using binary search.",
        "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "test_list": [
            "assert binary_search([1,2,3,5,8], 6) == False",
            "assert binary_search([7, 8, 9, 10, 13], 10) == True",
            "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_search(item_list,item):",
        "question_1": "Create a function that implements a binary search algorithm in Python. The function should accept two parameters: an array of integers and a target value. The function should return the index of the target value within the array, or -1 if the value does not exist.",
        "answer_1": "def binary_search(arr, target):\n start = 0\n end = len(arr) - 1\n while start <= end:\n mid = (start + end) // 2\n if arr[mid] == target:\n return mid\n elif arr[mid] > target:\n end = mid - 1\n else:\n start = mid + 1\n return -1",
        "question_2": "Update the below Python script to perform binary search on a given array of integers.",
        "answer_2": "def binary_search(arr, x):\n n = len(arr)\n \n # Sort the given array in ascending order\n arr.sort()\n \n # print all elements\n for i in range(n):\n print(arr[i], end = \" \")\n \n #binary search\n start = 0\n end = n-1\n \n while start <= end:\n    mid = (start + end) // 2\n    if x == arr[mid]:\n return mid \n elif x > arr[mid]:\n start = mid + 1\n else:\n end = mid - 1\n \n return -1",
        "question_3": "Generate Python code to perform a binary search on a given array.",
        "answer_3": "def binary_search(arr, item):\n    start = 0\n    end = len(arr)-1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        guess = arr[mid]\n        if guess == item:\n            return mid\n        else:\n            if guess > item:\n                end = end - 1\n            else:\n                start = start + 1\n    return None",
        "full_code": "\ndef binary_search(item_list, item):\n    # Step 1: Initialize the start and end pointers for the binary search.\n    # The start pointer will be at the beginning of the list.\n    # The end pointer will be at the end of the list.\n    start = 0\n    end = len(item_list) - 1\n    \n    # Step 2: Perform the binary search using a while loop.\n    # The loop will continue as long as the start pointer is less than or equal to the end pointer.\n    while start <= end:\n        # Step 3: Calculate the middle index of the current search range.\n        mid = (start + end) // 2\n        \n        # Step 4: Check if the middle element is equal to the target item.\n        # If it is, return the middle index as the position of the target item.\n        if item_list[mid] == item:\n            return mid\n        \n        # Step 5: If the middle element is greater than the target item,\n        # adjust the end pointer to search in the left half of the list.\n        elif item_list[mid] > item:\n            end = mid - 1\n        \n        # Step 6: If the middle element is less than the target item,\n        # adjust the start pointer to search in the right half of the list.\n        else:\n            start = mid + 1\n    \n    # Step 7: If the target item is not found in the list, return -1.\n    return -1\n\n# The entire code as a plain string that can be directly executed using `exec()`.\ncode_string = \"\"\"\ndef binary_search(item_list, item):\n    start = 0\n    end = len(item_list) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] > item:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1\n\"\"\"\n",
        "pass": "False"
    },
    {
        "task_id": 493,
        "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "test_list": [
            "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
            "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
            "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):",
        "question_1": "Write a Python script to generate a list of all possible 2D Point objects with coordinates between 1 and 10.",
        "answer_1": "points = []\n \nfor x in range(1, 11):\n    for y in range(1, 11):\n        points.append([x, y])\n \nprint(points)",
        "question_2": "Write a Python program to generate a list containing all the linear combinations of `x` and `y`, where `x` and `y` are given as input.",
        "answer_2": "x = [1, 2, 3]\ny = [4, 5, 6]\n\ncombinations = [[i, j] for i in x for j in y]\nprint(combinations)",
        "question_3": "Design a Python program to calculate the total number of possible routes between two points on a grid.",
        "answer_3": "def num_routes(grid_dim, start, end):\n    paths = 1\n    xdiff = end[0] - start[0]\n    ydiff = end[1] - start[1]\n    num_rows, num_cols = grid_dim\n    max_x = num_rows - 1 - xdiff\n    max_y = num_cols - 1 - ydiff\n    for x in range(0, max_x):\n        paths *= (x+ydiff+1)\n    for y in range(0, max_y):\n        paths *= (y+xdiff+1)\n    return int(paths/math.factorial(xdiff+ydiff))\n\nprint(num_routes([4,6], [0,0], [3,5])) // Output: 126",
        "full_code": "\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    # Initialize an empty list to store the grid of hexagon coordinates\n    hex_grid = []\n    \n    # Calculate the number of hexagons in the x and y directions\n    # Each hexagon has a width of 2 * radius and a height of sqrt(3) * radius\n    # We need to account for the offset in the y direction due to the staggered rows\n    num_x = int((endx - startx) / (3 * radius))\n    num_y = int((endy - starty) / (math.sqrt(3) * radius))\n    \n    # Loop through each row and column to generate the hexagon coordinates\n    for row in range(num_y):\n        for col in range(num_x):\n            # Calculate the center of the current hexagon\n            # The x coordinate alternates between even and odd rows\n            if row % 2 == 0:\n                center_x = startx + col * 3 * radius\n            else:\n                center_x = startx + col * 3 * radius + 1.5 * radius\n            \n            center_y = starty + row * math.sqrt(3) * radius\n            \n            # Calculate the 6 vertices of the hexagon around the center\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i\n                angle_rad = math.pi / 180 * angle_deg\n                vertex_x = center_x + radius * math.cos(angle_rad)\n                vertex_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((vertex_x, vertex_y))\n            \n            # Append the hexagon coordinates to the grid\n            hex_grid.append(hexagon)\n    \n    return hex_grid\n\n# Example usage:\n# startx, starty = 0, 0\n# endx, endy = 10, 10\n# radius = 1\n# print(calculate_polygons(startx, starty, endx, endy, radius))\n",
        "pass": "False"
    },
    {
        "task_id": 494,
        "text": "Write a function to convert the given binary tuple to integer.",
        "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "test_list": [
            "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
            "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
            "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_integer(test_tup):",
        "question_1": "Create a function in Python to convert integer inputs to their binary representation.",
        "answer_1": "def int_to_binary(n):\n    \"\"\" Returns the binary representation of an integer. \"\"\"\n    return \"{0:b}\".format(n)",
        "question_2": "Write a python program to convert an integer to its binary form.",
        "answer_2": "def integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary",
        "question_3": "Construct a python code that can convert any given integer into its binary representation.",
        "answer_3": "def to_binary(n):\n    binary_rep = \"\"\n    while n > 0:\n        binary_rep = str(n%2) + binary_rep\n        n = int(n/2)\n    return binary_rep",
        "full_code": "\ndef binary_to_integer(test_tup):\n    # Initialize an integer variable to store the result\n    result = 0\n    \n    # Get the length of the tuple to determine the highest power of 2\n    length = len(test_tup)\n    \n    # Iterate over each element in the tuple\n    for i, bit in enumerate(test_tup):\n        # Calculate the power of 2 for the current bit position\n        power = length - 1 - i\n        \n        # Add the value of the current bit multiplied by 2 raised to the power of its position\n        result += bit * (2 ** power)\n    \n    # Return the final integer result\n    return result\n\n# Example usage:\n# test_tup = (1, 0, 1, 1)\n# print(binary_to_integer(test_tup))  # Output should be 11\n",
        "pass": "False"
    },
    {
        "task_id": 495,
        "text": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
            "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
            "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "question_1": "Write a python program to make all the characters of a string into lowercase.",
        "answer_1": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string",
        "question_2": "Write a Python program to convert strings from upper case to lower case.",
        "answer_2": "def convert_lowercase(string):\n    return string.lower()",
        "question_3": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_3": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
        "full_code": "\nimport re\n\ndef remove_lowercase(str1):\n    # Step 1: Define a regex pattern to match all lowercase substrings\n    # The pattern '[a-z]+' matches one or more lowercase letters\n    pattern = r'[a-z]+'\n    \n    # Step 2: Use re.sub() to replace all matches of the pattern with an empty string\n    # re.sub() will remove all lowercase substrings from the input string\n    result = re.sub(pattern, '', str1)\n    \n    # Step 3: Return the modified string\n    return result\n\n# The function is now complete and can be executed directly\n",
        "pass": "True"
    },
    {
        "task_id": 496,
        "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "test_list": [
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Develop a Python program that takes a list of integers as an input and sorts them in increasing order.",
        "answer_2": "def sortList(input_list):\n # Create an empty list to store the sorted elements\n sorted_list = []\n \n while len(input_list) > 0:\n # Take the first element of the input list\n min_element = input_list[0]\n \n # Get the index of the minimum element\n min_index = 0\n \n # Iterate over the list to find the index of the minimum element\n for i in range(1, len(input_list)):\n # Check if the current element is the smallest\n if input_list[i] < min_element:\n min_element = input_list[i]\n min_index = i\n \n # After finding the minimum element, append it to the sorted list\n sorted_list.append(min_element)\n \n # Remove the minimum element from the input list\n del input_list[min_index]\n \n # Return the sorted list\n return sorted_list\n \n# Test\ninput_list = [14, 2, 3, 12, 15, 8]\n\nsorted_list = sortList(input_list)\n\nprint(sorted_list)\n# Output: [2, 3, 8, 12, 14, 15]",
        "question_3": "Write a python program to search through a list of integers and find the smallest number.",
        "answer_3": "def find_smallest(int_list):\n    # set the minimum value to the first item in the list initially\n    min_val = int_list[0]\n    # loop over the list and compare each item to the minimum value\n    for num in int_list:\n        if num < min_val:\n            min_val = num\n    # return the minimum value\n    return min_val",
        "full_code": "\nimport heapq as hq\n\ndef heap_queue_smallest(nums, n):\n    # Step 1: Convert the list of numbers into a min-heap.\n    # This can be done using the heapify function from the heapq module.\n    # heapify rearranges the elements in the list in-place to form a min-heap.\n    hq.heapify(nums)\n    \n    # Step 2: Extract the smallest element from the heap.\n    # Since the list is now a min-heap, the smallest element is always at the root (index 0).\n    # We can directly access the smallest element using nums[0].\n    smallest_elements = []\n    \n    # Step 3: Extract the smallest 'n' elements from the heap.\n    # We use a loop to pop the smallest element 'n' times from the heap.\n    # Each pop operation removes the smallest element and maintains the heap property.\n    for _ in range(n):\n        if nums:  # Ensure the heap is not empty before popping\n            smallest_elements.append(hq.heappop(nums))\n    \n    # Step 4: Return the list of the smallest 'n' elements.\n    return smallest_elements\n\n# Example usage:\n# nums = [14, 2, 3, 12, 15, 8]\n# n = 3\n# print(heap_queue_smallest(nums, n))  # Output: [2, 3, 8]\n",
        "pass": "True"
    },
    {
        "task_id": 497,
        "text": "Write a function to find the surface area of a cone.",
        "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cone(5,12)==282.7433388230814",
            "assert surfacearea_cone(10,15)==880.5179353159282",
            "assert surfacearea_cone(19,17)==2655.923961165254"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_cone(r,h):",
        "question_1": "Create a Python program to calculate the surface area of a triangle with sides of length 3, 4, and 5.",
        "answer_1": "import math \n\ndef area(a, b, c): \n\ts = (a + b + c) / 2\n\treturn (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\na = 3\nb = 4\nc = 5\n\nprint('Surface Area of triangle is: {:.2f}'.format(area(a, b, c)))",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "full_code": "\nimport math\n\ndef surfacearea_cone(r, h):\n    # Step 1: Calculate the slant height (l) of the cone\n    # The slant height can be found using the Pythagorean theorem: l = sqrt(r^2 + h^2)\n    l = math.sqrt(r**2 + h**2)\n    \n    # Step 2: Calculate the lateral surface area of the cone\n    # The formula for the lateral surface area of a cone is \u03c0 * r * l\n    lateral_area = math.pi * r * l\n    \n    # Step 3: Calculate the base area of the cone\n    # The formula for the base area of a cone is \u03c0 * r^2\n    base_area = math.pi * r**2\n    \n    # Step 4: Calculate the total surface area of the cone\n    # The total surface area is the sum of the lateral surface area and the base area\n    total_surface_area = lateral_area + base_area\n    \n    # Step 5: Return the total surface area\n    return total_surface_area\n\n# Example usage:\n# r = 3, h = 4\n# print(surfacearea_cone(3, 4))\n",
        "pass": "False"
    },
    {
        "task_id": 498,
        "text": "Write a python function to find gcd of two positive integers.",
        "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "test_list": [
            "assert gcd(12, 17) == 1",
            "assert gcd(4,6) == 2",
            "assert gcd(2,9) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(x, y):",
        "question_1": "Write a Python function to find the GCD of two numbers.",
        "answer_1": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "question_2": "Generate a function to find the GCD of two numbers in Python.",
        "answer_2": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b)",
        "question_3": "Develop a function to calculate the GCD of two given numbers in Python.",
        "answer_3": "def gcd(a, b): \n    if (b == 0): \n        return a \n    return gcd(b, a % b)",
        "full_code": "\ndef gcd(x, y):\n    # Step 1: Ensure both inputs are positive integers\n    # We use assert statements to check if both x and y are positive integers\n    assert isinstance(x, int) and x > 0, \"x must be a positive integer\"\n    assert isinstance(y, int) and y > 0, \"y must be a positive integer\"\n    \n    # Step 2: Implement the Euclidean algorithm\n    # The Euclidean algorithm states that the GCD of two numbers x and y\n    # is the same as the GCD of y and x % y, where % is the modulus operator\n    # This process is repeated until y becomes 0, at which point x is the GCD\n    \n    # Step 3: Base case for recursion\n    # If y is 0, then the GCD is x\n    if y == 0:\n        return x\n    \n    # Step 4: Recursive case\n    # If y is not 0, we call the gcd function with y and x % y\n    return gcd(y, x % y)\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "False"
    },
    {
        "task_id": 499,
        "text": "Write a function to find the diameter of a circle.",
        "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "test_list": [
            "assert diameter_circle(10)==20",
            "assert diameter_circle(40)==80",
            "assert diameter_circle(15)==30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diameter_circle(r):",
        "question_1": "Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.",
        "answer_1": "def circumference_of_circle(diameter):\n    circumference = 3.14 * diameter\n    return circumference",
        "question_2": "Write a Python script to calculate the circumference of a circle when the radius of the circle is given.",
        "answer_2": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)",
        "question_3": "Develop a function in Python to calculate the circumference of a circle.",
        "answer_3": "def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)",
        "full_code": "\ndef diameter_circle(r):\n    # Step 1: Understand the formula for the diameter of a circle.\n    # The diameter of a circle is twice the radius.\n    # Formula: diameter = 2 * radius\n    \n    # Step 2: Implement the formula in the function.\n    # Multiply the given radius 'r' by 2 to get the diameter.\n    diameter = 2 * r\n    \n    # Step 3: Return the calculated diameter.\n    return diameter\n\n# Example usage:\n# radius = 5\n# print(diameter_circle(radius))  # Output should be 10\n",
        "pass": "True"
    },
    {
        "task_id": 500,
        "text": "Write a function to concatenate all elements of the given list into a string.",
        "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "test_list": [
            "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
            "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
            "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(list):",
        "question_1": "Write a Python program to concatenate all the elements in a given list of strings.",
        "answer_1": "def concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result",
        "question_2": "Create a python program to take as input a list of strings and concatenate them into a single string.",
        "answer_2": "def concatenate_list(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result",
        "question_3": "Write a Python function to take the given list and return its elements joined into a single string.",
        "answer_3": "def join_list(lst):\n    return \" \".join(lst)",
        "full_code": "\ndef concatenate_elements(lst):\n    # Initialize an empty string to store the concatenated result\n    result = \"\"\n    \n    # Iterate over each element in the list\n    for element in lst:\n        # Concatenate the current element to the result string\n        result += element\n    \n    # Return the concatenated result\n    return result\n",
        "pass": "False"
    },
    {
        "task_id": 501,
        "text": "Write a python function to find common divisor between two numbers in a given pair.",
        "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
        "test_list": [
            "assert num_comm_div(2,4) == 2",
            "assert num_comm_div(2,8) == 2",
            "assert num_comm_div(12,24) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ngcd(x,y):",
        "question_1": "Generate a function in Python which takes two parameters and determines the greatest common divisor between the two numbers.",
        "answer_1": "def find_gcd(a, b): \n    if a == 0: \n        return b \n    if b == 0: \n        return a \n    if a == b: \n        return a \n    if a > b: \n        return find_gcd(a-b, b) \n    return find_gcd(a, b-a)",
        "question_2": "Implement a function to find the greatest common divisor of two numbers in Python.",
        "answer_2": "def gcd(a, b): \n    if(a == 0): \n        return b \n    if(b == 0): \n        return a \n  \n    if(a == b): \n        return a \n  \n    if(a > b): \n        return gcd(a-b, b) \n    return gcd(a, b-a)",
        "question_3": "Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers.",
        "answer_3": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\nresult = greatest_common_divisor(12, 24)\nprint(result)",
        "full_code": "\ndef ngcd(x, y):\n    # Step 1: Check if either of the numbers is zero.\n    # If either number is zero, the greatest common divisor is the other number.\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    \n    # Step 2: Ensure x is the larger number.\n    # This simplifies the logic for finding the greatest common divisor.\n    if x < y:\n        x, y = y, x\n    \n    # Step 3: Use the Euclidean algorithm to find the greatest common divisor.\n    # The Euclidean algorithm repeatedly replaces the larger number by its remainder\n    # when divided by the smaller number until one of the numbers becomes zero.\n    while y != 0:\n        x, y = y, x % y\n    \n    # Step 4: Return the greatest common divisor.\n    # When y becomes zero, x contains the greatest common divisor.\n    return x\n\n# Example usage:\nresult = ngcd(12, 24)\nprint(result)  # Output should be 12\n",
        "pass": "False"
    },
    {
        "task_id": 502,
        "text": "Write a python function to find remainder of two numbers.",
        "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)",
        "test_list": [
            "assert find(3,3) == 0",
            "assert find(10,3) == 1",
            "assert find(16,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "question_1": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_1": "def get_remainder(a, b):\n    return a % b",
        "question_2": "Write a Python program to divide two numbers and print the quotient and the remainder.",
        "answer_2": "def divide(num1, num2):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    return quotient, remainder\n\nquotient, remainder = divide(15, 4)\nprint(\"Quotient :\", quotient)\nprint(\"Remainder :\", remainder)",
        "question_3": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_3": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b",
        "full_code": "\ndef find(n, m):\n    # Step 1: Check if the second number (m) is zero to avoid division by zero error\n    if m == 0:\n        # Step 2: If m is zero, return an error message or handle it appropriately\n        return \"Error: Division by zero is not allowed.\"\n    \n    # Step 3: If m is not zero, proceed to calculate the remainder\n    remainder = n % m\n    \n    # Step 4: Return the calculated remainder\n    return remainder\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 503,
        "text": "Write a function to add consecutive numbers of a given list.",
        "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
            "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
            "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_consecutive_nums(nums):",
        "question_1": "Create a function in Python to identify consecutive numbers in a given list.",
        "answer_1": "def consecutive_numbers(lst):\n  count = 0\n  for i in range(len(lst)-1):\n    if lst[i+1] - lst[i] == 1:\n      count += 1\n    else:\n      count = 0\n  return count\n\n# Test Code\nlst = [1, 4, 6, 5, 2, 7, 9]\nresult = consecutive_numbers(lst)\nprint(result)\n\n# Output --> 2",
        "question_2": "Given a list of integer values, write a Python program to find the number of consecutive values that are increasing.",
        "answer_2": "count = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count)",
        "question_3": "Create a python function that can receive a list of integers and return a list of tuples with consecutive numbers.",
        "answer_3": "def get_consecutive(arr):\n    result = []\n    i = 0\n    while i < len(arr):\n        s = i\n        while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1):\n            i += 1\n        result.append((arr[s], arr[i]))\n        i += 1\n    return result\n\n# Test \narr = [1, 2, 3, 7, 8, 9, 10]\nprint(get_consecutive(arr))\n# Output [(1, 3), (7, 10)]",
        "full_code": "\ndef add_consecutive_nums(nums):\n    # Initialize an empty list to store the sums of consecutive numbers\n    sums = []\n    \n    # Iterate through the list, stopping one element before the end to avoid index errors\n    for i in range(len(nums) - 1):\n        # Check if the current number and the next number are consecutive\n        if nums[i] + 1 == nums[i + 1]:\n            # If they are consecutive, add them and append the sum to the sums list\n            sums.append(nums[i] + nums[i + 1])\n    \n    # Return the list of sums\n    return sums\n\n# Test the function with an example list\nnums = [1, 2, 4, 5, 7, 8]\nprint(add_consecutive_nums(nums))\n# Expected Output: [3, 9]\n",
        "pass": "False"
    },
    {
        "task_id": 504,
        "text": "Write a python function to find the cube sum of first n natural numbers.",
        "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
        "test_list": [
            "assert sum_Of_Series(5) == 225",
            "assert sum_Of_Series(2) == 9",
            "assert sum_Of_Series(3) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Of_Series(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_2": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum",
        "question_3": "Construct a program that computes the sum of the first n natural numbers in Python.",
        "answer_3": "def sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "full_code": "\ndef sum_Of_Series(n):\n    # Initialize a variable to store the sum of the cubes\n    sum_of_cubes = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n + 1):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        # Add the cube to the sum\n        sum_of_cubes += cube\n    \n    # Return the final sum of the cubes\n    return sum_of_cubes\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 505,
        "text": "Write a function to move all zeroes to the end of the given array.",
        "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A",
        "test_list": [
            "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
            "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
            "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_order(A):",
        "question_1": "Compose a Python program to move zeros in a given list to the end.",
        "answer_1": "def move_zeroes(nums):\n    \"\"\"\n    Moves all the zeros in a given list to the end.\n    @param nums: List\n    @return: List\n    \"\"\"\n    i = 0\n    for num in nums:\n        if num != 0:\n            nums[i] = num\n            i += 1\n    while i < len(nums):\n        nums[i] = 0\n        i += 1\n    return nums",
        "question_2": "Craft an algorithm in Python to move all zeroes in a list to the end of the list.",
        "answer_2": "def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)",
        "question_3": "Write a Python program to create an array of N zeros.",
        "answer_3": "import numpy\n\ndef create_zeros_array(N):\n  return numpy.zeros(N)\n\nresult = create_zeros_array(N)\nprint(result)",
        "full_code": "\ndef re_order(A):\n    # Step 1: Initialize a pointer to keep track of the position where the next non-zero element should be placed.\n    # This pointer will start at the beginning of the array.\n    non_zero_index = 0\n    \n    # Step 2: Iterate through the array to find non-zero elements and place them at the correct position.\n    # This will effectively move all non-zero elements to the front of the array.\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[non_zero_index] = A[i]\n            non_zero_index += 1\n    \n    # Step 3: After all non-zero elements have been moved to the front, fill the rest of the array with zeros.\n    # This will ensure that all zeros are moved to the end of the array.\n    for i in range(non_zero_index, len(A)):\n        A[i] = 0\n    \n    # Step 4: Return the modified array.\n    return A\n\n# Example usage:\nA = [3, 0, 1, 0, 5, 0, 2]\nresult = re_order(A)\nprint(result)\n",
        "pass": "True"
    },
    {
        "task_id": 506,
        "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
        "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permutation_coefficient(n, k):",
        "question_1": "Create a function in Python that takes an integer input and prints all combinations of the numbers.",
        "answer_1": "def permutations(n):\n for i in range(n+1):\n  for j in range(n+1):\n   for k in range(n+1):\n    for l in range(n+1):\n     print(i,j,k,l)\n\n# Calling the function\npermutations(4)",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Generate a Python algorithm to generate permuations.",
        "answer_3": "def permute(nums):\n  res = []\n  generatePermutations(nums, 0, [], res)\n  return res\n\ndef generatePermutations(nums, index, current, result):\n  if index == len(nums):\n    result.append(current[:])\n  else:\n    for i in range(index, len(nums)):\n      current.append(nums[i])\n      generatePermutations(nums, index+1, current, result)\n      current.pop()",
        "full_code": "\ndef permutation_coefficient(n, k):\n    # Step 1: Define the base case for the permutation coefficient.\n    # The permutation coefficient P(n, k) is defined as the number of ways to arrange 'k' items out of 'n' items.\n    # The formula for permutation coefficient is P(n, k) = n! / (n - k)!\n    # However, we can optimize this by calculating the product directly to avoid large intermediate factorial values.\n\n    # Step 2: Handle edge cases where k is greater than n or k is less than 0.\n    # If k is greater than n or k is less than 0, the permutation coefficient is 0 because it's not possible to choose more items than available or a negative number of items.\n    if k > n or k < 0:\n        return 0\n\n    # Step 3: Initialize the result to 1.\n    # This will store the product of the terms in the permutation coefficient calculation.\n    result = 1\n\n    # Step 4: Calculate the permutation coefficient by multiplying the first 'k' terms of (n - i) for i from 0 to k-1.\n    # This is equivalent to calculating n * (n-1) * (n-2) * ... * (n-k+1)\n    for i in range(k):\n        result *= (n - i)\n\n    # Step 5: Return the result which is the permutation coefficient P(n, k).\n    return result\n\n# Example usage:\n# print(permutation_coefficient(5, 2))  # Output should be 20\n",
        "pass": "True"
    },
    {
        "task_id": 507,
        "text": "Write a function to remove specific words from a given list.",
        "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ",
        "test_list": [
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_words(list1, removewords):",
        "question_1": "Create a function in Python to remove a specified element from a string of words.",
        "answer_1": "def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])",
        "question_2": "Write a Python function that takes a list of words and removes all words that are not equal to the given word.",
        "answer_2": "def remove_words(word, words):\n    return [w for w in words if w == word]",
        "question_3": "Create an algorithm to remove all occurrences of a word from an input string",
        "answer_3": "# Python 3 program to remove all occurrences \n# of a word from an input string\n  \n# Function to remove all occurrences of a word\n# from an input string\ndef remove_word(str, word): \n  \n    # split the string by spaces in a \n    lst = str.split()\n\n    # new list\n    lst2 = [] \n\n    # traverse in the list\n    for c in lst: \n  \n        if c != word: \n            lst2.append(c)\n\n    # join the words of list\n    return(\" \".join(lst2))\n\n# Driver code\nstr = \"This is a sample string with words to remove\"\nword = \"to\"\n\n# Function call\nresult = remove_word(str,word)\n\nprint(result)",
        "full_code": "\ndef remove_words(list1, removewords):\n    # Initialize an empty list to store the filtered words\n    filtered_list = []\n    \n    # Iterate through each word in the input list\n    for word in list1:\n        # Check if the current word is not in the list of words to remove\n        if word not in removewords:\n            # If the word is not to be removed, add it to the filtered list\n            filtered_list.append(word)\n    \n    # Return the filtered list containing only the words that were not removed\n    return filtered_list\n\n# Example usage:\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]\nremovewords = [\"banana\", \"date\"]\n\n# Function call\nresult = remove_words(list1, removewords)\n\n# Output the result\nprint(result)\n",
        "pass": "True"
    },
    {
        "task_id": 508,
        "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
        "test_list": [
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
            "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def same_order(l1, l2):",
        "question_1": "Given two unsorted lists, create a Python program to identify the common elements between them.",
        "answer_1": "def common_elements(list1, list2):\n return [element for element in list1 if element in list2]\n\ncommon_elements(list1, list2) # Output: [2, 6]",
        "question_2": "Write a Python program to find the common elements between two given lists.",
        "answer_2": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common",
        "question_3": "Create a Python program to compare two given lists and return the common elements.",
        "answer_3": "def commonElements(listOne, listTwo):\n commonList = []\n for element in listOne:\n  if element in listTwo:\n   commonList.append(element)\n return commonList\n\nprint(commonElements(listOne, listTwo))",
        "full_code": "\ndef same_order(l1, l2):\n    # Step 1: Find the common elements between the two lists.\n    # We use a set intersection to quickly find common elements.\n    common_elements = set(l1) & set(l2)\n    \n    # Step 2: Create a list of common elements from l1 in the order they appear.\n    # This will help us to compare the order with l2.\n    ordered_common_from_l1 = [element for element in l1 if element in common_elements]\n    \n    # Step 3: Create a list of common elements from l2 in the order they appear.\n    # This will be the list we compare against.\n    ordered_common_from_l2 = [element for element in l2 if element in common_elements]\n    \n    # Step 4: Compare the two lists of ordered common elements.\n    # If they are the same, the common elements are in the same order in both lists.\n    return ordered_common_from_l1 == ordered_common_from_l2\n\n# Example usage:\n# l1 = [1, 3, 2, 4, 5]\n# l2 = [5, 4, 3, 2, 1]\n# print(same_order(l1, l2))  # Output: False\n",
        "pass": "True"
    },
    {
        "task_id": 509,
        "text": "Write a python function to find the average of odd numbers till a given odd number.",
        "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
        "test_list": [
            "assert average_Odd(9) == 5",
            "assert average_Odd(5) == 3",
            "assert average_Odd(11) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def average_Odd(n) :",
        "question_1": "Create a python script to calculate the sum of even numbers and the average of odd numbers  in a given list.",
        "answer_1": "# Initializing sum and count variables\nsum_even = 0\ncount_odd = 0\n\n# Iterating through the list\nfor x in list:\n    # If number is even\n    if x % 2 == 0:\n        sum_even += x\n    # If number is odd\n    else:\n        count_odd += 1\n\n# Calculating average\nif count_odd > 0:\n    avg_odd = sum_even/count_odd\n\n# Printing results\nprint(\"Sum of even numbers:\", sum_even)\nprint(\"Average of odd numbers:\", avg_odd)",
        "question_2": "In Python, write a program to find the average of all the even numbers in a given list.",
        "answer_2": "def average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)/len(even_list)",
        "question_3": "Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list",
        "answer_3": "def odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result",
        "full_code": "\ndef average_Odd(n):\n    # Step 1: Initialize variables to store the sum of odd numbers and the count of odd numbers\n    sum_odd = 0\n    count_odd = 0\n    \n    # Step 2: Iterate through numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Step 3: Check if the current number is odd\n        if i % 2 != 0:\n            # Step 4: If the number is odd, add it to the sum and increment the count\n            sum_odd += i\n            count_odd += 1\n    \n    # Step 5: Calculate the average of the odd numbers\n    if count_odd > 0:\n        avg_odd = sum_odd / count_odd\n    else:\n        # Step 6: If no odd numbers are found, set the average to 0 (though this case shouldn't occur with an odd input n)\n        avg_odd = 0\n    \n    # Step 7: Return the calculated average\n    return avg_odd\n\n# The function is now complete and can be executed directly using exec()\n",
        "pass": "True"
    },
    {
        "task_id": 510,
        "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
        "test_list": [
            "assert no_of_subsequences([1,2,3,4], 10) == 11",
            "assert no_of_subsequences([4,8,7,2], 50) == 9",
            "assert no_of_subsequences([5,6,7,8], 15) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def no_of_subsequences(arr, k):",
        "question_1": "Generate a function in Python that takes a list and returns a list of all possible subsequences.",
        "answer_1": "def get_subsequences(arr):\n    subsequences = [[]]\n    for num in arr:\n        new_subsequences = []\n        for sub in subsequences:\n            new_subsequences.append(sub + [num])\n        subsequences += new_subsequences\n    return subsequences\n\narr = [1, 2, 3]\nresult = get_subsequences(arr)\nprint(result)",
        "question_2": "Code a Python program that takes an array of integers and forms them into subarrays of length k.",
        "answer_2": "def form_subarrays(array, k):\n    subarrays = []\n    start = 0\n    end = k\n   \n    # loop until all of the elements are placed in \n    # subarrays\n    while start < len(array):\n        subarrays.append(array[start:end])\n        start += k\n        end += k\n    \n    return subarrays",
        "question_3": "Code a solution to this leetcode problem using Python.",
        "answer_3": "def subarraySum(nums, k):\n    count = 0\n    sums = [0]*(len(nums) + 1)\n    for i in range(1,len(nums) + 1):\n        sums[i] = sums[i-1] + nums[i-1]\n\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums) + 1):\n            if sums[j] - sums[i] == k:\n                count += 1\n    return count",
        "full_code": "\ndef no_of_subsequences(arr, k):\n    # Initialize a counter to keep track of the number of valid subsequences\n    count = 0\n    \n    # Iterate over all possible subsequences using two nested loops\n    # The outer loop picks the starting element of the subsequence\n    for i in range(len(arr)):\n        # Initialize the product for the current subsequence\n        product = 1\n        \n        # The inner loop picks the ending element of the subsequence\n        for j in range(i, len(arr)):\n            # Update the product with the current element\n            product *= arr[j]\n            \n            # Check if the product is less than k\n            if product < k:\n                # If it is, increment the count\n                count += 1\n            else:\n                # If the product exceeds k, break out of the inner loop\n                # as further elements will only increase the product\n                break\n    \n    # Return the total count of subsequences with product less than k\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4]\nk = 10\nresult = no_of_subsequences(arr, k)\nprint(result)  # Output should be the number of subsequences with product < k\n",
        "pass": "False"
    }
]