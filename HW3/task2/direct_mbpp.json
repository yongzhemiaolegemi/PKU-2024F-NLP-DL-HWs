[
    {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
            "assert remove_Occ(\"\",\"l\") == \"\""
        ],
        "def_code": "def remove_Occ(s,ch):",
        "full_code": "\ndef remove_Occ(s, ch):\n    if ch in s:\n        first_index = s.index(ch)\n        last_index = s.rindex(ch)\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    return s\n"
    },
    {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_matrix(M):",
        "full_code": "\ndef sort_matrix(M):\n    # Calculate the sum of each row and store it with the row index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # Sort the rows based on the sum in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Create a new sorted matrix\n    sorted_M = [M[i] for _, i in row_sums]\n    \n    return sorted_M\n"
    },
    {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef count_common(words):",
        "full_code": "\nfrom collections import Counter\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common()\n    return most_common\n"
    },
    {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Volume(l,b,h) :",
        "full_code": "\ndef find_Volume(l, b, h):\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef split_lowerstring(text):",
        "full_code": "\nimport re\ndef split_lowerstring(text):\n    # Use regular expression to find all lowercase letters\n    parts = re.split(r'([a-z])', text)\n    # Filter out empty strings and join the parts with the lowercase letters\n    result = [parts[i] + parts[i+1] for i in range(0, len(parts)-1, 2)]\n    return result\n"
    },
    {
        "task_id": 16,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
        ],
        "def_code": "import re\r\ndef text_lowercase_underscore(text):",
        "full_code": "\nimport re\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "task_id": 17,
        "text": "Write a function to find the perimeter of a square.",
        "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_perimeter(a):",
        "full_code": "\ndef square_perimeter(a):\n    return 4 * a\n"
    },
    {
        "task_id": 18,
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string):",
        "full_code": "\nNO_OF_CHARS = 256\n\ndef str_to_list(string):\n    return [char for char in string]\n\ndef remove_chars(str1, str2):\n    # Create a list of characters from the first string\n    list1 = str_to_list(str1)\n    \n    # Create a set of characters from the second string for faster lookup\n    set2 = set(str_to_list(str2))\n    \n    # Filter out characters from list1 that are present in set2\n    filtered_list = [char for char in list1 if char not in set2]\n    \n    # Join the filtered list back into a string\n    result_str = ''.join(filtered_list)\n    \n    return result_str\n\n# Example usage:\nstr1 = \"hello world\"\nstr2 = \"od\"\nprint(remove_chars(str1, str2))  # Output: \"hell wrl\"\n"
    },
    {
        "task_id": 19,
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_duplicate(arraynums):",
        "full_code": "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "task_id": 20,
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert is_woodall(32212254719) == True",
            "assert is_woodall(32212254718) == False",
            "assert is_woodall(159) == True"
        ],
        "def_code": "def is_woodall(x):",
        "full_code": "\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n"
    },
    {
        "task_id": 21,
        "text": "Write a function to find m number of multiples of n.",
        "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "test_list": [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiples_of_num(m,n):",
        "full_code": "\ndef multiples_of_num(m, n):\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(i * n)\n    return multiples\n"
    },
    {
        "task_id": 22,
        "text": "Write a function to find the first duplicate element in a given array of integers.",
        "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "test_list": [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_first_duplicate(nums):",
        "full_code": "\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"
    },
    {
        "task_id": 23,
        "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "test_list": [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
        ],
        "def_code": "def maximum_Sum(list1):",
        "full_code": "\ndef maximum_Sum(list1):\n    max_sum = float('-inf')\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "task_id": 24,
        "text": "Write a function to convert the given binary number to its decimal equivalent.",
        "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_decimal(binary):",
        "full_code": "\ndef binary_to_decimal(binary):\n    decimal = 0\n    binary_length = len(binary)\n    for i in range(binary_length):\n        decimal += int(binary[i]) * (2 ** (binary_length - 1 - i))\n    return decimal\n"
    },
    {
        "task_id": 25,
        "text": "Write a python function to find the product of non-repeated elements in a given array.",
        "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "test_list": [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"
        ],
        "def_code": "def find_Product(arr,n):",
        "full_code": "\ndef find_Product(arr, n):\n    # Create a set to store unique elements\n    unique_elements = set()\n    \n    # Initialize product to 1\n    product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # If the element is not in the set, add it and multiply to the product\n        if num not in unique_elements:\n            unique_elements.add(num)\n            product *= num\n    \n    # Return the final product\n    return product\n"
    },
    {
        "task_id": 26,
        "text": "Write a function to check if the given tuple list has all k elements.",
        "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
        ],
        "def_code": "def check_k_elements(test_list, K):",
        "full_code": "\ndef check_k_elements(test_list, K):\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True\n"
    },
    {
        "task_id": 27,
        "text": "Write a python function to remove all digits from a list of strings.",
        "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "test_list": [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\ndef remove(list):",
        "full_code": "\nimport re  \ndef remove(list):\n    return [re.sub(r'\\d', '', s) for s in list]\n"
    },
    {
        "task_id": 28,
        "text": "Write a python function to find binomial co-efficient.",
        "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "test_list": [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert binomial_Coeff(14,6) == 3003"
        ],
        "def_code": "def binomial_Coeff(n,k):",
        "full_code": "\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    # Calculate value of Binomial Coefficient using the formula C(n, k) = C(n-1, k-1) + C(n-1, k)\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "task_id": 29,
        "text": "Write a python function to find the element occurring odd number of times.",
        "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "test_list": [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Odd_Occurrence(arr,arr_size):",
        "full_code": "\ndef get_Odd_Occurrence(arr, arr_size):\n    res = 0\n    for i in range(arr_size):\n        res = res ^ arr[i]\n    return res\n"
    },
    {
        "task_id": 30,
        "text": "Write a python function to count all the substrings starting and ending with same characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "full_code": "\ndef check_Equality(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n"
    },
    {
        "task_id": 31,
        "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "test_list": [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def func(nums, k):",
        "full_code": "\ndef func(nums, k):\n    from heapq import heappush, heappop\n    from collections import defaultdict\n\n    # Count the frequency of each number\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n\n    # Create a min-heap to store the top k frequent numbers\n    min_heap = []\n    for num, freq in frequency.items():\n        heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heappop(min_heap)\n\n    # Extract the top k frequent numbers from the heap\n    top_k = [num for _, num in min_heap]\n\n    return top_k\n"
    },
    {
        "task_id": 32,
        "text": "Write a python function to find the largest prime factor of a given number.",
        "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "test_list": [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef max_Prime_Factors (n):",
        "full_code": "\nimport math \ndef max_Prime_Factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # If n is still greater than 2, then it must be prime\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n"
    },
    {
        "task_id": 33,
        "text": "Write a python function to convert a decimal number to binary number.",
        "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_To_Binary(N):",
        "full_code": "\ndef decimal_To_Binary(N):\n    if N == 0:\n        return \"0\"\n    binary_representation = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_representation = str(remainder) + binary_representation\n        N = N // 2\n    return binary_representation\n"
    },
    {
        "task_id": 34,
        "text": "Write a python function to find the missing number in a sorted array.",
        "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "test_list": [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_missing(ar,N):",
        "full_code": "\ndef find_missing(ar, N):\n    # Initialize the expected sum and the actual sum\n    expected_sum = N * (N + 1) // 2\n    actual_sum = sum(ar)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number\n"
    },
    {
        "task_id": 35,
        "text": "Write a function to find the n-th rectangular number.",
        "code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "test_list": [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rect_num(n):",
        "full_code": "\ndef find_rect_num(n):\n    return n * (n + 1)\n"
    },
    {
        "task_id": 36,
        "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "test_list": [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Nth_Digit(p,q,N) :",
        "full_code": "\ndef find_Nth_Digit(p, q, N):\n    # Ensure p and q are integers and q is not zero\n    if not isinstance(p, int) or not isinstance(q, int) or q == 0:\n        raise ValueError(\"Both p and q must be integers and q must not be zero.\")\n    \n    # Calculate the integer part of the fraction\n    integer_part = p // q\n    p = p % q\n    \n    # If N is within the integer part, return it\n    if N == 0:\n        return integer_part % 10\n    \n    # Initialize variables for the fractional part\n    seen = {}\n    digits = []\n    position = 0\n    \n    # Perform long division to find the fractional part\n    while p != 0:\n        if (p, q) in seen:\n            # If we've seen this pair before, we've found a repeating sequence\n            start_repeat = seen[(p, q)]\n            if N < len(digits):\n                return digits[N]\n            else:\n                return digits[start_repeat + (N - len(digits))]\n        \n        # Record the current position\n        seen[(p, q)] = position\n        \n        # Perform the division step\n        p *= 10\n        digit = p // q\n        digits.append(digit)\n        p = p % q\n        position += 1\n        \n        # Check if we've reached the Nth digit\n        if position == N:\n            return digit\n    \n    # If we exit the loop, it means the fraction terminates\n    if N < len(digits):\n        return digits[N]\n    else:\n        return 0  # N is beyond the length of the terminating fraction\n\n# Example usage:\n# exec(open('your_script.py').read())\n"
    },
    {
        "task_id": 37,
        "text": "Write a function to sort a given mixed list of integers and strings.",
        "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "test_list": [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_mixed_list(mixed_list):",
        "full_code": "\ndef sort_mixed_list(mixed_list):\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    integers.sort()\n    strings.sort()\n    return integers + strings\n"
    },
    {
        "task_id": 38,
        "text": "Write a function to find the division of first even and odd number of a given list.",
        "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "test_list": [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def div_even_odd(list1):",
        "full_code": "\ndef div_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        result = first_even / first_odd\n        print(f\"Division of first even ({first_even}) by first odd ({first_odd}) is: {result}\")\n    else:\n        print(\"List does not contain both even and odd numbers.\")\n\n# Example usage:\n# div_even_odd([3, 2, 5, 7, 4, 6])\n"
    },
    {
        "task_id": 39,
        "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "test_list": [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):",
        "full_code": "\nimport heapq\nfrom collections import Counter\n\ndef rearrange_string(S):\n    # Count the frequency of each character\n    char_count = Counter(S)\n    \n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Initialize variables to keep track of the previous character and its frequency\n    prev_char, prev_freq = None, 0\n    result = []\n    \n    while max_heap:\n        # Pop the character with the highest frequency\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If there was a previous character, push it back into the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char, prev_freq = char, freq + 1\n    \n    # If the length of the result is the same as the input string, return the result\n    if len(result) == len(S):\n        return ''.join(result)\n    else:\n        return \"\"\n\n# Example usage:\n# print(rearrange_string(\"aaabbc\"))  # Output: \"ababac\" or similar\n"
    },
    {
        "task_id": 40,
        "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "test_list": [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):",
        "full_code": "\nfrom collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(nums))\n    \n    # Count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n"
    },
    {
        "task_id": 41,
        "text": "Write a function to filter even numbers using lambda function.",
        "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "test_list": [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_evennumbers(nums):",
        "full_code": "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "task_id": 42,
        "text": "Write a python function to find the sum of repeated elements in a given array.",
        "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"
        ],
        "def_code": "def find_Sum(arr,n):",
        "full_code": "\ndef find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n"
    },
    {
        "task_id": 43,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "test_list": [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match(\"aab-cbbbc\") == 'Not matched!'"
        ],
        "def_code": "import re\r\ndef text_match(text):",
        "full_code": "\nimport re\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "task_id": 44,
        "text": "Write a function that matches a word at the beginning of a string.",
        "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match_string(\"foo\")==('Found a match!')"
        ],
        "def_code": "import re\r\ndef text_match_string(text):",
        "full_code": "\nimport re\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "task_id": 45,
        "text": "Write a function to find the gcd of the given array elements.",
        "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "test_list": [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_gcd(x, y):",
        "full_code": "\ndef find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef gcd_of_array(arr):\n    if not arr:\n        return None\n    gcd_result = arr[0]\n    for num in arr[1:]:\n        gcd_result = find_gcd(gcd_result, num)\n        if gcd_result == 1:\n            break\n    return gcd_result\n\n# Example usage:\n# arr = [48, 18, 24]\n# print(gcd_of_array(arr))  # Output: 6\n"
    },
    {
        "task_id": 46,
        "text": "Write a python function to determine whether all the numbers are different from each other are not.",
        "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "test_list": [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_distinct(data):",
        "full_code": "\ndef test_distinct(data):\n    return len(data) == len(set(data))\n"
    },
    {
        "task_id": 47,
        "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "test_list": [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert compute_Last_Digit(3,7) == 0",
            "assert compute_Last_Digit(20,23) == 6",
            "assert compute_Last_Digit(1021,1024) == 4"
        ],
        "def_code": "def compute_Last_Digit(A,B):",
        "full_code": "\ndef compute_Last_Digit(A, B):\n    if A == B:\n        return 1\n    elif A > B:\n        return 0\n    else:\n        last_digit = 1\n        for i in range(A + 1, B + 1):\n            last_digit = (last_digit * i) % 10\n            if last_digit == 0:\n                break\n        return last_digit\n"
    },
    {
        "task_id": 48,
        "text": "Write a python function to set all odd bits of a given number.",
        "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "test_list": [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_bit_set_number(n):",
        "full_code": "\ndef odd_bit_set_number(n):\n    # Create a mask with all odd bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # Set all odd bits of the number n\n    result = n | mask\n    \n    return result\n"
    },
    {
        "task_id": 49,
        "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "full_code": "\ndef specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if len(sublist) > N:\n            result.append(sublist[N])\n        else:\n            result.append(None)\n    return result\n"
    },
    {
        "task_id": 50,
        "text": "Write a function to find the list with minimum length using lambda function.",
        "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "test_list": [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_length_list(input_list):",
        "full_code": "\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))\n"
    },
    {
        "task_id": 51,
        "text": "Write a function to print check if the triangle is equilateral or not.",
        "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_equilateral(x,y,z):",
        "full_code": "\ndef check_equilateral(x, y, z):\n    if x == y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n"
    },
    {
        "task_id": 52,
        "text": "Write a function to caluclate area of a parallelogram.",
        "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parallelogram_area(b,h):",
        "full_code": "\ndef parallelogram_area(b, h):\n    area = b * h\n    return area\n"
    },
    {
        "task_id": 53,
        "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "test_list": [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(str):",
        "full_code": "\ndef check_Equality(str):\n    if len(str) > 0 and str[0] == str[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 54,
        "text": "Write a function to sort the given array by using counting sort.",
        "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "test_list": [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def counting_sort(my_list):",
        "full_code": "\ndef counting_sort(my_list):\n    if not my_list:\n        return my_list\n    \n    # Find the maximum value in the list\n    max_value = max(my_list)\n    \n    # Create a count array to store the count of each unique value\n    count = [0] * (max_value + 1)\n    \n    # Store the count of each unique value in the count array\n    for value in my_list:\n        count[value] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted values\n    output = [0] * len(my_list)\n    \n    # Place the elements in the sorted order\n    for value in reversed(my_list):\n        output[count[value] - 1] = value\n        count[value] -= 1\n    \n    return output\n"
    },
    {
        "task_id": 55,
        "text": "Write a function to find t-nth term of geometric series.",
        "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "test_list": [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef tn_gp(a,n,r):",
        "full_code": "\nimport math\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n"
    },
    {
        "task_id": 56,
        "text": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rev(num):",
        "full_code": "\ndef rev(num):\n    def reverse_number(n):\n        return int(str(n)[::-1])\n    \n    reversed_num = reverse_number(num)\n    return num == 2 * reversed_num - 1\n\n# Example usage:\n# print(rev(12))  # Should print True if 12 is one less than twice its reverse (21)\n"
    },
    {
        "task_id": 57,
        "text": "Write a python function to find the largest number that can be formed with the given digits.",
        "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "test_list": [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Num(arr,n) :",
        "full_code": "\ndef find_Max_Num(arr, n):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Join the sorted array to form the largest number\n    largest_num = ''.join(map(str, arr))\n    \n    return largest_num\n\n# Example usage:\n# arr = [3, 30, 34, 5, 9]\n# n = len(arr)\n# print(find_Max_Num(arr, n))\n"
    },
    {
        "task_id": 58,
        "text": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def opposite_Signs(x,y):",
        "full_code": "\ndef opposite_Signs(x, y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n"
    },
    {
        "task_id": 59,
        "text": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_octagonal(n):",
        "full_code": "\ndef is_octagonal(n):\n    def nth_octagonal(k):\n        return 3 * k * k - 2 * k\n    \n    k = 1\n    while True:\n        octagonal_number = nth_octagonal(k)\n        if octagonal_number == n:\n            return True\n        elif octagonal_number > n:\n            return False\n        k += 1\n"
    },
    {
        "task_id": 60,
        "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "test_list": [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_len_sub( arr, n):",
        "full_code": "\ndef max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    # Dictionary to store the maximum length of subsequence ending at each element\n    dp = {}\n    \n    # Initialize the maximum length to 1 (each element itself is a subsequence)\n    max_len = 1\n    \n    for i in range(n):\n        dp[i] = 1  # Each element is a subsequence of length 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    \n    return max_len\n"
    },
    {
        "task_id": 61,
        "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "test_list": [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):",
        "full_code": "\nfrom collections import defaultdict\n\ndef count_Substrings(s, n):\n    count = 0\n    digit_sum = defaultdict(int)\n    \n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            sum_digits = sum(int(char) for char in substring)\n            if sum_digits == length:\n                count += 1\n    \n    return count\n\n# Example usage:\n# s = \"1123\"\n# n = len(s)\n# print(count_Substrings(s, n))  # Output: 5\n"
    },
    {
        "task_id": 62,
        "text": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(xs):\n  return min(xs)\n",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_num(xs):",
        "full_code": "\ndef smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "task_id": 63,
        "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_difference(test_list):",
        "full_code": "\ndef max_difference(test_list):\n    if not test_list:\n        return None\n    \n    max_diff = float('-inf')\n    \n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "task_id": 64,
        "text": "Write a function to sort a list of tuples using lambda.",
        "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def subject_marks(subjectmarks):",
        "full_code": "\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "task_id": 65,
        "text": "Write a function of recursion list sum.",
        "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def recursive_list_sum(data_list):",
        "full_code": "\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "task_id": 66,
        "text": "Write a python function to count positive numbers in a list.",
        "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_count(list):",
        "full_code": "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 67,
        "text": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bell_number(n):",
        "full_code": "\ndef bell_number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the table using the recursive formula\n    for i in range(1, n + 1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The Bell number for n is stored in bell[n][0]\n    return bell[n][0]\n\n# Example usage:\n# print(bell_number(5))  # Output: 52\n"
    },
    {
        "task_id": 68,
        "text": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Monotonic(A):",
        "full_code": "\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"
    },
    {
        "task_id": 69,
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_sublist(l, s):",
        "full_code": "\ndef is_sublist(l, s):\n    len_l = len(l)\n    len_s = len(s)\n    \n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False\n"
    },
    {
        "task_id": 70,
        "text": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_equal_tuple(Input, k):",
        "full_code": "\ndef find_equal_tuple(Input, k):\n    # Check if all tuples in the input list have the same length as k\n    for tup in Input:\n        if len(tup) != k:\n            return False\n    return True\n"
    },
    {
        "task_id": 71,
        "text": "Write a function to sort a list of elements using comb sort.",
        "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def comb_sort(nums):",
        "full_code": "\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n"
    },
    {
        "task_id": 72,
        "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dif_Square(n):",
        "full_code": "\ndef dif_Square(n):\n    if n < 0:\n        return False\n    \n    # Check if n is odd\n    if n % 2 != 0:\n        return True\n    \n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n    \n    return False\n"
    },
    {
        "task_id": 73,
        "text": "Write a function to split the given string with multiple delimiters by using regex.",
        "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "test_list": [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef multiple_split(text):",
        "full_code": "\nimport re\ndef multiple_split(text):\n    delimiters = [',', ';', ':', '|']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    result = re.split(regex_pattern, text)\n    return result\n"
    },
    {
        "task_id": 74,
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_samepatterns(colors, patterns):",
        "full_code": "\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_dict = {}\n    used_colors = set()\n    \n    for i in range(len(patterns)):\n        if patterns[i] in pattern_dict:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n        else:\n            if colors[i] in used_colors:\n                return False\n            pattern_dict[patterns[i]] = colors[i]\n            used_colors.add(colors[i])\n    \n    return True\n"
    },
    {
        "task_id": 75,
        "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_tuples(test_list, K):",
        "full_code": "\ndef find_tuples(test_list, K):\n    result = [tup for tup in test_list if all(elem % K == 0 for elem in tup)]\n    return result\n"
    },
    {
        "task_id": 76,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "full_code": "\ndef count_Squares(m, n):\n    # Initialize the count of squares\n    count = 0\n    \n    # Iterate over all possible square sizes\n    for size in range(1, min(m, n) + 1):\n        # Calculate the number of squares of current size\n        count += (m - size + 1) * (n - size + 1)\n    \n    return count\n"
    },
    {
        "task_id": 77,
        "text": "Write a python function to find the difference between sum of even and odd digits.",
        "code": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Diff(n):",
        "full_code": "\ndef is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    \n    return even_sum - odd_sum\n"
    },
    {
        "task_id": 78,
        "text": "Write a python function to find number of integers with odd number of set bits.",
        "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "test_list": [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_With_Odd_SetBits(n):",
        "full_code": "\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 79,
        "text": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def word_len(s):",
        "full_code": "\ndef word_len(s):\n    if len(s) % 2 == 1:\n        print(\"The length of the word is odd.\")\n    else:\n        print(\"The length of the word is not odd.\")\n"
    },
    {
        "task_id": 80,
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test_list": [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tetrahedral_number(n):",
        "full_code": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "task_id": 81,
        "text": "Write a function to zip the two given tuples.",
        "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "test_list": [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zip_tuples(test_tup1, test_tup2):",
        "full_code": "\ndef zip_tuples(test_tup1, test_tup2):\n    zipped = tuple(zip(test_tup1, test_tup2))\n    return zipped\n"
    },
    {
        "task_id": 82,
        "text": "Write a function to find the volume of a sphere.",
        "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "test_list": [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_sphere(r):",
        "full_code": "\nimport math\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "task_id": 83,
        "text": "Write a python function to find the character made by adding all the characters of the given string.",
        "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Char(strr):",
        "full_code": "\ndef get_Char(strr):\n    total_value = sum(ord(char) for char in strr)\n    result_char = chr(total_value % 256)  # Ensure the result is within the ASCII range\n    return result_char\n"
    },
    {
        "task_id": 84,
        "text": "Write a function to find the n-th number in newman conway sequence.",
        "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequence(n):",
        "full_code": "\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 1\n    \n    for i in range(3, n + 1):\n        memo[i] = memo[memo[i - 1]] + memo[i - memo[i - 1]]\n    \n    return memo[n]\n"
    },
    {
        "task_id": 85,
        "text": "Write a function to find the surface area of a sphere.",
        "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_sphere(r):",
        "full_code": "\nimport math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n"
    },
    {
        "task_id": 86,
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def centered_hexagonal_number(n):",
        "full_code": "\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n"
    },
    {
        "task_id": 87,
        "text": "Write a function to merge three dictionaries into a single expression.",
        "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "full_code": "\nimport collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return ct.ChainMap(dict1, dict2, dict3)\n"
    },
    {
        "task_id": 88,
        "text": "Write a function to get the frequency of the elements in a list.",
        "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections\r\ndef freq_count(list1):",
        "full_code": "\nimport collections\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "task_id": 89,
        "text": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(N):\r\n  return (N - 1)",
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def closest_num(N):",
        "full_code": "\ndef closest_num(N):\n    if N <= 0:\n        return None\n    return N - 1\n"
    },
    {
        "task_id": 90,
        "text": "Write a python function to find the length of the longest word.",
        "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def len_log(list1):",
        "full_code": "\ndef len_log(list1):\n    if not list1:\n        return 0\n    max_length = max(len(word) for word in list1)\n    return max_length\n"
    },
    {
        "task_id": 91,
        "text": "Write a function to check if a substring is present in a given list of string values.",
        "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_substring(str1, sub_str):",
        "full_code": "\ndef find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "task_id": 92,
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "test_list": [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_undulating(n):",
        "full_code": "\ndef is_undulating(n):\n    # Convert the number to a string to easily access individual digits\n    str_n = str(n)\n    \n    # Check if the number has at least 3 digits\n    if len(str_n) < 3:\n        return False\n    \n    # Check if the number alternates between two different digits\n    for i in range(1, len(str_n)):\n        if str_n[i] == str_n[i-1]:\n            return False\n    \n    return True\n"
    },
    {
        "task_id": 93,
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def power(a,b):",
        "full_code": "\ndef power(a, b):\n    return a ** b\n"
    },
    {
        "task_id": 94,
        "text": "Write a function to extract the index minimum value record from the given tuples.",
        "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter \r\ndef index_minimum(test_list):",
        "full_code": "\nfrom operator import itemgetter \ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    \n    min_index = min(range(len(test_list)), key=lambda i: test_list[i])\n    return test_list[min_index]\n"
    },
    {
        "task_id": 95,
        "text": "Write a python function to find the minimum length of sublist.",
        "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min_Length(lst):",
        "full_code": "\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if isinstance(sublist, list):\n            min_length = min(min_length, len(sublist))\n    return min_length if min_length != float('inf') else 0\n"
    },
    {
        "task_id": 96,
        "text": "Write a python function to find the number of divisors of a given integer.",
        "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "test_list": [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def divisor(n):",
        "full_code": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 97,
        "text": "Write a function to find frequency count of list of lists.",
        "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_lists(list1):",
        "full_code": "\ndef frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in frequency_dict:\n            frequency_dict[sublist_tuple] += 1\n        else:\n            frequency_dict[sublist_tuple] = 1\n    return frequency_dict\n"
    },
    {
        "task_id": 98,
        "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "test_list": [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_num(numbers):",
        "full_code": "\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "task_id": 99,
        "text": "Write a function to convert the given decimal number to its binary equivalent.",
        "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_binary(n):",
        "full_code": "\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary_representation = \"\"\n    while n > 0:\n        binary_representation = str(n % 2) + binary_representation\n        n = n // 2\n    return binary_representation\n"
    },
    {
        "task_id": 100,
        "text": "Write a function to find the next smallest palindrome of a specified number.",
        "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys\r\ndef next_smallest_palindrome(num):",
        "full_code": "\nimport sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "task_id": 101,
        "text": "Write a function to find the kth element in the given array.",
        "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def kth_element(arr, n, k):",
        "full_code": "\ndef kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n    \n    # Return the kth element (1-based index)\n    return arr[k-1]\n"
    },
    {
        "task_id": 102,
        "text": "Write a function to convert snake case string to camel case string.",
        "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def snake_to_camel(word):",
        "full_code": "\ndef snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.capitalize() for x in components[1:])\n"
    },
    {
        "task_id": 103,
        "text": "Write a function to find eulerian number a(n, m).",
        "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def eulerian_num(n, m):",
        "full_code": "\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n# Example usage:\n# print(eulerian_num(4, 2))  # Output should be 11\n"
    },
    {
        "task_id": 104,
        "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_sublists(input_list):",
        "full_code": "\ndef sort_sublists(input_list):\n    sorted_list = list(map(lambda sublist: sorted(sublist, key=lambda x: x), input_list))\n    return sorted_list\n"
    },
    {
        "task_id": 105,
        "text": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):   \r\n    return sum(lst) ",
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(lst):",
        "full_code": "\ndef count(lst):\n    true_count = sum(1 for item in lst if item is True)\n    return true_count\n"
    },
    {
        "task_id": 106,
        "text": "Write a function to add the given list to the given tuples.",
        "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_lists(test_list, test_tup):",
        "full_code": "\ndef add_lists(test_list, test_tup):\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n    \n    # Extend the list with the elements of test_list\n    tup_list.extend(test_list)\n    \n    # Convert the list back to a tuple\n    result_tup = tuple(tup_list)\n    \n    # Output the result\n    print(result_tup)\n"
    },
    {
        "task_id": 107,
        "text": "Write a python function to count hexadecimal numbers for a given range.",
        "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Hexadecimal(L,R) :",
        "full_code": "\ndef count_Hexadecimal(L, R):\n    count = 0\n    for num in range(L, R + 1):\n        if all(c in '0123456789ABCDEF' for c in hex(num)[2:].upper()):\n            count += 1\n    return count\n"
    },
    {
        "task_id": 108,
        "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):",
        "full_code": "\nimport heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a list of iterators for each input list\n    iterators = [iter(num1), iter(num2), iter(num3)]\n    \n    # Create a list of tuples (next_value, iterator_index)\n    # Initialize with the first element from each iterator\n    heap = []\n    for i, it in enumerate(iterators):\n        try:\n            heapq.heappush(heap, (next(it), i))\n        except StopIteration:\n            pass\n    \n    # Yield elements from the heap\n    while heap:\n        value, index = heapq.heappop(heap)\n        yield value\n        \n        # Push the next element from the same iterator to the heap\n        try:\n            next_value = next(iterators[index])\n            heapq.heappush(heap, (next_value, index))\n        except StopIteration:\n            pass\n\n# Example usage:\n# num1 = [1, 4, 7]\n# num2 = [2, 5, 8]\n# num3 = [3, 6, 9]\n# merged_iterator = merge_sorted_list(num1, num2, num3)\n# for num in merged_iterator:\n#     print(num)\n"
    },
    {
        "task_id": 109,
        "text": "Write a python function to find the count of rotations of a binary string with odd value.",
        "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Equivalent(s,n):",
        "full_code": "\ndef odd_Equivalent(s, n):\n    # Initialize the count of rotations with odd value\n    odd_count = 0\n    \n    # Iterate over all possible rotations\n    for i in range(n):\n        # Create the rotated string\n        rotated_s = s[i:] + s[:i]\n        \n        # Convert the rotated string to an integer\n        rotated_value = int(rotated_s, 2)\n        \n        # Check if the value is odd\n        if rotated_value % 2 != 0:\n            odd_count += 1\n    \n    # Return the count of rotations with odd value\n    return odd_count\n"
    },
    {
        "task_id": 110,
        "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "test_list": [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_missing(test_list, strt_val, stop_val):",
        "full_code": "\ndef extract_missing(test_list, strt_val, stop_val):\n    # Create a set of the given list for quick lookup\n    test_set = set(test_list)\n    \n    # Initialize an empty list to store the missing ranges\n    missing_ranges = []\n    \n    # Initialize the start of the current range\n    current_start = strt_val\n    \n    # Iterate through the range from strt_val to stop_val\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_set:\n            # If the current number is not in the set, it's part of a missing range\n            if current_start is None:\n                # If current_start is None, it means we are starting a new missing range\n                current_start = i\n        else:\n            # If the current number is in the set, it means the previous range has ended\n            if current_start is not None:\n                # Add the missing range to the list\n                missing_ranges.append((current_start, i - 1))\n                # Reset current_start\n                current_start = None\n    \n    # If the loop ends and current_start is not None, it means there is an ongoing missing range\n    if current_start is not None:\n        missing_ranges.append((current_start, stop_val))\n    \n    return missing_ranges\n"
    },
    {
        "task_id": 111,
        "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "test_list": [
            "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
            "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
            "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_in_nested_lists(nestedlist):",
        "full_code": "\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    # Initialize the common elements with the first sublist\n    common_elements = set(nestedlist[0])\n    \n    # Iterate through the rest of the sublists\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return list(common_elements)\n"
    },
    {
        "task_id": 112,
        "text": "Write a python function to find the perimeter of a cylinder.",
        "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "test_list": [
            "assert perimeter(2,4) == 12",
            "assert perimeter(1,2) == 6",
            "assert perimeter(3,1) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter(diameter,height) :",
        "full_code": "\ndef perimeter(diameter, height):\n    import math\n    circumference = math.pi * diameter\n    perimeter_of_cylinder = 2 * circumference + 2 * height\n    return perimeter_of_cylinder\n"
    },
    {
        "task_id": 113,
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_integer(text):",
        "full_code": "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "task_id": 114,
        "text": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "test_list": [
            "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
            "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
            "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef assign_freq(test_list):",
        "full_code": "\nfrom collections import Counter \ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    return [(tup, freq_dict[tup]) for tup in test_list]\n"
    },
    {
        "task_id": 115,
        "text": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def empty_dit(list1):",
        "full_code": "\ndef empty_dict(list1):\n    return all(not d for d in list1)\n"
    },
    {
        "task_id": 116,
        "text": "Write a function to convert a given tuple of positive integers into an integer.",
        "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_to_int(nums):",
        "full_code": "\ndef tuple_to_int(nums):\n    # Convert each number in the tuple to a string and join them together\n    num_str = ''.join(map(str, nums))\n    # Convert the joined string back to an integer\n    result = int(num_str)\n    return result\n"
    },
    {
        "task_id": 117,
        "text": "Write a function to convert all possible convertible elements in the list to float.",
        "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_to_float(test_list):",
        "full_code": "\ndef list_to_float(test_list):\n    def try_float(x):\n        try:\n            return float(x)\n        except (ValueError, TypeError):\n            return x\n    \n    return [try_float(item) for item in test_list]\n"
    },
    {
        "task_id": 118,
        "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_list(string):",
        "full_code": "\ndef string_to_list(string):\n    return list(string)\n"
    },
    {
        "task_id": 119,
        "text": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "test_list": [
            "assert search([1,1,2,2,3],5) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
            "assert search([1,2,2,3,3,4,4],7) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def search(arr,n) :",
        "full_code": "\ndef search(arr, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if mid + 1 < n and arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid - 1\n    \n    return arr[left]\n"
    },
    {
        "task_id": 120,
        "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product_tuple(list1):",
        "full_code": "\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "task_id": 121,
        "text": "Write a function to find the triplet with sum of the given array",
        "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "test_list": [
            "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
            "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
            "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_triplet(A, n, sum, count):",
        "full_code": "\ndef check_triplet(A, n, sum, count):\n    # Sort the array\n    A.sort()\n    \n    # Iterate through the array\n    for i in range(n - 2):\n        # Two pointers to find the triplet\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            \n            if current_sum == sum:\n                print(f\"Triplet found: ({A[i]}, {A[left]}, {A[right]})\")\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    \n    if count == 0:\n        print(\"No triplet found with the given sum.\")\n    else:\n        print(f\"Total triplets found: {count}\")\n\n# Example usage:\nA = [1, 4, 45, 6, 10, 8]\nn = len(A)\nsum = 22\ncount = 0\ncheck_triplet(A, n, sum, count)\n"
    },
    {
        "task_id": 122,
        "text": "Write a function to find n\u2019th smart number.",
        "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "test_list": [
            "assert smartNumber(1) == 30",
            "assert smartNumber(50) == 273",
            "assert smartNumber(1000) == 2664"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 3000 \r\ndef smartNumber(n):",
        "full_code": "\nMAX = 3000 \ndef smartNumber(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    smart_numbers = []\n    for i in range(1, MAX):\n        if is_prime(i):\n            smart_numbers.append(i)\n        elif i % 2 == 0:\n            smart_numbers.append(i)\n        else:\n            for prime in smart_numbers:\n                if prime > i:\n                    break\n                if is_prime(i - prime):\n                    smart_numbers.append(i)\n                    break\n\n    return smart_numbers[n-1] if n <= len(smart_numbers) else -1\n"
    },
    {
        "task_id": 123,
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def amicable_numbers_sum(limit):",
        "full_code": "\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n\n    return amicable_sum\n"
    },
    {
        "task_id": 124,
        "text": "Write a function to get the angle of a complex number.",
        "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath\r\ndef angle_complex(a,b):",
        "full_code": "\nimport cmath\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    angle = cmath.phase(complex_number)\n    return angle\n"
    },
    {
        "task_id": 125,
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "test_list": [
            "assert find_length(\"11000010001\", 11) == 6",
            "assert find_length(\"10111\", 5) == 1",
            "assert find_length(\"11011101100101\", 14) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_length(string, n):",
        "full_code": "\ndef find_length(string, n):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n        \n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff\n"
    },
    {
        "task_id": 126,
        "text": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum(a,b):",
        "full_code": "\ndef sum(a, b):\n    def common_divisors(x, y):\n        divisors = set()\n        smaller = min(x, y)\n        for i in range(1, smaller + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.add(i)\n        return divisors\n\n    common_divs = common_divisors(a, b)\n    return sum(common_divs)\n"
    },
    {
        "task_id": 127,
        "text": "Write a function to multiply two integers without using the * operator in python.",
        "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_int(x, y):",
        "full_code": "\ndef multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0) ^ (y < 0):\n        result = -result\n    return result\n"
    },
    {
        "task_id": 128,
        "text": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def long_words(n, str):",
        "full_code": "\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "task_id": 129,
        "text": "Write a function to calculate magic square.",
        "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def magic_square_test(my_matrix):",
        "full_code": "\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n    \n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True\n"
    },
    {
        "task_id": 130,
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_occurrences(nums):",
        "full_code": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item\n"
    },
    {
        "task_id": 131,
        "text": "Write a python function to reverse only the vowels of a given string.",
        "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_vowels(str1):",
        "full_code": "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n"
    },
    {
        "task_id": 132,
        "text": "Write a function to convert tuple to a string.",
        "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tup_string(tup1):",
        "full_code": "\ndef tup_string(tup1):\n    return ''.join(map(str, tup1))\n"
    },
    {
        "task_id": 133,
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_negativenum(nums):",
        "full_code": "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "task_id": 134,
        "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "test_list": [
            "assert check_last([5,7,10],3,1) == \"ODD\"",
            "assert check_last([2,3],2,3) == \"EVEN\"",
            "assert check_last([1,2,3],3,1) == \"ODD\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_last (arr,n,p):",
        "full_code": "\ndef check_last(arr, n, p):\n    # Perform the operation p times\n    for _ in range(p):\n        # Replace the last element with the sum of all elements in the array\n        arr[-1] = sum(arr)\n    \n    # Check if the last element is even or odd\n    if arr[-1] % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "task_id": 135,
        "text": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hexagonal_num(n):",
        "full_code": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n"
    },
    {
        "task_id": 136,
        "text": "Write a function to calculate electricity bill.",
        "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "test_list": [
            "assert cal_electbill(75)==246.25",
            "assert cal_electbill(265)==1442.75",
            "assert cal_electbill(100)==327.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_electbill(units):",
        "full_code": "\ndef cal_electbill(units):\n    if units <= 100:\n        bill = units * 1.5\n    elif units <= 200:\n        bill = 100 * 1.5 + (units - 100) * 2.5\n    elif units <= 300:\n        bill = 100 * 1.5 + 100 * 2.5 + (units - 200) * 4\n    else:\n        bill = 100 * 1.5 + 100 * 2.5 + 100 * 4 + (units - 300) * 6\n    \n    return bill\n"
    },
    {
        "task_id": 137,
        "text": "Write a function to find the ration of zeroes in an array of integers.",
        "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
            "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
            "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef zero_count(nums):",
        "full_code": "\nfrom array import array\n\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    if total_count == 0:\n        return 0.0  # Avoid division by zero\n    return zero_count / total_count\n"
    },
    {
        "task_id": 138,
        "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Sum_Of_Powers_Of_Two(n):",
        "full_code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Convert the number to its binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Check if there is exactly one '1' in the binary representation\n    return binary_representation.count('1') == 1\n\n# Example usage:\n# print(is_Sum_Of_Powers_Of_Two(8))  # Output: True (8 = 2^3)\n# print(is_Sum_Of_Powers_Of_Two(10)) # Output: False (10 is not a power of 2)\n"
    },
    {
        "task_id": 139,
        "text": "Write a function to find the circumference of a circle.",
        "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "test_list": [
            "assert circle_circumference(10)==62.830000000000005",
            "assert circle_circumference(5)==31.415000000000003",
            "assert circle_circumference(4)==25.132"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def circle_circumference(r):",
        "full_code": "\ndef circle_circumference(r):\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "task_id": 140,
        "text": "Write a function to extract elements that occur singly in the given tuple list.",
        "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "test_list": [
            "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
            "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
            "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_singly(test_list):",
        "full_code": "\ndef extract_singly(test_list):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    \n    # Extract elements that occur singly\n    singly_elements = [elem for elem, count in count_dict.items() if count == 1]\n    \n    return singly_elements\n"
    },
    {
        "task_id": 141,
        "text": "Write a function to sort a list of elements using pancake sort.",
        "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pancake_sort(nums):",
        "full_code": "\ndef pancake_sort(nums):\n    def flip(arr, k):\n        start = 0\n        while start < k:\n            arr[start], arr[k] = arr[k], arr[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    while n > 1:\n        max_idx = nums.index(max(nums[:n]))\n        if max_idx != n - 1:\n            if max_idx != 0:\n                flip(nums, max_idx)\n            flip(nums, n - 1)\n        n -= 1\n    return nums\n"
    },
    {
        "task_id": 142,
        "text": "Write a function to count the same pair in three given lists.",
        "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_samepair(list1,list2,list3):",
        "full_code": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 143,
        "text": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lists(Input):",
        "full_code": "\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "task_id": 144,
        "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "test_list": [
            "assert sum_Pairs([1,8,9,15,16],5) == 74",
            "assert sum_Pairs([1,2,3,4],4) == 10",
            "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Pairs(arr,n):",
        "full_code": "\ndef sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n"
    },
    {
        "task_id": 145,
        "text": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3),4) == 4",
            "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
            "assert max_Abs_Diff((3,2,1),3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Abs_Diff(arr,n):",
        "full_code": "\ndef max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        if arr[i] > max_element:\n            max_element = arr[i]\n    \n    return max_element - min_element\n"
    },
    {
        "task_id": 146,
        "text": "Write a function to find the ascii value of total characters in a string.",
        "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "test_list": [
            "assert ascii_value_string(\"python\")==112",
            "assert ascii_value_string(\"Program\")==80",
            "assert ascii_value_string(\"Language\")==76"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value_string(str1):",
        "full_code": "\ndef ascii_value_string(str1):\n    total_ascii_value = sum(ord(char) for char in str1)\n    return total_ascii_value\n"
    },
    {
        "task_id": 147,
        "text": "Write a function to find the maximum total path sum in the given triangle.",
        "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "test_list": [
            "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
            "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
            "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_path_sum(tri, m, n):",
        "full_code": "\ndef max_path_sum(tri, m, n):\n    # Create a copy of the triangle to store the maximum sums\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Initialize the bottom row of dp with the bottom row of the triangle\n    for i in range(n):\n        dp[m-1][i] = tri[m-1][i]\n    \n    # Fill the dp array from bottom to top\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            # Update the current cell with the maximum sum possible\n            dp[i][j] = tri[i][j] + max(dp[i+1][j], dp[i+1][j+1])\n    \n    # The top element of dp will contain the maximum path sum\n    return dp[0][0]\n"
    },
    {
        "task_id": 148,
        "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_digits_single(x) :",
        "full_code": "\ndef sum_digits_single(x):\n    str_x = str(x)\n    n = len(str_x)\n    \n    # Initialize the maximum sum of digits\n    max_sum = 0\n    \n    # Iterate over possible splits\n    for i in range(1, n):\n        part1 = int(str_x[:i])\n        part2 = int(str_x[i:])\n        \n        # Calculate the sum of digits of both parts\n        sum_part1 = sum(int(digit) for digit in str(part1))\n        sum_part2 = sum(int(digit) for digit in str(part2))\n        \n        # Update the maximum sum if the current sum is greater\n        if sum_part1 + sum_part2 > max_sum:\n            max_sum = sum_part1 + sum_part2\n    \n    return max_sum\n"
    },
    {
        "task_id": 149,
        "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "test_list": [
            "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
            "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
            "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_subseq_with_diff_one(arr, n):",
        "full_code": "\ndef longest_subseq_with_diff_one(arr, n):\n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at arr[i]\n    dp = [1] * n\n    \n    # Traverse the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The length of the longest subsequence with difference between adjacents as one\n    # will be the maximum value in dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)\nprint(longest_subseq_with_diff_one(arr, n))\n"
    },
    {
        "task_id": 150,
        "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert does_Contain_B(1,7,3) == True",
            "assert does_Contain_B(1,-3,5) == False",
            "assert does_Contain_B(3,2,5) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def does_Contain_B(a,b,c):",
        "full_code": "\ndef does_Contain_B(a, b, c):\n    # a is the starting number of the infinite sequence\n    # b is the number we want to check if it is in the sequence\n    # c is the common difference of the arithmetic sequence\n    \n    # Initialize the current number in the sequence\n    current = a\n    \n    # Loop until we find b or exceed it\n    while current <= b:\n        if current == b:\n            return True\n        current += c\n    \n    return False\n"
    },
    {
        "task_id": 151,
        "text": "Write a python function to check whether the given number is co-prime or not.",
        "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "test_list": [
            "assert is_coprime(17,13) == True",
            "assert is_coprime(15,21) == False",
            "assert is_coprime(25,45) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(p,q):",
        "full_code": "\ndef gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\n# Example usage:\n# print(is_coprime(14, 15))  # Output: True\n# print(is_coprime(14, 21))  # Output: False\n"
    },
    {
        "task_id": 152,
        "text": "Write a function to sort the given array by using merge sort.",
        "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "test_list": [
            "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
            "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
            "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge(a,b):",
        "full_code": "\ndef merge(a, b):\n    merged_list = []\n    i = j = 0\n    \n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            merged_list.append(a[i])\n            i += 1\n        else:\n            merged_list.append(b[j])\n            j += 1\n    \n    merged_list.extend(a[i:])\n    merged_list.extend(b[j:])\n    \n    return merged_list\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\n# Example usage:\narr = [38, 27, 43, 3, 9, 82, 10]\nsorted_arr = merge_sort(arr)\nprint(sorted_arr)\n"
    },
    {
        "task_id": 153,
        "text": "Write a function to find the vertex of a parabola.",
        "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "test_list": [
            "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
            "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
            "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_vertex(a, b, c):",
        "full_code": "\ndef parabola_vertex(a, b, c):\n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    # Return the vertex as a tuple\n    return (x_vertex, y_vertex)\n"
    },
    {
        "task_id": 154,
        "text": "Write a function to extract every specified element from a given two dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "full_code": "\ndef specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if N < len(sublist):\n            result.append(sublist[N])\n    return result\n"
    },
    {
        "task_id": 155,
        "text": "Write a python function to toggle all even bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 0",
            "assert even_bit_toggle_number(20) == 30",
            "assert even_bit_toggle_number(30) == 20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "full_code": "\ndef even_bit_toggle_number(n):\n    # Iterate through all even bits of the number\n    for i in range(0, 32, 2):\n        # Create a mask with only the i-th bit set\n        mask = 1 << i\n        # Toggle the i-th bit\n        n ^= mask\n    return n\n"
    },
    {
        "task_id": 156,
        "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "test_list": [
            "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
            "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
            "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_int_str(tuple_str):",
        "full_code": "\ndef tuple_int_str(tuple_str):\n    tuple_int = tuple(int(item) for item in tuple_str)\n    return tuple_int\n"
    },
    {
        "task_id": 157,
        "text": "Write a function to reflect the run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "test_list": [
            "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
            "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
            "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef encode_list(list1):",
        "full_code": "\nfrom itertools import groupby\n\ndef encode_list(list1):\n    encoded_list = [(len(list(group)), key) for key, group in groupby(list1)]\n    return encoded_list\n"
    },
    {
        "task_id": 158,
        "text": "Write a python function to find k number of operations required to make all elements equal.",
        "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "test_list": [
            "assert min_Ops([2,2,2,2],4,3) == 0",
            "assert min_Ops([4,2,6,8],4,3) == -1",
            "assert min_Ops([21,33,9,45,63],5,6) == 24"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_Ops(arr,n,k):",
        "full_code": "\ndef min_Ops(arr, n, k):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Initialize the number of operations required\n    operations = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate the difference between the maximum element and the current element\n        diff = max_element - arr[i]\n        \n        # If the difference is not zero, calculate the number of operations required\n        if diff != 0:\n            operations += (diff + k - 1) // k  # This is equivalent to math.ceil(diff / k)\n    \n    return operations\n"
    },
    {
        "task_id": 159,
        "text": "Write a function to print the season for the given month and day.",
        "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "test_list": [
            "assert month_season('January',4)==('winter')",
            "assert month_season('October',28)==('autumn')",
            "assert month_season('June',6)==('spring')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def month_season(month,days):",
        "full_code": "\ndef month_season(month, days):\n    if (month == 12 and days >= 21) or (month == 1 and days <= 31) or (month == 2 and days <= 29) or (month == 3 and days < 20):\n        print(\"Winter\")\n    elif (month == 3 and days >= 20) or (month == 4 and days <= 30) or (month == 5 and days <= 31) or (month == 6 and days < 21):\n        print(\"Spring\")\n    elif (month == 6 and days >= 21) or (month == 7 and days <= 31) or (month == 8 and days <= 31) or (month == 9 and days < 22):\n        print(\"Summer\")\n    elif (month == 9 and days >= 22) or (month == 10 and days <= 31) or (month == 11 and days <= 30) or (month == 12 and days < 21):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid date\")\n"
    },
    {
        "task_id": 160,
        "text": "Write a function to find x and y that satisfies ax + by = n.",
        "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "test_list": [
            "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
            "assert solution(4, 2, 7) == 'No solution'",
            "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def solution (a, b, n):",
        "full_code": "\ndef solution(a, b, n):\n    for x in range(n // a + 1):\n        for y in range(n // b + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None\n"
    },
    {
        "task_id": 161,
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "test_list": [
            "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_elements(list1, list2):",
        "full_code": "\ndef remove_elements(list1, list2):\n    # Use list comprehension to filter out elements in list1 that are in list2\n    result = [item for item in list1 if item not in list2]\n    return result\n"
    },
    {
        "task_id": 162,
        "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_series(n):",
        "full_code": "\ndef sum_series(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total\n"
    },
    {
        "task_id": 163,
        "text": "Write a function to calculate the area of a regular polygon.",
        "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import tan, pi\r\ndef area_polygon(s,l):",
        "full_code": "\nfrom math import tan, pi\ndef area_polygon(s, l):\n    area = (s * l**2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "task_id": 164,
        "text": "Write a python function to check whether the sum of divisors are same or not.",
        "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef divSum(n):",
        "full_code": "\nimport math\n\ndef divSum(n):\n    def sum_of_divisors(num):\n        total = 1 + num  # 1 and num itself are always divisors\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                total += i\n                if i != num // i:\n                    total += num // i\n        return total\n\n    sum1 = sum_of_divisors(n)\n    sum2 = sum_of_divisors(sum1)\n\n    if sum2 == n and sum1 != n:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 165,
        "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_char_position(str1):",
        "full_code": "\ndef count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if char.isalpha():\n            if (char.islower() and ord(char) - ord('a') == i) or (char.isupper() and ord(char) - ord('A') == i):\n                count += 1\n    return count\n"
    },
    {
        "task_id": 166,
        "text": "Write a python function to count the pairs with xor as an even number.",
        "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "test_list": [
            "assert find_even_Pair([5,4,7,2,1],5) == 4",
            "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
            "assert find_even_Pair([1,2,3],3) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_even_Pair(A,N):",
        "full_code": "\ndef find_even_Pair(A, N):\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the array\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with XOR as an even number is the sum of:\n    # 1. Pairs of even numbers (even_count choose 2)\n    # 2. Pairs of odd numbers (odd_count choose 2)\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    # Total pairs with XOR as an even number\n    total_even_pairs = even_pairs + odd_pairs\n    \n    return total_even_pairs\n"
    },
    {
        "task_id": 167,
        "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "test_list": [
            "assert next_Power_Of_2(0) == 1",
            "assert next_Power_Of_2(5) == 8",
            "assert next_Power_Of_2(17) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def next_Power_Of_2(n):",
        "full_code": "\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "task_id": 168,
        "text": "Write a python function to find the frequency of a number in a given array.",
        "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "test_list": [
            "assert frequency([1,2,3],4) == 0",
            "assert frequency([1,2,2,3,3,3,4],3) == 3",
            "assert frequency([0,1,2,3,1,2],1) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency(a,x):",
        "full_code": "\ndef frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 169,
        "text": "Write a function to calculate the nth pell number.",
        "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_pell(n):",
        "full_code": "\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n"
    },
    {
        "task_id": 170,
        "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "test_list": [
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_range_list(list1, m, n):",
        "full_code": "\ndef sum_range_list(list1, m, n):\n    if m < 0 or n >= len(list1) or m > n:\n        return None\n    return sum(list1[m:n+1])\n"
    },
    {
        "task_id": 171,
        "text": "Write a function to find the perimeter of a pentagon.",
        "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "test_list": [
            "assert perimeter_pentagon(5)==25",
            "assert perimeter_pentagon(10)==50",
            "assert perimeter_pentagon(15)==75"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef perimeter_pentagon(a):",
        "full_code": "\nimport math\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "task_id": 172,
        "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_occurance(s):",
        "full_code": "\ndef count_occurance(s):\n    target = 'std'\n    count = 0\n    for i in range(len(s) - len(target) + 1):\n        if s[i:i+len(target)] == target:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 173,
        "text": "Write a function to remove everything except alphanumeric characters from a string.",
        "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "test_list": [
            "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
            "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
            "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_splchar(text):",
        "full_code": "\nimport re\ndef remove_splchar(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n"
    },
    {
        "task_id": 174,
        "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "test_list": [
            "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
            "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
            "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_keyvalue(l):",
        "full_code": "\ndef group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n"
    },
    {
        "task_id": 175,
        "text": "Write a function to verify validity of a string of parentheses.",
        "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "test_list": [
            "assert is_valid_parenthese(\"(){}[]\")==True",
            "assert is_valid_parenthese(\"()[{)}\")==False",
            "assert is_valid_parenthese(\"()\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_valid_parenthese( str1):",
        "full_code": "\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in str1:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack\n"
    },
    {
        "task_id": 176,
        "text": "Write a function to find the perimeter of a triangle.",
        "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "test_list": [
            "assert perimeter_triangle(10,20,30)==60",
            "assert perimeter_triangle(3,4,5)==12",
            "assert perimeter_triangle(25,35,45)==105"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter_triangle(a,b,c):",
        "full_code": "\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n"
    },
    {
        "task_id": 177,
        "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "test_list": [
            "assert answer(3,8) == (3,6)",
            "assert answer(2,6) == (2,4)",
            "assert answer(1,3) == (1,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def answer(L,R):",
        "full_code": "\ndef answer(L, R):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if L <= lcm(i, j) <= R:\n                return i, j\n    return None\n\n# Example usage:\n# result = answer(10, 20)\n# print(result)  # Output will be two distinct numbers whose LCM lies within the range [10, 20]\n"
    },
    {
        "task_id": 178,
        "text": "Write a function to search some literals strings in a string.",
        "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "test_list": [
            "assert string_literals(['language'],'python language')==('Matched!')",
            "assert string_literals(['program'],'python language')==('Not Matched!')",
            "assert string_literals(['python'],'programming language')==('Not Matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef string_literals(patterns,text):",
        "full_code": "\nimport re\ndef string_literals(patterns, text):\n    results = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            results.append((pattern, matches))\n    return results\n"
    },
    {
        "task_id": 179,
        "text": "Write a function to find if the given number is a keith number or not.",
        "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "test_list": [
            "assert is_num_keith(14) == True",
            "assert is_num_keith(12) == False",
            "assert is_num_keith(197) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_keith(x):",
        "full_code": "\ndef is_num_keith(x):\n    if x < 10:\n        return False\n    \n    # Convert the number to a list of its digits\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    \n    # Generate the sequence\n    while True:\n        next_term = sum(digits[-n:])\n        if next_term == x:\n            return True\n        elif next_term > x:\n            return False\n        digits.append(next_term)\n"
    },
    {
        "task_id": 180,
        "text": "Write a function to calculate distance between two points using latitude and longitude.",
        "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):",
        "full_code": "\nfrom math import radians, sin, cos, acos\n\ndef distance_lat_long(slat, slon, elat, elon):\n    # Convert latitude and longitude from degrees to radians\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    \n    # Haversine formula\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a**0.5)\n    \n    # Radius of Earth in kilometers. Use 3956 for miles\n    R = 6371\n    \n    # Calculate the distance\n    distance = R * c\n    return distance\n"
    },
    {
        "task_id": 181,
        "text": "Write a function to find the longest common prefix in the given set of strings.",
        "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "test_list": [
            "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
            "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
            "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_prefix_util(str1, str2):",
        "full_code": "\ndef common_prefix_util(str1, str2):\n    # Find the minimum length of the two strings\n    min_len = min(len(str1), len(str2))\n    # Initialize the common prefix\n    common_prefix = \"\"\n    # Loop through the characters of both strings up to the minimum length\n    for i in range(min_len):\n        # If the characters at the current position are the same, add to the common prefix\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            # If characters are different, break the loop\n            break\n    return common_prefix\n\ndef longest_common_prefix(strs):\n    # If the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    # Initialize the common prefix with the first string in the list\n    common_prefix = strs[0]\n    # Loop through the rest of the strings in the list\n    for string in strs[1:]:\n        # Update the common prefix by finding the common prefix between the current common prefix and the current string\n        common_prefix = common_prefix_util(common_prefix, string)\n        # If the common prefix becomes empty, there is no common prefix, so return it\n        if common_prefix == \"\":\n            return common_prefix\n    return common_prefix\n\n# Example usage:\n# strs = [\"flower\", \"flow\", \"flight\"]\n# print(longest_common_prefix(strs))  # Output: \"fl\"\n"
    },
    {
        "task_id": 182,
        "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "test_list": [
            "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
            "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
            "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_character(string):",
        "full_code": "\nimport re\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^\\w\\s]', string)\n    numeric = re.findall(r'\\d', string)\n    \n    print(f\"Uppercase letters: {uppercase}\")\n    print(f\"Lowercase letters: {lowercase}\")\n    print(f\"Special characters: {special_char}\")\n    print(f\"Numeric values: {numeric}\")\n"
    },
    {
        "task_id": 183,
        "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "test_list": [
            "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
            "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
            "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_pairs(arr, n, k):",
        "full_code": "\ndef count_pairs(arr, n, k):\n    # Create a set from the array to remove duplicates and allow O(1) lookups\n    arr_set = set(arr)\n    count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Check if there exists a number in the set that is num + k\n        if num + k in arr_set:\n            count += 1\n        # Check if there exists a number in the set that is num - k\n        if num - k in arr_set and k != 0:\n            count += 1\n        # Remove the current number from the set to avoid counting it again\n        arr_set.remove(num)\n    \n    return count\n"
    },
    {
        "task_id": 184,
        "text": "Write a function to find all the values in a list that are greater than a specified number.",
        "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "test_list": [
            "assert greater_specificnum([220, 330, 500],200)==True",
            "assert greater_specificnum([12, 17, 21],20)==False",
            "assert greater_specificnum([1,2,3,4],10)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def greater_specificnum(list,num):",
        "full_code": "\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n"
    },
    {
        "task_id": 185,
        "text": "Write a function to find the focus of a parabola.",
        "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "test_list": [
            "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
            "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
            "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_focus(a, b, c):",
        "full_code": "\ndef parabola_focus(a, b, c):\n    # Calculate the x-coordinate of the focus\n    x_focus = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the focus\n    y_focus = (1 - (b**2 - 4 * a * c)) / (4 * a)\n    \n    # Return the focus as a tuple\n    return (x_focus, y_focus)\n"
    },
    {
        "task_id": 186,
        "text": "Write a function to search some literals strings in a string by using regex.",
        "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "test_list": [
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef check_literals(text, patterns):",
        "full_code": "\nimport re\ndef check_literals(text, patterns):\n    results = {}\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            results[pattern] = matches\n    return results\n"
    },
    {
        "task_id": 187,
        "text": "Write a function to find the longest common subsequence for the given two sequences.",
        "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "test_list": [
            "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
            "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
            "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_common_subsequence(X, Y, m, n):",
        "full_code": "\ndef longest_common_subsequence(X, Y, m, n):\n    # Create a 2D array to store lengths of longest common subsequence.\n    L = [[0] * (n + 1) for i in range(m + 1)]\n\n    # Build the L[m+1][n+1] in bottom-up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Following code is used to print LCS\n    index = L[m][n]\n\n    # Create a character array to store the lcs string\n    lcs = [''] * (index + 1)\n    lcs[index] = ''\n\n    # Start from the right-most-bottom-most corner and\n    # one by one store characters in lcs[]\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        # If current character in X[] and Y are same, then\n        # current character is part of LCS\n        if X[i - 1] == Y[j - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n\n        # If not same, then find the larger of two and\n        # go in the direction of larger value\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Print the LCS\n    print(\"\".join(lcs))\n\n# Example usage:\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nlongest_common_subsequence(X, Y, m, n)\n"
    },
    {
        "task_id": 188,
        "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "test_list": [
            "assert prod_Square(25) == False",
            "assert prod_Square(30) == False",
            "assert prod_Square(16) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def prod_Square(n):",
        "full_code": "\ndef prod_square(n):\n    def is_perfect_square(x):\n        return int(x**0.5)**2 == x\n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            if is_perfect_square(i) and is_perfect_square(j):\n                return True\n    return False\n"
    },
    {
        "task_id": 189,
        "text": "Write a python function to find the first missing positive number.",
        "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "test_list": [
            "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
            "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
            "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Missing_Positive(arr,n):",
        "full_code": "\ndef first_Missing_Positive(arr, n):\n    # Mark elements that are out of range and check one existance\n    contains_one = False\n    for i in range(n):\n        if arr[i] == 1:\n            contains_one = True\n        elif arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    \n    if not contains_one:\n        return 1\n    \n    # Map elements to their respective index and mark them negative\n    for i in range(n):\n        index = abs(arr[i]) - 1\n        if arr[index] > 0:\n            arr[index] = -arr[index]\n    \n    # Find the first positive number\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    \n    # If all numbers from 1 to n are present, return n + 1\n    return n + 1\n"
    },
    {
        "task_id": 190,
        "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "test_list": [
            "assert count_Intgral_Points(1,1,4,4) == 4",
            "assert count_Intgral_Points(1,2,1,2) == 1",
            "assert count_Intgral_Points(4,2,6,4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Intgral_Points(x1,y1,x2,y2):",
        "full_code": "\ndef count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the side length of the square\n    side_length = max(abs(x2 - x1), abs(y2 - y1))\n    \n    # Calculate the number of integral points along one side of the square\n    integral_points_on_side = side_length + 1\n    \n    # The total number of integral points inside the square is the area of the square\n    total_integral_points = integral_points_on_side ** 2\n    \n    return total_integral_points\n"
    },
    {
        "task_id": 191,
        "text": "Write a function to check whether the given month name contains 30 days or not.",
        "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumber(\"February\")==False",
            "assert check_monthnumber(\"June\")==True",
            "assert check_monthnumber(\"April\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumber(monthname3):",
        "full_code": "\ndef check_monthnumber(monthname3):\n    # List of months with 30 days\n    months_with_30_days = [\"apr\", \"jun\", \"sep\", \"nov\"]\n    \n    # Convert the input month name to lowercase and check if it is in the list\n    if monthname3.lower() in months_with_30_days:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 192,
        "text": "Write a python function to check whether a string has atleast one letter and one number.",
        "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "test_list": [
            "assert check_String('thishasboth29') == True",
            "assert check_String('python') == False",
            "assert check_String ('string') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_String(str):",
        "full_code": "\ndef check_String(str):\n    has_letter = any(c.isalpha() for c in str)\n    has_number = any(c.isdigit() for c in str)\n    return has_letter and has_number\n"
    },
    {
        "task_id": 193,
        "text": "Write a function to remove the duplicates from the given tuple.",
        "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "test_list": [
            "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
            "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
            "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuple(test_tup):",
        "full_code": "\ndef remove_tuple(test_tup):\n    # Convert the tuple to a set to remove duplicates\n    unique_elements = set(test_tup)\n    # Convert the set back to a tuple\n    unique_tuple = tuple(unique_elements)\n    return unique_tuple\n"
    },
    {
        "task_id": 194,
        "text": "Write a python function to convert octal number to decimal number.",
        "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def octal_To_Decimal(n):",
        "full_code": "\ndef octal_To_Decimal(n):\n    decimal_value = 0\n    base = 1\n    \n    while n:\n        last_digit = n % 10\n        n = int(n / 10)\n        decimal_value += last_digit * base\n        base = base * 8\n    \n    return decimal_value\n"
    },
    {
        "task_id": 195,
        "text": "Write a python function to find the first position of an element in a sorted array.",
        "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "test_list": [
            "assert first([1,2,3,4,5,6,6],6,6) == 5",
            "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
            "assert first([1,2,3],1,3) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first(arr,x,n):",
        "full_code": "\ndef first(arr, x, n):\n    low, high = 0, n - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1  # Look in the left subarray for the first occurrence\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n"
    },
    {
        "task_id": 196,
        "text": "Write a function to remove all the tuples with length k.",
        "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "test_list": [
            "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
            "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
            "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuples(test_list, K):",
        "full_code": "\ndef remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]\n"
    },
    {
        "task_id": 197,
        "text": "Write a function to perform the exponentiation of the given two tuples.",
        "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "test_list": [
            "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
            "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
            "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_exponentio(test_tup1, test_tup2):",
        "full_code": "\ndef find_exponentio(test_tup1, test_tup2):\n    result = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "task_id": 198,
        "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "test_list": [
            "assert largest_triangle(4,2)==10.392304845413264",
            "assert largest_triangle(5,7)==4.639421805988064",
            "assert largest_triangle(9,1)==105.2220865598093"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef largest_triangle(a,b):",
        "full_code": "\nimport math\n\ndef largest_triangle(a, b):\n    # Calculate the semi-major and semi-minor axes\n    semi_major = max(a, b)\n    semi_minor = min(a, b)\n    \n    # The area of the largest triangle inscribed in an ellipse is given by:\n    # Area = 3 * sqrt(3) * semi_major * semi_minor / 4\n    area = (3 * math.sqrt(3) * semi_major * semi_minor) / 4\n    \n    # The vertices of the largest inscribed triangle can be found at:\n    # (a * cos(theta1), b * sin(theta1)), (a * cos(theta2), b * sin(theta2)), (a * cos(theta3), b * sin(theta3))\n    # where theta1, theta2, and theta3 are 0, 2*pi/3, and 4*pi/3 respectively.\n    \n    theta1 = 0\n    theta2 = 2 * math.pi / 3\n    theta3 = 4 * math.pi / 3\n    \n    vertex1 = (a * math.cos(theta1), b * math.sin(theta1))\n    vertex2 = (a * math.cos(theta2), b * math.sin(theta2))\n    vertex3 = (a * math.cos(theta3), b * math.sin(theta3))\n    \n    return area, (vertex1, vertex2, vertex3)\n\n# Example usage:\n# area, vertices = largest_triangle(5, 3)\n# print(\"Area of the largest inscribed triangle:\", area)\n# print(\"Vertices of the largest inscribed triangle:\", vertices)\n"
    },
    {
        "task_id": 199,
        "text": "Write a python function to find highest power of 2 less than or equal to given number.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "full_code": "\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power\n"
    },
    {
        "task_id": 200,
        "text": "Write a function to find all index positions of the maximum values in a given list.",
        "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "test_list": [
            "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
            "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
            "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_max(list1):",
        "full_code": "\ndef position_max(list1):\n    max_value = max(list1)\n    positions = [index for index, value in enumerate(list1) if value == max_value]\n    return positions\n"
    },
    {
        "task_id": 201,
        "text": "Write a python function to check whether the elements in a list are same or not.",
        "code": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "test_list": [
            "assert chkList(['one','one','one']) == True",
            "assert chkList(['one','Two','Three']) == False",
            "assert chkList(['bigdata','python','Django']) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def chkList(lst):",
        "full_code": "\ndef chkList(lst):\n    if len(lst) == 0:\n        return True\n    return all(x == lst[0] for x in lst)\n"
    },
    {
        "task_id": 202,
        "text": "Write a function to remove even characters in a string.",
        "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_even(\"python\")==(\"pto\")",
            "assert remove_even(\"program\")==(\"porm\")",
            "assert remove_even(\"language\")==(\"lnug\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_even(str1):",
        "full_code": "\ndef remove_even(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 != 0:\n            result += str1[i]\n    return result\n"
    },
    {
        "task_id": 203,
        "text": "Write a python function to find the hamming distance between given two integers.",
        "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "test_list": [
            "assert hamming_Distance(4,8) == 2",
            "assert hamming_Distance(2,4) == 2",
            "assert hamming_Distance(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hamming_Distance(n1,n2) :",
        "full_code": "\ndef hamming_Distance(n1, n2):\n    # Convert integers to binary strings\n    bin1 = bin(n1)[2:]\n    bin2 = bin(n2)[2:]\n    \n    # Pad the shorter binary string with leading zeros\n    max_len = max(len(bin1), len(bin2))\n    bin1 = bin1.zfill(max_len)\n    bin2 = bin2.zfill(max_len)\n    \n    # Calculate the Hamming distance\n    distance = sum(bit1 != bit2 for bit1, bit2 in zip(bin1, bin2))\n    \n    return distance\n"
    },
    {
        "task_id": 204,
        "text": "Write a python function to count the occurrence of a given character in a string.",
        "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "test_list": [
            "assert count(\"abcc\",\"c\") == 2",
            "assert count(\"ababca\",\"a\") == 3",
            "assert count(\"mnmm0pm\",\"m\") == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(s,c) :",
        "full_code": "\ndef count(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 205,
        "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "test_list": [
            "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
            "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
            "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def inversion_elements(test_tup):",
        "full_code": "\ndef inversion_elements(test_tup):\n    # Convert the tuple to a list for easier manipulation\n    test_list = list(test_tup)\n    \n    # Iterate through the list and invert each element\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][::-1]\n    \n    # Convert the list back to a tuple\n    inverted_tup = tuple(test_list)\n    \n    return inverted_tup\n"
    },
    {
        "task_id": 206,
        "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
            "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
            "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(test_tup):",
        "full_code": "\ndef concatenate_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)\n"
    },
    {
        "task_id": 207,
        "text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "test_list": [
            "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
            "assert find_longest_repeating_subseq(\"aabb\") == 2",
            "assert find_longest_repeating_subseq(\"aab\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_longest_repeating_subseq(str):",
        "full_code": "\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n"
    },
    {
        "task_id": 208,
        "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "test_list": [
            "assert is_decimal('123.11') == True",
            "assert is_decimal('0.21') == True",
            "assert is_decimal('123.1214') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_decimal(num):",
        "full_code": "\nimport re\ndef is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n"
    },
    {
        "task_id": 209,
        "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "test_list": [
            "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_replace(heap,a):",
        "full_code": "\nimport heapq as hq\n\ndef heap_replace(heap, a):\n    if heap:\n        hq.heapreplace(heap, a)\n    else:\n        hq.heappush(heap, a)\n"
    },
    {
        "task_id": 210,
        "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "test_list": [
            "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
            "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
            "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_allowed_specific_char(string):",
        "full_code": "\nimport re\ndef is_allowed_specific_char(string):\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\n    return bool(pattern.match(string))\n"
    },
    {
        "task_id": 211,
        "text": "Write a python function to count numbers whose oth and nth bits are set.",
        "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "test_list": [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Num(n):",
        "full_code": "\ndef count_Num(n):\n    count = 0\n    for i in range(1 << n):\n        if (i & 1) and (i & (1 << (n - 1))):\n            count += 1\n    return count\n"
    },
    {
        "task_id": 212,
        "text": "Write a python function to find the sum of fourth power of n natural numbers.",
        "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "test_list": [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef fourth_Power_Sum(n):",
        "full_code": "\nimport math  \ndef fourth_Power_Sum(n):\n    sum_of_fourth_powers = 0\n    for i in range(1, n + 1):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n"
    },
    {
        "task_id": 213,
        "text": "Write a function to perform the concatenation of two string tuples.",
        "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_strings(test_tup1, test_tup2):",
        "full_code": "\ndef concatenate_strings(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "task_id": 214,
        "text": "Write a function to convert radians to degrees.",
        "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef degree_radian(radian):",
        "full_code": "\nimport math\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree\n"
    },
    {
        "task_id": 215,
        "text": "Write a function to decode a run-length encoded given list.",
        "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "test_list": [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decode_list(alist):",
        "full_code": "\ndef decode_list(alist):\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i]] * alist[i + 1])\n    return decoded_list\n"
    },
    {
        "task_id": 216,
        "text": "Write a function to check if a nested list is a subset of another nested list.",
        "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "test_list": [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_subset_list(list1, list2):",
        "full_code": "\ndef check_subset_list(list1, list2):\n    def is_subset(sublist, superlist):\n        if isinstance(sublist, list) and isinstance(superlist, list):\n            for item in sublist:\n                if not any(is_subset(item, s) for s in superlist):\n                    return False\n            return True\n        else:\n            return sublist in superlist\n\n    return is_subset(list1, list2)\n"
    },
    {
        "task_id": 217,
        "text": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "test_list": [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Repeated_Char(str):",
        "full_code": "\ndef first_Repeated_Char(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n"
    },
    {
        "task_id": 218,
        "text": "Write a python function to find the minimum operations required to make two numbers equal.",
        "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "test_list": [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math   \r\ndef min_Operations(A,B):",
        "full_code": "\nimport math\n\ndef min_Operations(A, B):\n    if A == B:\n        return 0\n    \n    operations = 0\n    \n    while A != B:\n        if A < B:\n            A, B = B, A\n        \n        gcd_AB = math.gcd(A, B)\n        if gcd_AB > 1:\n            A //= gcd_AB\n            B //= gcd_AB\n        else:\n            A -= B\n        \n        operations += 1\n    \n    return operations\n"
    },
    {
        "task_id": 219,
        "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "test_list": [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "\r\ndef extract_min_max(test_tup, K):",
        "full_code": "\ndef extract_min_max(test_tup, K):\n    # Convert tuple to list to allow modifications\n    test_list = list(test_tup)\n    \n    # Sort the list to easily extract min and max elements\n    test_list.sort()\n    \n    # Extract the minimum K elements\n    min_elements = test_list[:K]\n    \n    # Extract the maximum K elements\n    max_elements = test_list[-K:]\n    \n    # Return the results as a tuple\n    return (min_elements, max_elements)\n\n# Example usage:\ntest_tup = (5, 2, 7, 1, 8, 3, 9, 4, 6)\nK = 3\nresult = extract_min_max(test_tup, K)\nprint(result)\n"
    },
    {
        "task_id": 220,
        "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "test_list": [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef replace_max_specialchar(text,n):",
        "full_code": "\nimport re\ndef replace_max_specialchar(text, n):\n    pattern = r'[ ,.]'\n    replacement = ':'\n    result = re.sub(pattern, replacement, text, count=n)\n    return result\n"
    },
    {
        "task_id": 221,
        "text": "Write a python function to find the first even number in a given list of numbers.",
        "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "test_list": [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_even(nums):",
        "full_code": "\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"
    },
    {
        "task_id": 222,
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_type(test_tuple):",
        "full_code": "\ndef check_type(test_tuple):\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all(isinstance(item, first_type) for item in test_tuple)\n"
    },
    {
        "task_id": 223,
        "text": "Write a function to check for majority element in the given sorted array.",
        "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_majority(arr, n, x):",
        "full_code": "\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x\n    first_index = -1\n    low, high = 0, n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If x is not present in the array\n    if first_index == -1:\n        return False\n    \n    # Check if x is the majority element\n    if first_index + n // 2 < n and arr[first_index + n // 2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 224,
        "text": "Write a python function to count set bits of a given number.",
        "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Set_Bits(n):",
        "full_code": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "task_id": 225,
        "text": "Write a python function to find the minimum element in a sorted and rotated array.",
        "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "test_list": [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Min(arr,low,high):",
        "full_code": "\ndef find_Min(arr, low, high):\n    # This condition is needed to handle the case when array is not rotated at all\n    if high < low:\n        return arr[0]\n\n    # If there is only one element left\n    if high == low:\n        return arr[low]\n\n    # Find mid\n    mid = low + (high - low) // 2\n\n    # Check if element (mid+1) is minimum element. Consider the cases like [3, 4, 5, 1, 2]\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n\n    # Check if mid itself is minimum element\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    # Decide whether we need to go to left half or right half\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n"
    },
    {
        "task_id": 226,
        "text": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_values_string(str):",
        "full_code": "\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "task_id": 227,
        "text": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_of_three(a,b,c):",
        "full_code": "\ndef min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "task_id": 228,
        "text": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):",
        "full_code": "\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with all bits set in the given range\n    mask = ((1 << (r - l + 1)) - 1) << l\n    \n    # Check if all bits in the given range are unset in n\n    if (n & mask) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 229,
        "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_arrange_array(arr, n):",
        "full_code": "\ndef re_arrange_array(arr, n):\n    # Initialize two pointers: one for negative elements and one for positive elements\n    neg = 0\n    pos = n - 1\n    \n    # Traverse the array and swap elements to place negatives before positives\n    while neg <= pos:\n        # If the current element is negative, move the negative pointer forward\n        if arr[neg] < 0:\n            neg += 1\n        # If the current element is positive, swap it with the element at the positive pointer\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            pos -= 1\n    \n    return arr\n\n# Example usage:\narr = [1, -2, 3, -4, 5, -6]\nn = len(arr)\nprint(re_arrange_array(arr, n))\n"
    },
    {
        "task_id": 230,
        "text": "Write a function to replace blank spaces with any character in a string.",
        "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_blank(str1,char):",
        "full_code": "\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)\n"
    },
    {
        "task_id": 231,
        "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "test_list": [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(tri, n):",
        "full_code": "\ndef max_sum(tri, n):\n    # Create a copy of the triangle to store the maximum sums\n    dp = [row[:] for row in tri]\n    \n    # Start from the second last row and move upwards\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # Update the current element with the maximum sum possible\n            dp[i][j] += max(dp[i+1][j], dp[i+1][j+1])\n    \n    # The top element now contains the maximum sum\n    return dp[0][0]\n"
    },
    {
        "task_id": 232,
        "text": "Write a function to get the n largest items from a dataset.",
        "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "test_list": [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef larg_nnum(list1,n):",
        "full_code": "\nimport heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "task_id": 233,
        "text": "Write a function to find the lateral surface area of a cylinder.",
        "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "test_list": [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsuface_cylinder(r,h):",
        "full_code": "\ndef lateralsurface_cylinder(r, h):\n    import math\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n"
    },
    {
        "task_id": 234,
        "text": "Write a function to find the volume of a cube.",
        "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cube(l):",
        "full_code": "\ndef volume_cube(l):\n    volume = l ** 3\n    return volume\n"
    },
    {
        "task_id": 235,
        "text": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_set_number(n):",
        "full_code": "\ndef even_bit_set_number(n):\n    # Set all even bits to 1\n    for i in range(0, 32, 2):\n        n |= (1 << i)\n    return n\n"
    },
    {
        "task_id": 236,
        "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "test_list": [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def No_of_Triangle(N,K):",
        "full_code": "\ndef No_of_Triangle(N, K):\n    # N is the size of the larger equilateral triangle\n    # K is the size of the smaller equilateral triangles we want to count\n    \n    # Base case: if K is larger than N, no triangles can be formed\n    if K > N:\n        return 0\n    \n    # Calculate the number of K-sized triangles that can fit in an N-sized triangle\n    # This is a combinatorial problem where we need to count the number of ways\n    # to choose K rows from N rows, where each row can have K triangles.\n    \n    # The number of K-sized triangles that can fit in an N-sized triangle is given by:\n    # (N - K + 1) * (N - K + 2) / 2\n    \n    # Calculate the number of rows available for K-sized triangles\n    rows_available = N - K + 1\n    \n    # Calculate the number of K-sized triangles that can fit in these rows\n    num_triangles = (rows_available * (rows_available + 1)) // 2\n    \n    return num_triangles\n\n# Example usage:\n# print(No_of_Triangle(5, 2))  # Output should be 6\n"
    },
    {
        "task_id": 237,
        "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef check_occurences(test_list):",
        "full_code": "\nfrom collections import Counter \ndef check_occurences(test_list):\n    # Count the occurrences of each tuple\n    tuple_counts = Counter(test_list)\n    \n    # Find tuples that occur more than once\n    repeated_tuples = {tuple_: count for tuple_, count in tuple_counts.items() if count > 1}\n    \n    # Return the result\n    return repeated_tuples\n"
    },
    {
        "task_id": 238,
        "text": "Write a python function to count number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def number_of_substrings(str):",
        "full_code": "\ndef number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2\n"
    },
    {
        "task_id": 239,
        "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_total_number_of_sequences(m,n):",
        "full_code": "\ndef get_total_number_of_sequences(m, n):\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        count = 0\n        for next_val in range(2 * current, m + 1):\n            count += count_sequences(next_val, length + 1)\n        return count\n    \n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    \n    return total_sequences\n"
    },
    {
        "task_id": 240,
        "text": "Write a function to replace the last element of the list with another list.",
        "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_list(list1,list2):",
        "full_code": "\ndef replace_list(list1, list2):\n    if list1:\n        list1[-1] = list2\n    return list1\n"
    },
    {
        "task_id": 241,
        "text": "Write a function to generate a 3d array having each element as '*'.",
        "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "test_list": [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def array_3d(m,n,o):",
        "full_code": "\ndef array_3d(m, n, o):\n    return [['*' for _ in range(o)] for _ in range(n)] for _ in range(m)\n"
    },
    {
        "task_id": 242,
        "text": "Write a function to count total characters in a string.",
        "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_charac(str1):",
        "full_code": "\ndef count_charac(str1):\n    return len(str1)\n"
    },
    {
        "task_id": 243,
        "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "test_list": [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_on_occurence(lst):",
        "full_code": "\ndef sort_on_occurrence(lst):\n    # Create a dictionary to count the occurrences of each first element\n    count_dict = {}\n    for tup in lst:\n        first_elem = tup[0]\n        if first_elem in count_dict:\n            count_dict[first_elem] += 1\n        else:\n            count_dict[first_elem] = 1\n    \n    # Sort the list based on the occurrence of the first element\n    sorted_lst = sorted(lst, key=lambda x: count_dict[x[0]])\n    \n    return sorted_lst\n"
    },
    {
        "task_id": 244,
        "text": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef next_Perfect_Square(N):",
        "full_code": "\nimport math  \ndef next_Perfect_Square(N):\n    # Find the next integer greater than N\n    next_int = N + 1\n    \n    # Find the smallest integer whose square is greater than N\n    while math.isqrt(next_int) ** 2 != next_int:\n        next_int += 1\n    \n    return next_int\n"
    },
    {
        "task_id": 245,
        "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(arr, n):",
        "full_code": "\ndef max_sum(arr, n):\n    if n == 0:\n        return 0\n\n    # Arrays to store the increasing and decreasing sequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill the increasing sequence array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Fill the decreasing sequence array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum sum of bi-tonic sub-sequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n"
    },
    {
        "task_id": 246,
        "text": "Write a function for computing square roots using the babylonian method.",
        "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def babylonian_squareroot(number):",
        "full_code": "\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        better_guess = (guess + number / guess) / 2.0\n        if abs(guess - better_guess) < tolerance:\n            return better_guess\n        guess = better_guess\n"
    },
    {
        "task_id": 247,
        "text": "Write a function to find the longest palindromic subsequence in the given string.",
        "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lps(str):",
        "full_code": "\ndef lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    dp = [[0] * n for _ in range(n)]\n    \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/).\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # The longest palindromic subsequence length is stored in dp[0][n-1]\n    return dp[0][n - 1]\n"
    },
    {
        "task_id": 248,
        "text": "Write a function to calculate the harmonic sum of n-1.",
        "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def harmonic_sum(n):",
        "full_code": "\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)\n"
    },
    {
        "task_id": 249,
        "text": "Write a function to find the intersection of two arrays using lambda function.",
        "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_array(array_nums1,array_nums2):",
        "full_code": "\ndef intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))\n"
    },
    {
        "task_id": 250,
        "text": "Write a python function to count the occcurences of an element in a tuple.",
        "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_X(tup, x):",
        "full_code": "\ndef count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 251,
        "text": "Write a function to insert an element before each element of a list.",
        "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def insert_element(list,element):",
        "full_code": "\ndef insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "task_id": 252,
        "text": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath  \r\ndef convert(numbers):",
        "full_code": "\nimport cmath  \ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append(polar)\n    return polar_coordinates\n"
    },
    {
        "task_id": 253,
        "text": "Write a python function to count integers from a given list.",
        "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_integer(list1):",
        "full_code": "\ndef count_integer(list1):\n    integer_count = 0\n    for item in list1:\n        if isinstance(item, int):\n            integer_count += 1\n    return integer_count\n"
    },
    {
        "task_id": 254,
        "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "test_list": [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef words_ae(text):",
        "full_code": "\nimport re\ndef words_ae(text):\n    words = re.findall(r'\\b[aeAE]\\w+', text)\n    return words\n"
    },
    {
        "task_id": 255,
        "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):",
        "full_code": "\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "task_id": 256,
        "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Primes_nums(n):",
        "full_code": "\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Use the Sieve of Eratosthenes algorithm\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)\n"
    },
    {
        "task_id": 257,
        "text": "Write a function to swap two numbers.",
        "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_numbers(a,b):",
        "full_code": "\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n"
    },
    {
        "task_id": 258,
        "text": "Write a function to find number of odd elements in the given list using lambda function.",
        "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "test_list": [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_odd(array_nums):",
        "full_code": "\ndef count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"
    },
    {
        "task_id": 259,
        "text": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximize_elements(test_tup1, test_tup2):",
        "full_code": "\ndef maximize_elements(test_tup1, test_tup2):\n    # Ensure both tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length\")\n    \n    # Create a new tuple with the maximum elements from each tuple\n    max_tuple = tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n    \n    return max_tuple\n"
    },
    {
        "task_id": 260,
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test_list": [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def newman_prime(n):",
        "full_code": "\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    \n    # Initialize the first two Newman-Shanks-Williams primes\n    ns_primes = [1, 7]\n    \n    # Generate the next Newman-Shanks-Williams primes until we reach the nth one\n    for i in range(2, n):\n        next_prime = 2 * ns_primes[-1] + ns_primes[-2]\n        ns_primes.append(next_prime)\n    \n    return ns_primes[-1]\n"
    },
    {
        "task_id": 261,
        "text": "Write a function to perform mathematical division operation across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def division_elements(test_tup1, test_tup2):",
        "full_code": "\ndef division_elements(test_tup1, test_tup2):\n    # Ensure both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Perform element-wise division\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n"
    },
    {
        "task_id": 262,
        "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def split_two_parts(list1, L):",
        "full_code": "\ndef split_two_parts(list1, L):\n    if L > len(list1):\n        raise ValueError(\"The length of the first part cannot be greater than the length of the list.\")\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2\n"
    },
    {
        "task_id": 263,
        "text": "Write a function to merge two dictionaries.",
        "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "test_list": [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge_dict(d1,d2):",
        "full_code": "\ndef merge_dict(d1, d2):\n    merged = d1.copy()\n    merged.update(d2)\n    return merged\n"
    },
    {
        "task_id": 264,
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dog_age(h_age):",
        "full_code": "\ndef dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "task_id": 265,
        "text": "Write a function to split a list for every nth element.",
        "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_split(S, step):",
        "full_code": "\ndef list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "task_id": 266,
        "text": "Write a function to find the lateral surface area of a cube.",
        "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cube(l):",
        "full_code": "\ndef lateralsurface_cube(l):\n    return 4 * l * l\n"
    },
    {
        "task_id": 267,
        "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "full_code": "\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "task_id": 268,
        "text": "Write a function to find the n'th star number.",
        "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_star_num(n):",
        "full_code": "\ndef find_star_num(n):\n    return 6 * n * (n - 1) // 2 + 1\n"
    },
    {
        "task_id": 269,
        "text": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value(k):",
        "full_code": "\ndef ascii_value(k):\n    return ord(k)\n"
    },
    {
        "task_id": 270,
        "text": "Write a python function to find the sum of even numbers at even positions.",
        "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_even_and_even_index(arr,n):",
        "full_code": "\ndef sum_even_and_even_index(arr, n):\n    total_sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n"
    },
    {
        "task_id": 271,
        "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_Power_Sum(n):",
        "full_code": "\ndef even_Power_Sum(n):\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_powers += even_number ** 5\n    return sum_of_powers\n"
    },
    {
        "task_id": 272,
        "text": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rear_extract(test_list):",
        "full_code": "\ndef rear_extract(test_list):\n    return [item[-1] for item in test_list]\n"
    },
    {
        "task_id": 273,
        "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def substract_elements(test_tup1, test_tup2):",
        "full_code": "\ndef substract_elements(test_tup1, test_tup2):\n    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "task_id": 274,
        "text": "Write a python function to find sum of even index binomial coefficients.",
        "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef even_binomial_Coeff_Sum( n):",
        "full_code": "\nimport math  \ndef even_binomial_Coeff_Sum(n):\n    sum_even_index = 0\n    for k in range(0, n+1, 2):\n        sum_even_index += math.comb(n, k)\n    return sum_even_index\n"
    },
    {
        "task_id": 275,
        "text": "Write a python function to find the position of the last removed element from the given array.",
        "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "test_list": [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math as mt \r\ndef get_Position(a,n,m):",
        "full_code": "\nimport math as mt \ndef get_Position(a,n,m):\n    # Calculate the position of the last removed element\n    position = (m - 1) % n\n    return position\n"
    },
    {
        "task_id": 276,
        "text": "Write a function to find the volume of a cylinder.",
        "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "test_list": [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cylinder(r,h):",
        "full_code": "\ndef volume_cylinder(r, h):\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "task_id": 277,
        "text": "Write a function to filter a dictionary based on values.",
        "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_filter(dict,n):",
        "full_code": "\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value > n}\n"
    },
    {
        "task_id": 278,
        "text": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_first_elements(test_tup):",
        "full_code": "\ndef count_first_elements(test_tup):\n    if not test_tup:\n        return 0\n    \n    record = test_tup[0]\n    count = 0\n    \n    for element in test_tup:\n        if element == record:\n            count += 1\n        else:\n            break\n    \n    return count\n"
    },
    {
        "task_id": 279,
        "text": "Write a function to find the nth decagonal number.",
        "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_decagonal(n):",
        "full_code": "\ndef is_num_decagonal(n):\n    # Formula for the nth decagonal number: D(n) = 4n^2 - 3n\n    decagonal_number = 4 * n**2 - 3 * n\n    return decagonal_number\n"
    },
    {
        "task_id": 280,
        "text": "Write a function to search an element in the given array by using sequential search.",
        "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequential_search(dlist, item):",
        "full_code": "\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n"
    },
    {
        "task_id": 281,
        "text": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_unique(test_list):",
        "full_code": "\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "task_id": 282,
        "text": "Write a function to substaract two lists using map and lambda function.",
        "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sub_list(nums1,nums2):",
        "full_code": "\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))\n"
    },
    {
        "task_id": 283,
        "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def validate(n):",
        "full_code": "\ndef validate(n):\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    frequency = {}\n    \n    # Count the frequency of each digit\n    for digit in str_n:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        if count > int(digit):\n            return False\n    \n    return True\n"
    },
    {
        "task_id": 284,
        "text": "Write a function to check whether all items of a list are equal to a given string.",
        "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_element(list,element):",
        "full_code": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n"
    },
    {
        "task_id": 285,
        "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_two_three(text):",
        "full_code": "\nimport re\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return \"Match found!\"\n    else:\n        return \"No match\"\n"
    },
    {
        "task_id": 286,
        "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sub_array_sum_repeated(a, n, k):",
        "full_code": "\ndef max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Case 1: If k == 1, apply Kadane's algorithm on the original array\n    if k == 1:\n        return kadane(a)\n\n    # Case 2: If k > 1, create a new array by repeating the original array k times\n    repeated_array = a * k\n    max_sum = kadane(repeated_array)\n\n    # Case 3: If the sum of the original array is positive, consider the contribution of the repeated parts\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_sum += total_sum * (k - 2)\n\n    return max_sum\n"
    },
    {
        "task_id": 287,
        "text": "Write a python function to find the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "full_code": "\ndef square_sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n"
    },
    {
        "task_id": 288,
        "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def modular_inverse(arr, N, P):",
        "full_code": "\ndef modular_inverse(arr, N, P):\n    def mod_inverse(a, p):\n        # Using Fermat's Little Theorem to find modular inverse\n        return pow(a, p - 2, p)\n\n    count = 0\n    for num in arr:\n        if mod_inverse(num, P) == num:\n            count += 1\n    \n    return count\n"
    },
    {
        "task_id": 289,
        "text": "Write a python function to calculate the number of odd days in a given year.",
        "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "test_list": [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Days(N):",
        "full_code": "\ndef odd_Days(N):\n    # Calculate the number of odd days in the given year N\n    # An odd day is a day that is not a multiple of 7\n    \n    # Number of days in a year\n    days_in_year = 365\n    \n    # Calculate the number of odd days\n    odd_days = days_in_year % 7\n    \n    return odd_days\n\n# Example usage:\n# print(odd_Days(2023))  # Output will be 1, as 2023 is not a leap year\n"
    },
    {
        "task_id": 290,
        "text": "Write a function to find the list of lists with maximum length.",
        "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length(list1):",
        "full_code": "\ndef max_length(list1):\n    if not list1:\n        return []\n    \n    max_len = max(len(sublist) for sublist in list1)\n    result = [sublist for sublist in list1 if len(sublist) == max_len]\n    \n    return result\n"
    },
    {
        "task_id": 291,
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_no_of_ways(n, k):",
        "full_code": "\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize the number of ways to paint the first two posts\n    same = k  # Number of ways to paint the first two posts the same color\n    diff = k * (k - 1)  # Number of ways to paint the first two posts different colors\n    \n    for i in range(3, n + 1):\n        # Calculate the number of ways to paint the current post\n        same, diff = diff, (same + diff) * (k - 1)\n    \n    # The total number of ways is the sum of ways to paint the last two posts\n    return same + diff\n\n# Example usage:\n# n = 3 (number of posts)\n# k = 2 (number of colors)\n# print(count_no_of_ways(n, k))  # Output: 6\n"
    },
    {
        "task_id": 292,
        "text": "Write a python function to find quotient of two numbers.",
        "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "full_code": "\ndef find(n, m):\n    quotient = n // m\n    print(quotient)\n"
    },
    {
        "task_id": 293,
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef otherside_rightangle(w,h):",
        "full_code": "\nimport math\ndef otherside_rightangle(w, h):\n    # Calculate the third side using the Pythagorean theorem\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n"
    },
    {
        "task_id": 294,
        "text": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_val(listval):",
        "full_code": "\ndef max_val(listval):\n    def compare(a, b):\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return a if a > b else b\n        elif isinstance(a, str) and isinstance(b, str):\n            return a if a > b else b\n        elif isinstance(a, (int, float)) and isinstance(b, str):\n            return a\n        elif isinstance(a, str) and isinstance(b, (int, float)):\n            return b\n        else:\n            raise ValueError(\"Unsupported types for comparison\")\n\n    if not listval:\n        return None\n\n    max_value = listval[0]\n    for item in listval[1:]:\n        max_value = compare(max_value, item)\n\n    return max_value\n"
    },
    {
        "task_id": 295,
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_div(number):",
        "full_code": "\ndef sum_div(number):\n    if number < 1:\n        return 0\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "task_id": 296,
        "text": "Write a python function to count inversions in an array.",
        "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Inv_Count(arr,n):",
        "full_code": "\ndef get_Inv_Count(arr, n):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                # There are mid - i inversions, because all remaining elements in the left subarray (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        # Copy the remaining elements of left subarray, if any\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of right subarray, if any\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        # Copy the sorted subarray into Original array\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    # Create a temporary array\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)\n"
    },
    {
        "task_id": 297,
        "text": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def flatten_list(list1):",
        "full_code": "\ndef flatten_list(list1):\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "task_id": 298,
        "text": "Write a function to find the nested list elements which are present in another list.",
        "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "test_list": [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_nested_lists(l1, l2):",
        "full_code": "\ndef intersection_nested_lists(l1, l2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n\n    flat_l1 = set(flatten(l1))\n    flat_l2 = set(flatten(l2))\n    return list(flat_l1.intersection(flat_l2))\n"
    },
    {
        "task_id": 299,
        "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):",
        "full_code": "\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    \n    for name, score in stdata:\n        aggregate[name] += score\n    \n    max_name = max(aggregate, key=aggregate.get)\n    max_score = aggregate[max_name]\n    \n    return max_name, max_score\n"
    },
    {
        "task_id": 300,
        "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "test_list": [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_binary_seq(n):",
        "full_code": "\ndef count_binary_seq(n):\n    # Initialize a memoization table\n    memo = {}\n\n    def count_ways(prefix_sum, suffix_sum, prefix_len, suffix_len):\n        # Base case: if both prefix and suffix are of length n and their sums are equal\n        if prefix_len == n and suffix_len == n:\n            return 1 if prefix_sum == suffix_sum else 0\n        \n        # If we have already computed this state, return the stored result\n        if (prefix_sum, suffix_sum, prefix_len, suffix_len) in memo:\n            return memo[(prefix_sum, suffix_sum, prefix_len, suffix_len)]\n        \n        # If prefix is already of length n, we can only add to the suffix\n        if prefix_len == n:\n            result = count_ways(prefix_sum, suffix_sum + 0, prefix_len, suffix_len + 1) + \\\n                     count_ways(prefix_sum, suffix_sum + 1, prefix_len, suffix_len + 1)\n        # If suffix is already of length n, we can only add to the prefix\n        elif suffix_len == n:\n            result = count_ways(prefix_sum + 0, suffix_sum, prefix_len + 1, suffix_len) + \\\n                     count_ways(prefix_sum + 1, suffix_sum, prefix_len + 1, suffix_len)\n        # Otherwise, we can add to either prefix or suffix\n        else:\n            result = count_ways(prefix_sum + 0, suffix_sum, prefix_len + 1, suffix_len) + \\\n                     count_ways(prefix_sum + 1, suffix_sum, prefix_len + 1, suffix_len) + \\\n                     count_ways(prefix_sum, suffix_sum + 0, prefix_len, suffix_len + 1) + \\\n                     count_ways(prefix_sum, suffix_sum + 1, prefix_len, suffix_len + 1)\n        \n        # Store the result in the memoization table\n        memo[(prefix_sum, suffix_sum, prefix_len, suffix_len)] = result\n        return result\n\n    # Start the recursion with empty prefix and suffix\n    return count_ways(0, 0, 0, 0)\n\n# Example usage:\n# print(count_binary_seq(2))  # Output: 6\n"
    },
    {
        "task_id": 301,
        "text": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_depth(d):",
        "full_code": "\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values()) if d else 1\n    else:\n        return 0\n"
    },
    {
        "task_id": 302,
        "text": "Write a python function to find the most significant bit number which is also a set bit.",
        "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "test_list": [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_Bit_Number(n):",
        "full_code": "\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = n // 2\n    while n > 0:\n        n = n // 2\n        msb += 1\n    return 1 << msb\n"
    },
    {
        "task_id": 303,
        "text": "Write a python function to check whether the count of inversion of two types are same or not.",
        "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys \r\ndef solve(a,n):",
        "full_code": "\nimport sys \ndef solve(a, n):\n    type1_inversions = 0\n    type2_inversions = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                type1_inversions += 1\n            if a[i] < a[j]:\n                type2_inversions += 1\n    \n    if type1_inversions == type2_inversions:\n        return \"Same\"\n    else:\n        return \"Not Same\"\n\n# Example usage:\n# a = [3, 1, 2]\n# n = len(a)\n# print(solve(a, n))  # Output: \"Same\"\n"
    },
    {
        "task_id": 304,
        "text": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Element(arr,ranges,rotations,index) :",
        "full_code": "\ndef find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    \n    # Perform the rotations\n    for _ in range(rotations):\n        for start, end in ranges:\n            arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    \n    # Return the element at the given index\n    return arr[index]\n"
    },
    {
        "task_id": 305,
        "text": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef start_withp(words):",
        "full_code": "\nimport re\ndef start_withp(words):\n    # Filter words that start with 'p'\n    p_words = [word for word in words if re.match(r'^p', word)]\n    \n    # Check if there are at least two words starting with 'p'\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' to match two.\"\n    \n    # Match the first two words starting with 'p'\n    matched_words = p_words[:2]\n    \n    return f\"Matched words: {matched_words}\"\n"
    },
    {
        "task_id": 306,
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_increasing_subseq(a, n, index, k):",
        "full_code": "\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Create a dp array to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Initialize the dp array with the array values\n    for i in range(n):\n        dp[i] = a[i]\n    \n    # Fill the dp array\n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Find the maximum sum of increasing subsequence ending at or before index\n    max_sum_before_index = max(dp[:index + 1])\n    \n    # Include the kth element in the subsequence\n    if k > index and a[k] > a[index]:\n        max_sum_including_k = max_sum_before_index + a[k]\n    else:\n        max_sum_including_k = max_sum_before_index\n    \n    return max_sum_including_k\n"
    },
    {
        "task_id": 307,
        "text": "Write a function to get a colon of a tuple.",
        "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):",
        "full_code": "\nfrom copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    if m < 0:\n        m = len(tuplex) + m\n    if n < 0:\n        n = len(tuplex) + n\n    return tuplex[m:n]\n"
    },
    {
        "task_id": 308,
        "text": "Write a function to find the specified number of largest products from two given lists.",
        "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def large_product(nums1, nums2, N):",
        "full_code": "\ndef large_product(nums1, nums2, N):\n    import heapq\n    \n    # Create a min-heap to store the largest N products\n    min_heap = []\n    \n    # Iterate through all pairs of elements from nums1 and nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            \n            # If the heap has less than N elements, push the product\n            if len(min_heap) < N:\n                heapq.heappush(min_heap, product)\n            else:\n                # If the heap has N elements, push the product and pop the smallest element\n                if product > min_heap[0]:\n                    heapq.heappushpop(min_heap, product)\n    \n    # The heap now contains the N largest products\n    return sorted(min_heap, reverse=True)\n"
    },
    {
        "task_id": 309,
        "text": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximum(a,b):",
        "full_code": "\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "task_id": 310,
        "text": "Write a function to convert a given string to a tuple.",
        "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_tuple(str1):",
        "full_code": "\ndef string_to_tuple(str1):\n    # Remove the outer parentheses if they exist\n    if str1.startswith('(') and str1.endswith(')'):\n        str1 = str1[1:-1]\n    \n    # Split the string by commas and strip any extra whitespace\n    tuple_elements = [item.strip() for item in str1.split(',')]\n    \n    # Convert the list of elements to a tuple\n    result_tuple = tuple(tuple_elements)\n    \n    return result_tuple\n"
    },
    {
        "task_id": 311,
        "text": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_left_most_unset_bit(n):",
        "full_code": "\ndef set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    temp = n\n    while temp > 0:\n        if temp & 1 == 0:\n            break\n        temp >>= 1\n        position += 1\n    \n    # Set the leftmost unset bit\n    n |= (1 << position)\n    \n    return n\n"
    },
    {
        "task_id": 312,
        "text": "Write a function to find the volume of a cone.",
        "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "test_list": [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_cone(r,h):",
        "full_code": "\nimport math\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "task_id": 313,
        "text": "Write a python function to print positive numbers in a list.",
        "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "test_list": [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_nos(list1):",
        "full_code": "\ndef pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num)\n"
    },
    {
        "task_id": 314,
        "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "test_list": [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_rectangular_grid(grid, n) :",
        "full_code": "\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize the dp arrays for the two rows\n    dp1 = [0] * n\n    dp2 = [0] * n\n    \n    # Base cases\n    dp1[0] = grid[0][0]\n    dp2[0] = grid[1][0]\n    \n    # Fill the dp arrays\n    for i in range(1, n):\n        dp1[i] = max(dp1[i-1], dp2[i-1] + grid[0][i])\n        dp2[i] = max(dp2[i-1], dp1[i-1] + grid[1][i])\n    \n    # The result is the maximum of the last elements in both dp arrays\n    return max(dp1[n-1], dp2[n-1])\n"
    },
    {
        "task_id": 315,
        "text": "Write a python function to find the first maximum length of even word.",
        "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "test_list": [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Len_Even(str):",
        "full_code": "\ndef find_Max_Len_Even(str):\n    words = str.split()\n    max_len_even_word = \"\"\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > len(max_len_even_word):\n            max_len_even_word = word\n    \n    return max_len_even_word\n"
    },
    {
        "task_id": 316,
        "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "test_list": [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_last_occurrence(A, x):",
        "full_code": "\ndef find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n"
    },
    {
        "task_id": 317,
        "text": "Write a function to reflect the modified run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "test_list": [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef modified_encode(alist):",
        "full_code": "\nfrom itertools import groupby\n\ndef modified_encode(alist):\n    encoded_list = []\n    for key, group in groupby(alist):\n        group_length = len(list(group))\n        if group_length > 1:\n            encoded_list.append((key, group_length))\n        else:\n            encoded_list.append(key)\n    return encoded_list\n"
    },
    {
        "task_id": 318,
        "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "test_list": [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_volume (s):",
        "full_code": "\ndef max_volume(s):\n    # The sum of the sides of a cuboid is given by: s = 4(l + w + h)\n    # To find the maximum volume, we need to maximize l * w * h\n    # We can use the AM-GM inequality to find the optimal dimensions\n    # AM-GM inequality states that for non-negative numbers, the arithmetic mean is greater than or equal to the geometric mean\n    # (l + w + h) / 3 >= (l * w * h) ** (1/3)\n    # Given s = 4(l + w + h), we can solve for l + w + h:\n    l_plus_w_plus_h = s / 4\n    # To maximize l * w * h, we set l = w = h\n    l = w = h = l_plus_w_plus_h / 3\n    # The maximum volume is then:\n    max_vol = l * w * h\n    return max_vol\n"
    },
    {
        "task_id": 319,
        "text": "Write a function to find all five characters long word in the given string by using regex.",
        "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "test_list": [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_long_word(text):",
        "full_code": "\nimport re\ndef find_long_word(text):\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "task_id": 320,
        "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_difference(n):",
        "full_code": "\ndef sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(i for i in range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n"
    },
    {
        "task_id": 321,
        "text": "Write a function to find the demlo number for the given number.",
        "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "test_list": [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_demlo(s):",
        "full_code": "\ndef find_demlo(s):\n    # Convert the input string to an integer\n    n = int(s)\n    \n    # Calculate the Demlo number\n    demlo_number = int(''.join(str(int(s[0]) * (i + 1)) for i in range(len(s))))\n    \n    # Return the Demlo number\n    return demlo_number\n"
    },
    {
        "task_id": 322,
        "text": "Write a function to find all index positions of the minimum values in a given list.",
        "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "test_list": [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_min(list1):",
        "full_code": "\ndef position_min(list1):\n    if not list1:\n        return []\n    \n    min_value = min(list1)\n    positions = [i for i, value in enumerate(list1) if value == min_value]\n    return positions\n"
    },
    {
        "task_id": 323,
        "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "test_list": [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def right_rotate(arr, n, out_of_place, cur):",
        "full_code": "\ndef right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n\ndef rearrange_alternate(arr):\n    n = len(arr)\n    out_of_place = -1\n\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 0) or (arr[index] < 0 and index % 2 == 1):\n                out_of_place = index\n\n    return arr\n\n# Example usage:\narr = [1, -3, 5, 6, -3, 6, 7, -4, 9, 10]\nprint(rearrange_alternate(arr))\n"
    },
    {
        "task_id": 324,
        "text": "Write a function to extract the sum of alternate chains of tuples.",
        "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "test_list": [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_alternates(test_tuple):",
        "full_code": "\ndef sum_of_alternates(test_tuple):\n    # Initialize sums for alternate chains\n    sum1 = 0\n    sum2 = 0\n    \n    # Iterate through the tuple and sum alternate chains\n    for i, (a, b) in enumerate(test_tuple):\n        if i % 2 == 0:\n            sum1 += a\n            sum2 += b\n        else:\n            sum1 += b\n            sum2 += a\n    \n    # Return the sums as a tuple\n    return (sum1, sum2)\n"
    },
    {
        "task_id": 325,
        "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "test_list": [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Min_Squares(n):",
        "full_code": "\ndef get_Min_Squares(n):\n    if n <= 0:\n        return 0\n    \n    # Create a list to store the minimum number of squares for each number up to n\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    # Fill the dp array\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]\n"
    },
    {
        "task_id": 326,
        "text": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "test_list": [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):",
        "full_code": "\nfrom collections import defaultdict \n\ndef most_occurrences(test_list):\n    word_count = defaultdict(int)\n    \n    for string in test_list:\n        words = string.split()\n        for word in words:\n            word_count[word] += 1\n    \n    if word_count:\n        most_common_word = max(word_count, key=word_count.get)\n        return most_common_word\n    else:\n        return None\n"
    },
    {
        "task_id": 327,
        "text": "Write a function to print check if the triangle is isosceles or not.",
        "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_isosceles(x,y,z):",
        "full_code": "\ndef check_isosceles(x, y, z):\n    if x == y or y == z or x == z:\n        print(\"The triangle is isosceles.\")\n    else:\n        print(\"The triangle is not isosceles.\")\n"
    },
    {
        "task_id": 328,
        "text": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "test_list": [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rotate_left(list1,m,n):",
        "full_code": "\ndef rotate_left(list1, m, n):\n    # Calculate the effective number of rotations\n    rotations = m % n\n    \n    # Perform the rotation\n    rotated_list = list1[rotations:] + list1[:rotations]\n    \n    return rotated_list\n"
    },
    {
        "task_id": 329,
        "text": "Write a python function to count negative numbers in a list.",
        "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "test_list": [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_count(list):",
        "full_code": "\ndef neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 330,
        "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "test_list": [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_char(text):",
        "full_code": "\nimport re\ndef find_char(text):\n    # Define the regex pattern to match words of length 3, 4, or 5\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches\n"
    },
    {
        "task_id": 331,
        "text": "Write a python function to count unset bits of a given number.",
        "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "test_list": [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_unset_bits(n):",
        "full_code": "\ndef count_unset_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "task_id": 332,
        "text": "Write a function to count character frequency of a given string.",
        "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "test_list": [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def char_frequency(str1):",
        "full_code": "\ndef char_frequency(str1):\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n"
    },
    {
        "task_id": 333,
        "text": "Write a python function to sort a list according to the second element in sublist.",
        "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "test_list": [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Sort(sub_li):",
        "full_code": "\ndef Sort(sub_li):\n    # Sort the list based on the second element of each sublist\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n"
    },
    {
        "task_id": 334,
        "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "test_list": [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Validity(a,b,c):",
        "full_code": "\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 335,
        "text": "Write a function to find the sum of arithmetic progression.",
        "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "test_list": [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ap_sum(a,n,d):",
        "full_code": "\ndef ap_sum(a, n, d):\n    sum_ap = n / 2 * (2 * a + (n - 1) * d)\n    return sum_ap\n"
    },
    {
        "task_id": 336,
        "text": "Write a function to check whether the given month name contains 28 days or not.",
        "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnum(monthname1):",
        "full_code": "\ndef check_monthnum(monthname1):\n    monthname1 = monthname1.lower()\n    if monthname1 in [\"february\", \"feb\"]:\n        print(\"The month\", monthname1, \"contains 28 days.\")\n    else:\n        print(\"The month\", monthname1, \"does not contain 28 days.\")\n"
    },
    {
        "task_id": 337,
        "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_word(text):",
        "full_code": "\nimport re\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b\\s*[\\.,;!?]*$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "task_id": 338,
        "text": "Write a python function to count the number of substrings with same first and last characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "full_code": "\ndef check_Equality(s):\n    count = 0\n    length = len(s)\n    \n    for i in range(length):\n        for j in range(i, length):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n"
    },
    {
        "task_id": 339,
        "text": "Write a python function to find the maximum occuring divisor in an interval.",
        "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "test_list": [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Divisor(x,y):",
        "full_code": "\ndef find_Divisor(x, y):\n    from collections import defaultdict\n    \n    # Create a dictionary to store the count of each divisor\n    divisor_count = defaultdict(int)\n    \n    # Iterate over the interval [x, y]\n    for num in range(x, y + 1):\n        # Find all divisors of num\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisor_count[i] += 1\n    \n    # Find the divisor with the maximum count\n    max_divisor = max(divisor_count, key=divisor_count.get)\n    \n    return max_divisor\n"
    },
    {
        "task_id": 340,
        "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "test_list": [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_three_smallest_nums(lst):",
        "full_code": "\ndef sum_three_smallest_nums(lst):\n    # Filter out non-positive numbers and sort the list\n    positive_nums = sorted([num for num in lst if num > 0])\n    \n    # Sum the first three elements in the sorted list\n    result = sum(positive_nums[:3])\n    \n    return result\n"
    },
    {
        "task_id": 341,
        "text": "Write a function to convert the given set into ordered tuples.",
        "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "test_list": [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_to_tuple(s):",
        "full_code": "\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n"
    },
    {
        "task_id": 342,
        "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "test_list": [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):",
        "full_code": "\nfrom heapq import heappop, heappush\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef smallest_range(arrays):\n    min_heap = []\n    max_val = float('-inf')\n    min_range = float('inf')\n    start, end = 0, 0\n\n    # Initialize the min-heap with the first element from each array\n    for i, arr in enumerate(arrays):\n        if arr:\n            heappush(min_heap, Node(arr[0], i, 0))\n            max_val = max(max_val, arr[0])\n\n    while min_heap:\n        # Get the smallest element from the heap\n        current = heappop(min_heap)\n        current_val = current.value\n        current_list_num = current.list_num\n        current_index = current.index\n\n        # Check if the current range is smaller than the smallest range found so far\n        if max_val - current_val < min_range:\n            min_range = max_val - current_val\n            start = current_val\n            end = max_val\n\n        # Move to the next element in the current array\n        if current_index + 1 < len(arrays[current_list_num]):\n            next_val = arrays[current_list_num][current_index + 1]\n            heappush(min_heap, Node(next_val, current_list_num, current_index + 1))\n            max_val = max(max_val, next_val)\n        else:\n            # If any array is exhausted, break the loop\n            break\n\n    return (start, end)\n\n# Example usage:\narrays = [\n    [4, 10, 15, 24, 26],\n    [0, 9, 12, 20],\n    [5, 18, 22, 30]\n]\n\nprint(smallest_range(arrays))  # Output: (20, 24)\n"
    },
    {
        "task_id": 343,
        "text": "Write a function to calculate the number of digits and letters in a string.",
        "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "test_list": [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dig_let(s):",
        "full_code": "\ndef dig_let(s):\n    digits = 0\n    letters = 0\n    \n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    \n    print(f\"Digits: {digits}\")\n    print(f\"Letters: {letters}\")\n"
    },
    {
        "task_id": 344,
        "text": "Write a python function to find number of elements with odd factors in a given range.",
        "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "test_list": [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Odd_Squares(n,m):",
        "full_code": "\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        if (i ** 0.5).is_integer():\n            count += 1\n    return count\n"
    },
    {
        "task_id": 345,
        "text": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diff_consecutivenums(nums):",
        "full_code": "\ndef diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    \n    differences = []\n    for i in range(1, len(nums)):\n        differences.append(nums[i] - nums[i - 1])\n    \n    return differences\n"
    },
    {
        "task_id": 346,
        "text": "Write a function to find entringer number e(n, k).",
        "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "test_list": [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zigzag(n, k):",
        "full_code": "\ndef zigzag(n, k):\n    # Initialize a 2D list to store the Entringer numbers\n    entringer = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base case\n    entringer[0][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            entringer[i][j] = entringer[i - 1][j - 1] + entringer[i - 1][j]\n    \n    # The Entringer number e(n, k) is stored in entringer[n][k]\n    return entringer[n][k]\n"
    },
    {
        "task_id": 347,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "full_code": "\ndef count_Squares(m, n):\n    # Initialize the count of squares\n    count = 0\n    \n    # Iterate over all possible square sizes\n    for size in range(1, min(m, n) + 1):\n        # Calculate the number of squares of current size\n        count += (m - size + 1) * (n - size + 1)\n    \n    # Return the total count of squares\n    return count\n"
    },
    {
        "task_id": 348,
        "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "test_list": [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bin_coff(n, r):",
        "full_code": "\ndef bin_coff(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    num = 1\n    denom = 1\n    for i in range(r):\n        num *= (n - i)\n        denom *= (i + 1)\n    return num // denom\n\ndef count_sequences(values, length):\n    n = len(values)\n    dp = [[0] * (length + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(length + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1] * values[i - 1]\n    \n    result = 0\n    for i in range(length + 1):\n        result += dp[n][i] * bin_coff(i, length)\n    \n    return result\n\n# Example usage:\nvalues = [1, 2, 3]\nlength = 2\nprint(count_sequences(values, length))\n"
    },
    {
        "task_id": 349,
        "text": "Write a python function to check whether the given string is a binary string or not.",
        "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "test_list": [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check(string) :",
        "full_code": "\ndef check(string):\n    for char in string:\n        if char != '0' and char != '1':\n            return False\n    return True\n"
    },
    {
        "task_id": 350,
        "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "test_list": [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum_Length(s) :",
        "full_code": "\ndef minimum_Length(s):\n    min_length = len(s)\n    for char in set(s):\n        temp_s = s.replace(char, '', 1)\n        min_length = min(min_length, len(temp_s))\n    return min_length\n"
    },
    {
        "task_id": 351,
        "text": "Write a python function to find the first element occurring k times in a given array.",
        "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "test_list": [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Element(arr,n,k):",
        "full_code": "\ndef first_Element(arr, n, k):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate through the array and update the frequency dictionary\n    for i in range(n):\n        if arr[i] in frequency:\n            frequency[arr[i]] += 1\n        else:\n            frequency[arr[i]] = 1\n    \n    # Iterate through the array again to find the first element with frequency k\n    for i in range(n):\n        if frequency[arr[i]] == k:\n            return arr[i]\n    \n    # If no element occurs k times, return -1\n    return -1\n"
    },
    {
        "task_id": 352,
        "text": "Write a python function to check whether all the characters in a given string are unique.",
        "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "test_list": [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def unique_Characters(str):",
        "full_code": "\ndef unique_Characters(str):\n    # Create a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in str:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Add the character to the set\n        unique_chars.add(char)\n    \n    # If no duplicates were found, return True\n    return True\n"
    },
    {
        "task_id": 353,
        "text": "Write a function to remove a specified column from a given nested list.",
        "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "test_list": [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_column(list1, n):",
        "full_code": "\ndef remove_column(list1, n):\n    return [row[:n] + row[n+1:] for row in list1]\n"
    },
    {
        "task_id": 354,
        "text": "Write a function to find t-nth term of arithemetic progression.",
        "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "test_list": [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tn_ap(a,n,d):",
        "full_code": "\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d\n"
    },
    {
        "task_id": 355,
        "text": "Write a python function to count the number of rectangles in a circle of radius r.",
        "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Rectangles(radius):",
        "full_code": "\ndef count_Rectangles(radius):\n    import math\n    \n    # Calculate the maximum side length of a rectangle that can fit in the circle\n    max_side = math.sqrt(2) * radius\n    \n    # Initialize the count of rectangles\n    count = 0\n    \n    # Iterate over all possible side lengths of the rectangle\n    for a in range(1, int(max_side) + 1):\n        for b in range(1, int(max_side) + 1):\n            # Check if the rectangle with sides a and b can fit inside the circle\n            if math.sqrt(a**2 + b**2) <= 2 * radius:\n                count += 1\n    \n    return count\n"
    },
    {
        "task_id": 356,
        "text": "Write a function to find the third angle of a triangle using two angles.",
        "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "test_list": [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_angle(a,b):",
        "full_code": "\ndef find_angle(a, b):\n    c = 180 - (a + b)\n    return c\n"
    },
    {
        "task_id": 357,
        "text": "Write a function to find the maximum element of all the given tuple records.",
        "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "test_list": [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_max(test_list):",
        "full_code": "\ndef find_max(test_list):\n    max_element = None\n    for tup in test_list:\n        for element in tup:\n            if max_element is None or element > max_element:\n                max_element = element\n    return max_element\n"
    },
    {
        "task_id": 358,
        "text": "Write a function to find modulo division of two lists using map and lambda function.",
        "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def moddiv_list(nums1,nums2):",
        "full_code": "\ndef moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))\n"
    },
    {
        "task_id": 359,
        "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Check_Solution(a,b,c):",
        "full_code": "\ndef Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative for real roots\n    if discriminant < 0:\n        print(\"The quadratic equation has no real roots.\")\n        return False\n    \n    # Calculate the roots using the quadratic formula\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if one root is twice the other\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        print(\"One root is twice the other.\")\n        return True\n    else:\n        print(\"One root is not twice the other.\")\n        return False\n"
    },
    {
        "task_id": 360,
        "text": "Write a function to find the n\u2019th carol number.",
        "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "test_list": [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_carol(n):",
        "full_code": "\ndef get_carol(n):\n    if n < 0:\n        return None\n    return (2 ** (n + 1) - 1) ** 2 - 2\n"
    },
    {
        "task_id": 361,
        "text": "Write a function to remove empty lists from a given list of lists.",
        "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "test_list": [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_empty(list1):",
        "full_code": "\ndef remove_empty(list1):\n    return [sublist for sublist in list1 if sublist]\n"
    },
    {
        "task_id": 362,
        "text": "Write a python function to find the item with maximum occurrences in a given list.",
        "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "test_list": [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_occurrences(nums):",
        "full_code": "\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_item = max(count_dict, key=count_dict.get)\n    return max_item\n"
    },
    {
        "task_id": 363,
        "text": "Write a function to add the k elements to each element in the tuple.",
        "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "test_list": [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_K_element(test_list, K):",
        "full_code": "\ndef add_K_element(test_list, K):\n    result = tuple(x + K for x in test_list)\n    return result\n"
    },
    {
        "task_id": 364,
        "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "test_list": [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def make_flip(ch):",
        "full_code": "\ndef make_flip(ch):\n    def count_flips(s, expected):\n        flips = 0\n        for char in s:\n            if char != expected:\n                flips += 1\n            expected = '1' if expected == '0' else '0'\n        return flips\n\n    if not ch:\n        return 0\n\n    # Calculate the number of flips required for both possible alternating patterns\n    flips_pattern1 = count_flips(ch, '0')\n    flips_pattern2 = count_flips(ch, '1')\n\n    # Return the minimum number of flips required\n    return min(flips_pattern1, flips_pattern2)\n"
    },
    {
        "task_id": 365,
        "text": "Write a python function to count the number of digits of a given number.",
        "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "test_list": [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Digit(n):",
        "full_code": "\ndef count_Digit(n):\n    return len(str(abs(n)))\n"
    },
    {
        "task_id": 366,
        "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "test_list": [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def adjacent_num_product(list_nums):",
        "full_code": "\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    \n    max_product = list_nums[0] * list_nums[1]\n    \n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n"
    },
    {
        "task_id": 367,
        "text": "Write a function to check if a binary tree is balanced or not.",
        "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
        "challenge_test_list": [],
        "def_code": "class Node: \r\n\tdef __init__(self, data):",
        "full_code": "\nclass Node: \n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    def check_height(node):\n        if node is None:\n            return 0\n        \n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1\n"
    },
    {
        "task_id": 368,
        "text": "Write a function to repeat the given tuple n times.",
        "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "test_list": [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def repeat_tuples(test_tup, N):",
        "full_code": "\ndef repeat_tuples(test_tup, N):\n    return test_tup * N\n"
    },
    {
        "task_id": 369,
        "text": "Write a function to find the lateral surface area of cuboid",
        "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cuboid(l,w,h):",
        "full_code": "\ndef lateralsurface_cuboid(l, w, h):\n    # Calculate the lateral surface area of the cuboid\n    lateral_surface_area = 2 * h * (l + w)\n    return lateral_surface_area\n"
    },
    {
        "task_id": 370,
        "text": "Write a function to sort a tuple by its float element.",
        "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "test_list": [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def float_sort(price):",
        "full_code": "\ndef float_sort(price):\n    return tuple(sorted(price, key=lambda x: float(x[1])))\n"
    },
    {
        "task_id": 371,
        "text": "Write a function to find the smallest missing element in a sorted array.",
        "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "test_list": [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_missing(A, left_element, right_element):",
        "full_code": "\ndef smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    \n    mid = (left_element + right_element) // 2\n    \n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n\n# Example usage:\nA = [0, 1, 3, 4, 6, 7]\nn = len(A)\nresult = smallest_missing(A, 0, n - 1)\nprint(\"The smallest missing element is:\", result)\n"
    },
    {
        "task_id": 372,
        "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "test_list": [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_assending(nums):",
        "full_code": "\nimport heapq as hq\ndef heap_assending(nums):\n    hq.heapify(nums)\n    sorted_nums = []\n    while nums:\n        sorted_nums.append(hq.heappop(nums))\n    return sorted_nums\n"
    },
    {
        "task_id": 373,
        "text": "Write a function to find the volume of a cuboid.",
        "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "test_list": [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cuboid(l,w,h):",
        "full_code": "\ndef volume_cuboid(l, w, h):\n    return l * w * h\n"
    },
    {
        "task_id": 374,
        "text": "Write a function to print all permutations of a given string including duplicates.",
        "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "test_list": [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permute_string(str):",
        "full_code": "\ndef permute_string(str):\n    from itertools import permutations\n    \n    # Generate all permutations of the string\n    all_permutations = permutations(str)\n    \n    # Print each permutation\n    for perm in all_permutations:\n        print(''.join(perm))\n\n# Example usage:\n# permute_string(\"abc\")\n"
    },
    {
        "task_id": 375,
        "text": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "test_list": [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_num(n,m):",
        "full_code": "\ndef round_num(n, m):\n    return round(n / m) * m\n"
    },
    {
        "task_id": 376,
        "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "test_list": [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_replica(test_tup):",
        "full_code": "\ndef remove_replica(test_tup):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    for item in test_tup:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Create a new tuple with duplicates replaced by a custom value\n    custom_value = None  # You can replace None with any custom value you want\n    result_list = []\n    for item in test_tup:\n        if count_dict[item] > 1:\n            result_list.append(custom_value)\n        else:\n            result_list.append(item)\n    \n    # Convert the list back to a tuple\n    result_tup = tuple(result_list)\n    return result_tup\n"
    },
    {
        "task_id": 377,
        "text": "Write a python function to remove all occurrences of a character in a given string.",
        "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "test_list": [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_Char(s,c) :",
        "full_code": "\ndef remove_Char(s, c):\n    return s.replace(c, '')\n"
    },
    {
        "task_id": 378,
        "text": "Write a python function to shift last element to first position in the given list.",
        "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "test_list": [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def move_first(test_list):",
        "full_code": "\ndef move_first(test_list):\n    if len(test_list) > 0:\n        test_list.insert(0, test_list.pop())\n    return test_list\n"
    },
    {
        "task_id": 379,
        "text": "Write a function to find the surface area of a cuboid.",
        "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cuboid(l,w,h):",
        "full_code": "\ndef surfacearea_cuboid(l, w, h):\n    surface_area = 2 * (l * w + w * h + h * l)\n    return surface_area\n"
    },
    {
        "task_id": 380,
        "text": "Write a function to generate a two-dimensional array.",
        "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "test_list": [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multi_list(rownum,colnum):",
        "full_code": "\ndef multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]\n"
    },
    {
        "task_id": 381,
        "text": "Write a function to sort a list of lists by a given index of the inner list.",
        "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "test_list": [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):",
        "full_code": "\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=itemgetter(index_no))\n"
    },
    {
        "task_id": 382,
        "text": "Write a function to find the number of rotations in a circularly sorted array.",
        "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "test_list": [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rotation_count(A):",
        "full_code": "\ndef find_rotation_count(A):\n    n = len(A)\n    low, high = 0, n - 1\n    \n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        \n        mid = (low + high) // 2\n        next = (mid + 1) % n\n        prev = (mid - 1 + n) % n\n        \n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[high]:\n            high = mid - 1\n        elif A[mid] >= A[low]:\n            low = mid + 1\n    \n    return -1\n"
    },
    {
        "task_id": 383,
        "text": "Write a python function to toggle all odd bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "full_code": "\ndef even_bit_toggle_number(n):\n    # Create a mask with all odd bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # XOR the number with the mask to toggle all odd bits\n    toggled_number = n ^ mask\n    \n    return toggled_number\n"
    },
    {
        "task_id": 384,
        "text": "Write a python function to find the frequency of the smallest value in a given array.",
        "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Smallest(n,arr):",
        "full_code": "\ndef frequency_Of_Smallest(n, arr):\n    if n == 0:\n        return 0\n    \n    smallest = min(arr)\n    frequency = arr.count(smallest)\n    \n    return frequency\n"
    },
    {
        "task_id": 385,
        "text": "Write a function to find the n'th perrin number using recursion.",
        "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "test_list": [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_perrin(n):",
        "full_code": "\ndef get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 3)\n"
    },
    {
        "task_id": 386,
        "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "test_list": [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_count(s):",
        "full_code": "\ndef swap_count(s):\n    # Initialize variables\n    open_brackets = 0\n    close_brackets = 0\n    swaps = 0\n    imbalance = 0\n\n    # Traverse the string\n    for char in s:\n        if char == '[':\n            open_brackets += 1\n            if imbalance > 0:\n                swaps += imbalance\n                imbalance -= 1\n        elif char == ']':\n            close_brackets += 1\n            imbalance = close_brackets - open_brackets\n\n    return swaps\n"
    },
    {
        "task_id": 387,
        "text": "Write a python function to check whether the hexadecimal number is even or odd.",
        "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "test_list": [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_or_odd(N):",
        "full_code": "\ndef even_or_odd(N):\n    # Convert the hexadecimal number to an integer\n    num = int(N, 16)\n    \n    # Check if the number is even or odd\n    if num % 2 == 0:\n        print(f\"The hexadecimal number {N} is even.\")\n    else:\n        print(f\"The hexadecimal number {N} is odd.\")\n"
    },
    {
        "task_id": 388,
        "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "full_code": "\ndef highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"
    },
    {
        "task_id": 389,
        "text": "Write a function to find the n'th lucas number.",
        "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lucas(n):",
        "full_code": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"
    },
    {
        "task_id": 390,
        "text": "Write a function to insert a given string at the beginning of all items in a list.",
        "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_string(list,string):",
        "full_code": "\ndef add_string(lst, string):\n    return [string + item for item in lst]\n"
    },
    {
        "task_id": 391,
        "text": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def convert_list_dictionary(l1, l2, l3):",
        "full_code": "\ndef convert_list_dictionary(l1, l2, l3):\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict\n"
    },
    {
        "task_id": 392,
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_sum (n):",
        "full_code": "\ndef get_max_sum(n):\n    # Memoization dictionary to store computed values\n    memo = {}\n\n    def f(n):\n        if n == 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        \n        # Calculate the maximum sum using the given equation\n        max_sum = max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n        \n        # Store the result in the memo dictionary\n        memo[n] = max_sum\n        \n        return max_sum\n\n    # Call the recursive function with the initial value of n\n    return f(n)\n"
    },
    {
        "task_id": 393,
        "text": "Write a function to find the list with maximum length using lambda function.",
        "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length_list(input_list):",
        "full_code": "\ndef max_length_list(input_list):\n    return max(input_list, key=lambda x: len(x))\n"
    },
    {
        "task_id": 394,
        "text": "Write a function to check if given tuple is distinct or not.",
        "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_distinct(test_tup):",
        "full_code": "\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "task_id": 395,
        "text": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_non_repeating_character(str1):",
        "full_code": "\ndef first_non_repeating_character(str1):\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "task_id": 396,
        "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string):",
        "full_code": "\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 397,
        "text": "Write a function to find the median of three specific numbers.",
        "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_numbers(a,b,c):",
        "full_code": "\ndef median_numbers(a, b, c):\n    if (a >= b and a <= c) or (a <= b and a >= c):\n        return a\n    elif (b >= a and b <= c) or (b <= a and b >= c):\n        return b\n    else:\n        return c\n"
    },
    {
        "task_id": 398,
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_digits(nums):",
        "full_code": "\ndef sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return [digit_sum(num) for num in nums]\n"
    },
    {
        "task_id": 399,
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bitwise_xor(test_tup1, test_tup2):",
        "full_code": "\ndef bitwise_xor(test_tup1, test_tup2):\n    # Ensure both tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform bitwise XOR operation on corresponding elements\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    return result\n"
    },
    {
        "task_id": 400,
        "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_freq(test_list):",
        "full_code": "\ndef extract_freq(test_list):\n    from collections import Counter\n    from itertools import combinations\n    \n    # Convert list of tuples to a list of sorted tuples\n    sorted_tuples = [tuple(sorted(t)) for t in test_list]\n    \n    # Count the frequency of each unique tuple\n    freq_counter = Counter(sorted_tuples)\n    \n    # Convert the counter to a list of tuples (tuple, frequency)\n    freq_list = [(t, freq_counter[t]) for t in freq_counter]\n    \n    return freq_list\n"
    },
    {
        "task_id": 401,
        "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_nested_tuples(test_tup1, test_tup2):",
        "full_code": "\ndef add_nested_tuples(test_tup1, test_tup2):\n    result = tuple((a + b) for a, b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "task_id": 402,
        "text": "Write a function to compute the value of ncr%p.",
        "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ncr_modp(n, r, p):",
        "full_code": "\ndef ncr_modp(n, r, p):\n    # Function to compute factorial % p\n    def factorial_modp(x, p):\n        fact = 1\n        for i in range(2, x + 1):\n            fact = (fact * i) % p\n        return fact\n\n    # Function to compute modular inverse using Fermat's Little Theorem\n    def mod_inverse(a, p):\n        return pow(a, p - 2, p)\n\n    # Base cases\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n\n    # Compute factorials and modular inverses\n    fact_n = factorial_modp(n, p)\n    fact_r = factorial_modp(r, p)\n    fact_nr = factorial_modp(n - r, p)\n\n    # Compute nCr % p using the formula (n! / (r! * (n-r)!)) % p\n    ncr = (fact_n * mod_inverse(fact_r, p)) % p\n    ncr = (ncr * mod_inverse(fact_nr, p)) % p\n\n    return ncr\n"
    },
    {
        "task_id": 403,
        "text": "Write a function to check if a url is valid or not using regex.",
        "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "test_list": [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_valid_URL(str):",
        "full_code": "\nimport re\ndef is_valid_URL(str):\n    # Regular expression pattern for a valid URL\n    url_pattern = re.compile(\n        r'^(https?|ftp)://'  # http, https, or ftp protocol\n        r'([a-zA-Z0-9.-]+)'  # domain name\n        r'(\\.[a-zA-Z]{2,})'  # top-level domain\n        r'(/[\\w.-]*)*'  # optional path\n        r'(\\?[^\\s]*)?$'  # optional query string\n    )\n    \n    # Check if the string matches the URL pattern\n    if re.match(url_pattern, str):\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 404,
        "text": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum(a,b):",
        "full_code": "\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "task_id": 405,
        "text": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_tuplex(tuplex,tuple1):",
        "full_code": "\ndef check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n"
    },
    {
        "task_id": 406,
        "text": "Write a python function to find the parity of a given number.",
        "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "test_list": [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Parity(x):",
        "full_code": "\ndef find_Parity(x):\n    parity = 0\n    while x:\n        parity ^= x & 1\n        x >>= 1\n    return parity\n"
    },
    {
        "task_id": 407,
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rearrange_bigger(n):",
        "full_code": "\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that is smaller than the digit next to it\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, the number is the largest permutation\n    if i == -1:\n        return n\n    \n    # Find the smallest digit on right side of (i-th digit) which is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the (i-th) position to get the next bigger number\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    # Convert the list of digits back to a number\n    return int(''.join(digits))\n"
    },
    {
        "task_id": 408,
        "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):",
        "full_code": "\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            pair_sum = nums1[i] + nums2[j]\n            if len(heap) < k:\n                heapq.heappush(heap, (-pair_sum, [nums1[i], nums2[j]]))\n            else:\n                if pair_sum < -heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-pair_sum, [nums1[i], nums2[j]]))\n    \n    return [pair for _, pair in heap]\n"
    },
    {
        "task_id": 409,
        "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_product_tuple(list1):",
        "full_code": "\ndef min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "task_id": 410,
        "text": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_val(listval):",
        "full_code": "\ndef min_val(listval):\n    if not listval:\n        return None\n    \n    min_value = listval[0]\n    \n    for item in listval:\n        if isinstance(item, (int, float)):\n            if item < min_value:\n                min_value = item\n        elif isinstance(item, str):\n            if min_value is None or item < min_value:\n                min_value = item\n    \n    return min_value\n"
    },
    {
        "task_id": 411,
        "text": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef snake_to_camel(word):",
        "full_code": "\nimport re\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "task_id": 412,
        "text": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(l):",
        "full_code": "\ndef remove_odd(l):\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "task_id": 413,
        "text": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_nth_element(list1, n):",
        "full_code": "\ndef extract_nth_element(list1, n):\n    return [item[n] for item in list1]\n"
    },
    {
        "task_id": 414,
        "text": "Write a python function to check whether the value exists in a sequence or not.",
        "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def overlapping(list1,list2):",
        "full_code": "\ndef overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "task_id": 415,
        "text": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Product(arr):",
        "full_code": "\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Example usage:\n# arr = [1, 4, 3, 6, 7, 0]\n# print(max_Product(arr))  # Output: (7, 6)\n"
    },
    {
        "task_id": 416,
        "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "test_list": [
            "assert breakSum(12) == 13",
            "assert breakSum(24) == 27",
            "assert breakSum(23) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 1000000\r\ndef breakSum(n):",
        "full_code": "\nMAX = 1000000\n\ndef breakSum(n):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # Create a list to store the maximum sum for each number up to n\n    dp = [0] * (n + 1)\n    \n    # Initialize base cases\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    \n    # Fill the dp array\n    for i in range(3, n + 1):\n        # The maximum sum we can get by breaking i into three parts\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4], i)\n    \n    return dp[n]\n\n# Example usage:\n# print(breakSum(24))  # Output will be 27\n"
    },
    {
        "task_id": 417,
        "text": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_tuples(Input):",
        "full_code": "\ndef group_tuples(Input):\n    common_elements = {}\n    for tup in Input:\n        first_element = tup[0]\n        if first_element in common_elements:\n            common_elements[first_element].append(tup)\n        else:\n            common_elements[first_element] = [tup]\n    \n    return common_elements\n"
    },
    {
        "task_id": 418,
        "text": "Write a python function to find the sublist having maximum length.",
        "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Max(lst):",
        "full_code": "\ndef Find_Max(lst):\n    max_length = 0\n    max_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist\n"
    },
    {
        "task_id": 419,
        "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_and_sum(list1):",
        "full_code": "\ndef round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n"
    },
    {
        "task_id": 420,
        "text": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_Sum(n):",
        "full_code": "\ndef cube_Sum(n):\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_cubes += even_number ** 3\n    return sum_of_cubes\n"
    },
    {
        "task_id": 421,
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_tuple(test_tup):",
        "full_code": "\ndef concatenate_tuple(test_tup):\n    delimiter = '-'\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string\n"
    },
    {
        "task_id": 422,
        "text": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Average_Of_Cube(n):",
        "full_code": "\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average\n"
    },
    {
        "task_id": 423,
        "text": "Write a function to solve gold mine problem.",
        "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "test_list": [
            "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
            "assert get_maxgold([[10,20],[30,40]],2,2)==70",
            "assert get_maxgold([[4,9],[3,7]],2,2)==13"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_maxgold(gold, m, n):",
        "full_code": "\ndef get_maxgold(gold, m, n):\n    # Create a 2D array to store the maximum gold collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the last column of dp array with the gold values\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    \n    # Fill the dp array from right to left\n    for col in range(n-2, -1, -1):\n        for row in range(m):\n            # Initialize the maximum gold to the current cell's gold\n            max_gold = dp[row][col+1]\n            \n            # Check the cell to the right and below\n            if row + 1 < m:\n                max_gold = max(max_gold, dp[row+1][col+1])\n            \n            # Check the cell to the right and above\n            if row - 1 >= 0:\n                max_gold = max(max_gold, dp[row-1][col+1])\n            \n            # Add the maximum gold to the current cell's gold\n            dp[row][col] = gold[row][col] + max_gold\n    \n    # The maximum gold collected will be the maximum value in the first column of dp array\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][0])\n    \n    return max_gold\n"
    },
    {
        "task_id": 424,
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_rear(test_tuple):",
        "full_code": "\ndef extract_rear(test_tuple):\n    return [s[-1] for s in test_tuple]\n"
    },
    {
        "task_id": 425,
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_element_in_list(list1, x):",
        "full_code": "\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "task_id": 426,
        "text": "Write a function to filter odd numbers using lambda function.",
        "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_oddnumbers(nums):",
        "full_code": "\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n"
    },
    {
        "task_id": 427,
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef change_date_format(dt):",
        "full_code": "\nimport re\ndef change_date_format(dt):\n    # Use regex to match the yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    \n    if match:\n        # Extract the year, month, and day\n        year, month, day = match.groups()\n        # Reformat to dd-mm-yyyy\n        new_format = f'{day}-{month}-{year}'\n        return new_format\n    else:\n        return \"Invalid date format\"\n"
    },
    {
        "task_id": 428,
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def shell_sort(my_list):",
        "full_code": "\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "task_id": 429,
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def and_tuples(test_tup1, test_tup2):",
        "full_code": "\ndef and_tuples(test_tup1, test_tup2):\n    elementwise_and = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    tuple_of_tuples = (test_tup1, test_tup2)\n    return elementwise_and, tuple_of_tuples\n"
    },
    {
        "task_id": 430,
        "text": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_directrix(a, b, c):",
        "full_code": "\ndef parabola_directrix(a, b, c):\n    # The standard form of a parabola is y = ax^2 + bx + c\n    # The directrix of a parabola y = ax^2 + bx + c is given by y = k - 1/(4a)\n    # where k is the y-coordinate of the vertex of the parabola\n    \n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    # Calculate the directrix\n    directrix = y_vertex - 1 / (4 * a)\n    \n    return directrix\n"
    },
    {
        "task_id": 431,
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_element(list1, list2):",
        "full_code": "\ndef common_element(list1, list2):\n    return any(item in list2 for item in list1)\n"
    },
    {
        "task_id": 432,
        "text": "Write a function to find the median of a trapezium.",
        "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_trapezium(base1,base2,height):",
        "full_code": "\ndef median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median\n"
    },
    {
        "task_id": 433,
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
            "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_greater(arr, number):",
        "full_code": "\ndef check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True\n"
    },
    {
        "task_id": 434,
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "test_list": [
            "assert text_match_one(\"ac\")==('Not matched!')",
            "assert text_match_one(\"dc\")==('Not matched!')",
            "assert text_match_one(\"abba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_one(text):",
        "full_code": "\nimport re\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 435,
        "text": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n) :\r\n    return (n % 10) ",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def last_Digit(n) :",
        "full_code": "\ndef last_Digit(n):\n    return abs(n) % 10\n"
    },
    {
        "task_id": 436,
        "text": "Write a python function to print negative numbers in a list.",
        "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == -1,-6",
            "assert neg_nos([-1,-2,3,4]) == -1,-2",
            "assert neg_nos([-7,-6,8,9]) == -7,-6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_nos(list1):",
        "full_code": "\ndef neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n"
    },
    {
        "task_id": 437,
        "text": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(str1):",
        "full_code": "\ndef remove_odd(str1):\n    result = ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n    return result\n"
    },
    {
        "task_id": 438,
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_bidirectional(test_list):",
        "full_code": "\ndef count_bidirectional(test_list):\n    from collections import defaultdict\n    \n    pair_count = defaultdict(int)\n    \n    for pair in test_list:\n        sorted_pair = tuple(sorted(pair))\n        pair_count[sorted_pair] += 1\n    \n    total_count = sum(count * (count - 1) // 2 for count in pair_count.values())\n    \n    return total_count\n"
    },
    {
        "task_id": 439,
        "text": "Write a function to convert a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiple_to_single(L):",
        "full_code": "\ndef multiple_to_single(L):\n    # Convert each integer in the list to a string and join them together\n    single_integer = int(''.join(map(str, L)))\n    return single_integer\n"
    },
    {
        "task_id": 440,
        "text": "Write a function to find all adverbs and their positions in a given sentence.",
        "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_adverb_position(text):",
        "full_code": "\nimport re\ndef find_adverb_position(text):\n    adverbs = []\n    positions = []\n    words = text.split()\n    \n    for i, word in enumerate(words):\n        # Check if the word ends with 'ly'\n        if re.search(r'\\w+ly$', word):\n            adverbs.append(word)\n            positions.append(i)\n    \n    return adverbs, positions\n"
    },
    {
        "task_id": 441,
        "text": "Write a function to find the surface area of a cube.",
        "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cube(l):",
        "full_code": "\ndef surfacearea_cube(l):\n    return 6 * l * l\n"
    },
    {
        "task_id": 442,
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef positive_count(nums):",
        "full_code": "\nfrom array import array\n\ndef positive_count(nums):\n    positive_nums = [num for num in nums if num > 0]\n    if len(nums) == 0:\n        return 0.0\n    return len(positive_nums) / len(nums)\n"
    },
    {
        "task_id": 443,
        "text": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def largest_neg(list1):",
        "full_code": "\ndef largest_neg(list1):\n    # Filter out the negative numbers from the list\n    negative_numbers = [num for num in list1 if num < 0]\n    \n    # Check if there are any negative numbers in the list\n    if not negative_numbers:\n        return None\n    \n    # Find the largest negative number\n    largest_negative = max(negative_numbers)\n    \n    return largest_negative\n"
    },
    {
        "task_id": 444,
        "text": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def trim_tuple(test_list, K):",
        "full_code": "\ndef trim_tuple(test_list, K):\n    return [(t[K:-K] if len(t) > 2 * K else t) for t in test_list]\n"
    },
    {
        "task_id": 445,
        "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def index_multiplication(test_tup1, test_tup2):",
        "full_code": "\ndef index_multiplication(test_tup1, test_tup2):\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "task_id": 446,
        "text": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst):",
        "full_code": "\nfrom collections import Counter \ndef count_Occurrence(tup, lst):\n    # Convert the tuple to a list and count the occurrences of each element\n    count_dict = Counter(tup)\n    \n    # Create a dictionary to store the occurrences of elements from the list in the tuple\n    result = {item: count_dict[item] for item in lst if item in count_dict}\n    \n    return result\n"
    },
    {
        "task_id": 447,
        "text": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_nums(nums):",
        "full_code": "\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "task_id": 448,
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_sum(n):",
        "full_code": "\ndef cal_sum(n):\n    def perrin(m):\n        if m == 0:\n            return 3\n        elif m == 1:\n            return 0\n        elif m == 2:\n            return 2\n        else:\n            return perrin(m - 2) + perrin(m - 3)\n    \n    total_sum = 0\n    for i in range(n):\n        total_sum += perrin(i)\n    \n    return total_sum\n"
    },
    {
        "task_id": 449,
        "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "test_list": [
            "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
            "assert check_Triangle(1,1,1,4,1,5) == 'No'",
            "assert check_Triangle(1,1,1,1,1,1) == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Triangle(x1,y1,x2,y2,x3,y3):",
        "full_code": "\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the squared lengths of the sides of the triangle\n    side1 = (x2 - x1)**2 + (y2 - y1)**2\n    side2 = (x3 - x2)**2 + (y3 - y2)**2\n    side3 = (x1 - x3)**2 + (y1 - y3)**2\n    \n    # Check the triangle inequality theorem\n    if (side1 + side2 > side3) and (side1 + side3 > side2) and (side2 + side3 > side1):\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 450,
        "text": "Write a function to extract specified size of strings from a give list of string values.",
        "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_string(str, l):",
        "full_code": "\ndef extract_string(str_list, l):\n    return [s[:l] for s in str_list if len(s) >= l]\n"
    },
    {
        "task_id": 451,
        "text": "Write a function to remove all whitespaces from the given string using regex.",
        "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_whitespaces(text1):",
        "full_code": "\nimport re\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "task_id": 452,
        "text": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def loss_amount(actual_cost,sale_amount):",
        "full_code": "\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None\n"
    },
    {
        "task_id": 453,
        "text": "Write a python function to find the sum of even factors of a number.",
        "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef sumofFactors(n) :",
        "full_code": "\nimport math\ndef sumofFactors(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total_sum += i\n            if (n // i) != i and (n // i) % 2 == 0:\n                total_sum += (n // i)\n    \n    return total_sum\n"
    },
    {
        "task_id": 454,
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
            "assert text_match_wordz(\"xyz.\")==('Found a match!')",
            "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_wordz(text):",
        "full_code": "\nimport re\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "task_id": 455,
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumb_number(monthnum2):",
        "full_code": "\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(f\"Month number {monthnum2} has 31 days.\")\n    else:\n        print(f\"Month number {monthnum2} does not have 31 days.\")\n"
    },
    {
        "task_id": 456,
        "text": "Write a function to reverse strings in a given list of string values.",
        "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_string_list(stringlist):",
        "full_code": "\ndef reverse_string_list(stringlist):\n    reversed_list = [s[::-1] for s in stringlist]\n    return reversed_list\n"
    },
    {
        "task_id": 457,
        "text": "Write a python function to find the sublist having minimum length.",
        "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min(lst):",
        "full_code": "\ndef Find_Min(lst):\n    if not lst:\n        return None\n    \n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist\n"
    },
    {
        "task_id": 458,
        "text": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rectangle_area(l,b):",
        "full_code": "\ndef rectangle_area(l, b):\n    area = l * b\n    return area\n"
    },
    {
        "task_id": 459,
        "text": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_uppercase(str1):",
        "full_code": "\nimport re\ndef remove_uppercase(str1):\n    # Use regex to find and remove all substrings that are entirely uppercase\n    result = re.sub(r'[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "task_id": 460,
        "text": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Extract(lst):",
        "full_code": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "task_id": 461,
        "text": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def upper_ctr(str):",
        "full_code": "\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "task_id": 462,
        "text": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def combinations_list(list1):",
        "full_code": "\ndef combinations_list(list1):\n    from itertools import chain, combinations\n    \n    def all_combinations(iterable):\n        s = list(iterable)\n        return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))\n    \n    return list(all_combinations(list1))\n"
    },
    {
        "task_id": 463,
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_subarray_product(arr):",
        "full_code": "\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n"
    },
    {
        "task_id": 464,
        "text": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_value(dict, n):",
        "full_code": "\ndef check_value(dict, n):\n    return all(value == n for value in dict.values())\n"
    },
    {
        "task_id": 465,
        "text": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def drop_empty(dict1):",
        "full_code": "\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "task_id": 466,
        "text": "Write a function to find the peak element in the given array.",
        "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "test_list": [
            "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
            "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
            "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_peak_util(arr, low, high, n):",
        "full_code": "\ndef find_peak_util(arr, low, high, n):\n    # Find the middle index\n    mid = low + (high - low) // 2\n    \n    # Compare middle element with its neighbors (if neighbors exist)\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    \n    # If middle element is not a peak and its left neighbor is greater\n    # than it, then left half must have a peak element\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n    \n    # If middle element is not a peak and its right neighbor is greater\n    # than it, then right half must have a peak element\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\ndef find_peak(arr):\n    n = len(arr)\n    return find_peak_util(arr, 0, n - 1, n)\n\n# Example usage:\narr = [1, 3, 20, 4, 1, 0]\npeak_index = find_peak(arr)\nprint(f\"The peak element is at index {peak_index} with value {arr[peak_index]}\")\n"
    },
    {
        "task_id": 467,
        "text": "Write a python function to convert decimal number to octal number.",
        "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_Octal(deciNum):",
        "full_code": "\ndef decimal_to_Octal(deciNum):\n    octalNum = \"\"\n    while deciNum > 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n"
    },
    {
        "task_id": 468,
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
            "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product(arr, n ):",
        "full_code": "\ndef max_product(arr, n):\n    # Initialize a list to store the maximum product ending at each index\n    max_product_ending_here = [1] * n\n    \n    # Initialize a list to store the length of the longest increasing subsequence ending at each index\n    lis_length = [1] * n\n    \n    # Fill the max_product_ending_here and lis_length lists\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                # If current element is greater than the previous element, update the LIS length and product\n                if lis_length[i] < lis_length[j] + 1:\n                    lis_length[i] = lis_length[j] + 1\n                    max_product_ending_here[i] = max_product_ending_here[j] * arr[i]\n                elif lis_length[i] == lis_length[j] + 1:\n                    # If the LIS length is the same, take the maximum product\n                    max_product_ending_here[i] = max(max_product_ending_here[i], max_product_ending_here[j] * arr[i])\n    \n    # The maximum product of any increasing subsequence will be the maximum value in max_product_ending_here\n    return max(max_product_ending_here)\n"
    },
    {
        "task_id": 469,
        "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "test_list": [
            "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
            "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
            "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_profit(price, k):",
        "full_code": "\ndef max_profit(price, k):\n    n = len(price)\n    \n    # If k is greater than or equal to half the length of the price list,\n    # we can perform as many transactions as we want, which reduces to the\n    # problem of finding the maximum profit with unlimited transactions.\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if price[i] > price[i - 1]:\n                max_profit += price[i] - price[i - 1]\n        return max_profit\n    \n    # Initialize the dp array\n    dp = [[0] * n for _ in range(k + 1)]\n    \n    # Fill the dp array\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    \n    return dp[k][n - 1]\n"
    },
    {
        "task_id": 470,
        "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_pairwise(test_tup):",
        "full_code": "\ndef add_pairwise(test_tup):\n    result = tuple(x + y for x, y in zip(test_tup[:-1], test_tup[1:]))\n    return result\n"
    },
    {
        "task_id": 471,
        "text": "Write a python function to find remainder of array multiplication divided by n.",
        "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
            "assert find_remainder([1,1,1],3,1) == 0",
            "assert find_remainder([1,2,1],3,2) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_remainder(arr, lens, n):",
        "full_code": "\ndef find_remainder(arr, lens, n):\n    product = 1\n    for i in range(lens):\n        product *= arr[i]\n    remainder = product % n\n    return remainder\n"
    },
    {
        "task_id": 472,
        "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Consecutive(l):",
        "full_code": "\ndef check_Consecutive(l):\n    if len(l) == 0:\n        return False\n    l.sort()\n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    return True\n"
    },
    {
        "task_id": 473,
        "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_intersection(test_list1, test_list2):",
        "full_code": "\ndef tuple_intersection(test_list1, test_list2):\n    def normalize_tuple(t):\n        return tuple(sorted(t))\n    \n    normalized_list1 = {normalize_tuple(t) for t in test_list1}\n    normalized_list2 = {normalize_tuple(t) for t in test_list2}\n    \n    intersection = normalized_list1 & normalized_list2\n    \n    return list(intersection)\n"
    },
    {
        "task_id": 474,
        "text": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_char(str1,ch,newch):",
        "full_code": "\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n"
    },
    {
        "task_id": 475,
        "text": "Write a function to sort counter by value.",
        "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef sort_counter(dict1):",
        "full_code": "\nfrom collections import Counter\ndef sort_counter(dict1):\n    sorted_counter = Counter(dict1).most_common()\n    return sorted_counter\n"
    },
    {
        "task_id": 476,
        "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def big_sum(nums):",
        "full_code": "\ndef big_sum(nums):\n    if not nums:\n        return None\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n"
    },
    {
        "task_id": 477,
        "text": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(string):\r\n  return (string.lower())",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_lower(string):",
        "full_code": "\ndef is_lower(string):\n    return string.lower()\n"
    },
    {
        "task_id": 478,
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "full_code": "\nimport re\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "task_id": 479,
        "text": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Digit(n) :",
        "full_code": "\ndef first_Digit(n):\n    # Convert the number to a string and return the first character\n    return int(str(n)[0])\n"
    },
    {
        "task_id": 480,
        "text": "Write a python function to find the maximum occurring character in a given string.",
        "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "test_list": [
            "assert get_max_occuring_char(\"data\") == \"a\"",
            "assert get_max_occuring_char(\"create\") == \"e\"",
            "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_occuring_char(str1):",
        "full_code": "\ndef get_max_occuring_char(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_count = 0\n    max_char = ''\n    \n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char\n"
    },
    {
        "task_id": 481,
        "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "test_list": [
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_subset_sum(set, n, sum):",
        "full_code": "\ndef is_subset_sum(set, n, sum):\n    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    # If last element is greater than sum, then ignore it\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    # Check if sum can be obtained by any of the following:\n    # (a) including the last element\n    # (b) excluding the last element\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n# Example usage:\n# set = [3, 34, 4, 12, 5, 2]\n# sum = 9\n# n = len(set)\n# print(is_subset_sum(set, n, sum))  # Output: True\n"
    },
    {
        "task_id": 482,
        "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "test_list": [
            "assert match(\"Geeks\") == 'Yes'",
            "assert match(\"geeksforGeeks\") == 'Yes'",
            "assert match(\"geeks\") == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re \r\ndef match(text):",
        "full_code": "\nimport re \ndef match(text):\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "task_id": 483,
        "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "test_list": [
            "assert first_Factorial_Divisible_Number(10) == 5",
            "assert first_Factorial_Divisible_Number(15) == 5",
            "assert first_Factorial_Divisible_Number(5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Factorial_Divisible_Number(x):",
        "full_code": "\ndef first_Factorial_Divisible_Number(x):\n    if x <= 0:\n        return \"Input must be a positive integer.\"\n    \n    factorial = 1\n    n = 1\n    \n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1\n\n# Example usage:\n# result = first_Factorial_Divisible_Number(10)\n# print(result)  # Output should be 5\n"
    },
    {
        "task_id": 484,
        "text": "Write a function to remove the matching tuples from the given two tuples.",
        "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "test_list": [
            "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
            "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
            "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_matching_tuple(test_list1, test_list2):",
        "full_code": "\ndef remove_matching_tuple(test_list1, test_list2):\n    # Convert tuples to sets to use set operations\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    matching_tuples = set1.intersection(set2)\n    \n    # Remove matching tuples from both lists\n    result_list1 = [t for t in test_list1 if t not in matching_tuples]\n    result_list2 = [t for t in test_list2 if t not in matching_tuples]\n    \n    return result_list1, result_list2\n"
    },
    {
        "task_id": 485,
        "text": "Write a function to find the largest palindromic number in the given array.",
        "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "test_list": [
            "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
            "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
            "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_palindrome(n) :",
        "full_code": "\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_largest_palindrome(arr):\n    largest_palindrome = None\n    for num in arr:\n        if is_palindrome(num):\n            if largest_palindrome is None or num > largest_palindrome:\n                largest_palindrome = num\n    return largest_palindrome\n\n# Example usage:\n# arr = [12321, 12345, 11111, 98789, 54321]\n# print(find_largest_palindrome(arr))  # Output: 98789\n"
    },
    {
        "task_id": 486,
        "text": "Write a function to compute binomial probability for the given number.",
        "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def nCr(n, r):",
        "full_code": "\ndef nCr(n, r):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n    \n    return factorial(n) // (factorial(r) * factorial(n - r))\n\ndef binomial_probability(n, r, p):\n    return nCr(n, r) * (p ** r) * ((1 - p) ** (n - r))\n"
    },
    {
        "task_id": 487,
        "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "test_list": [
            "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
            "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
            "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_tuple(tup):",
        "full_code": "\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n"
    },
    {
        "task_id": 488,
        "text": "Write a function to find the area of a pentagon.",
        "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "test_list": [
            "assert area_pentagon(5)==43.01193501472417",
            "assert area_pentagon(10)==172.0477400588967",
            "assert area_pentagon(15)==387.10741513251753"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef area_pentagon(a):",
        "full_code": "\nimport math\ndef area_pentagon(a):\n    area = (5 * a**2) / (4 * math.tan(math.pi / 5))\n    return area\n"
    },
    {
        "task_id": 489,
        "text": "Write a python function to find the frequency of the largest value in a given array.",
        "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
            "assert frequency_Of_Largest(3,[5,6,5]) == 1",
            "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Largest(n,arr):",
        "full_code": "\ndef frequency_Of_Largest(n, arr):\n    if n == 0:\n        return 0\n    \n    largest = max(arr)\n    frequency = arr.count(largest)\n    \n    return frequency\n"
    },
    {
        "task_id": 490,
        "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "test_list": [
            "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
            "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
            "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_symmetric(test_list):",
        "full_code": "\ndef extract_symmetric(test_list):\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"
    },
    {
        "task_id": 491,
        "text": "Write a function to find the sum of geometric progression series.",
        "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "test_list": [
            "assert sum_gp(1,5,2)==31",
            "assert sum_gp(1,5,4)==341",
            "assert sum_gp(2,6,3)==728"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef sum_gp(a,n,r):",
        "full_code": "\nimport math\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n"
    },
    {
        "task_id": 492,
        "text": "Write a function to search an element in the given array by using binary search.",
        "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "test_list": [
            "assert binary_search([1,2,3,5,8], 6) == False",
            "assert binary_search([7, 8, 9, 10, 13], 10) == True",
            "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_search(item_list,item):",
        "full_code": "\ndef binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if item_list[midpoint] == item:\n            found = True\n        else:\n            if item < item_list[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n\n    return found\n"
    },
    {
        "task_id": 493,
        "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "test_list": [
            "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
            "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
            "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):",
        "full_code": "\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    hex_height = radius * math.sqrt(3)\n    hex_width = radius * 3 / 2\n    \n    for y in range(starty, endy, int(hex_height)):\n        row = []\n        for x in range(startx, endx, int(hex_width)):\n            if (y // int(hex_height)) % 2 == 0:\n                centerx = x + radius\n            else:\n                centerx = x + hex_width / 2\n            \n            centery = y + hex_height / 2\n            \n            hexagon = [\n                (centerx + radius * math.cos(math.radians(angle)),\n                 centery + radius * math.sin(math.radians(angle)))\n                for angle in range(0, 360, 60)\n            ]\n            row.append(hexagon)\n        polygons.append(row)\n    \n    return polygons\n"
    },
    {
        "task_id": 494,
        "text": "Write a function to convert the given binary tuple to integer.",
        "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "test_list": [
            "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
            "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
            "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_integer(test_tup):",
        "full_code": "\ndef binary_to_integer(test_tup):\n    # Convert the tuple to a string of '0's and '1's\n    binary_str = ''.join(map(str, test_tup))\n    # Convert the binary string to an integer\n    integer_value = int(binary_str, 2)\n    return integer_value\n"
    },
    {
        "task_id": 495,
        "text": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
            "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
            "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "full_code": "\nimport re\ndef remove_lowercase(str1):\n    # Use regex to find and remove all lowercase substrings\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n"
    },
    {
        "task_id": 496,
        "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "test_list": [
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):",
        "full_code": "\nimport heapq as hq\ndef heap_queue_smallest(nums, n):\n    return hq.nsmallest(n, nums)\n"
    },
    {
        "task_id": 497,
        "text": "Write a function to find the surface area of a cone.",
        "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cone(5,12)==282.7433388230814",
            "assert surfacearea_cone(10,15)==880.5179353159282",
            "assert surfacearea_cone(19,17)==2655.923961165254"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_cone(r,h):",
        "full_code": "\nimport math\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_area = math.pi * r * l\n    total_area = base_area + lateral_area\n    return total_area\n"
    },
    {
        "task_id": 498,
        "text": "Write a python function to find gcd of two positive integers.",
        "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "test_list": [
            "assert gcd(12, 17) == 1",
            "assert gcd(4,6) == 2",
            "assert gcd(2,9) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(x, y):",
        "full_code": "\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n"
    },
    {
        "task_id": 499,
        "text": "Write a function to find the diameter of a circle.",
        "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "test_list": [
            "assert diameter_circle(10)==20",
            "assert diameter_circle(40)==80",
            "assert diameter_circle(15)==30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diameter_circle(r):",
        "full_code": "\ndef diameter_circle(r):\n    diameter = 2 * r\n    return diameter\n"
    },
    {
        "task_id": 500,
        "text": "Write a function to concatenate all elements of the given list into a string.",
        "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "test_list": [
            "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
            "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
            "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(list):",
        "full_code": "\ndef concatenate_elements(list):\n    concatenated_string = ''.join(map(str, list))\n    return concatenated_string\n"
    },
    {
        "task_id": 501,
        "text": "Write a python function to find common divisor between two numbers in a given pair.",
        "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
        "test_list": [
            "assert num_comm_div(2,4) == 2",
            "assert num_comm_div(2,8) == 2",
            "assert num_comm_div(12,24) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ngcd(x,y):",
        "full_code": "\ndef ngcd(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    common_divisor = gcd(x, y)\n    return common_divisor\n"
    },
    {
        "task_id": 502,
        "text": "Write a python function to find remainder of two numbers.",
        "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)",
        "test_list": [
            "assert find(3,3) == 0",
            "assert find(10,3) == 1",
            "assert find(16,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "full_code": "\ndef find(n, m):\n    remainder = n % m\n    print(remainder)\n"
    },
    {
        "task_id": 503,
        "text": "Write a function to add consecutive numbers of a given list.",
        "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
            "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
            "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_consecutive_nums(nums):",
        "full_code": "\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n"
    },
    {
        "task_id": 504,
        "text": "Write a python function to find the cube sum of first n natural numbers.",
        "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
        "test_list": [
            "assert sum_Of_Series(5) == 225",
            "assert sum_Of_Series(2) == 9",
            "assert sum_Of_Series(3) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Of_Series(n):",
        "full_code": "\ndef sum_Of_Series(n):\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes\n"
    },
    {
        "task_id": 505,
        "text": "Write a function to move all zeroes to the end of the given array.",
        "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A",
        "test_list": [
            "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
            "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
            "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_order(A):",
        "full_code": "\ndef re_order(A):\n    # Initialize two pointers: one for the current position and one for the last non-zero element found\n    current = 0\n    non_zero = 0\n    \n    # Iterate through the array\n    while current < len(A):\n        # If the current element is not zero, swap it with the element at the non_zero pointer\n        if A[current] != 0:\n            A[current], A[non_zero] = A[non_zero], A[current]\n            non_zero += 1\n        current += 1\n    \n    # Return the modified array\n    return A\n"
    },
    {
        "task_id": 506,
        "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
        "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permutation_coefficient(n, k):",
        "full_code": "\ndef permutation_coefficient(n, k):\n    # Initialize the result to 1\n    result = 1\n    \n    # Calculate n * (n-1) * (n-2) * ... * (n-k+1)\n    for i in range(n, n-k, -1):\n        result *= i\n    \n    return result\n"
    },
    {
        "task_id": 507,
        "text": "Write a function to remove specific words from a given list.",
        "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ",
        "test_list": [
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_words(list1, removewords):",
        "full_code": "\ndef remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]\n"
    },
    {
        "task_id": 508,
        "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
        "test_list": [
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
            "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def same_order(l1, l2):",
        "full_code": "\ndef same_order(l1, l2):\n    # Find the common elements between the two lists\n    common_elements = [elem for elem in l1 if elem in l2]\n    \n    # Create a pointer for each list\n    i, j = 0, 0\n    \n    # Iterate through the common elements and check their order\n    while i < len(common_elements) and j < len(l2):\n        if common_elements[i] == l2[j]:\n            i += 1\n        j += 1\n    \n    # If we have iterated through all common elements, they are in the same order\n    return i == len(common_elements)\n"
    },
    {
        "task_id": 509,
        "text": "Write a python function to find the average of odd numbers till a given odd number.",
        "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
        "test_list": [
            "assert average_Odd(9) == 5",
            "assert average_Odd(5) == 3",
            "assert average_Odd(11) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def average_Odd(n) :",
        "full_code": "\ndef average_Odd(n):\n    if n % 2 == 0:\n        return \"Input must be an odd number.\"\n    \n    odd_numbers = [i for i in range(1, n + 1) if i % 2 != 0]\n    average = sum(odd_numbers) / len(odd_numbers)\n    return average\n"
    },
    {
        "task_id": 510,
        "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
        "test_list": [
            "assert no_of_subsequences([1,2,3,4], 10) == 11",
            "assert no_of_subsequences([4,8,7,2], 50) == 9",
            "assert no_of_subsequences([5,6,7,8], 15) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def no_of_subsequences(arr, k):",
        "full_code": "\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[1] = 1\n    \n    for num in arr:\n        for prod in range(k, num - 1, -1):\n            if dp[prod] != 0:\n                new_prod = prod * num\n                if new_prod <= k:\n                    dp[new_prod] += dp[prod]\n    \n    result = sum(dp[1:])\n    return result\n"
    }
]