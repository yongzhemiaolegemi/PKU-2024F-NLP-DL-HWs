[
    {
        "task_id": 11,
        "text": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"",
            "assert remove_Occ(\"\",\"l\") == \"\""
        ],
        "def_code": "def remove_Occ(s,ch):",
        "question_1": "Create a Python function to delete the last character of a given string.",
        "answer_1": "def delete_last_char(string):\n    \"\"\"Delete the last character of a given string.\n\n    Args:\n        string (str): The string to remove the last character from. \n\n    Returns:\n        str: The string with the last character removed.\n    \"\"\"\n    return string[:-1]\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    result = delete_last_char(string)\n    print(result)",
        "question_2": "Write a Python code snippet to remove all occurrences of a character from a string.",
        "answer_2": "def remove_char(s, c):\n  return s.replace(c, '')",
        "question_3": "Develop a Python function to remove the last n characters from a given string.",
        "answer_3": "def remove_last_n_characters(str, n):\n  return str[:len(str)-n]"
    },
    {
        "task_id": 12,
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_matrix(M):",
        "question_1": "Write a Python code to sort a 5x5 numpy matrix from the lowest to highest values.",
        "answer_1": "import numpy as np\n\n# The given array\narr = np.array([[8, 2, 6, 7, 4],\n                [7, 9, 5, 4, 6],\n                [2, 3, 7, 1, 4],\n                [5, 8, 4, 9, 6],\n                [4, 7, 8, 2, 1]])\n\n# Sort the array in ascending order\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1]).argsort() # new added line\n\n# Get the sorted array\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1])[sorted_arr].reshape(arr.shape[0], arr.shape[1])\n\nprint(sorted_arr)",
        "question_2": "Optimize the following Python program for sorting a given array in ascending order such that it runs in O(n) time complexity.",
        "answer_2": "def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    less = []\n    equal = []\n    greater = []\n\n    pivot = A[0]\n    for num in A:\n        if num < pivot:\n            less.append(num)\n        elif num == pivot:\n            equal.append(num)\n        elif num > pivot:\n            greater.append(num)\n\n    return sort_array(less) + equal + sort_array(greater)",
        "question_3": "Create a function in Python that takes a list of numbers as an input and sorts them in ascending order.",
        "answer_3": "def sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr"
    },
    {
        "task_id": 13,
        "text": "Write a function to count the most common words in a dictionary.",
        "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "test_list": [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef count_common(words):",
        "question_1": "Write a Python program to print out the most common words in a given text.",
        "answer_1": "import collections\n\ndef most_common_words(text):\n    words = text.split()\n    counts = collections.Counter(words)\n    return counts.most_common(10)",
        "question_2": "Create a code in Python that determines the most common words in a given string?",
        "answer_2": "\"\"\"\nAlgorithm to determine the most common words in a given string\n\"\"\"\n\ndef most_common_words(string):\n    # split the string on whitespace\n    words = string.split()\n\n    # create a dictionary to store the count of each word \n    word_count = {}\n\n    # for each word, add it to the dictionary or increment the count \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n\n    # convert the dictionary into a list of tuples (word, count)\n    count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    return count_list[0][0]\n\nif __name__ == '__main__':\n    string = 'Hello world. This is a sentence.'\n    print('The most common word is:', most_common_words(string))",
        "question_3": "Create a Python program to find the most common word in the given string.",
        "answer_3": "def most_common_word(string):\n    string_list = string.split()\n    word_dict = {}\n    for word in string_list:\n        word_dict[word] = word_dict.get(word, 0) + 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_dict.items():\n        if count > max_count:\n            max_count = count\n            most_common_word = word\n    return most_common_word\n\nprint(most_common_word(string))\n# Output: the"
    },
    {
        "task_id": 14,
        "text": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Volume(l,b,h) :",
        "question_1": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_1": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Design a function to calculate the volume of a cube in Python.",
        "answer_3": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume"
    },
    {
        "task_id": 15,
        "text": "Write a function to split a string at lowercase letters.",
        "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "test_list": [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef split_lowerstring(text):",
        "question_1": "Generate a Python program to split a given string into uppercase and lowercase letters.",
        "answer_1": "def case_split(string):\n    string_list =list(string)\n    upper_list = []\n    lower_list = []\n    \n    for i in string_list:\n        if i.isupper():\n            upper_list.append(i)\n        else:\n            lower_list.append(i)\n    return ''.join(upper_list), ''.join(lower_list)",
        "question_2": "Write a Python function to split a given string in two parts which are separated by a space.",
        "answer_2": "def split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1]",
        "question_3": "Create a Python program to split a given string into two parts according to a given character.",
        "answer_3": "def split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result)"
    },
    {
        "task_id": 16,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"
        ],
        "def_code": "import re\r\ndef text_lowercase_underscore(text):",
        "question_1": "Generate a list of letters in lowercase using Python.",
        "answer_1": "import string \n\nprint(list(string.ascii_lowercase))",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Write a Python function to invert a string (swap uppercase and lowercase letters).",
        "answer_3": "def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result"
    },
    {
        "task_id": 17,
        "text": "Write a function to find the perimeter of a square.",
        "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_perimeter(a):",
        "question_1": "Construct a Python class for calculating the area and perimeter of a square.",
        "answer_1": "class Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4",
        "question_2": "Write a Python program which takes the length and width of a rectangle as input and returns its perimeter.",
        "answer_2": "def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter)",
        "question_3": "Write a Python function that computes the area of a square using the side length as a parameter.",
        "answer_3": "def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)"
    },
    {
        "task_id": 18,
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string):",
        "question_1": "What Python code can you create to remove the second character from a given string?",
        "answer_1": "removed_string = string[:1] + string[2:]\nprint(removed_string) # \"xample\"",
        "question_2": "Write a code in python to remove given character from a given string.",
        "answer_2": "def remove_char(given_string, character):\n    new_string =  given_string.replace(character, \"\")\n    return new_string",
        "question_3": "Write a Python program to remove duplicate characters from a given string.",
        "answer_3": "string = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)"
    },
    {
        "task_id": 19,
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_duplicate(arraynums):",
        "question_1": "Write an algorithm in Python to check whether an input array of integers contains duplicates or not.",
        "answer_1": "def check_duplicates(arr):\n    # Create a set to store elements\n    s = set()\n\n    # Iterate through the array and check if element is in set\n    for num in arr:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n\narr = [3, 5, 2, 4, 2]\n\n# Print the result\nif check_duplicates(arr):\n    print('Array contains duplicates')\nelse:\n    print('Array has no duplicates')\n\n// Output: Array contains duplicates",
        "question_2": "Design an algorithm in Python that can identify duplicate items in a given array of integers.",
        "answer_2": "# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)",
        "question_3": "Write a Python program to detect if an array contains any duplicate elements.",
        "answer_3": "def check_duplicates(arr):\n    seen = set()\n    \n    for element in arr:\n        if element in seen:\n            return True\n        else:\n            seen.add(element)\n    return False\n\narr = [3, 5, 8, 1, 2, 3]\nresult = check_duplicates(arr)\nprint(result)"
    },
    {
        "task_id": 20,
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert is_woodall(32212254719) == True",
            "assert is_woodall(32212254718) == False",
            "assert is_woodall(159) == True"
        ],
        "def_code": "def is_woodall(x):",
        "question_1": "Write a Python function to check if a string contains only numbers.",
        "answer_1": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_2": "Construct a program in Python to check if a string contains only digits.",
        "answer_2": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False",
        "question_3": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_3": "def contains_number(string):\n    return any(char.isdigit() for char in string)"
    },
    {
        "task_id": 21,
        "text": "Write a function to find m number of multiples of n.",
        "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "test_list": [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiples_of_num(m,n):",
        "question_1": "Optimize the following code in Python to reduce its complexity.",
        "answer_1": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_2": "Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.",
        "answer_2": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res",
        "question_3": "Write a Python program to determine if one number is a multiple of another.",
        "answer_3": "def is_multiple(num1, num2):\n   if (num1 % num2 == 0):\n       print(f'{num1} is a multiple of {num2}')\n   else:\n       print(f'{num1} is not a multiple of {num2}')\n\nis_multiple(32, 8)\n\nOutput:\n32 is a multiple of 8"
    },
    {
        "task_id": 22,
        "text": "Write a function to find the first duplicate element in a given array of integers.",
        "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "test_list": [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_first_duplicate(nums):",
        "question_1": "Design an algorithm in Python that can identify duplicate items in a given array of integers.",
        "answer_1": "# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)",
        "question_2": "Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number.",
        "answer_2": "def find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4",
        "question_3": "Generate a Python function that will accept an array of integers and remove duplicates from the array.",
        "answer_3": "def remove_duplicates(arr):\n new_arr = [] \n for num in arr: \n if num not in new_arr:\n new_arr.append(num) \n return new_arr"
    },
    {
        "task_id": 23,
        "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "test_list": [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
        ],
        "def_code": "def maximum_Sum(list1):",
        "question_1": "Optimize a given Python code snippet for faster performance.",
        "answer_1": "def function1(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        sublist_sum = 0\n        for j in range(i, len(list1)):\n            sublist_sum += list1[j]\n            max_sum = max(max_sum, sublist_sum)\n    return max_sum",
        "question_2": "Write a Python function to find the sublist with the maximum sum in a given list.",
        "answer_2": "def max_sum_sublist(list_a):\n start = 0\n end = 0\n max_sum = 0\n \n current_sum = 0\n for i in range(len(list_a)):\n  current_sum += list_a[i]\n  if current_sum < 0:\n   current_sum = 0\n   start = i + 1\n  if current_sum > max_sum:\n   max_sum = current_sum\n   end = i\n \n return list_a[start:end+1]\n \nmax_sum_sublist(list_a)",
        "question_3": "Optimize the following Python function that returns the sum of all the elements in a given list.",
        "answer_3": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total"
    },
    {
        "task_id": 24,
        "text": "Write a function to convert the given binary number to its decimal equivalent.",
        "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_decimal(binary):",
        "question_1": "Write a Python program to convert a given binary number to decimal.",
        "answer_1": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_2": "Generate a Python program which will convert the given binary number into its equivalent decimal number",
        "answer_2": "def binary_to_decimal(binary):\n  decimal = 0\n  binary = binary[::-1]\n  for i, num in enumerate(binary):\n    if num == '1':\n      decimal += pow(2, i)\n  return decimal",
        "question_3": "Write a Python program to convert a given binary number to a decimal number.",
        "answer_3": "binary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)"
    },
    {
        "task_id": 25,
        "text": "Write a python function to find the product of non-repeated elements in a given array.",
        "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "test_list": [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"
        ],
        "def_code": "def find_Product(arr,n):",
        "question_1": "Create an output array from the given input so that each element in the output is the product of all the other element in the same row.",
        "answer_1": "[180, 144, 120]\n\n# Python \ndef get_products(arr):\n    result = []\n    # looping over each row in the array\n    for row in arr:\n        product = 1\n        # calculating product of all elements except the element at current index \n        for i,element in enumerate(row):\n            product *= row[i] if i != 0 else 1\n        \n        # append product to result array\n        result.append(product)\n    return result",
        "question_2": "Write a Python function to calculate the product of elements in a list.",
        "answer_2": "def product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])",
        "question_3": "Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row.",
        "answer_3": "def rowProduct(arr):\n    result = []\n    for row in arr:\n        product = 1\n        for num in row:\n            product = product * num\n        result.append(product)\n\n    return result\n\narr = [[1, 2], [3, 4]]\n\nresult = rowProduct(arr)\nprint(result)"
    },
    {
        "task_id": 26,
        "text": "Write a function to check if the given tuple list has all k elements.",
        "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
        ],
        "def_code": "def check_k_elements(test_list, K):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_2": "def element_exists(elem, list_int):\n  return elem in list_int",
        "question_3": "Convert a given list into a list of tuples using Python.",
        "answer_3": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))"
    },
    {
        "task_id": 27,
        "text": "Write a python function to remove all digits from a list of strings.",
        "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "test_list": [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\ndef remove(list):",
        "question_1": "Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string.",
        "answer_1": "def remove_chars_at_indices(str, indices):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i not in indices:\n            new_str += str[i]\n    return new_str\n\nstr = \"Hello World!\"\nindex = [0, 5, 9]\nresult = remove_chars_at_indices(str, index)\nprint(result)",
        "question_2": "Create a function in Python that takes a given number, removes all its digits and returns an integer.",
        "answer_2": "def removeDigits(x):\n    str_x = str(x)\n    without_digits = int(\"\".join([i for i in str_x if not i.isdigit()]))\n    return without_digits\n\nx = 356\nprint(removeDigits(x))",
        "question_3": "Write a Python program to delete all occurrences of a given number from a list",
        "answer_3": "def remove_all(num, lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] != num:\n            result.append(lst[i])\n    return result"
    },
    {
        "task_id": 28,
        "text": "Write a python function to find binomial co-efficient.",
        "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "test_list": [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert binomial_Coeff(14,6) == 3003"
        ],
        "def_code": "def binomial_Coeff(n,k):",
        "question_1": "Generate a list of the binomial coefficients for a given value of \"n\" using a Python function.",
        "answer_1": "def binomial_coefficient(n):\n  coefficient = []\n  for k in range(n+1):\n    coefficient.append(int(math.factorial(n) / \n                        (math.factorial(k) * math.factorial(n - k))))\n  return coefficient",
        "question_2": "Given the following Python function, use optimization techniques to reduce the running time of the function.",
        "answer_2": "def functionA_opt(n):\n s = 0\n s = n*(n+1)*(n+2) // 6\n return s",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result"
    },
    {
        "task_id": 29,
        "text": "Write a python function to find the element occurring odd number of times.",
        "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "test_list": [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Odd_Occurrence(arr,arr_size):",
        "question_1": "Implement a Python function that takes a list of numbers as an input and counts the number of odd numbers in the list.",
        "answer_1": "def countOddNumbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n    return count\n\ncount = countOddNumbers([2, 3, 5, 7])\nprint(\"Number of odd numbers found: \" + str(count))",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Write a Python program to extract odd elements from a list.",
        "answer_3": "mylist = [2, 3, 4, 5, 6, 7, 8]\n\nodd_list = []\nfor num in mylist:\n    if num % 2 != 0:\n        odd_list.append(num)\n\nprint(odd_list) #[3, 5, 7]"
    },
    {
        "task_id": 30,
        "text": "Write a python function to count all the substrings starting and ending with same characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "question_1": "Generate an algorithm to count substrings in Python.",
        "answer_1": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "question_2": "Construct a program in Python to find all the possible substrings of a given string.",
        "answer_2": "def find_substrings(string): \n  \n    # Create an empty list to store all the possible substrings\n    substrings = [] \n  \n    # Iterate through each character of the string\n    for i in range(len(string)): \n        for j in range(i, len(string)): \n            substrings.append(string[i: j + 1]) \n  \n    return substrings",
        "question_3": "Create a Python program that finds the longest substring from a given string without repeating characters.",
        "answer_3": "def longestSubstring(str) : \n n = len(str) \n  \n # Create a map of distinct characters \n distinct_char = {}  \n for i in range(n) : \n distinct_char[str[i]] = i \n  \n cur_start = 0\n cur_end = 0\n max_start = 0\n max_end = 0\n max_len = 0\n  \n # Iterate through all characters and check   \n # if it forms a valid substring or not \n for i in range(n) : \n  \n # If character is already present \n if (str[i] in distinct_char) : \n  \n # Reset the cur_end to recent position \n cur_end = i \n  \n # If character is not present in the  \n # already formed substring, then \n # update max_len if required  \n if (cur_end - cur_start + 1 > max_len) : \n max_len = cur_end - cur_start + 1\n max_start = cur_start \n max_end = cur_end \n  \n # Update cur_start for next iteration \n cur_start += 1\n  \n # Store last occurrence of current  \n # character in the map \n distinct_char[str[i]] = i \n  \n print(str[max_start : max_end + 1]) \n  \n# Driver \nstr = \"abcabcbb\"\nlongestSubstring(str) # Prints \"abc\""
    },
    {
        "task_id": 31,
        "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "test_list": [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def func(nums, k):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Construct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].",
        "answer_2": "class MaxPQ:\n    def __init__(self, arr = []):\n        self.heap = [0]\n        for item in arr:\n            self.add(item)\n    \n    def add(self, key):\n        self.heap.append(key)\n        self._swim(len(self.heap)-1)\n    \n    def delMax(self):\n        root = self.heap[1]\n        self.heap[1] = self.heap[-1]\n        self.heap.pop()\n        self._sink(1)\n        return root\n    \n    def _swim(self, k):\n        while k > 1 and self.heap[k] > self.heap[k//2]:\n            temp = self.heap[k]\n            self.heap[k] = self.heap[k//2]\n            self.heap[k//2] = temp\n            k = k//2\n    \n    def _sink(self, k):\n        while 2*k <= len(self.heap)-1:\n            j = 2*k\n            if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]:\n                j += 1\n            if self.heap[j] > self.heap[k]:\n                temp = self.heap[j]\n                self.heap[j] = self.heap[k]\n                self.heap[k] = temp\n                k = j\n            else:\n                break\n\npq = MaxPQ([25,2,105,62,12])",
        "question_3": "Write a code to implement a priority queue using a max heap in Python",
        "answer_3": "class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1"
    },
    {
        "task_id": 32,
        "text": "Write a python function to find the largest prime factor of a given number.",
        "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "test_list": [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef max_Prime_Factors (n):",
        "question_1": "Optimize the following Python function to calculate the largest prime factor of a given number.",
        "answer_1": "def largest_prime_factor(n):\n    largest_factor = 1\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            largest_factor = i\n            n /= i\n        else:\n            i+=1\n    if n > largest_factor:\n        largest_factor = n\n    return int(largest_factor)\n\nprint(largest_prime_factor(24)) # Output: 3",
        "question_2": "Write a Python program that calculates the largest prime factor of a given number.",
        "answer_2": "def is_prime(num):\n for i in range(2, int(num**0.5) + 1):\n  if num % i == 0:\n   return False\n return True\n\ndef largest_prime_factor(n):\n for i in range(2, n + 1):\n  if n % i == 0 and is_prime(i):\n   lpf = i\n return lpf\n\nprint(largest_prime_factor(60))\n# Output: 5",
        "question_3": "Construct a program in Python that determines the largest prime factor of a number.",
        "answer_3": "def find_largest_prime_factor(number):\n  i = 2\n  while i < number // 2:\n    if number % i == 0:\n      number = number // i\n      i = 2\n    else:\n      i += 1\n  return number\n\nprint(find_largest_prime_factor(300))"
    },
    {
        "task_id": 33,
        "text": "Write a python function to convert a decimal number to binary number.",
        "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_To_Binary(N):",
        "question_1": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_1": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_2": "Write a Python program to convert a given binary number to decimal.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_3": "Create a python program to convert a decimal to its binary representation",
        "answer_3": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary"
    },
    {
        "task_id": 34,
        "text": "Write a python function to find the missing number in a sorted array.",
        "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "test_list": [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_missing(ar,N):",
        "question_1": "Create a Python script to detect any missing numbers in a given sorted array and return the missing numbers.",
        "answer_1": "def missingNumbers(arr):\n        start = arr[0]\n        end = arr[len(arr)-1]\n        \n        result = []\n        \n        for i in range(start, end+1):\n            if i not in arr:\n                result.append(i)\n                \n        return result\n\n# Test Case\narr = [2, 3, 5, 6, 7, 8, 10]\nprint(missingNumbers(arr))\n\n# Output:\n# [4, 9]",
        "question_2": "In Python, write a program to find a single missing number in a sorted array of unique integers.",
        "answer_2": "def findMissingNumber(arr):\n    n = len(arr)\n    total_sum = (n+1)*(n+2)//2\n    arr_sum = sum(arr)\n    \n    missing_number = total_sum - arr_sum\n    \n    return missing_number\n\narr = [1,2,3,4,6,7,8]\n\nprint(findMissingNumber(arr))",
        "question_3": "Design a function in Python for finding the missing number in an array of integers.",
        "answer_3": "def find_missing_number(arr):\n # Set to store all numbers from 1 to the last element in the array\n # For an array of length n, the last element has value n \n all_nums = set(range(1, arr[-1] + 1)) \n \n # Set to store all numbers present in the array\n arr_nums = set(arr) \n  \n return list(all_nums - arr_nums)[0] \n\n# Test\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9]))\n# Output: 5"
    },
    {
        "task_id": 35,
        "text": "Write a function to find the n-th rectangular number.",
        "code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "test_list": [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rect_num(n):",
        "question_1": "Write a Python function to create a list containing the squares of numbers up to n.",
        "answer_1": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))",
        "question_2": "Design an algorithm in Python that prints out the squares of each number between 1 and n.",
        "answer_2": "def printSquares(n):\n for num in range(1,n+1):\n sqr = num * num\n print(sqr)\n\nn = 8\nprintSquares(n)",
        "question_3": "Design a program in Python to detect if a given number is a perfect square?",
        "answer_3": "# function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False"
    },
    {
        "task_id": 36,
        "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "test_list": [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Nth_Digit(p,q,N) :",
        "question_1": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_1": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b",
        "question_2": "Generate a Python program to divide two numbers and produce the result in decimal form.",
        "answer_2": "def divide(a,b):\n return round(a/b, 2)",
        "question_3": "Write a Python list comprehension to extract the individual digits of a given number.",
        "answer_3": "[int(d) for d in str(num)]"
    },
    {
        "task_id": 37,
        "text": "Write a function to sort a given mixed list of integers and strings.",
        "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "test_list": [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_mixed_list(mixed_list):",
        "question_1": "Develop a function in Python to sort a given array of strings.",
        "answer_1": "def sort_strings(strings):\n  return sorted(strings)",
        "question_2": "Create a sorting algorithm that sorts a list of strings alphabetically in Python.",
        "answer_2": "def sortAlphabetically(stringList):\n  sortedList = sorted(stringList)\n  return sortedList\n\nunsortedList = [\"list\", \"of\", \"unsorted\", \"strings\"]\nsortedList = sortAlphabetically(unsortedList)\n\nprint(sortedList)",
        "question_3": "Write a function in Python that sorts a given list of strings in alphabetical order case insensitive.",
        "answer_3": "def sort_strings_case_insensitive(input_list):\n  return sorted([string.strip().lower() for string in input_list])"
    },
    {
        "task_id": 38,
        "text": "Write a function to find the division of first even and odd number of a given list.",
        "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "test_list": [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def div_even_odd(list1):",
        "question_1": "Write a Python program to print out the even numbers in the given list.",
        "answer_1": "#Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num)",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Create a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements.",
        "answer_3": "def find_even_odd(nums):\n  even_list = []\n  odd_list = []\n  for num in nums:\n    if num % 2 == 0:\n      even_list.append(num)\n    else:\n      odd_list.append(num)\n  \n  return even_list, odd_list\n  \nprint(find_even_odd([1, 2, 3, 4, 5, 6]))"
    },
    {
        "task_id": 39,
        "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "test_list": [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):",
        "question_1": "Generate a Python function that rearranges the characters of a string such that no character repeats consecutively.",
        "answer_1": "def rearrange_chars(string):\n    char_list = list(string)\n    for i in range(len(char_list)):\n        for j in range(i + 1, len(char_list)):\n            if char_list[i] == char_list[j]:\n                char_list.insert(j, '_')\n    return \"\".join(char_list).replace('_', '')",
        "question_2": "Create a function in Python to check if a given string contains two of the same characters next to each other.",
        "answer_2": "def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False",
        "question_3": "Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.",
        "answer_3": "def is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)"
    },
    {
        "task_id": 40,
        "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "test_list": [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):",
        "question_1": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_1": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "question_2": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_2": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_3": "Write a Python program to create a dictionary of the elements in a list and their frequency count.",
        "answer_3": "def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))"
    },
    {
        "task_id": 41,
        "text": "Write a function to filter even numbers using lambda function.",
        "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "test_list": [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_evennumbers(nums):",
        "question_1": "Rewrite a Python program from imperative to functional style.",
        "answer_1": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)",
        "question_2": "Write a Python program to filter out all the even numbers from a list.",
        "answer_2": "def filter_even(numbers):\n    return [n for n in numbers if n %2 == 0]",
        "question_3": "Design a program in Python to filter a given array of integers and output only the even numbers.",
        "answer_3": "def filterEvenNo(arr): \n\n  # return a list containing only even numbers\n  return [num for num in arr if num % 2 == 0]"
    },
    {
        "task_id": 42,
        "text": "Write a python function to find the sum of repeated elements in a given array.",
        "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"
        ],
        "def_code": "def find_Sum(arr,n):",
        "question_1": "Write a Python function to sum up elements in a given array.",
        "answer_1": "def sum_array(arr):\n result = 0\n for item in arr:\n result += item\n return result",
        "question_2": "Optimize the python code that finds the sum of the elements in a given array.",
        "answer_2": "def sum(arr): \n    s = 0\n    for number in arr: \n        s += number \n    return s",
        "question_3": "Generate code to find the sum of all numbers in an array using Python.",
        "answer_3": "def sum_of_array(arr):\n    # Initialize result \n    res = 0 \n  \n    # Iterate through all elements \n    # and add them to result \n    for i in range(0, len(arr)): \n        res = res + arr[i] \n  \n    # return final result \n    return res"
    },
    {
        "task_id": 43,
        "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "test_list": [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match(\"aab-cbbbc\") == 'Not matched!'"
        ],
        "def_code": "import re\r\ndef text_match(text):",
        "question_1": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_1": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_2": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_2": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
        "question_3": "Write a Python function to invert a string (swap uppercase and lowercase letters).",
        "answer_3": "def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result"
    },
    {
        "task_id": 44,
        "text": "Write a function that matches a word at the beginning of a string.",
        "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert text_match_string(\"foo\")==('Found a match!')"
        ],
        "def_code": "import re\r\ndef text_match_string(text):",
        "question_1": "Write a function in Python to display all the words beginning with a given alphabet in a given string.",
        "answer_1": "def all_words_beginning_with(str, alphabet):\n  words = str.split()\n  result = []\n  for word in words:\n    if word[0].upper() == alphabet.upper():\n      result.append(word)\n  \n  return result",
        "question_2": "Create a Python script that takes a string and prints the first character of every word in the given string.",
        "answer_2": "def first_characters_of_words(string):\n    words = string.split(\" \") \n    characters = [word[0] for word in words] \n    return \"\".join(characters)\n\nprint(first_characters_of_words(\"This is a test string\")) # Tiat",
        "question_3": "Write a Python function that takes a string as input and returns true if the string starts with the letter \"a\".",
        "answer_3": "def starts_with_a(string):\n    if string[0] == 'a':\n        return True\n    else:\n        return False\n\nresult = starts_with_a('awesome')\nprint(result)"
    },
    {
        "task_id": 45,
        "text": "Write a function to find the gcd of the given array elements.",
        "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "test_list": [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_gcd(x, y):",
        "question_1": "Write a Python function to find the GCD of two numbers.",
        "answer_1": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "question_2": "Write a Python script to reduce an array of integers by their GCD.",
        "answer_2": "def gcd(a, b):\n   while a != 0:\n       a, b = b % a, a\n   return b\n\ndef reduce_by_gcd(arr):\n    gcd_val = arr[0]\n    for i in range(len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return [a // gcd_val for a in arr]\n\nreduced_arr = reduce_by_gcd([30, 20, 45])\nprint(reduced_arr) # [2, 3, 5]",
        "question_3": "Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.",
        "answer_3": "def find_GCD(input_list): \n gcd = input_list[0] \n for num in input_list[1:]: \n gcd = find_GCD(gcd, num) \n return gcd\n\ndef find_GCD(a, b):\n while(b != 0): \n a, b = b, a%b \n return a"
    },
    {
        "task_id": 46,
        "text": "Write a python function to determine whether all the numbers are different from each other are not.",
        "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "test_list": [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def test_distinct(data):",
        "question_1": "Convert the following Algorithm into Python code.\n\nInput: two numbers\n\nAlgorithm:\n1. Check if the two numbers are equal.\n2. If true, return 0.\n3. Else check the which is higher.\n4. Return 1 if the first number is higher than the second one.\n5. Return -1 otherwise.",
        "answer_1": "def compare_numbers(num1, num2):\n if num1 == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result)",
        "question_2": "Create a Python program that checks if two numbers are equal or not.",
        "answer_2": "def is_equal(num1, num2):\n return num1 == num2",
        "question_3": "Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list?",
        "answer_3": "def max_difference(numbers):\n max_diff = 0\n for i in range(len(numbers)-1):\n for j in range(i+1, len(numbers)):\n cur_diff = abs(numbers[i] - numbers[j])\n if cur_diff > max_diff:\n max_diff = cur_diff\n return max_diff\n\nresult = max_difference([4, 8, 2, 10, 6])\nprint(result)"
    },
    {
        "task_id": 47,
        "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "test_list": [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [
            "assert compute_Last_Digit(3,7) == 0",
            "assert compute_Last_Digit(20,23) == 6",
            "assert compute_Last_Digit(1021,1024) == 4"
        ],
        "def_code": "def compute_Last_Digit(A,B):",
        "question_1": "Write a Python function to calculate the factorial of a number (a non-negative integer).",
        "answer_1": "def factorial(n):\n    if n == 0: \n        return 1 \n    return n * factorial(n-1) \n\nnum = 9\nfactorial_num = factorial(num)\nprint(factorial_num)",
        "question_2": "Design a function in Python to compute the factorial of a given number.",
        "answer_2": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)",
        "question_3": "Design a Python function to compute the factorial of a given number.",
        "answer_3": "def factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "task_id": 48,
        "text": "Write a python function to set all odd bits of a given number.",
        "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "test_list": [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_bit_set_number(n):",
        "question_1": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_1": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_2": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_2": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"",
        "question_3": "Produce a Python program to print odd numbers from 1 to 10.",
        "answer_3": "for num in range(1, 11): \n    if num % 2 != 0: \n        print(num)"
    },
    {
        "task_id": 49,
        "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "question_1": "Create a Python script to return the first two elements of a list.",
        "answer_1": "def get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2]",
        "question_2": "Extract the 2nd and 3rd element from a given list in Python.",
        "answer_2": "new_list = list[1:3]",
        "question_3": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_3": "first_element = (3, 4, 5)[0]"
    },
    {
        "task_id": 50,
        "text": "Write a function to find the list with minimum length using lambda function.",
        "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "test_list": [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_length_list(input_list):",
        "question_1": "Optimize the following python program and reduce its runtime.",
        "answer_1": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "question_2": "Construct a Python script for finding the second smallest element in a given list.",
        "answer_2": "def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele"
    },
    {
        "task_id": 51,
        "text": "Write a function to print check if the triangle is equilateral or not.",
        "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_equilateral(x,y,z):",
        "question_1": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_1": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_2": "Create a Python program to identify the type of triangles given three sides.",
        "answer_2": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_3": "Create a python program to classify the type of a triangle based on the side lengths.",
        "answer_3": "def get_triangle_type(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\""
    },
    {
        "task_id": 52,
        "text": "Write a function to caluclate area of a parallelogram.",
        "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parallelogram_area(b,h):",
        "question_1": "Write a Python function that computes the area of a square using the side length as a parameter.",
        "answer_1": "def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)",
        "question_2": "Create a python function to compute the area of a triangle with given sides.",
        "answer_2": "def calculateTriangleArea(a, b, c): \n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n  \narea = calculateTriangleArea(a, b, c) \nprint(\"Area of triangle is %.2f\" % area)",
        "question_3": "Construct a function in Python to calculate the area of a triangle with three sides",
        "answer_3": "def triangleArea(side1, side2, side3):\n  s = (side1 + side2 + side3) / 2\n  area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n  return area"
    },
    {
        "task_id": 53,
        "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "test_list": [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(str):",
        "question_1": "Write a function in Python to compare two given strings character-wise and return the position of the first difference.",
        "answer_1": "def compare_strings_charwise(s1, s2):\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            return i\n    return -1",
        "question_2": "Write a Python program create a string made of the first and last two characters from a given string.",
        "answer_2": "def substring(str):\n    if len(str) < 3:\n        return\n    else:\n        return str[:2] + str[-2:]\n\nsubstring(\"hello\")",
        "question_3": "Create a function in Python to check if a given string contains two of the same characters next to each other.",
        "answer_3": "def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False"
    },
    {
        "task_id": 54,
        "text": "Write a function to sort the given array by using counting sort.",
        "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "test_list": [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def counting_sort(my_list):",
        "question_1": "Create a python script to sort the numbers in an array",
        "answer_1": "def sort_array(arr):\n    for i in range(0, len(arr)-1):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "question_2": "Write a function in Python to perform a selection sort on an unsorted array.",
        "answer_2": "def selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n        \nconst result = selection_sort([4, 6, 1, 3, 8, 2]);\nconsole.log(result);",
        "question_3": "Create a Python function to sort an array of numbers based on their size.",
        "answer_3": "def sort_array(arr):\n    arr.sort()\n    return arr"
    },
    {
        "task_id": 55,
        "text": "Write a function to find t-nth term of geometric series.",
        "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "test_list": [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef tn_gp(a,n,r):",
        "question_1": "Write a python function to calculate an exponential series",
        "answer_1": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "question_2": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_2": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum",
        "question_3": "Develop a program in Python to calculate the sum of the following series:",
        "answer_3": "def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))"
    },
    {
        "task_id": 56,
        "text": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rev(num):",
        "question_1": "Develop a function in Python to accept a positive integer as input and print its reverse.",
        "answer_1": "def reverse_integer(number):\n    reversed_number = 0\n    while number > 0: \n        remainder = number % 10\n        reversed_number *= 10\n        reversed_number += remainder\n        number //= 10\n      \n    return reversed_number\n\nnumber = 12345\nprint(\"Reversed Number:\", reverse_integer(number))",
        "question_2": "Can you create a program in Python which reverses a number?",
        "answer_2": "# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number//10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321",
        "question_3": "Design a function in Python that takes an integer and returns its opposite in sign.",
        "answer_3": "def opposite_int(num):\n  return -1 * num"
    },
    {
        "task_id": 57,
        "text": "Write a python function to find the largest number that can be formed with the given digits.",
        "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "test_list": [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Num(arr,n) :",
        "question_1": "Write a Python function to find the largest number in a given list.",
        "answer_1": "def find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest",
        "question_2": "Write a python function to take a list of numbers as input and return the largest number.",
        "answer_2": "def find_largest_number(numbers):\n  largest_number = numbers[0]\n  for number in numbers:\n    if number > largest_number:\n      largest_number = number\n  return largest_number",
        "question_3": "Create a function in Python that takes a list of integers and returns the largest integer.",
        "answer_3": "def biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9"
    },
    {
        "task_id": 58,
        "text": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def opposite_Signs(x,y):",
        "question_1": "Design a function in Python that takes an integer and returns its opposite in sign.",
        "answer_1": "def opposite_int(num):\n  return -1 * num",
        "question_2": "Given two integers, write a Python function to compare them.",
        "answer_2": "def compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result)",
        "question_3": "Develop a function in Python to accept a positive integer as input and print its reverse.",
        "answer_3": "def reverse_integer(number):\n    reversed_number = 0\n    while number > 0: \n        remainder = number % 10\n        reversed_number *= 10\n        reversed_number += remainder\n        number //= 10\n      \n    return reversed_number\n\nnumber = 12345\nprint(\"Reversed Number:\", reverse_integer(number))"
    },
    {
        "task_id": 59,
        "text": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_octagonal(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_2": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "question_3": "Generate a Python program to read an integer from the user and display a right-angled triangle with the given integer as the base.",
        "answer_3": "num = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\")"
    },
    {
        "task_id": 60,
        "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "test_list": [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_len_sub( arr, n):",
        "question_1": "Create a function in Python to check the length of the longest increasing subsequence in a given array.",
        "answer_1": "def longestIncreasingSubsequence(arr):\n    n = len(arr) \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n  \n    return maximum \n  \narr = [1, 3, 5, 4, 7] \nres = longestIncreasingSubsequence(arr); \nprint(res)",
        "question_2": "Write a Python program to find the length of the longest increasing subsequence in a given array.",
        "answer_2": "def longest_increasing_subsequence(arr):\n    length = len(arr)\n    lis = [1] * length\n    for i in range(1, length):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\nresult = longest_increasing_subsequence([3, 4, 2, 1, 7])\nprint(result)",
        "question_3": "Create a Python program that identifies the longest contiguous subsequence with same values from an integer array.",
        "answer_3": "def longestSubsequence(array):\n    longest_start = 0\n    longest_length = 0\n    start = 0\n    current_length = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            current_length += 1\n        else:\n            current_length = 0\n            start = i+1\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_start = start\n    return array[longest_start : longest_start + longest_length + 1]"
    },
    {
        "task_id": 61,
        "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "test_list": [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):",
        "question_1": "Write a Python function to calculate the sum of the digits in a given string of numbers and letters.",
        "answer_1": "def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum",
        "question_2": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.",
        "answer_2": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "question_3": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_3": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))"
    },
    {
        "task_id": 62,
        "text": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(xs):\n  return min(xs)\n",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_num(xs):",
        "question_1": "Can you find the smallest number in a given list using Python?",
        "answer_1": "def smallest_num(lst):\n   min_num = lst[0]\n   \n   for num in lst:\n       if num < min_num:\n           min_num = num\n           \n   return min_num\n\nlst = [4, 5, 6, 7, 8, 1, 2]\n\nprint(smallest_num(lst))",
        "question_2": "Design an algorithm in Python to find the smallest number in a given list.",
        "answer_2": "def smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)",
        "question_3": "Create a program to find the smallest number in a given list using a for loop in Python.",
        "answer_3": "def find_smallest_number(lst):\n  smallest = lst[0]\n  for number in lst:\n    if number < smallest:\n      smallest = number\n  return smallest\n\nprint(find_smallest_number([12, 4, 16, 15]))\n# Output: 4"
    },
    {
        "task_id": 63,
        "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_difference(test_list):",
        "question_1": "Create a Python function that takes a list of numbers and returns the maximum difference between any two elements.",
        "answer_1": "def getMaxDifference(elementList): \n    maxDifference = 0\n    for i in range(len(elementList)): \n        for j in range(i + 1, len(elementList)): \n            if (elementList[j] - elementList[i] > maxDifference): \n                maxDifference = elementList[j] - elementList[i] \n    return maxDifference\n\nlist = [3, 14, 5, 2, 9]\nprint (getMaxDifference(list))",
        "question_2": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_2": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_3": "Design a function in Python to find the maximum pair sum from the list input.",
        "answer_3": "def maxPairSum(input_list):\n\n    #assume the first and second elements are the max pair\n    max_pair_sum = input_list[0] + input_list[1]\n\n    # Keep track of the max pair\n    pair_index_one = 0\n    pair_index_two = 1\n\n    # iterate through the entire list\n    for index_one in range(0, len(input_list)):\n        for index_two in range(index_one + 1, len(input_list)):\n\n            # if the current pair sum is greater than the max pair sum\n            # update the max pair sum and the pair indices\n            if input_list[index_one] + input_list[index_two] > max_pair_sum:\n                max_pair_sum = input_list[index_one] + input_list[index_two]\n                pair_index_one = index_one\n                pair_index_two = index_two\n\n    #return the max pair sum\n    return max_pair_sum"
    },
    {
        "task_id": 64,
        "text": "Write a function to sort a list of tuples using lambda.",
        "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def subject_marks(subjectmarks):",
        "question_1": "Write a Python program to sort a list of tuples using a lambda expression",
        "answer_1": "sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]",
        "question_2": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_3": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_3": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])"
    },
    {
        "task_id": 65,
        "text": "Write a function of recursion list sum.",
        "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def recursive_list_sum(data_list):",
        "question_1": "Create a recursive Python function to calculate the sum of all elements in a list.",
        "answer_1": "def sum_list(list):\n if not list:\n  return 0\n\n return list[0] + sum_list(list[1:])",
        "question_2": "Rewrite the following Python program using recursion to sum the numbers in a list.",
        "answer_2": "# Using recursion to sum the numbers in a list\ndef recursive_sum(arr):\n    if len(arr) == 0:  \n        return 0   # Base case \n    else:\n        return arr[0] + recursive_sum(arr[1:])   # Recursive case\n\nprint(\"Sum of the list:\", recursive_sum([2, 4, 6, 8]))",
        "question_3": "Convert the following loop code into a recursive function in Python.",
        "answer_3": "def sum_of_n_natural_numbers_recursive(n, s=0):\n    if n == 0:\n        return s\n    \n    s += n\n    return sum_of_n_natural_numbers_recursive(n-1, s)\n\nresult = sum_of_n_natural_numbers_recursive(10)\nprint(result)"
    },
    {
        "task_id": 66,
        "text": "Write a python function to count positive numbers in a list.",
        "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_count(list):",
        "question_1": "Compose a code in Python that counts the number of positive integers in a list.",
        "answer_1": "def count_positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count",
        "question_2": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_2": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)",
        "question_3": "Write a Python program to count and display the number of positive numbers from a given list of integers.",
        "answer_3": "def countPositive(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print(\"Number of positive numbers:\", count)\n\nnums = [-2, 3, 4, -7, 6]\ncountPositive(nums)\n\n# Output: Number of positive numbers: 3"
    },
    {
        "task_id": 67,
        "text": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bell_number(n):",
        "question_1": "Create a Python script to partition a list into sub-lists of equal size.",
        "answer_1": "def partition(lst, n):\n return [lst[i:i+n] for i in range(0, len(lst), n)]\n \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npartitions = partition(list, 3)\n \nfor p in partitions:\n print(p)\n\n# Output\n# [1, 2, 3]\n# [4, 5, 6]\n# [7, 8, 9]\n# [10]",
        "question_2": "Write a function in Python that creates a list of all the letter combinations of a given string.",
        "answer_2": "def letterCombinations(string):\n letters = [] \n for i in range(len(string)): \n for j in range(i+1, len(string)+1): \n letters.append(string[i:j]) \n return letters",
        "question_3": "Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4.",
        "answer_3": "def countWays(n):  \n if (n == 0): \n return 1\n elif (n < 0): \n return 0\n else: \n return countWays(n-1) + countWays(n-3) + countWays(n-4)\n\nn = 8\nresult = countWays(n)\n\nprint(\"The number of different ways to express\", n, \"as the sum of 1, 3 and 4 is:\", result)"
    },
    {
        "task_id": 68,
        "text": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Monotonic(A):",
        "question_1": "Write an algorithm in Python to detect the monotonic increasing pattern in a given array.",
        "answer_1": "def increasingPattern(arr):\n\tstatus = False\n\tcheck = arr[0]\n\tfor i in range(1,len(arr)): \n\t\tif check < arr[i]:\n\t\t\tcheck = arr[i]\n\t\t\tstatus = True\n\t\telse:\n\t\t\tstatus = False\n\t\t\tbreak\n\treturn status\n\n\n# Test case\narr = [2, 3, 4, 5, 6, 7, 8, 1]\nprint(increasingPattern(arr))  # Output: False",
        "question_2": "Create a Python program to determine if a list is monotonically increasing.",
        "answer_2": "def check_monotonic(list):\n is_monotonic = True\n for i in range(len(list)-1):\n  if(list[i] > list[i+1]):\n   is_monotonic = False\n return is_monotonic\n\nlist = [1, 3, 4, 5, 9, 10]\nprint(check_monotonic(list)) # Output: True",
        "question_3": "Create a function in Python that takes in a list of numbers and returns true if the list of numbers is strictly increasing; false otherwise.",
        "answer_3": "def is_strictly_increasing(numbers):\n for i in range(len(numbers) - 1):\n if numbers[i] >= numbers[i + 1]:\n return False\n return True\n\nnumbers = [3, 4, 5, 6, 7]\nresult = is_strictly_increasing(numbers)\nprint(result) # returns True"
    },
    {
        "task_id": 69,
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_sublist(l, s):",
        "question_1": "Write a Python function to check if an element exists in a list.",
        "answer_1": "def check_list(list_, element): \n    return element in list_",
        "question_2": "Generate a Python program to check if a list contains a given value.",
        "answer_2": "def check_if_contains(lst, val):\n    return val in lst",
        "question_3": "Write a Python program to check if an item exists in a given list.",
        "answer_3": "def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result)"
    },
    {
        "task_id": 70,
        "text": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_equal_tuple(Input, k):",
        "question_1": "Develop a python code to achieve the following goal",
        "answer_1": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
        "question_2": "Write a Python function that takes a list of strings and checks if all the strings have the same length.",
        "answer_2": "def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True",
        "question_3": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]"
    },
    {
        "task_id": 71,
        "text": "Write a function to sort a list of elements using comb sort.",
        "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def comb_sort(nums):",
        "question_1": "Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.",
        "answer_1": "def sortList(arr, num): \n    arr.sort(key = lambda x: x*num) \n    return arr \n  \narr = [3, 1, 5, 4, 2] \nnum = 5\nprint(sortList(arr, num))",
        "question_2": "Create a function in Python that sorts the elements of a given list.",
        "answer_2": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)",
        "question_3": "Generate a Python program to demonstrate a sorting algorithm.",
        "answer_3": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))"
    },
    {
        "task_id": 72,
        "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dif_Square(n):",
        "question_1": "Develop a Python function that squares a given number.",
        "answer_1": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Design a program in Python to detect if a given number is a perfect square?",
        "answer_3": "# function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False"
    },
    {
        "task_id": 73,
        "text": "Write a function to split the given string with multiple delimiters by using regex.",
        "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "test_list": [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef multiple_split(text):",
        "question_1": "Create a program in Python to split a string into an array based on a given delimiter.",
        "answer_1": "def split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World']",
        "question_2": "Generate a code snippet to split a given string using a given delimiter in Python.",
        "answer_2": "str.split(delimiter)",
        "question_3": "Write a Python program to split a string into a list of substrings.",
        "answer_3": "words = str.split(\" \")"
    },
    {
        "task_id": 74,
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_samepatterns(colors, patterns):",
        "question_1": "Construct a Python program to detect pattern",
        "answer_1": "def detect_pattern(arr):\n    consec_nums = []\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            # if consecutive numbers are detected \n            # add the number to the list\n            consec_nums.append(arr[i - 1])\n            consec_nums.append(arr[i])\n    \n    return consec_nums",
        "question_2": "Create a Python function to detect a specific sequence",
        "answer_2": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_3": "Create an algorithm in Python to analyze a given list of numbers and identify patterns, if any.",
        "answer_3": "def find_pattern(lst):\n pattern_list = []\n for i in range(len(lst) - 1):\n diff = abs(lst[i] - lst[i + 1])\n pattern_list.append(diff)\n\n # Check for increasing pattern\n increasing = True\n for j in range(len(pattern_list) - 1):\n if pattern_list[j] > pattern_list[j + 1]:\n increasing = False\n\n # Check for constant pattern\n constant = True\n for k in range(len(pattern_list) - 1):\n if pattern_list[k] != pattern_list[k + 1]:\n constant = False\n\n # Check for repeating pattern\n repeating = True\n for l in range(len(pattern_list) - 2):\n if pattern_list[l] != pattern_list[l + 2]:\n repeating = False\n\n if increasing:\n return \"Increasing\"\n elif constant:\n return \"Constant\"\n elif repeating:\n return \"Repeating\"\n else:\n return None\n\nlst = [7,8,10,15,20,25,30,31]\nprint(find_pattern(lst))"
    },
    {
        "task_id": 75,
        "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_tuples(test_list, K):",
        "question_1": "Create a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function).",
        "answer_1": "def filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6]",
        "question_2": "Write a function to remove all elements from a Python list that are divisible by a given number.",
        "answer_2": "def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]",
        "question_3": "Write a Python program that takes a list of numbers as input and returns a list of all numbers in the original list which are divisible by 7.",
        "answer_3": "def divisible_by_seven(numbers): \n    return [number for number in numbers if number % 7 == 0]\n\nnumbers = [14, 21, 49, 28, 35, 56, 16]\nprint(divisible_by_seven(numbers))\n\n# Output  [14, 21, 28, 56]"
    },
    {
        "task_id": 76,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Develop a Python function that squares a given number.",
        "answer_3": "def square(number):\n \u00a0 \u00a0return number * number"
    },
    {
        "task_id": 77,
        "text": "Write a python function to find the difference between sum of even and odd digits.",
        "code": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Diff(n):",
        "question_1": "Create a function in Python to sum up all odd digits in a given number.",
        "answer_1": "def sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243))",
        "question_2": "Develop a python code to evaluate the sum of all the even numbers in a given sequence.",
        "answer_2": "def sum_even_numbers(sequence):\n    result = 0\n    for num in sequence:\n        if num % 2 == 0:\n            result += num\n    \n    return result",
        "question_3": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_3": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum"
    },
    {
        "task_id": 78,
        "text": "Write a python function to find number of integers with odd number of set bits.",
        "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "test_list": [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_With_Odd_SetBits(n):",
        "question_1": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_1": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_2": "Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.",
        "answer_2": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]",
        "question_3": "Write a Python program to count the number of even and odd numbers in a given list of integers.",
        "answer_3": "def count_even_odd(numbers):\n even_count = 0\n odd_count = 0\n for num in numbers:\n     if num % 2 == 0:\n         even_count += 1\n     else:\n         odd_count += 1\n return even_count, odd_count"
    },
    {
        "task_id": 79,
        "text": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def word_len(s):",
        "question_1": "Create a Python program to parse a list of strings and print the words with odd length.",
        "answer_1": "list = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word)",
        "question_2": "In Python, create a function to identify whether a given number is even or odd.",
        "answer_2": "def is_odd(n):\n  if(n % 2 == 0):\n    return \"Even\"\n  else:\n    return \"Odd\"\n \nprint(is_odd(21)) # Outputs: \"Odd\"",
        "question_3": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_3": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "task_id": 80,
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test_list": [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tetrahedral_number(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_2": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y",
        "question_3": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_3": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row"
    },
    {
        "task_id": 81,
        "text": "Write a function to zip the two given tuples.",
        "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "test_list": [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zip_tuples(test_tup1, test_tup2):",
        "question_1": "Construct a Python program to combine the elements of two lists into a list of tuples.",
        "answer_1": "def combine_list(array1, array2):\n    return list(zip(array1, array2))",
        "question_2": "Generate a Python program to unpack a given list of tuples",
        "answer_2": "list_of_tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n\nlist_1, list_2 = zip(*list_of_tuples)\n\nprint(list_1)\nprint(list_2)",
        "question_3": "Generate a function in Python to zip two lists.",
        "answer_3": "def zip_two_lists(list1, list2):\n    return zip(list1, list2)"
    },
    {
        "task_id": 82,
        "text": "Write a function to find the volume of a sphere.",
        "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "test_list": [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_sphere(r):",
        "question_1": "Create a Python program to calculate the volume of a sphere.",
        "answer_1": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_2": "Construct a function in Python to calculate the volume of a sphere.",
        "answer_2": "def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))",
        "question_3": "Develop a Python program to calculate the Volume of a Sphere with the given radius.",
        "answer_3": "def calculateSphereVolume(radius):\n    volume = (4/3) * (3.142) * (radius**3)\n    return round(volume, 2)\n\nradius = 5\nresult = calculateSphereVolume(radius)\nprint(result)  # Output: 523.6"
    },
    {
        "task_id": 83,
        "text": "Write a python function to find the character made by adding all the characters of the given string.",
        "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Char(strr):",
        "question_1": "Generate a Python code to execute the following logic",
        "answer_1": "def add_string(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result",
        "question_2": "Create a function in Python which takes a string as an input and adds the number 1 to each character in the string.",
        "answer_2": "def add_one_to_each_char(mystring):\n    new_str = \"\"\n    for c in mystring:\n        new_str += chr(ord(c) + 1)\n    return new_str",
        "question_3": "Create a function in Python to calculate the total of all the characters in a given input string.",
        "answer_3": "def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116"
    },
    {
        "task_id": 84,
        "text": "Write a function to find the n-th number in newman conway sequence.",
        "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequence(n):",
        "question_1": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_1": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y",
        "question_2": "Create a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number",
        "answer_2": "def fibonacci(n): \n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return 0\n elif n == 1: \n  return 1\n else: \n  return fibonacci(n-1) + fibonacci(n-2) \n\nprint(fibonacci(10))",
        "question_3": "Design a recursive function in Python that calculates the Fibonacci sequence to the nth number.",
        "answer_3": "def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i))"
    },
    {
        "task_id": 85,
        "text": "Write a function to find the surface area of a sphere.",
        "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_sphere(r):",
        "question_1": "Create a function in Python that returns the surface area of a sphere when given the sphere\u2019s radius as input.",
        "answer_1": "import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211",
        "question_2": "Create a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.",
        "answer_2": "def sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 / 3) * math.pi * (radius ** 3)",
        "question_3": "Create a Python program to calculate the volume of a sphere.",
        "answer_3": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3"
    },
    {
        "task_id": 86,
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def centered_hexagonal_number(n):",
        "question_1": "Write a Python program to calculate the area of a regular hexagon",
        "answer_1": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_2": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_2": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_3": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_3": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row"
    },
    {
        "task_id": 87,
        "text": "Write a function to merge three dictionaries into a single expression.",
        "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):",
        "question_1": "Design a function in Python for merging two dictionaries.",
        "answer_1": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3",
        "question_2": "Generate a Python code snippet to combine two dictionaries.",
        "answer_2": "dict3 = {**dict1, **dict2}",
        "question_3": "Write a code block to merge two given dictionaries into a single one.",
        "answer_3": "def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "task_id": 88,
        "text": "Write a function to get the frequency of the elements in a list.",
        "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import collections\r\ndef freq_count(list1):",
        "question_1": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_1": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_2": "Generate a Python program to find the frequency of an element in a list.",
        "answer_2": "def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1))",
        "question_3": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_3": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)"
    },
    {
        "task_id": 89,
        "text": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(N):\r\n  return (N - 1)",
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def closest_num(N):",
        "question_1": "Create a Python program that takes in a list of numbers and finds the closest number to a given number.",
        "answer_1": "def find_closest(nums, target):\n closest_num = float('inf')\n for num in nums:\n  if abs(target - num) < abs(target - closest_num):\n   closest_num = num\n return closest_num\n\nnums = [2, 4, 7, 8]\ntarget = 5\n\nprint(find_closest(nums, target))",
        "question_2": "Write a Python code to find the nearest integer to a given number.",
        "answer_2": "def nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)",
        "question_3": "Write a Python program to find the n-th smallest number in the following list",
        "answer_3": "def nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result)"
    },
    {
        "task_id": 90,
        "text": "Write a python function to find the length of the longest word.",
        "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def len_log(list1):",
        "question_1": "Write a function in Python to find out the longest word in a string",
        "answer_1": "def longestWord(str):\n    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in words:\n        if len(word) == max_len:\n            return word",
        "question_2": "Create a Python function to find the longest word in a given sentence.",
        "answer_2": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "question_3": "Write a Python program that would take a string and return the length of its longest word.",
        "answer_3": "def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "task_id": 91,
        "text": "Write a function to check if a substring is present in a given list of string values.",
        "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_substring(str1, sub_str):",
        "question_1": "Write a Python function to check if a given substring is contained in a string.",
        "answer_1": "def check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False",
        "question_2": "Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.",
        "answer_2": "def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True\n  return False",
        "question_3": "Write a Python program to check if a string contains a specific substring",
        "answer_3": "def contains_substring(string, substring):\n    return substring in string"
    },
    {
        "task_id": 92,
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "test_list": [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_undulating(n):",
        "question_1": "Create a Python function that takes in one integer argument and returns an integer with the absolute value.",
        "answer_1": "def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3",
        "question_2": "Analyze the input provided and generate a function in Python that returns \"Invalid input\" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.",
        "answer_2": "def count_digits(inp):\n    if not isinstance(inp, int):\n        return \"Invalid input\"\n    else:\n        return len(str(inp))",
        "question_3": "Generate a Python function to calculate the absolute value of a number.",
        "answer_3": "def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num"
    },
    {
        "task_id": 93,
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def power(a,b):",
        "question_1": "Write a Python script that takes two numbers as input and raises the first number to the power of the second number.",
        "answer_1": "def power_function(a, b):\n    return a**b\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = power_function(a, b)\nprint(\"The result is:\", result)",
        "question_2": "Generate a Python code to find the power of a number.",
        "answer_2": "# Calculate power of a number \ndef power(base, exponent):\n    # Initialize result\n    result = 1\n    # Multiply result with base\n    # until exponent becomes 0\n    while exponent != 0:\n        result *= base\n        exponent -= 1\n \n    # Return result\n    return result\n\n# Print the power\nprint(power(base, exponent))",
        "question_3": "Create a function in Python to calculate the power of a number.",
        "answer_3": "def power(num, pow):\n return num**pow"
    },
    {
        "task_id": 94,
        "text": "Write a function to extract the index minimum value record from the given tuples.",
        "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter \r\ndef index_minimum(test_list):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.",
        "answer_2": "def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))",
        "question_3": "Generate a code in Python to find the index of the smallest element in a given list of numbers.",
        "answer_3": "def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index"
    },
    {
        "task_id": 95,
        "text": "Write a python function to find the minimum length of sublist.",
        "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min_Length(lst):",
        "question_1": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_1": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_2": "Create a Python script to find the maximum and minimum values for each sublist in a list",
        "answer_2": "def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele"
    },
    {
        "task_id": 96,
        "text": "Write a python function to find the number of divisors of a given integer.",
        "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "test_list": [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def divisor(n):",
        "question_1": "Write a Python program to find the number of divisors of an integer.",
        "answer_1": "def count_number_divisors(x): \n    count = 0\n    for i in range(1, x+1): \n        if x % i == 0: \n            count = count + 1\n    return count",
        "question_2": "Write a Python code for a program that takes an integer as an input and prints the number of divisors for that integer.",
        "answer_2": "def count_divisors(number):\n    divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors += 1\n    print(\"Number of divisors:\", divisors)",
        "question_3": "Construct a Python program that takes a number as an input and prints all its divisors.",
        "answer_3": "def find_divisors(num):\n    divisors = []\n    for i in range(2,num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 48\ndivisors = find_divisors(num)\nprint(\"The divisors of {} are: {}\".format(num, divisors))"
    },
    {
        "task_id": 97,
        "text": "Write a function to find frequency count of list of lists.",
        "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_lists(list1):",
        "question_1": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_1": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)",
        "question_2": "Write a Python program to create a dictionary of the elements in a list and their frequency count.",
        "answer_2": "def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))",
        "question_3": "Generate a Python program to find the frequency of an element in a list.",
        "answer_3": "def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1))"
    },
    {
        "task_id": 98,
        "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "test_list": [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_num(numbers):",
        "question_1": "Write a Python function to multiply all the numbers in a list.",
        "answer_1": "def multiplyList(numbers):\n  result = 1\n  for x in numbers:\n    result = result * x\n  return result",
        "question_2": "Create a Python program to multiply all of the values in a given list",
        "answer_2": "def multiply_list(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result",
        "question_3": "Create a Python function that takes a list and an integer as inputs and returns a new list with every item in the original list multiplied by the integer.",
        "answer_3": "def multiply_list(lst, i):\n  return [j * i for j in lst]\n\nresult = multiply_list(list, integer)\nprint(result) # [15, 10, 5]"
    },
    {
        "task_id": 99,
        "text": "Write a function to convert the given decimal number to its binary equivalent.",
        "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_binary(n):",
        "question_1": "Generate a Python program which will convert the given binary number into its equivalent decimal number",
        "answer_1": "def binary_to_decimal(binary):\n  decimal = 0\n  binary = binary[::-1]\n  for i, num in enumerate(binary):\n    if num == '1':\n      decimal += pow(2, i)\n  return decimal",
        "question_2": "Write a Python program to convert a given binary number to decimal.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal",
        "question_3": "Write a Python program to convert a given binary number to a decimal number.",
        "answer_3": "binary = input(\"Enter a binary number: \")\ndecimal = 0\nfor i in range(len(binary)):\n    if binary[i] == '1': \n        decimal += 2**(len(binary) - i - 1)\nprint(\"Decimal equivalent of the given binary number:\", decimal)"
    },
    {
        "task_id": 100,
        "text": "Write a function to find the next smallest palindrome of a specified number.",
        "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys\r\ndef next_smallest_palindrome(num):",
        "question_1": "Design a python function that finds the closest palindrome to a given number.",
        "answer_1": "def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]",
        "question_2": "Given a string, write a python program to print the next largest palindrome.",
        "answer_2": "def next_largest_palindrome(num):\n    # convert string to a number\n    num = int(num)\n    # increment number by 1\n    num += 1\n    while not is_palindrome(str(num)):\n        # increment number by 1\n        num += 1\n\n    return num\n\ndef is_palindrome(num):\n    return num == num[::-1]\n\nprint(next_largest_palindrome(\"1234\"))\n\n# Output: 1331",
        "question_3": "Develop a Python program to find the largest palindrome number in a given range.",
        "answer_3": "def get_largest_palindrome_in_range(min, max):\n    max_palindrome = 0\n    # Iterate over range\n    for x in range(min, max+1):\n        # Check if number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # If this palindrome is larger, update the maximum\n            if x > max_palindrome:\n                max_palindrome = x\n\n    return max_palindrome"
    },
    {
        "task_id": 101,
        "text": "Write a function to find the kth element in the given array.",
        "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def kth_element(arr, n, k):",
        "question_1": "Generate a code in Python to find the Kth smallest element in an array.",
        "answer_1": "def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]",
        "question_2": "Generate an algorithm in Python that returns the kth smallest number in a given array.",
        "answer_2": "def kthSmallest(arr, k):\n # sort the array\n arr.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3",
        "question_3": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_3": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]"
    },
    {
        "task_id": 102,
        "text": "Write a function to convert snake case string to camel case string.",
        "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def snake_to_camel(word):",
        "question_1": "Generate a function in Python to transform a string from camelCase to snake_case.",
        "answer_1": "def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))",
        "question_2": "Write a Python program to convert a string in camel case format to snake case format",
        "answer_2": "my_name_is_ryan",
        "question_3": "Convert the given string from Upper Camel Case notation to lower snake case notation in Python.",
        "answer_3": "lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]"
    },
    {
        "task_id": 103,
        "text": "Write a function to find eulerian number a(n, m).",
        "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def eulerian_num(n, m):",
        "question_1": "Create a python program to calculate the Mertens function over a given range.",
        "answer_1": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)",
        "question_2": "Create a python script which takes two numbers as argument to calculate the LCM (Least Common Multiple)",
        "answer_2": "def lcm(x, y):\n    lcm = (x*y)//gcd(x,y) \n    return lcm\n  \n# This function implements the Euclidian algorithm to find H.C.F. of two numbers \ndef gcd(x, y): \n  \n    while(y): \n        x, y = y, x % y \n  \n    return x \n\n# Driver program\nnum1 = 12\nnum2 = 15\n\nprint(\"The L.C.M. is\", lcm(num1, num2))",
        "question_3": "Design a function that returns the least common multiple (LCM) of two numbers",
        "answer_3": "# Python3 program to find LCM of two numbers \n\n# method to return gcd of a and b \ndef gcd(a, b): \n    if a == 0 : \n        return b \n          \n    return gcd(b % a, a) \n      \n# method to return LCM of two numbers \ndef lcm(a, b): \n    return (a*b) // gcd(a, b)"
    },
    {
        "task_id": 104,
        "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_sublists(input_list):",
        "question_1": "Write a Python function to sort the given list of strings using the length of the strings instead of alphabetically.",
        "answer_1": "def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list",
        "question_2": "Write a Python program that takes a list of strings as input and prints out all the strings in sorted order.",
        "answer_2": "def sort_list_of_strings(list_of_strings):\n    list_of_strings.sort()\n    for string in list_of_strings:\n        print(string)",
        "question_3": "Develop an efficient sorting technique in Python to arrange the following list of strings.",
        "answer_3": "def sort_list(L1):\n    L1.sort()\n    return L1"
    },
    {
        "task_id": 105,
        "text": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):   \r\n    return sum(lst) ",
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(lst):",
        "question_1": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_1": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_2": "Analyze the following code in Python and write an improved version of it.",
        "answer_2": "def countOccurrences(string, x): \n  count = 0\n  for i in range(len(string)): \n    if string[i] == x: \n      count += 1\n  return count \n\ndef countOccurrences2(string, x): \n  found = False\n  count = 0\n  for i in range(len(string)): \n    if string[i] == x and not found: \n      count += 1\n      found = True\n    else: \n      found = False\n  return count",
        "question_3": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_3": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "task_id": 106,
        "text": "Write a function to add the given list to the given tuples.",
        "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_lists(test_list, test_tup):",
        "question_1": "Convert a given list into a list of tuples using Python.",
        "answer_1": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Generate a Python program to add new elements to an existing tuple.",
        "answer_3": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements"
    },
    {
        "task_id": 107,
        "text": "Write a python function to count hexadecimal numbers for a given range.",
        "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Hexadecimal(L,R) :",
        "question_1": "Write a function in Python to convert a string of hexadecimal characters to their corresponding ASCII value.",
        "answer_1": "def hexToASCII(hexStr):\n num = int(hexStr, 16)\n return chr(num)",
        "question_2": "Create a Python script to generate 10 random hexadecimal numbers.",
        "answer_2": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))",
        "question_3": "Convert an array of hexadecimal strings to decimal numbers with a Python script.",
        "answer_3": "def hex_to_dec(hex_strings):\n    # Define an array to store the decimal numbers\n    dec_nums = []\n  \n    # Iterate over each hex string in the array\n    for hex_string in hex_strings:\n        # Convert the hexadecimal to integer and \n        # store the result in dec_nums \n        dec_nums.append(int(hex_string, 16))\n  \n    return dec_nums\n\n# Test example\nprint(hex_to_dec([\"FF\", \"A0\", \"5E\"]))\n# Output: [255, 160, 94]"
    },
    {
        "task_id": 108,
        "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):",
        "question_1": "Write a code to implement a priority queue using a max heap in Python",
        "answer_1": "class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1",
        "question_2": "Write an algorithm for merging two sorted lists of integers into one sorted list in Python.",
        "answer_2": "def merge(list1, list2): \n    # create an empty list to store the result \n    mergedList = [] \n    # set two index pointers \n    i = 0  \n    j = 0\n    while (i < len(list1) and j < len(list2)): \n        if (list1[i] < list2[j]): \n            mergedList.append(list1[i]) \n            i += 1\n        else: \n            mergedList.append(list2[j]) \n            j += 1\n\n    # check for remaining elements \n    while (i < len(list1)): \n        mergedList.append(list1[i]) \n        i += 1\n\n    while (j < len(list2)): \n        mergedList.append(list2[j]) \n        j += 1\n  \n    return mergedList \n  \n# Driver code \nlist1 = [1, 3, 5, 8]\nlist2 = [2, 4, 6, 7]\n\n# function call \nmergedList = merge(list1, list2) \n\n# print result \nprint(mergedList)",
        "question_3": "Generate a python program to sort a given linked list using the quicksort algorithm",
        "answer_3": "def sort_linked_list(head):\n    if not head or head.next is None:\n        return head\n\n    mid = get_middle(head)\n    mid_next = mid.next\n\n    l1 = sort_linked_list(head)\n    l2 = sort_linked_list(mid_next)\n\n    return merge(l1, l2)\n\ndef merge(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge(l1, l2.next)\n        return l2\n\ndef get_middle(head):\n    if not head:\n        return head\n\n    slow = head\n    fast = head\n\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow"
    },
    {
        "task_id": 109,
        "text": "Write a python function to find the count of rotations of a binary string with odd value.",
        "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Equivalent(s,n):",
        "question_1": "Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.",
        "answer_1": "def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')",
        "question_2": "Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true).",
        "answer_2": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1 + str1\n\n# testing\nprint(is_rotation('hello', 'lohel'))  # prints True",
        "question_3": "Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.",
        "answer_3": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    s1s1 = s1 + s1\n    if s2 in s1s1:\n        return True\n    return False\n\nprint(is_rotation(\"ABACD\", \"CDABA\"))"
    },
    {
        "task_id": 110,
        "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "test_list": [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_missing(test_list, strt_val, stop_val):",
        "question_1": "Create a Python program to determine the missing elements from a given list.",
        "answer_1": "def find_missing_elements(list):\n    missing_elements = []\n    for i in range(min(list), max(list)):\n        if i not in list:\n            missing_elements.append(i)\n    return missing_elements",
        "question_2": "Create a Python program to list all the integers between a given range input.",
        "answer_2": "def list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)",
        "question_3": "Generate a Python script to create a list of numbers between a given range.",
        "answer_3": "def generate_list(start, end):\n    result = []\n    for num in range(start, end+1):\n        result.append(num)\n    return result\n\nlist = generate_list(5, 10)\nprint(list)  # Output: [5, 6, 7, 8, 9, 10]"
    },
    {
        "task_id": 111,
        "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "test_list": [
            "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
            "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
            "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_in_nested_lists(nestedlist):",
        "question_1": "Write a Python script to find the common elements in two given lists.",
        "answer_1": "def findCommonElements(listA, listB):\n commonElements = []\n\n for elementA in listA:\n for elementB in listB:\n if elementA == elementB:\n commonElements.append(elementA)\n\n return commonElements\n\nlistA = [1, 3, 5, 7, 9]\nlistB = [2, 3, 4, 5, 8]\ncommonElements = findCommonElements(listA, listB) \n\nprint(commonElements)  # Output: [3, 5]",
        "question_2": "Create a Python function that takes two lists and returns a list of all elements in common between them.",
        "answer_2": "def find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements",
        "question_3": "Write a Python program to find the common elements between two given lists.",
        "answer_3": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common"
    },
    {
        "task_id": 112,
        "text": "Write a python function to find the perimeter of a cylinder.",
        "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "test_list": [
            "assert perimeter(2,4) == 12",
            "assert perimeter(1,2) == 6",
            "assert perimeter(3,1) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter(diameter,height) :",
        "question_1": "Create a Python module that calculates the perimeter of a circle.",
        "answer_1": "import math\n\ndef calculate_circle_perimeter(radius):\n        return 2 * math.pi * radius",
        "question_2": "Create a class in Python that defines a shape and has three methods that calculate the perimeter, area, and volume.",
        "answer_2": "class Shape:\n    def __init__(self):\n        # Initialize any variables as needed.\n        pass\n\n    def calculate_perimeter(self):\n        # Code to calculate perimeter\n        pass\n    \n    def calculate_area(self):\n        # Code to calculate area\n        pass\n\n    def calculate_volume(self):\n        # Code to calculate volume\n        pass",
        "question_3": "Write a Python program which takes the length and width of a rectangle as input and returns its perimeter.",
        "answer_3": "def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter)"
    },
    {
        "task_id": 113,
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_integer(text):",
        "question_1": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_1": "def contains_number(string):\n    return any(char.isdigit() for char in string)",
        "question_2": "Write a Python function to check if a string contains only numbers.",
        "answer_2": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_3": "Write a python program to check if a given string contains any numbers",
        "answer_3": "def string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None"
    },
    {
        "task_id": 114,
        "text": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "test_list": [
            "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
            "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
            "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef assign_freq(test_list):",
        "question_1": "Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.",
        "answer_1": "def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]",
        "question_2": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_2": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)",
        "question_3": "Generate a Python function that takes an array of elements and finds the frequency of each element",
        "answer_3": "def count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))"
    },
    {
        "task_id": 115,
        "text": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def empty_dit(list1):",
        "question_1": "Generate a Python code snippet to check if all the values of a dictionary are True.",
        "answer_1": "all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.",
        "question_2": "Create a function in Python to build an empty dictionary.",
        "answer_2": "def buildDictionary():\n  dictionary = dict()\n  return dictionary",
        "question_3": "Generate a valid Python code that will create an empty dictionary",
        "answer_3": "my_dict = {}"
    },
    {
        "task_id": 116,
        "text": "Write a function to convert a given tuple of positive integers into an integer.",
        "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_to_int(nums):",
        "question_1": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_1": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "question_2": "Write a Python function to convert a list of multiple integers into a single integer.",
        "answer_2": "def convert_list_to_integer(my_list):\n    result = 0\n    multiplier = 1\n \n    for i in range(len(my_list)-1, -1, -1):\n        result += my_list[i]*multiplier\n        multiplier *= 10\n \n    return result\n \nprint(convert_list_to_integer(my_list))",
        "question_3": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_3": "def convert_to_integers(lst):\n    return [int(i) for i in lst]"
    },
    {
        "task_id": 117,
        "text": "Write a function to convert all possible convertible elements in the list to float.",
        "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_to_float(test_list):",
        "question_1": "Create a Python program to convert a given list of strings to float values",
        "answer_1": "def convertStringToFloat(str_list):\n    floats = []\n    for s in str_list:\n        floats.append(float(s))\n    return floats\n\nconvertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]",
        "question_2": "Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.",
        "answer_2": "def infer_data_type(my_list):\n    output_list = []\n    for item in my_list:\n        if type(item) == int:\n            output_list.append('integer')\n        elif type(item) == float:\n            output_list.append('float')\n        else:\n            output_list.append('string')\n    return output_list",
        "question_3": "Write a Python program to convert ratings in a list of strings to a float.",
        "answer_3": "def str_to_float(ratings):\n    return [float(x) for x in ratings]"
    },
    {
        "task_id": 118,
        "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_list(string):",
        "question_1": "Create a function to convert a string to a list using Python.",
        "answer_1": "def string_to_list(text):\n    lst = text.split()\n    return lst\n\ntext = \"This is a sentence.\"\nprint(string_to_list(text))",
        "question_2": "Given a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.",
        "answer_2": "def str_to_list(string):\n    return string.split(' ')",
        "question_3": "Generate a Python script that will extract all URLs from the given text.",
        "answer_3": "import re\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list)"
    },
    {
        "task_id": 119,
        "text": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "test_list": [
            "assert search([1,1,2,2,3],5) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
            "assert search([1,2,2,3,3,4,4],7) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def search(arr,n) :",
        "question_1": "Suggest an algorithm in Python to sort an array of integers but maintain the order of similar elements.",
        "answer_1": "def sort_with_maintained_order(array):\n    \"\"\"\n    Sort an array of integers\n    but maintain the order of similar elements.\n\n    Parameters\n    ----------\n    array : List[int]\n        The input array\n\n    Returns\n    -------\n    List[int]\n        The sorted array\n\n    \"\"\"\n    # Keep track of elements already seen\n    seen_elements = []\n\n    # Loop over the list in the original order\n    for element in array:\n        # Check if element appears for the first time\n        if element not in seen_elements:\n            # Only continue if it is the first appearance\n            seen_elements.append(element)\n            # Find the positions of all elements with this value\n            positions = [i for i, x in enumerate(array) if x == element]\n            # Resolve the order for this element\n            order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1])\n            # Rearrange the elements in ascending order\n            for i, (pos, val) in enumerate(order):\n                array[pos] = i\n    return array",
        "question_2": "Design an algorithm in Python to detect duplicate elements in an array.",
        "answer_2": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates",
        "question_3": "Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise",
        "answer_3": "def is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True"
    },
    {
        "task_id": 120,
        "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product_tuple(list1):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Generate Python code to find the pair with the maximum product in a given array.",
        "answer_2": "def max_pair_product(arr):\n    # Initialize the maximum product and the maximum elements\n    max_product = 0\n    max_elems = [0, 0]\n    # Iterate through each element in the array \n    for i in range(len(arr)):\n        left_elem = arr[i]\n        # Iterate through each other element in the array\n        for j in range(i + 1, len(arr)):\n            right_elem = arr[j]\n            # Compute the product\n            product = left_elem * right_elem\n            # Find the maximum product and the corresponding elements\n            if product > max_product:\n                max_product = product\n                max_elems = [left_elem, right_elem]\n    # Return the maximum product and the corresponding elements\n    return (max_product, max_elems)",
        "question_3": "Write a Python function to find the maximum product of three integers from a given list.",
        "answer_3": "def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n )"
    },
    {
        "task_id": 121,
        "text": "Write a function to find the triplet with sum of the given array",
        "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "test_list": [
            "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
            "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
            "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_triplet(A, n, sum, count):",
        "question_1": "Write a Python program to find all unique triplets of number in an array that sums up to 0.",
        "answer_1": "def threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]",
        "question_2": "Write a Python program to find all unique triplets in the array which give the sum of zero.",
        "answer_2": "def threeSum(nums): \n\tres = [] \n\tnums.sort() \n\n\tfor i in range(len(nums)-2): \n\t\tif i > 0 and nums[i] == nums[i-1]: \n\t\t\tcontinue\n\t\t\t\n\t\tl, r = i+1, len(nums)-1\n\t\twhile l < r: \n\t\t\ts = nums[i] + nums[l] + nums[r]  \n\t\t\tif s > 0: \n\t\t\t\tr -= 1\n\t\t\telif s < 0: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tres.append([nums[i], nums[l], nums[r]]) \n\t\t\t\twhile l < r and nums[l] == nums[l+1]: \n\t\t\t\t\tl += 1\n\t\t\t\twhile l < r and nums[r] == nums[r-1]: \n\t\t\t\t\tr -= 1\n\t\t\t\tl += 1\n\t\t\t\tr -= 1\n\treturn res \n\nprint(threeSum(nums))",
        "question_3": "Generate an efficient code for 3-sum problem.",
        "answer_3": "# Python program to find all unique triplets that sum up to 0\ndef find_triplets(arr):\n  result = []\n  n = len(arr)\n  # Sort the array \n  arr.sort()\n\n  # Fix the first element \n  # and find other two elements \n  for i in range(0,n-1):\n    # Fix the second element and\n    # find the third \n    l = i + 1\n    r = n - 1\n    while (l < r):\n      sum = arr[i] + arr[l] + arr[r]\n      if sum == 0: \n        result.append([arr[i],arr[l],arr[r]]) \n        l+=1\n        r-=1\n      # If the sum is lesser  \n      # than zero, then increase \n      # the left bound    \n      elif (sum < 0):\n        l+=1\n        \n      # If the sum is greater \n      # then decrease the right bound \n      else: \n        r-=1\n  return result\n\n# Driver code\nif __name__ == \"__main__\":\n  arr = [-3, 0, 1, 2, -1, 1, -2] \n  result = find_triplets(arr)\n  print(result)"
    },
    {
        "task_id": 122,
        "text": "Write a function to find n\u2019th smart number.",
        "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "test_list": [
            "assert smartNumber(1) == 30",
            "assert smartNumber(50) == 273",
            "assert smartNumber(1000) == 2664"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 3000 \r\ndef smartNumber(n):",
        "question_1": "Rewrite a Python function given a few specific requirements.",
        "answer_1": "def is_prime(n):\n if n < 2:\n return False\n elif n == 2:\n return True\n elif n > 2 and n % 2 == 0:\n return False\n for i in range(3, int(n**0.5)+1, 2):\n if n % i == 0:\n return False\n return True",
        "question_2": "Write a python function that accepts a number n as input and outputs its nth prime number.",
        "answer_2": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result"
    },
    {
        "task_id": 123,
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def amicable_numbers_sum(limit):",
        "question_1": "Generate an algorithm using Python for computing the sum of all numbers up to a given number.",
        "answer_1": "def sum_up_to_number(number):\n   sum_number = 0\n   for num in range(1,number+1):\n      sum_number += num\n   return sum_number",
        "question_2": "Write a Python function to calculate the sum of all the amicable numbers within a given range.",
        "answer_2": "def sum_amicable_numbers(start, end):\n amicable_sum = 0\n \n for num in range(start, end + 1):\n divisors = get_divisors(num)\n div_sum = sum(divisors)\n other_divisors = get_divisors(div_sum)\n other_div_sum = sum(other_divisors)\n \n if other_div_sum == num and num != div_sum:\n amicable_sum += num\n  \n return amicable_sum\n \n def get_divisors(num):\n divisors = []\n \n for i in range(1, int(num/2) + 1):\n if num % i == 0:\n divisors.append(i)\n \n return divisors\n\nsum_amicable_numbers(1, 10000)",
        "question_3": "Create a function in Python to calculate the sum of 1 to n numbers.",
        "answer_3": "def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))"
    },
    {
        "task_id": 124,
        "text": "Write a function to get the angle of a complex number.",
        "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath\r\ndef angle_complex(a,b):",
        "question_1": "Create a Python class that allows you to store complex numbers in a vector.",
        "answer_1": "class ComplexVector:\n    def __init__(self, complex_num):\n        # split the complex number into its components\n        self.real = float(complex_num.split(\" \")[0])\n        self.imag = float(complex_num.split(\" \")[2].replace(\"i\", \"\"))\n    \n    # print the vector in a readable format\n    def __str__(self):\n        return f\"{self.real} + {self.imag}i\"\n\n# create the vector from a complex number\nvec = ComplexVector(\"1 - 2i\")\nprint(vec) # prints \"1.0 + -2.0i\"",
        "question_2": "Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.",
        "answer_2": "import math\n\ndef magnitude_to_vector(magnitude, angle):\n    x = magnitude * math.cos(math.radians(angle))\n    y = magnitude * math.sin(math.radians(angle))\n    z = 0\n    \n    return (x, y, z)\n\nresult = magnitude_to_vector(5, 90)\n\nprint(f\"The vector is {result}\")",
        "question_3": "Using the complex library in Python, generate the complex number whose real part is 2 and imaginary part is 3.",
        "answer_3": "complex_number = complex(2,3)"
    },
    {
        "task_id": 125,
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "test_list": [
            "assert find_length(\"11000010001\", 11) == 6",
            "assert find_length(\"10111\", 5) == 1",
            "assert find_length(\"11011101100101\", 14) == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_length(string, n):",
        "question_1": "Develop a Python script to find the maximum number of consecutive 1's in a given binary number.",
        "answer_1": "def countMaxOnes(inpString):\n  maxLength = 0\n  count = 0\n\n # Iterate through all elements of input string\n for i in range(len(inpString)):\n     # If element is '1', increment the count\n     if (inpString[i] == '1'):\n         count += 1\n\n     # If element is '0', check if count is greater\n     # than the maximum length found so far\n     else:\n         if (count > maxLength):\n             maxLength = count\n         count = 0\n  \n  # Check if last sequence of 1's if more\n  # than the maximum length found so far\n  if (count > maxLength):\n      maxLength = count\n  return maxLength\n\ninpString = \"101101111\"\nprint(\"Length of the longest contiguous 1's is\", countMaxOnes(inpString))\n\n# Output: Length of the longest contiguous 1's is 3",
        "question_2": "Write a python program to count the total number of \"1\"s present in a binary string",
        "answer_2": "def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count",
        "question_3": "Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string.",
        "answer_3": "def longestZeroSeq(inputStr):\n    maxLength = 0 \n   \n    currentLength = 0\n   \n    for c in inputStr:\n        if c == '0':\n            currentLength += 1\n        else:\n            maxLength = max(maxLength, currentLength) \n            currentLength = 0\n   \n    maxLength = max(maxLength, currentLength)\n   \n    return maxLength"
    },
    {
        "task_id": 126,
        "text": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum(a,b):",
        "question_1": "Write a python program to calculate the sum of the divisors of a number",
        "answer_1": "def sum_divisors(n):\n    '''Returns the sum of all divisors of the given number.'''\n    if n <= 1:\n        return 0\n    #assume n is a positive integer\n    sum_divisors = 1\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors",
        "question_2": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_2": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_3": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_3": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))"
    },
    {
        "task_id": 127,
        "text": "Write a function to multiply two integers without using the * operator in python.",
        "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiply_int(x, y):",
        "question_1": "Build a Python script to multiply two integer values.",
        "answer_1": "def multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))",
        "question_2": "Generate a Python function to multiply two given positive integers without using the * operator.",
        "answer_2": "def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1))",
        "question_3": "Write a Python function to multiply two given numbers.",
        "answer_3": "def multiply(num1, num2):\n    return num1 * num2"
    },
    {
        "task_id": 128,
        "text": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def long_words(n, str):",
        "question_1": "Write a Python program to find the list of words that are longer than n from a given list of words.",
        "answer_1": "def get_long_words(word_list, n):\n  return [w for w in word_list if len(w) > n]\n\nlong_words = get_long_words(word_list, n)\nprint(long_words)",
        "question_2": "In Python, generate a function that takes two arguments (a list and a number) and prints out the first two elements of the list that have a length greater than the second argument.",
        "answer_2": "def print_long_words(list_of_words, integer):\n  long_words = []\n  for word in list_of_words:\n    if len(word) > integer:\n      long_words.append(word)\n  if len(long_words)>1:\n    print(long_words[0], long_words[1])\n  else:\n    print('No words found with length greater than ', integer)",
        "question_3": "Write a Python program to find the list of words that are longer than given length",
        "answer_3": "# Create a list to store the result\nlong_words_list = []\n\n# Iterate the list to find words longer than the given length\nfor word in word_list:\n    if len(word) > length:\n        long_words_list.append(word)\n\n# Print the result\nprint(long_words_list)"
    },
    {
        "task_id": 129,
        "text": "Write a function to calculate magic square.",
        "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def magic_square_test(my_matrix):",
        "question_1": "Create a python function named 'square' that squares a given number.",
        "answer_1": "def square(x):\n return x * x",
        "question_2": "Develop a Python function that squares a given number.",
        "answer_2": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_3": "Write a Python program to compute the square of a given number.",
        "answer_3": "def square(num):\n    return num ** 2"
    },
    {
        "task_id": 130,
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_occurrences(nums):",
        "question_1": "Create a python program to select the item with the highest frequency in the list.",
        "answer_1": "def frequency_selector(list): \n    # Create an empty dictionary for counts \n    counts = {} \n  \n    # Iterate the list and store values in the dictionary \n    for l in list: \n        if l in counts: \n            counts[l] += 1\n        else: \n            counts[l] = 1\n  \n    # Find the highest frequency \n    max = 0\n    item = None\n  \n    for l in counts: \n        if counts[l] > max: \n            max = counts[l] \n            item = l \n  \n    return item\n\nlist = [5, 2, 8, 7, 2, 2, 4]\nprint(frequency_selector(list))",
        "question_2": "Write a Python function to find the most frequent element in a list.",
        "answer_2": "def most_frequent(list): \n    counter = 0\n    num = list[0] \n      \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num",
        "question_3": "Make an algorithm in Python for printing the maximum frequency of an element in an array.",
        "answer_3": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2"
    },
    {
        "task_id": 131,
        "text": "Write a python function to reverse only the vowels of a given string.",
        "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_vowels(str1):",
        "question_1": "Design a function in Python to remove the vowels from a given string.",
        "answer_1": "def remove_vowels(text):\n    \"\"\"Remove the vowels from a given string.\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n# Output\nprint(remove_vowels(text))",
        "question_2": "Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.",
        "answer_2": "def remove_vowels(s): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in s: \n        if x in vowels: \n            s = s.replace(x, \"\") \n    return s",
        "question_3": "In Python, build a program that can remove all vowels from a given string.",
        "answer_3": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string"
    },
    {
        "task_id": 132,
        "text": "Write a function to convert tuple to a string.",
        "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tup_string(tup1):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths"
    },
    {
        "task_id": 133,
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_negativenum(nums):",
        "question_1": "Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.",
        "answer_1": "def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)",
        "question_2": "Write a python for loop to iterate over a list of numbers and compute the sum of all numbers greater than 0",
        "answer_2": "sum = 18\n\n# using a for-loop\nsum = 0\nfor num in [-1, 5, -7, 10, -2]:\n  if num > 0:\n    sum += num\n\nprint(sum)\n\nOutput: 18",
        "question_3": "Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers",
        "answer_3": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list"
    },
    {
        "task_id": 134,
        "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "test_list": [
            "assert check_last([5,7,10],3,1) == \"ODD\"",
            "assert check_last([2,3],2,3) == \"EVEN\"",
            "assert check_last([1,2,3],3,1) == \"ODD\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_last (arr,n,p):",
        "question_1": "Create an algorithm in Python to check whether an array has even or odd number of elements.",
        "answer_1": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "question_2": "Write a Python function which takes an array as input and prints out all the even numbers in the array.",
        "answer_2": "def print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11])",
        "question_3": "Develop a program in Python to classify the elements in an array as even or odd.",
        "answer_3": "evenArray = []\noddArray = []\nfor i in array:\n  if i % 2 == 0:\n    evenArray.append(i)\n  else:\n    oddArray.append(i)"
    },
    {
        "task_id": 135,
        "text": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hexagonal_num(n):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a Python program to print out the nth row of Pascal's Triangle",
        "answer_2": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row",
        "question_3": "Create a Python script to generate 10 random hexadecimal numbers.",
        "answer_3": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))"
    },
    {
        "task_id": 136,
        "text": "Write a function to calculate electricity bill.",
        "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "test_list": [
            "assert cal_electbill(75)==246.25",
            "assert cal_electbill(265)==1442.75",
            "assert cal_electbill(100)==327.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_electbill(units):",
        "question_1": "Write a Python program to calculate the total electricity bill given the rate per kwh for domestic loads.",
        "answer_1": "def calculate_bill(rate, consumption):\n    bill = rate * consumption\n    print(\"Your total electricity bill is Rs. {}\".format(bill))\n\ncalculate_bill(40, 300)",
        "question_2": "Create a Python program to calculate the electric bill for a customer based on kilowatt hour of electricity used.",
        "answer_2": "def calculate_electric_bill(kw_usage):\n  rate = 0.15\n  bill = kw_usage * rate\n  return bill\n\nx = 500\nbill = calculate_electric_bill(x)\nprint(\"Your bill is:\", str(bill))",
        "question_3": "Create a Python script to calculate total electricity bill",
        "answer_3": "def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh):\n    one_off_fee = one_off\n    night_rate_fee = night_rate * total_kwh\n    standard_rate_fee = standard_rate * total_kwh\n    return one_off_fee + night_rate_fee + standard_rate_fee\n\none_off = 25.00\nnight_rate = 0.20\nstandard_rate = 0.30\ntotal_kwh = 350.00\n\nprint(\"Total electricity bill: $\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh)))"
    },
    {
        "task_id": 137,
        "text": "Write a function to find the ration of zeroes in an array of integers.",
        "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
            "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
            "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef zero_count(nums):",
        "question_1": "Write a Python program to create an array of N zeros.",
        "answer_1": "import numpy\n\ndef create_zeros_array(N):\n  return numpy.zeros(N)\n\nresult = create_zeros_array(N)\nprint(result)",
        "question_2": "Edit the following Python program to implement try and except",
        "answer_2": "try:\n a = 10\n b = 0\n c = a/b\nexcept ZeroDivisionError:\n print(\"Error: Cannot divide by zero\")",
        "question_3": "Write Python code to include exception handling in this code.",
        "answer_3": "try:\n    a = 1\n    b = 0\n    c = a / b\n    print(c)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")"
    },
    {
        "task_id": 138,
        "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_Sum_Of_Powers_Of_Two(n):",
        "question_1": "Compose a function in Python to check if a given number is a power of two.",
        "answer_1": "def is_power_two(num):\n    if num == 0:\n        return False\n    \n    while num != 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n    return True",
        "question_2": "Create a Python program to check if a given number is a power of 2.",
        "answer_2": "def is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num /= 2\n    return num == 1\n\nprint(is_power_of_two(32))",
        "question_3": "Design an algorithm in Python to check if an integer is a power of two.",
        "answer_3": "def isPowerOfTwo(n):\n  if(n == 0): \n    return False\n  while(n != 1): \n    if(n % 2 != 0): \n      return False\n    n = n // 2\n    \n  return True\n  \n# The following call will return True\nisPowerOfTwo(16)"
    },
    {
        "task_id": 139,
        "text": "Write a function to find the circumference of a circle.",
        "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "test_list": [
            "assert circle_circumference(10)==62.830000000000005",
            "assert circle_circumference(5)==31.415000000000003",
            "assert circle_circumference(4)==25.132"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def circle_circumference(r):",
        "question_1": "Write a Python script to calculate the circumference of a circle when the radius of the circle is given.",
        "answer_1": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)",
        "question_2": "Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.",
        "answer_2": "def circumference_of_circle(diameter):\n    circumference = 3.14 * diameter\n    return circumference",
        "question_3": "Develop a function in Python to calculate the circumference of a circle.",
        "answer_3": "def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)"
    },
    {
        "task_id": 140,
        "text": "Write a function to extract elements that occur singly in the given tuple list.",
        "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "test_list": [
            "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
            "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
            "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_singly(test_list):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Convert a given list into a list of tuples using Python.",
        "answer_2": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_3": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_3": "first_element = (3, 4, 5)[0]"
    },
    {
        "task_id": 141,
        "text": "Write a function to sort a list of elements using pancake sort.",
        "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pancake_sort(nums):",
        "question_1": "Create a function in Python that takes a list and sorts its elements in ascending order.",
        "answer_1": "def sortAsc(numbers):\n    numbers.sort()\n    return numbers",
        "question_2": "Generate a Python script to sort a given list of numbers without using the built-in function ``sort()``",
        "answer_2": "def sort_list(list):\n    '''This function will sort a given list of numbers without using the built-in function sort()'''\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list",
        "question_3": "Generate a Python script for sorting a list in ascending order.",
        "answer_3": "def sortList(list): \n    list.sort() \n    return list\n    \nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = sortList(unsorted_list)\n\nprint(\"Sorted list:\", sorted_list)"
    },
    {
        "task_id": 142,
        "text": "Write a function to count the same pair in three given lists.",
        "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_samepair(list1,list2,list3):",
        "question_1": "Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.",
        "answer_1": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))",
        "question_2": "Write a Python program to print out all possible pairs of two lists.",
        "answer_2": "for i in list1:\n    for j in list2:\n        print(i,j)\n\n# Output:\n# (1, 'a')\n# (1, 'b')\n# (1, 'c')\n# (2, 'a')\n# (2, 'b')\n# (2, 'c')\n# (3, 'a')\n# (3, 'b')\n# (3, 'c')",
        "question_3": "Create a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists.",
        "answer_3": "list1 = [1,2,3]\nlist2 = ['a', 'b', 'c']\n\npairs = []\n\nfor x in list1:\n    for y in list2:\n        pairs.append((x,y))\n\nprint(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]"
    },
    {
        "task_id": 143,
        "text": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lists(Input):",
        "question_1": "Convert a given list into a list of tuples using Python.",
        "answer_1": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_2": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_2": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)"
    },
    {
        "task_id": 144,
        "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "test_list": [
            "assert sum_Pairs([1,8,9,15,16],5) == 74",
            "assert sum_Pairs([1,2,3,4],4) == 10",
            "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Pairs(arr,n):",
        "question_1": "Write a Python program to compute the sum of the absolute difference of all pairs of numbers in a given array.",
        "answer_1": "arr = [5, 8, 10, 15]\nSum = 0\n\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if(i != j):\n            Sum += abs(arr[i] - arr[j])\n            \nprint(Sum)",
        "question_2": "Generate a Python program to return the sum of abs(x1 - x2) for each pair in an array.",
        "answer_2": "def sum_diff_pair(arr):\n    total = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            total += abs(arr[i]-arr[j])\n    return total",
        "question_3": "Write a python program to calculate the absolute differences between corresponding elements of two arrays of the same size.",
        "answer_3": "def calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff"
    },
    {
        "task_id": 145,
        "text": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3),4) == 4",
            "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
            "assert max_Abs_Diff((3,2,1),3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Abs_Diff(arr,n):",
        "question_1": "Write a code in Python for computing the maximum difference between any two elements in an array.",
        "answer_1": "def max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array))",
        "question_2": "Write a Python function that takes an array of integers and finds the maximum difference between any two elements in the array",
        "answer_2": "def max_difference(arr):\n  if len(arr) < 2:\n    return 0\n  curr_max = arr[1]-arr[0]\n  min_elem = min(arr[0], arr[1])\n  for i in range(2, len(arr)):\n    curr_max = max(curr_max, arr[i] - min_elem)\n    min_elem = min(min_elem, arr[i])\n  return curr_max\n  \nprint(max_difference([2, 3, 10, 6, 4, 8, 1]))",
        "question_3": "Generate a Python program to find the value of two positions in an array that have the greatest difference.",
        "answer_3": "def max_difference(arr):\n    # Initialize max_difference to a negative value\n    max_difference = -float(\"inf\")\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n\nresult = max_difference([7, 1, 3, 8, 25])\nprint(result)"
    },
    {
        "task_id": 146,
        "text": "Write a function to find the ascii value of total characters in a string.",
        "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "test_list": [
            "assert ascii_value_string(\"python\")==112",
            "assert ascii_value_string(\"Program\")==80",
            "assert ascii_value_string(\"Language\")==76"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value_string(str1):",
        "question_1": "Create a function in Python to calculate the total of all the characters in a given input string.",
        "answer_1": "def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116",
        "question_2": "Write a Python program to calculate the total number of characters in a given string.",
        "answer_2": "def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "question_3": "Develop a Python program which will take a string and print out the total number of characters in it.",
        "answer_3": "def num_chars(string):\n    char_count = 0\n    for i in string:\n        char_count += 1\n    print(\"The number of characters in the string is\", char_count)"
    },
    {
        "task_id": 147,
        "text": "Write a function to find the maximum total path sum in the given triangle.",
        "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "test_list": [
            "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
            "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
            "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_path_sum(tri, m, n):",
        "question_1": "Implement an algorithm in Python that can calculate the maximum path sum from the given tree.",
        "answer_1": "def max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)",
        "question_2": "Write a Python program to calculate the maximum possible sum of a route between two nodes in a tree.",
        "answer_2": "def max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23",
        "question_3": "Design a Python program to compute the maximum sum of any subpolygon within a given array of N points",
        "answer_3": "def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')"
    },
    {
        "task_id": 148,
        "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_digits_single(x) :",
        "question_1": "Design a function in Python that takes a positive integer and returns the sum of its digits.",
        "answer_1": "def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total",
        "question_2": "Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer.",
        "answer_2": "# take a number \nnumber = int(input(\"Please enter a number: \")) \n  \n#initialize sum\nsum = 0\n  \n#Find the sum of the digits of the number\ntemp = number\nwhile temp > 0: \n   digit = temp % 10\n   sum += digit \n   temp //= 10\n  \n# print the output\nprint(\"The sum of the digits of the given number is\", sum)",
        "question_3": "Can you build a Python program which calculates the sum of digits of an inputted number?",
        "answer_3": "def sumDigits(num): \n    sum = 0\n    while(num): \n        sum += num % 10\n        num = num//10\n    return sum\n\n# main function\nnum = 12345\nprint(\"Sum of digits of specified number is: \", \n      sumDigits(num))"
    },
    {
        "task_id": 149,
        "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "test_list": [
            "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
            "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
            "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_subseq_with_diff_one(arr, n):",
        "question_1": "Create a Python program that identifies the longest contiguous subsequence with same values from an integer array.",
        "answer_1": "def longestSubsequence(array):\n    longest_start = 0\n    longest_length = 0\n    start = 0\n    current_length = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            current_length += 1\n        else:\n            current_length = 0\n            start = i+1\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_start = start\n    return array[longest_start : longest_start + longest_length + 1]",
        "question_2": "Create a function in Python to check the length of the longest increasing subsequence in a given array.",
        "answer_2": "def longestIncreasingSubsequence(arr):\n    n = len(arr) \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n  \n    return maximum \n  \narr = [1, 3, 5, 4, 7] \nres = longestIncreasingSubsequence(arr); \nprint(res)",
        "question_3": "Write a Python program to find the length of the longest increasing subsequence in a given array.",
        "answer_3": "def longest_increasing_subsequence(arr):\n    length = len(arr)\n    lis = [1] * length\n    for i in range(1, length):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\nresult = longest_increasing_subsequence([3, 4, 2, 1, 7])\nprint(result)"
    },
    {
        "task_id": 150,
        "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert does_Contain_B(1,7,3) == True",
            "assert does_Contain_B(1,-3,5) == False",
            "assert does_Contain_B(3,2,5) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def does_Contain_B(a,b,c):",
        "question_1": "Create a Python generator to generate an infinite sequence of a given number.",
        "answer_1": "def generate_infinite_sequence(num):\n    while True:\n        yield num\n\nfor n in generate_infinite_sequence(5):\n    print(n)",
        "question_2": "Create a Python function to detect a specific sequence",
        "answer_2": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_3": "Write a python function that determines if a given number is within a given range of numbers",
        "answer_3": "def is_in_range(n, start, end):\n  if n >= start and n <= end:\n    return True\n  else:\n    return False"
    },
    {
        "task_id": 151,
        "text": "Write a python function to check whether the given number is co-prime or not.",
        "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "test_list": [
            "assert is_coprime(17,13) == True",
            "assert is_coprime(15,21) == False",
            "assert is_coprime(25,45) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(p,q):",
        "question_1": "Code a Python program that takes two integers and checks if they are co-prime numbers.",
        "answer_1": "def is_coprime(num1, num2):\n        while num1 != 0 and num2 != 0: \n            if(num1 > num2): \n                num1 %= num2 \n            else: \n                num2 %= num1\n                  \n        if(num1 == 0): \n            gcd = num2 \n        else: \n            gcd = num1 \n        if(gcd == 1):\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)",
        "question_2": "Write a Python function to determine whether a number is a prime or a composite number.",
        "answer_2": "def is_prime(n):\n   if n <= 1:\n      return False\n   for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n         return False\n   return True",
        "question_3": "Write a Python function to check for a prime number.",
        "answer_3": "def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False"
    },
    {
        "task_id": 152,
        "text": "Write a function to sort the given array by using merge sort.",
        "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "test_list": [
            "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
            "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
            "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge(a,b):",
        "question_1": "Develop a program in Python for implementing Merge Sort algorithm.",
        "answer_1": "def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)",
        "question_2": "Create a Python program to sort numbers in an array using different algorithms, such as quick sort, insertion sort and merge sort.",
        "answer_2": "def quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j - 1] > array[j]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) // 2\n        left = array[:mid]\n        right = array[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n    return array",
        "question_3": "Write a function in Python to merge two sorted arrays.",
        "answer_3": "def merge_arrays(arr1, arr2):\n    merged_array = arr1 + arr2\n    return sorted(merged_array)\n\nmerged_array = merge_arrays(arr1, arr2)\nprint(merged_array)"
    },
    {
        "task_id": 153,
        "text": "Write a function to find the vertex of a parabola.",
        "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "test_list": [
            "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
            "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
            "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_vertex(a, b, c):",
        "question_1": "Generate a graphical representation of a function using Python.",
        "answer_1": "import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()",
        "question_2": "Convert the following equation into a Python program: y = x^2 - 3x + 2",
        "answer_2": "def equation(x):\n    return (x**2 - 3*x + 2)",
        "question_3": "Create a python program to optimize a given function along a certain parameter range.",
        "answer_3": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))"
    },
    {
        "task_id": 154,
        "text": "Write a function to extract every specified element from a given two dimensional list.",
        "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def specified_element(nums, N):",
        "question_1": "Write a Python program to traverse a two-dimensional array and print each row.",
        "answer_1": "def traverse_2d_list(list2d):\n    for row in list2d:\n        print(row)",
        "question_2": "Write a function in Python to search a given 2D list for a given item and return its row and column index if it exists.",
        "answer_2": "def search2Dlist(list, item): \n    row_index = None\n    col_index = None\n\n    for row in range(len(list)): \n        for col in range(len(list[row])): \n            if list[row][col] == item: \n                row_index = row\n                col_index = col\n\n    if (row_index == None) and (col_index == None):\n        return None\n    else:\n        return row_index, col_index\n\n# Output: (1, 2) (index of item 8 in the 2D list)",
        "question_3": "Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.",
        "answer_3": "def double_list(lst):\n    return [x * 2 for x in lst]"
    },
    {
        "task_id": 155,
        "text": "Write a python function to toggle all even bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 0",
            "assert even_bit_toggle_number(20) == 30",
            "assert even_bit_toggle_number(30) == 20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "question_1": "Program a function in Python that will recognize if a given number is even.",
        "answer_1": "def is_even(num):\n\u00a0 \u00a0 if num % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return False",
        "question_2": "Write a script in python that outputs all even numbers between 0 and 10.",
        "answer_2": "for number in range(0,11):\n  if (number % 2 == 0):\n    print(number)",
        "question_3": "Define a function in Python to check if a number is even.",
        "answer_3": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "task_id": 156,
        "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "test_list": [
            "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
            "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
            "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_int_str(tuple_str):",
        "question_1": "Create a function in Python to convert a given list of strings to integers.",
        "answer_1": "def convert_string_to_ints(strings):\n    return [int(string) for string in strings]",
        "question_2": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_2": "def convert_to_integers(lst):\n    return [int(i) for i in lst]",
        "question_3": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_3": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer"
    },
    {
        "task_id": 157,
        "text": "Write a function to reflect the run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "test_list": [
            "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
            "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
            "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef encode_list(list1):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_2": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']",
        "question_3": "Given a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.",
        "answer_3": "def str_to_list(string):\n    return string.split(' ')"
    },
    {
        "task_id": 158,
        "text": "Write a python function to find k number of operations required to make all elements equal.",
        "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "test_list": [
            "assert min_Ops([2,2,2,2],4,3) == 0",
            "assert min_Ops([4,2,6,8],4,3) == -1",
            "assert min_Ops([21,33,9,45,63],5,6) == 24"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_Ops(arr,n,k):",
        "question_1": "Optimize the following code in Python to reduce its complexity.",
        "answer_1": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_2": "Generate a Python program to find the minimum number of operations required to convert a given number into 1.",
        "answer_2": "def minOperations(n): \n  \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n  \n    x = n \n  \n    for i in range(2, n): \n        if i>x: \n            break\n  \n        if n%i == 0: \n            x = minOperations(int(n/i)) +  i \n  \n    return x \n  \nresult = minOperations(18)\nprint(result)",
        "question_3": "Optimize this Python code to reduce run time complexity",
        "answer_3": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result"
    },
    {
        "task_id": 159,
        "text": "Write a function to print the season for the given month and day.",
        "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "test_list": [
            "assert month_season('January',4)==('winter')",
            "assert month_season('October',28)==('autumn')",
            "assert month_season('June',6)==('spring')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def month_season(month,days):",
        "question_1": "Write a Python program to list all months of the current year.",
        "answer_1": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfor month in months:\n    print(month)",
        "question_2": "Write a Python program to print a calendar of the given month and year",
        "answer_2": "import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatmonth(year, month)\nprint(str)",
        "question_3": "Create a Python program to print the number of days in a month.",
        "answer_3": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))"
    },
    {
        "task_id": 160,
        "text": "Write a function to find x and y that satisfies ax + by = n.",
        "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "test_list": [
            "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
            "assert solution(4, 2, 7) == 'No solution'",
            "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def solution (a, b, n):",
        "question_1": "Using Python, create a function that calculates the objective function of a linear equation.",
        "answer_1": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)",
        "question_2": "Find the value of x in the following equation using a numerical calculation method in Python.",
        "answer_2": "# define variables\na = 5\nb = 7\nx = 3\ny = 4\n\n# calculate x\nx = (0 - (b*y))/a\n\nprint(x)",
        "question_3": "Write a Python program to optimize this linear equation.",
        "answer_3": "# function to solve equation \ndef solve(eqn): \n    x, y = sympy.symbols('x y') \n    return sympy.solve((eqn, ), (x, y)) \n  \n# equation\neqn = x + y - 5\n\n# solve equation\nresult = solve(eqn)\nx_sol = result[x]\ny_sol = result[y]\n\nprint(\"x =\", x_sol)\nprint(\"y =\", y_sol)"
    },
    {
        "task_id": 161,
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "test_list": [
            "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_elements(list1, list2):",
        "question_1": "Write a Python function to remove all elements from a given list present in another list.",
        "answer_1": "def remove_elements(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    \n    return list1\n\nresult = remove_elements([1, 2, 3, 4, 5], [4, 5, 6])\nprint(result)",
        "question_2": "Write a Python program to remove a given element from a list.",
        "answer_2": "def remove_item(items, target):\n    return [i for i in items if i != target]",
        "question_3": "Design a Python program to remove a specified element from a list.",
        "answer_3": "def remove_element(list, element):\n  return [ el for el in list if el != element]\n\t \nlist = [1, 2, 3, 4, 5]\n\t\nlist = remove_element(list, 4)\n\t\nprint(list)"
    },
    {
        "task_id": 162,
        "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_series(n):",
        "question_1": "Create a program in Python to calculate the sum of the first n positive integers, using recursion.",
        "answer_1": "def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)",
        "question_2": "Write a Python function to calculate the sum of the natural numbers up to n.",
        "answer_2": "def sum_natural_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_natural_numbers(n - 1)",
        "question_3": "Develop a Python program that computes the sum of integers from 1 to n.",
        "answer_3": "def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))"
    },
    {
        "task_id": 163,
        "text": "Write a function to calculate the area of a regular polygon.",
        "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import tan, pi\r\ndef area_polygon(s,l):",
        "question_1": "Extend a Python program to calculate the area of any regular polygon.",
        "answer_1": "def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)",
        "question_2": "Write a Python program to calculate the area of a regular hexagon",
        "answer_2": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_3": "Produce an algorithm in Python to calculate the total area of a polygon given its side lengths?",
        "answer_3": "def polygon_area(sides):\n\tx = sum(sides) / 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)"
    },
    {
        "task_id": 164,
        "text": "Write a python function to check whether the sum of divisors are same or not.",
        "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef divSum(n):",
        "question_1": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_1": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_2": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_2": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))",
        "question_3": "Write a python program to calculate the sum of the divisors of a number",
        "answer_3": "def sum_divisors(n):\n    '''Returns the sum of all divisors of the given number.'''\n    if n <= 1:\n        return 0\n    #assume n is a positive integer\n    sum_divisors = 1\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "task_id": 165,
        "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_char_position(str1):",
        "question_1": "Create a Python program to count the number of upper case and lower case letters in a given string",
        "answer_1": "def countLetters(s): \n   uppercase, lowercase = 0, 0\n   for x in s: \n      if x.islower(): \n         lowercase+= 1\n      elif x.isupper(): \n         uppercase+= 1\n   print (\"No. of Upper case characters : \", uppercase) \n   print (\"No. of Lower case Characters : \", lowercase) \n\ncountLetters('Hello World')",
        "question_2": "Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.",
        "answer_2": "def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World'))",
        "question_3": "Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters.",
        "answer_3": "def count_uppercase_lowercase(s):\n  lowercase_count = 0\n  uppercase_count = 0\n  for c in s:\n    if c.isupper():\n      uppercase_count+=1\n    elif c.islower():\n      lowercase_count+=1\n  return uppercase_count, lowercase_count\n\nuppercase_count, lowercase_count =  count_uppercase_lowercase(\"This Is A Test String\")\nprint(\"Number of Uppercase letters : \", uppercase_count)\nprint(\"Number of Lowercase letters : \", lowercase_count)"
    },
    {
        "task_id": 166,
        "text": "Write a python function to count the pairs with xor as an even number.",
        "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "test_list": [
            "assert find_even_Pair([5,4,7,2,1],5) == 4",
            "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
            "assert find_even_Pair([1,2,3],3) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_even_Pair(A,N):",
        "question_1": "Create a python program for the following purpose:",
        "answer_1": "def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n",
        "question_2": "Generate an XOR function in Python that takes two integers as parameters and returns a boolean.",
        "answer_2": "def xor(a, b):\nreturn (a or b) and not (a and b)",
        "question_3": "Translate the following pseudocode into Python",
        "answer_3": "def count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count"
    },
    {
        "task_id": 167,
        "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "test_list": [
            "assert next_Power_Of_2(0) == 1",
            "assert next_Power_Of_2(5) == 8",
            "assert next_Power_Of_2(17) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def next_Power_Of_2(n):",
        "question_1": "Optimize the following python program such that it reaches an O(logN) complexity",
        "answer_1": "def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y",
        "question_2": "Provide an algorithm in python to calculate the power of an integer.",
        "answer_2": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)",
        "question_3": "Create a Python function that takes in two parameters (n,k) and returns the value of n^k.",
        "answer_3": "def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result"
    },
    {
        "task_id": 168,
        "text": "Write a python function to find the frequency of a number in a given array.",
        "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "test_list": [
            "assert frequency([1,2,3],4) == 0",
            "assert frequency([1,2,2,3,3,3,4],3) == 3",
            "assert frequency([0,1,2,3,1,2],1) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency(a,x):",
        "question_1": "Create a Python program to compute the frequency of each element in a given array.",
        "answer_1": "def compute_frequency(arr):\n    frequency_map = {}\n    \n    for num in arr:\n        if num not in frequency_map:\n            frequency_map[num] = 1\n        else:\n            frequency_map[num] += 1\n            \n    return frequency_map\n\nresult = compute_frequency([1, 2, 3, 2, 1, 3])\nprint(result)",
        "question_2": "Generate a Python function that takes an array of elements and finds the frequency of each element",
        "answer_2": "def count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))",
        "question_3": "Given a list of numbers, write a Python program to find the frequency of each number in the list.",
        "answer_3": "from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq)"
    },
    {
        "task_id": 169,
        "text": "Write a function to calculate the nth pell number.",
        "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_pell(n):",
        "question_1": "Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user.",
        "answer_1": "# Fibonacci Sequence\n\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n\n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1 \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nn = int(input(\"Enter the value of n: \"))\nprint(Fibonacci(n))",
        "question_2": "Design a program in Python that outputs the N-th Fibonacci number.",
        "answer_2": "def nth_fibonacci_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return c",
        "question_3": "Design a recursive function in Python that calculates the Fibonacci sequence to the nth number.",
        "answer_3": "def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i))"
    },
    {
        "task_id": 170,
        "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "test_list": [
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_range_list(list1, m, n):",
        "question_1": "Write a function in Python to compute the sum of the given list of numbers.",
        "answer_1": "def sum_list(nums):\n sum = 0\n for n in nums:\n  sum += n\n return sum\n\nresult = sum_list([1, 24, 47, 98, 22, 45])\nprint(\"Sum of the list is\", result)",
        "question_2": "Create a Python algorithm to calculate the target sums of all elements in a given list with a given value",
        "answer_2": "def target_sum(subtrahend, lst):\n    target_sums = []\n    for num in lst:\n        target_sums.append(subtrahend - num)\n    return target_sums",
        "question_3": "Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it",
        "answer_3": "def index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1"
    },
    {
        "task_id": 171,
        "text": "Write a function to find the perimeter of a pentagon.",
        "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "test_list": [
            "assert perimeter_pentagon(5)==25",
            "assert perimeter_pentagon(10)==50",
            "assert perimeter_pentagon(15)==75"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef perimeter_pentagon(a):",
        "question_1": "Write a Python class for Polygon which has the ability to compute the perimeter of a polygon.",
        "answer_1": "class Polygon:\n    def __init__(self, num_of_sides):\n        self.number_of_sides = num_of_sides\n        self.sides = [0 for i in range(num_of_sides)]\n\n    def input_sides(self, sides):\n        self.sides = sides\n\n    def perimeter(self):\n        peri = 0\n        for side in self.sides:\n            peri += side\n        return peri",
        "question_2": "Create a Python module that calculates the perimeter of a circle.",
        "answer_2": "import math\n\ndef calculate_circle_perimeter(radius):\n        return 2 * math.pi * radius",
        "question_3": "Write a Python script to calculate the perimeter of a triangle given 3 sides.",
        "answer_3": "def calculate_perimeter(side1, side2, side3):\n perimeter = side1 + side2 + side3\n return perimeter\n\nside1 = 10\nside2 = 12\nside3 = 14\n\nperimeter = calculate_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", perimeter) # Output: 36"
    },
    {
        "task_id": 172,
        "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_occurance(s):",
        "question_1": "Create a Python function that takes a list of strings and a character as input and prints out a new list consisting of strings that have that character in it.",
        "answer_1": "def find_strings_with_char(string_list, char):\n    output = []\n    for string in string_list:\n        if char in string:\n            output.append(string)\n    return output\n\nstring_list = [\"apple\", \"banana\", \"pear\"]\nchar = 'a'\n\noutput = find_strings_with_char(string_list, char)\nprint(output) # [\"apple\", \"banana\"]",
        "question_2": "Write a python program to detect the occurrence of a given string in another large string.",
        "answer_2": "def str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")",
        "question_3": "Create a Python program that counts the occurrence of a specific character in a list",
        "answer_3": "def count_char(my_list, char):\n    count = 0\n    for i in my_list:\n        if i == char:\n            count += 1\n    return count"
    },
    {
        "task_id": 173,
        "text": "Write a function to remove everything except alphanumeric characters from a string.",
        "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "test_list": [
            "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
            "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
            "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_splchar(text):",
        "question_1": "Create a Python function to remove all non-alphanumeric characters from a string.",
        "answer_1": "def clean_string(string):\n    cleanedString = \"\"\n    for c in string:\n        if c.isalnum():   \n            cleanedString += c \n  \n    return cleanedString",
        "question_2": "Create a function in Python to remove all non-alphanumeric characters in a string.",
        "answer_2": "import re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str)",
        "question_3": "Develop a Python script to delete all non-alphabetic characters in a string.",
        "answer_3": "def remove_non_alpha(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string"
    },
    {
        "task_id": 174,
        "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "test_list": [
            "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
            "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
            "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_keyvalue(l):",
        "question_1": "Create a Python function that returns a nested dictionary given a list of keys and their corresponding values.",
        "answer_1": "def create_nested_dict(keys, values): \n  my_dict = {}\n  for i in range(len(keys)):\n    my_dict[keys[i]] = values[i]\n  return my_dict",
        "question_2": "Write a function in Python to convert following input into a dictionary",
        "answer_2": "def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict",
        "question_3": "Write a Python program to convert a given list to a dictionary with each item as a key-value pair.",
        "answer_3": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
    },
    {
        "task_id": 175,
        "text": "Write a function to verify validity of a string of parentheses.",
        "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "test_list": [
            "assert is_valid_parenthese(\"(){}[]\")==True",
            "assert is_valid_parenthese(\"()[{)}\")==False",
            "assert is_valid_parenthese(\"()\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_valid_parenthese( str1):",
        "question_1": "Create a Python function to return the maximum number of valid parentheses in a given expression.",
        "answer_1": "def max_valid_parenthesis(expression):\n    max_value = 0\n    # Keep a count of left parentheses\n    count = 0\n    for char in expression:\n        if char == '(':\n            count += 1\n            max_value = max(max_value, count)\n        else:\n            count -= 1\n\n    return max_value",
        "question_2": "Create an algorithm in Python to check if a given string contains valid parentheses.",
        "answer_2": "def isValid(s):\n    stack = []\n    dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\n    for char in s:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n\nprint(isValid('[[{{}}]]'))",
        "question_3": "Write a python program to identify if a string s has matching parentheses",
        "answer_3": "def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 176,
        "text": "Write a function to find the perimeter of a triangle.",
        "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "test_list": [
            "assert perimeter_triangle(10,20,30)==60",
            "assert perimeter_triangle(3,4,5)==12",
            "assert perimeter_triangle(25,35,45)==105"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def perimeter_triangle(a,b,c):",
        "question_1": "Write a Python script to calculate the perimeter of a triangle given 3 sides.",
        "answer_1": "def calculate_perimeter(side1, side2, side3):\n perimeter = side1 + side2 + side3\n return perimeter\n\nside1 = 10\nside2 = 12\nside3 = 14\n\nperimeter = calculate_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", perimeter) # Output: 36",
        "question_2": "Create a Python program for calculating the area of a given triangle.",
        "answer_2": "def triangleArea(a, b, c): \n\n    # calculate the semi-perimeter \n    s = (a + b + c) / 2\n\n    # calculate the area \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area",
        "question_3": "Create a function in Python to calculate the area of a triangle using its three sides.",
        "answer_3": "def triangleArea(a, b, c):\n # Calculate the semi-perimeter of the triangle\n s = (a + b + c) / 2\n \n # Calculate the area using Heron's formula\n area = (s*(s - a)*(s - b)*(s - c))**0.5\n \n return area\n\ntriangleArea(3,4,5) # 6.0"
    },
    {
        "task_id": 177,
        "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "test_list": [
            "assert answer(3,8) == (3,6)",
            "assert answer(2,6) == (2,4)",
            "assert answer(1,3) == (1,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def answer(L,R):",
        "question_1": "Create a Python program to get the least common multiple (LCM) of two numbers.",
        "answer_1": "def lcm(num1, num2):\n  if num1 > num2:\n    greater = num1\n  else:\n    greater = num2\n\n  while(True):\n    if((greater % num1 == 0) and (greater % num2 == 0)):\n      lcm = greater\n      break \n    greater += 1\n\n  return lcm",
        "question_2": "Design a function that returns the least common multiple (LCM) of two numbers",
        "answer_2": "# Python3 program to find LCM of two numbers \n\n# method to return gcd of a and b \ndef gcd(a, b): \n    if a == 0 : \n        return b \n          \n    return gcd(b % a, a) \n      \n# method to return LCM of two numbers \ndef lcm(a, b): \n    return (a*b) // gcd(a, b)",
        "question_3": "Generate a Python function to calculate the least common multiple (LCM) of two numbers.",
        "answer_3": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm"
    },
    {
        "task_id": 178,
        "text": "Write a function to search some literals strings in a string.",
        "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "test_list": [
            "assert string_literals(['language'],'python language')==('Matched!')",
            "assert string_literals(['program'],'python language')==('Not Matched!')",
            "assert string_literals(['python'],'programming language')==('Not Matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef string_literals(patterns,text):",
        "question_1": "Create a Python function to search for a specific piece of text in a string. This function should return true if the string contains the text and false otherwise.",
        "answer_1": "def search(text, string):\n return text in string",
        "question_2": "Using advanced data structures, write Python code to search for a string within a larger string.",
        "answer_2": "def search(string, search): \n\t# Create a Trie type datastructure \n\tt = {}\n\n\t# Put each character of the string in a lexicographic tree \n\tfor char in string: \n\t\tif char in t: \n\t\t\tt = t[char] \n\t\telse: \n\t\t\tt[char] = {}\n\t\t\tt = t[char] \n\n\t# Now search for the search string in the trie structure \n\tcursor = t \n\tfor char in search: \n\t\tif char in cursor: \n\t\t\tcursor = cursor[char] \n\t\telse: \n\t\t\treturn False\n\treturn True",
        "question_3": "Write a Python program to search a substring in a string without using built-in functions.",
        "answer_3": "def search_substring(string, substring):\n  \"\"\"Function to search substring within a string\"\"\"\n  \n  matches = []\n  \n  # Iterate over the search string\n  for i in range(len(string)):\n    temp = \"\"\n    \n    # Iterate over the substring\n    for j in range(len(substring)):\n      if substring[j] == string[i + j]:\n        temp += substring[j]\n      else:\n        break\n        \n    if temp == substring:\n      matches.append(i)\n      \n  # Return the list of matches\n  return matches\n\nstring = 'This is a test string'\nsubstring = 'test'\nresult = search_substring(string, substring)\n\n# Print the result\nprint(result)\n# Output\n# [10]"
    },
    {
        "task_id": 179,
        "text": "Write a function to find if the given number is a keith number or not.",
        "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "test_list": [
            "assert is_num_keith(14) == True",
            "assert is_num_keith(12) == False",
            "assert is_num_keith(197) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_keith(x):",
        "question_1": "Create a function in Python that determines if a given number is an Armstrong number or not.",
        "answer_1": "def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')",
        "question_2": "Write a function to determine if the given number is an Armstrong number in Python.",
        "answer_2": "def is_armstrong(num): \n    n = len(str(num)) \n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit**n\n        temp //= 10\n    if num == total:\n        return True\n    else:\n        return False",
        "question_3": "Design a function in Python that checks whether a number is an Armstrong number or not.",
        "answer_3": "def isArmstrongNumber(x):  \n    sum = 0  \n    order = len(str(x))  \n    temp = x  \n    while temp > 0:  \n        digit = temp % 10  \n        sum += digit ** order  \n        temp //= 10  \n  \n    # If n is equal to the sum  \n    # of its digits raised to the power \n    # of the number of digits \n    if x == sum:  \n        return True\n    else:  \n        return False\n  \n# Driver Program \nn = 1634\nif isArmstrongNumber(n): \n    print(\"Yes\") \nelse: \n    print(\"No\")\n\n# Output:Yes"
    },
    {
        "task_id": 180,
        "text": "Write a function to calculate distance between two points using latitude and longitude.",
        "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):",
        "question_1": "Write a Python program to calculate the distance between two points",
        "answer_1": "def calculate_distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5",
        "question_2": "Create a Python module that calculates the distance between two points given their latitude and longitude.",
        "answer_2": "import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https://stackoverflow.com/a/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r",
        "question_3": "Create an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.",
        "answer_3": "from math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)"
    },
    {
        "task_id": 181,
        "text": "Write a function to find the longest common prefix in the given set of strings.",
        "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "test_list": [
            "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
            "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
            "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_prefix_util(str1, str2):",
        "question_1": "Come up with a python program to find the longest common prefix in a list of strings.",
        "answer_1": "def longest_common_prefix(strings):\n    if len(strings) == 0: \n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        i = 0 \n        while i < len(prefix) and i < len(s) and s[i] == prefix[i]: \n            i += 1 \n        prefix = prefix[:i] \n    return prefix \n\nprint(longest_common_prefix([\"hello\", \"hey\", \"hi\", \"have\"]))  # Output: h",
        "question_2": "Write a Python program to find the longest common prefix among all strings in the list.",
        "answer_2": "def find_longest_common_prefix(strings):\n first_str = strings[0]\n longest_prefix = \"\"\n for i in range(len(first_str)):\n  current_prefix = first_str[:i]\n  flag = True\n  for string in strings[1:]:\n   if not string.startswith(current_prefix):\n    flag = False\n    break\n  if flag:\n   longest_prefix = current_prefix\n return longest_prefix",
        "question_3": "Create a Python code to return the longest common prefix of a given set of strings.",
        "answer_3": "def longestCommonPrefix(strings):\n    prefix = \"\"\n    min_length = min([len(s) for s in strings])\n    for i in range(min_length):\n        current_char = strings[0][i]\n        for s in strings:\n            if s[i] != current_char:\n                return prefix\n        prefix += current_char\n    return prefix\n\nresult = longestCommonPrefix(['car', 'cat', 'cow'])\nprint(result) # Output: 'c'"
    },
    {
        "task_id": 182,
        "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "test_list": [
            "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
            "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
            "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_character(string):",
        "question_1": "Create a program in Python to identify whether a character is uppercase, lowercase or a digit.",
        "answer_1": "def char_type(char):\n    # check if character is uppercase \n    if char.isupper(): \n        print('Uppercase') \n \n    # check if character is lowercase  \n    elif char.islower(): \n        print('Lowercase') \n \n    # check if character is digit \n    elif char.isdigit(): \n        print('Digit') \n    else: \n        print('Special Character') \n\nchar_type('A')",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_3": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 183,
        "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "test_list": [
            "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
            "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
            "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_pairs(arr, n, k):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Create a program in Python to find all pairs of elements in a list with the given difference.",
        "answer_2": "def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)",
        "question_3": "Optimize the following code in Python to reduce its complexity.",
        "answer_3": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result"
    },
    {
        "task_id": 184,
        "text": "Write a function to find all the values in a list that are greater than a specified number.",
        "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "test_list": [
            "assert greater_specificnum([220, 330, 500],200)==True",
            "assert greater_specificnum([12, 17, 21],20)==False",
            "assert greater_specificnum([1,2,3,4],10)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def greater_specificnum(list,num):",
        "question_1": "Create a python program to remove all the values in a list that are greater than a given value.",
        "answer_1": "# Defining a function to remove all the values in a list that are greater than a given value\ndef remove_greater(list, n):\n\u00a0\u00a0return [val for val in list if val <= n]\n\n# Testing the remove_greater() function\nlist = [10, 15, 20, 25, 30]\nprint(remove_greater(list, 15)) # [10, 15]",
        "question_2": "Given a list of numbers, write a Python program to find the element in the list having the highest value.",
        "answer_2": "def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value",
        "question_3": "Write a function in Python that takes a list of numbers and returns the sum of the list items that are greater than the given value.",
        "answer_3": "def findSum(nums, value):\n total = 0\n \n for num in nums:\n if num > value:\n total += num\n \n return total\n \nnums = [1, 4, 5, 10, 12]\nvalue = 6\n\nres = findSum(nums, value)\n\nprint(res)"
    },
    {
        "task_id": 185,
        "text": "Write a function to find the focus of a parabola.",
        "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "test_list": [
            "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
            "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
            "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_focus(a, b, c):",
        "question_1": "Create a python program to optimize a given function along a certain parameter range.",
        "answer_1": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))",
        "question_2": "Create an optimization problem in Python to optimize the function.",
        "answer_2": "import numpy as np\nfrom scipy.optimize import minimize\ndef f(x):\n    x, y = x\n    return x + y**2\n\nx0 = np.array([0,0])\nres = minimize(f, x0, method='nelder-mead')\nprint(res.x)",
        "question_3": "Create an optimization algorithm in Python to find the minimum value of a function.",
        "answer_3": "import numpy as np \n  \ndef optimize(func, x_range, y_range): \n    x = np.linspace(*x_range, num=100)\n    y = np.linspace(*y_range, num=100)\n    minVal = np.inf\n  \n    for xVal in x: \n        for yVal in y: \n            fVal = func(xVal, yVal) \n            if fVal < minVal: \n                minVal = fVal\n                minXVal = xVal\n                minYVal = yVal\n  \n    print(\"The minimum value is \" + str(minVal) + \" at x=\" + str(minXVal) + \" and y=\" + str(minYVal))\n  \nfunc = lambda x,y: x*x + y*y\noptimize(func, (-2,2), (-3,3)) # Output: The minimum value is 0.0 at x=0.0 and y=0.0"
    },
    {
        "task_id": 186,
        "text": "Write a function to search some literals strings in a string by using regex.",
        "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "test_list": [
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef check_literals(text, patterns):",
        "question_1": "Create a string matching algorithm in Python using Regular Expressions.",
        "answer_1": "import re\n\n# Define the pattern\npattern = r'(apple|orange|banana)'\n\n# Test strings\nstrings = ['I ate an apple.',\n 'I love oranges!',\n 'This banana is delicious.',\n 'I cannot eat grapes.']\n\n# Create the regex object\nregex = re.compile(pattern, re.IGNORECASE)\n\n# Iterate through the strings\nfor string in strings:\n # Test if the regex matches\n if regex.search(string):\n print(f\"Matched: {string}\")\n# Output\n# Matched: I ate an apple.\n# Matched: I love oranges!\n# Matched: This banana is delicious.",
        "question_2": "Generate a function in Python to search for a substring in a given string. This function should be case and pattern insensitive.",
        "answer_2": "def match_text(text, search_string):\n \"\"\"Returns all occurrences of substring in the given string with case and pattern insensitivity.\n \n Args:\n text (str): A string.\n search_string (str): The substring for which to search.\n \n Returns:\n A list of all occurrences in the given string.\n \"\"\" \n matches = []\n # Construct a case and pattern insensitive regex expression\n search_string = re.compile(search_string, re.IGNORECASE)\n # Search the string and add the matches to a list\n for match in search_string.finditer(text): \n matches.append(match.group(0))\n \n return matches",
        "question_3": "Implement a search engine in Python to perform basic search operations like exact search, wildcard etc.",
        "answer_3": "import re\n\ndef basic_search(text, pattern):\n    \"\"\" A basic search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(pattern, text)\n    # Output a list of all matches\n    return matches\n\ndef exact_search(text, pattern):\n    \"\"\" An exact search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(r'\\b' + pattern + r'\\b', text)\n     # Output a list of all matches\n    return matches\n\ndef wildcard_search(text, pattern):\n    \"\"\" A wildcard search to find 'pattern' in 'text' \"\"\"\n    # Create a regex pattern from the input pattern \n    regex_pattern = re.escape(pattern).replace(r'\\*', '.*')\n    # Find all matches \n    matches = re.findall(regex_pattern, text)\n    # Output a list of all matches\n    return matches"
    },
    {
        "task_id": 187,
        "text": "Write a function to find the longest common subsequence for the given two sequences.",
        "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "test_list": [
            "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
            "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
            "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def longest_common_subsequence(X, Y, m, n):",
        "question_1": "Write a python program to find the Longest Common Subsequence (LCS) of two sequences",
        "answer_1": "def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))",
        "question_2": "Develop a script in Python to find the longest common subsequence of two given strings.",
        "answer_2": "def lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The length of LCS is \" + lcs(X, Y, m, n))",
        "question_3": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "answer_3": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)"
    },
    {
        "task_id": 188,
        "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "test_list": [
            "assert prod_Square(25) == False",
            "assert prod_Square(30) == False",
            "assert prod_Square(16) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def prod_Square(n):",
        "question_1": "Develop a Python function that squares a given number.",
        "answer_1": "def square(number):\n \u00a0 \u00a0return number * number",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_3": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)"
    },
    {
        "task_id": 189,
        "text": "Write a python function to find the first missing positive number.",
        "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "test_list": [
            "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
            "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
            "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Missing_Positive(arr,n):",
        "question_1": "Create a function in Python to find the smallest positive number which is not present in a given unsorted array.",
        "answer_1": "def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4",
        "question_2": "Generate an algorithm in Python that finds the smallest positive number not present in an array.",
        "answer_2": "def findSmallestMissingPositiveInteger(arr): \n\tpositiveIntegers = set(i for i in range(1, len(arr) + 2)) \n\tarrSet = set(arr) \n\tres = positiveIntegers - arrSet \n\treturn res.pop() \n  \narr = [1, 10, 5, 3, 8] \nprint(findSmallestMissingPositiveInteger(arr))",
        "question_3": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_3": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]"
    },
    {
        "task_id": 190,
        "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "test_list": [
            "assert count_Intgral_Points(1,1,4,4) == 4",
            "assert count_Intgral_Points(1,2,1,2) == 1",
            "assert count_Intgral_Points(4,2,6,4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Intgral_Points(x1,y1,x2,y2):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Use Python loops to generate a new list containing the square of all numbers in the following list.",
        "answer_2": "\"\"\"\nGenerate a new list containing the square of all numbers in a list\n\"\"\"\n# input list\nin_list = [1,2,3,4,5]\n\n# output list\nout_list = []\n\n# loop over the input list\nfor i in in_list:\n    # calculate the square of the element and append it to output list\n    out_list.append(i**2)\n\n# print the output list\nprint(out_list)",
        "question_3": "Write a Python function to create a list containing the squares of numbers up to n.",
        "answer_3": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))"
    },
    {
        "task_id": 191,
        "text": "Write a function to check whether the given month name contains 30 days or not.",
        "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumber(\"February\")==False",
            "assert check_monthnumber(\"June\")==True",
            "assert check_monthnumber(\"April\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumber(monthname3):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a code snippet in Python to print the date after 30 days from the current date.",
        "answer_3": "from datetime import date, timedelta\n \nd = date.today() \nprint(d + timedelta(days = 30))"
    },
    {
        "task_id": 192,
        "text": "Write a python function to check whether a string has atleast one letter and one number.",
        "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "test_list": [
            "assert check_String('thishasboth29') == True",
            "assert check_String('python') == False",
            "assert check_String ('string') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_String(str):",
        "question_1": "Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.",
        "answer_1": "def contains_number(string):\n    return any(char.isdigit() for char in string)",
        "question_2": "Write a Python function to check if a string contains only numbers.",
        "answer_2": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag",
        "question_3": "Write a Python program to check whether a string contains all letters of the alphabet",
        "answer_3": "def check_alphabet(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True"
    },
    {
        "task_id": 193,
        "text": "Write a function to remove the duplicates from the given tuple.",
        "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "test_list": [
            "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
            "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
            "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuple(test_tup):",
        "question_1": "Write a Python function that takes in a list of elements and removes all the duplicate elements.",
        "answer_1": "def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n  \nresult = remove_duplicates([1, 2, 2, 3, 3, 3])\nprint(result)",
        "question_2": "Create a function in Python that takes a list as an argument and removes any duplicate values in the list.",
        "answer_2": "def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list",
        "question_3": "Write a function in Python to filter out duplicates from a list.",
        "answer_3": "def remove_duplicates(List): \n  return list(set(List))"
    },
    {
        "task_id": 194,
        "text": "Write a python function to convert octal number to decimal number.",
        "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def octal_To_Decimal(n):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_3": "Write a Python function to convert a given floating point number to binary.",
        "answer_3": "def decimal_to_binary(f_num):\n  b_str = \"\"\n  int_num = int(f_num)\n  f_num = f_num - int_num\n\n  while int_num > 0:\n    b_str = str(int_num % 2) + b_str\n    int_num //= 2\n\n  b_str = \"1.\" + b_str\n\n  while f_num > 0: \n    f_num *= 2\n    int_num = int(f_num)\n    if int_num == 1:\n      b_str += \"1\"\n    else:\n      b_str += \"0\"\n    f_num = f_num - int_num\n\n  return b_str"
    },
    {
        "task_id": 195,
        "text": "Write a python function to find the first position of an element in a sorted array.",
        "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "test_list": [
            "assert first([1,2,3,4,5,6,6],6,6) == 5",
            "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
            "assert first([1,2,3],1,3) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first(arr,x,n):",
        "question_1": "Create a Python program to find the index of the first occurrence of a given element in a sorted array",
        "answer_1": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid-1] < target:\n                return mid\n            else:\n                high = mid - 1\n\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# example\narr = [1, 3, 3, 4, 5, 6, 8]\ntarget = 3\nprint(binary_search(arr, target)) # 1",
        "question_2": "Create an algorithm in Python to find the first index of an item in an array.",
        "answer_2": "def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "question_3": "Suggest an algorithm in Python to sort an array of integers but maintain the order of similar elements.",
        "answer_3": "def sort_with_maintained_order(array):\n    \"\"\"\n    Sort an array of integers\n    but maintain the order of similar elements.\n\n    Parameters\n    ----------\n    array : List[int]\n        The input array\n\n    Returns\n    -------\n    List[int]\n        The sorted array\n\n    \"\"\"\n    # Keep track of elements already seen\n    seen_elements = []\n\n    # Loop over the list in the original order\n    for element in array:\n        # Check if element appears for the first time\n        if element not in seen_elements:\n            # Only continue if it is the first appearance\n            seen_elements.append(element)\n            # Find the positions of all elements with this value\n            positions = [i for i, x in enumerate(array) if x == element]\n            # Resolve the order for this element\n            order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1])\n            # Rearrange the elements in ascending order\n            for i, (pos, val) in enumerate(order):\n                array[pos] = i\n    return array"
    },
    {
        "task_id": 196,
        "text": "Write a function to remove all the tuples with length k.",
        "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "test_list": [
            "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
            "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
            "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_tuples(test_list, K):",
        "question_1": "Construct a Python function to remove all instances of an element from a given list of integers.",
        "answer_1": "def remove_element(nums, x):\n   return [y for y in nums if y != x]",
        "question_2": "Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.",
        "answer_2": "def filter_list(list):\n    return [item for item in list if len(item) < 4 or 'k' not in item]\n\nmy_list = filter_list(my_list)\nprint(my_list)\n\n# Output:\n# ['cat', 'dog']",
        "question_3": "Write a function in Python to remove duplicate entries from a list.",
        "answer_3": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))"
    },
    {
        "task_id": 197,
        "text": "Write a function to perform the exponentiation of the given two tuples.",
        "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "test_list": [
            "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
            "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
            "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_exponentio(test_tup1, test_tup2):",
        "question_1": "Create a python program that takes two numbers and calculates the exponent of the first number raised to the power of the second number.",
        "answer_1": "# This program takes two numbers and calculates the \n# exponent of the first number raised to the power of the second number\n\ndef calculateExponent(base, exponent):\n    return base**exponent\n\nbase = 2\nexponent = 3\n\nresult = calculateExponent(base, exponent)\nprint(\"The result is:\", result) # The result is: 8",
        "question_2": "Optimize a given code in Python for higher efficiency.",
        "answer_2": "def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer",
        "question_3": "Write an algorithm in Python to find the exponentiation of a given base and an exponent.",
        "answer_3": "def pow(base, exponent): \n    result = 1\n    for i in range(exponent): \n        result = result * base \n    return result \n\nbase = 2\nexponent = 4\nprint('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))"
    },
    {
        "task_id": 198,
        "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "test_list": [
            "assert largest_triangle(4,2)==10.392304845413264",
            "assert largest_triangle(5,7)==4.639421805988064",
            "assert largest_triangle(9,1)==105.2220865598093"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef largest_triangle(a,b):",
        "question_1": "Use Python to optimize a function f(x, y) so that it attains its maximum for any given set of x and y.",
        "answer_1": "from scipy.optimize import fmin\n\ndef f(x, y):\n return 3*x**2 + 2*x*y + 5*y**2\n\nx, y = fmin(f, 0, 0)\n\nprint(f'The maximum of f(x,y) is {f(x, y)} at (x, y) = ({x:0.5f}, {y:0.5f})')",
        "question_2": "Maximize a given function subject to the given constraints.",
        "answer_2": "We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2.",
        "question_3": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_3": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "task_id": 199,
        "text": "Write a python function to find highest power of 2 less than or equal to given number.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "question_1": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_1": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_2": "Create a function to compute the maximum of two numbers in Python.",
        "answer_2": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "question_3": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_3": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "task_id": 200,
        "text": "Write a function to find all index positions of the maximum values in a given list.",
        "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "test_list": [
            "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
            "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
            "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_max(list1):",
        "question_1": "Generate a Python program that takes a numerical list and finds the index of the largest value.",
        "answer_1": "# list of numbers \nlist = [3, 5, 9, 10] \n\n# maximum number \nMaxNum = max(list) \n\n# index of the maximum number \nindex = list.index(MaxNum) \n\nprint(\"Maximum number is:\", MaxNum) \nprint(\"Index of maximum number is:\", index)",
        "question_2": "Given a list of integers, write a Python program to find the maximum value in the array and display its index.",
        "answer_2": "mylist = [3, 2, 5, 8, 6]\n\n# initialize maximum value and index\nmaxval = 0\nmaxindex = 0\n\n# iterate through list\nfor i, val in enumerate(mylist):\n # check if the current value is greater than the maximum value\n if val > maxval:\n  maxval = val\n  maxindex = i\n\n# print the result\nprint('Maximum value:', maxval)\nprint('Index of maximum value:', maxindex)",
        "question_3": "Design a Python program to find the position of the maximum element in a list of numbers.",
        "answer_3": "def find_max_position(nums):\n    max_num = nums[0]\n    max_pos = 0\n\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_pos = i\n\n    return max_pos\n\nnums = [1, 5, 8, -3, 0]\nmax_pos = find_max_position(nums)\nprint(f\"The maximum element is at position {max_pos}\")"
    },
    {
        "task_id": 201,
        "text": "Write a python function to check whether the elements in a list are same or not.",
        "code": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "test_list": [
            "assert chkList(['one','one','one']) == True",
            "assert chkList(['one','Two','Three']) == False",
            "assert chkList(['bigdata','python','Django']) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def chkList(lst):",
        "question_1": "Generate a Python program that checks if all elements of a given list are the same.",
        "answer_1": "def check_list_elements(list_of_elements):\n    if len(set(list_of_elements)) == 1:\n        return True\n    else:\n        return False\n\nlist_of_elements = [1, 4, 1, 4, 1]\nsame_elements = check_list_elements(list_of_elements)\nprint(same_elements)",
        "question_2": "Write a Python program to check if elements in two given lists are the same.",
        "answer_2": "def compareLists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = compareLists(list1, list2)\n\nprint(f'Are the elements in the lists the same? {result}')\n\n# Output: Are the elements in the lists the same? False",
        "question_3": "Write a Python function to check if an element exists in a list.",
        "answer_3": "def check_list(list_, element): \n    return element in list_"
    },
    {
        "task_id": 202,
        "text": "Write a function to remove even characters in a string.",
        "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_even(\"python\")==(\"pto\")",
            "assert remove_even(\"program\")==(\"porm\")",
            "assert remove_even(\"language\")==(\"lnug\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_even(str1):",
        "question_1": "Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.",
        "answer_1": "def remove_odd_ascii_chars(str):\n    new_str = \"\"\n    for ch in str:\n        if ord(ch) % 2 == 0:\n            new_str += ch\n    return new_str\n\nstr = \"Hello world!\"\nnew_str = remove_odd_ascii_chars(str)\nprint(new_str)",
        "question_2": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_2": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_3": "Create a Python program to delete all characters at odd index in a given string.",
        "answer_3": "def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output"
    },
    {
        "task_id": 203,
        "text": "Write a python function to find the hamming distance between given two integers.",
        "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "test_list": [
            "assert hamming_Distance(4,8) == 2",
            "assert hamming_Distance(2,4) == 2",
            "assert hamming_Distance(1,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def hamming_Distance(n1,n2) :",
        "question_1": "Build a function in Python for computing the Hamming Distance between two strings of equal length.",
        "answer_1": "def hammingDistance(s1, s2): \n\n    # initialize with 0\n    distance = 0\n  \n    # Calculate the length of the string \n    length_str1 = len(s1) \n    # Compare adjacent characters and increment the count \n    # if characters are not same \n    for i in range(length_str1): \n        if s1[i] != s2[i]: \n            distance += 1\n  \n    return distance",
        "question_2": "Write a Python function to calculate the Hamming distance between two strings of same length.",
        "answer_2": "def hamming_distance(s1, s2):\n    distance = 0\n\n    for char1, char2 in zip(s1, s2):\n        if char1 != char2:\n            distance += 1\n    \n    return distance\n\nresult = hamming_distance(\"abc\", \"acd\")\nprint(result)",
        "question_3": "Using Python, write a program to calculate the hamming distance between two strings.",
        "answer_3": "def hammingDistance(string1, string2): \n if len(string1) != len(string2):\n  raise ValueError('Strings must be of equal length.')\n\n distance = 0\n\n for c1, c2 in zip(string1, string2):\n  if c1 != c2:\n   distance += 1\n\n return distance\n\nstring1 = \"Hello World!\"\nstring2 = \"Goodbye World!\"\ndistance = hammingDistance(string1, string2)\nprint(distance) # Outputs 5"
    },
    {
        "task_id": 204,
        "text": "Write a python function to count the occurrence of a given character in a string.",
        "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "test_list": [
            "assert count(\"abcc\",\"c\") == 2",
            "assert count(\"ababca\",\"a\") == 3",
            "assert count(\"mnmm0pm\",\"m\") == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count(s,c) :",
        "question_1": "Formulate a Python function to count the occurrences of a character in a given string.",
        "answer_1": "def count_characters(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count",
        "question_2": "Create a function in Python that counts the occurrence of a given character in a string.",
        "answer_2": "def count_occurrence(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count",
        "question_3": "Given a string and a character, write a Python function to count the number of occurrences of the character in the string.",
        "answer_3": "def count_characters(string, char):\n    return sum([1 for x in string if x == char])"
    },
    {
        "task_id": 205,
        "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "test_list": [
            "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
            "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
            "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def inversion_elements(test_tup):",
        "question_1": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_1": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_2": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_2": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)"
    },
    {
        "task_id": 206,
        "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
            "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
            "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(test_tup):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.",
        "answer_2": "def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3]",
        "question_3": "Generate a python code to concatenate two strings.",
        "answer_3": "def concat(s1, s2):\n    return s1 + s2"
    },
    {
        "task_id": 207,
        "text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "test_list": [
            "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
            "assert find_longest_repeating_subseq(\"aabb\") == 2",
            "assert find_longest_repeating_subseq(\"aab\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_longest_repeating_subseq(str):",
        "question_1": "Create a Python script that takes two strings as an input and returns the longest common subsequence of those two strings.",
        "answer_1": "def longestCommonSubsequence(str1, str2): \n    # find the length of the strings \n    m = len(str1) \n    n = len(str2)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of str1[0..i-1] \n    and str2[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1])\n    counter = L[m-1][n-1] \n  \n    # Create lcs and return it\n    lcs = [\"\"] * (counter+1) \n    lcs[counter] = \"\" \n  \n    # Start from the right-most-bottom-most corner and \n    # one by one store characters in lcs[] \n    i = m-1\n    j = n-1\n    while i > 0 and j > 0: \n  \n        # If current character in X[] and Y are same, then \n        # current character is part of LCS \n        if str1[i-1] == str2[j-1]: \n            lcs[counter-1] = str1[i-1] \n            i-=1\n            j-=1\n            counter-=1\n  \n        # If not same, then find the larger of two and \n        # go in the direction of larger value \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    return ''.join(lcs)\n  \n# Driver Code \nstr1 = \"ABCD\"\nstr2 = \"BCEA\"\nprint(longestCommonSubsequence(str1, str2))",
        "question_2": "Create a function in Python to determine the length of the longest common subsequence of two strings.",
        "answer_2": "def longest_subsequence(s1, s2):\n    n = len(s1) \n    m = len(s2) \n   \n    LCS = [[0 for k in range(m+1)]for l in range(n+1)]  \n   \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCS[i][j] = LCS[i-1][j-1]+1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n\n    return LCS[n][m]",
        "question_3": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "answer_3": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)"
    },
    {
        "task_id": 208,
        "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "test_list": [
            "assert is_decimal('123.11') == True",
            "assert is_decimal('0.21') == True",
            "assert is_decimal('123.1214') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_decimal(num):",
        "question_1": "Create a function in Python that rounds a number to two decimal places.",
        "answer_1": "def round_to_two_decimals(number):\n    return round(number, 2)",
        "question_2": "Generate Python code to format a given string as a Float number with 2 decimal places.",
        "answer_2": "def format_string(string): \n    return '{:.2f}'.format(float(string))\n\n// Usage:\nstring = '3.14159'\nformatted_string = format_string(string)\nprint(formatted_string) // prints 3.14",
        "question_3": "Generate a python function that checks if the number is a valid decimal or not.",
        "answer_3": "def is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 209,
        "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "test_list": [
            "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_replace(heap,a):",
        "question_1": "Create a minimum heap in python",
        "answer_1": "class MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2",
        "question_2": "Generate a Python program to implement a Min-Heap data structure.",
        "answer_2": "class MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def parent(self, i):\n        return (i - 1) // 2\n\n    def insert(self, key):\n        self.heap_array.append(key)\n\n        # Fix the min heap property if it is violated\n        self.heapify_up(len(self.heap_array) - 1)\n\n    def heapify_up(self, index):\n        # If current node is greater than parent, then swap\n        if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]:\n            # Swap the current node with its parent\n            self.heap_array[index], self.heap_array[self.parent(index)] = (\n                self.heap_array[self.parent(index)],\n                self.heap_array[index],\n            )\n\n            # Heapify the parent node\n            self.heapify_up(self.parent(index))\n\n    def delete_min(self):\n        if self.heap_array:\n            deletemin = self.heap_array[0]\n\n            # Replace the root with the last node\n            self.heap_array[0] = self.heap_array[-1]\n            del self.heap_array[-1]\n\n            # Heapify the root node\n            self.heapify_down(0)\n\n            return deletemin\n\n    def heapify_down(self, index):\n        index_left = 2 * index + 1\n        index_right = 2 * index + 2\n        index_smallest = index\n\n        # If left child is smaller than root\n        if (\n            index_left\n            < len(self.heap_array)\n            and self.heap_array[index_left] < self.heap_array[index]\n        ):\n            index_smallest = index_left\n\n        # If right child is smaller than smallest so far\n        if (\n            index_right\n            < len(self.heap_array)\n            and self.heap_array[index_right] < self.heap_array[index_smallest]\n        ):\n            index_smallest = index_right\n\n        # If index is not the smallest\n        if index != index_smallest:\n            # Swap with the smallest\n            self.heap_array[index], self.heap_array[index_smallest] = (\n                self.heap_array[index_smallest],\n                self.heap_array[index],\n            )\n\n            # Heapify the index that was swapped\n            self.heapify_down(index_smallest)",
        "question_3": "Generate a code which implements a minimum heap house.",
        "answer_3": "# Python program to demonstrate Min Heap \nfrom heapq import heappop, heappush \n  \nclass MinHeap: \n   \n    def __init__(self): \n        self.heap = list() \n   \n    # Inserts a new key 'k'  \n    def push(self, k): \n        heappush(self.heap, k)            \n  \n    # Decrease value of key at index 'i' to new_val \n    # It is assumed that new_val is smaller than heap[i] \n    def decreaseKey(self, i, new_val): \n        self.heap[i] = new_val  \n        while(i != 0 and self.heap[int((i - 1) / 2)] > self.heap[i]): \n            //Swapping the two keys \n            self.heap[i] = self.heap[int((i - 1) / 2)] \n            self.heap[int((i - 1) / 2)] = self.heap[i] \n            i = int((i - 1) / 2); \n  \n    # Method to remove minium element from min heap \n    def pop(self): \n        if self.heap: \n            # Replace root with last element of the heap\n            self.heap[0] = self.heap[len(self.heap) - 1] \n            # Remove last element\n            self.heap.pop() \n            # Heapify the root element\n            self.minHeapify(0) \n        else: \n            return None\n   \n    # This function mainly calls minHeapify of the root. \n    def minHeapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.heap) and self.heap[i] > self.heap[l]: \n            smallest = l \n        if r < len(self.heap) and self.heap[smallest] > self.heap[r]: \n            smallest = r \n        if smallest != i: \n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] \n            self.minHeapify(smallest)"
    },
    {
        "task_id": 210,
        "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "test_list": [
            "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
            "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
            "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_allowed_specific_char(string):",
        "question_1": "Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).",
        "answer_1": "import re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')",
        "question_2": "Write a Python program to detect if a string contains any special characters.",
        "answer_2": "def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))",
        "question_3": "Develop a Python program to check if a given string contains any special characters.",
        "answer_3": "import re\ndef hasSpecialChar(str):\n    return bool(re.search(r'[^A-Za-z0-9]', str))"
    },
    {
        "task_id": 211,
        "text": "Write a python function to count numbers whose oth and nth bits are set.",
        "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "test_list": [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Num(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Generate a code to find the number of 1-bits in an integer",
        "answer_2": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits"
    },
    {
        "task_id": 212,
        "text": "Write a python function to find the sum of fourth power of n natural numbers.",
        "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "test_list": [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef fourth_Power_Sum(n):",
        "question_1": "Design a Python function that outputs the sum of all multiples of 4 and 7 between 1 and a given number n.",
        "answer_1": "def sum_multiples_4_7(n): \n      \n    sum = 0\n    # iterate from 1 to n \n    for i in range(1, n+1): \n          \n        # Sum only if it's a\n        # multiple of 4 or 7 \n        if(i % 4 == 0 or i % 7 == 0): \n            sum += i \n    return sum\n\nresult = sum_multiples_4_7(100)\nprint(result)",
        "question_2": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_2": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_3": "Create a function to calculate the sum of a sequence of integers.",
        "answer_3": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum"
    },
    {
        "task_id": 213,
        "text": "Write a function to perform the concatenation of two string tuples.",
        "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_strings(test_tup1, test_tup2):",
        "question_1": "Can you write a Python function that takes two strings as arguments, and concatenates them together?",
        "answer_1": "def concatenate_strings(string1, string2):\n    return string1 + string2",
        "question_2": "Create a function in Python to concatenate two strings and return the concatenated string.",
        "answer_2": "def concatenate_strings(str1, str2):\n  return str1 + str2",
        "question_3": "Generate a python code to concatenate two strings.",
        "answer_3": "def concat(s1, s2):\n    return s1 + s2"
    },
    {
        "task_id": 214,
        "text": "Write a function to convert radians to degrees.",
        "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef degree_radian(radian):",
        "question_1": "Write a Python program to generate a table of values for sin and cos functions between 0 and 10.",
        "answer_1": "import math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table()",
        "question_2": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius.",
        "answer_2": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius",
        "question_3": "Construct a Python code to convert degrees Fahrenheit to Celsius.",
        "answer_3": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32)*(5/9)\n    return celsius"
    },
    {
        "task_id": 215,
        "text": "Write a function to decode a run-length encoded given list.",
        "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "test_list": [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decode_list(alist):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_2": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']",
        "question_3": "Prepare a python program that displays a decoded message given in a list.",
        "answer_3": "code = [1,2,3,2,2,3,1,3]\n\nmessage = \"\"\nfor d in code:\n    if d == 1:\n        message += \"A\"\n    elif d == 2:\n        message += \"B\"\n    elif d == 3:\n        message += \"C\"\nprint(message)"
    },
    {
        "task_id": 216,
        "text": "Write a function to check if a nested list is a subset of another nested list.",
        "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "test_list": [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_subset_list(list1, list2):",
        "question_1": "Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second",
        "answer_1": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True",
        "question_2": "Write a python program to check if a given array A is a subset of another array B",
        "answer_2": "def is_subset(A, B):\n    # Iterate through A\n    for elem in A:\n        # Check if the element is in B \n        if elem not in B:\n            # If not, return False\n            return False\n\n    # If we reach here, all the elements of A\n    # were present in B, so return True \n    return True",
        "question_3": "Write a Python program to check whether an element exists within a given list.",
        "answer_3": "def is_element_in_list(list_a, target):\n return target in list_a\n\nis_element_in_list(list_a, target)"
    },
    {
        "task_id": 217,
        "text": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "test_list": [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Repeated_Char(str):",
        "question_1": "Write a Python program to find the first non-repeated character of a given string.",
        "answer_1": "def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch",
        "question_2": "Code a generalized function in Python that takes a string as input and returns the first non-repeating character.",
        "answer_2": "def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1",
        "question_3": "Write a function in Python to find the first non-repeating character in a given string.",
        "answer_3": "def non_repeating_char(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    for c in s:\n        if char_freq[c] == 1:\n            return c\n\nif __name__ == '__main__':\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\"))"
    },
    {
        "task_id": 218,
        "text": "Write a python function to find the minimum operations required to make two numbers equal.",
        "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "test_list": [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math   \r\ndef min_Operations(A,B):",
        "question_1": "In Python, create a function to return the minimum of two numbers.",
        "answer_1": "def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "question_2": "Generate Python code for finding the minimum of two given numbers.",
        "answer_2": "def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5",
        "question_3": "Find the minimum of two numbers using Python.",
        "answer_3": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3"
    },
    {
        "task_id": 219,
        "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "test_list": [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "\r\ndef extract_min_max(test_tup, K):",
        "question_1": "Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.",
        "answer_1": "def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))",
        "question_2": "Write a Python function to get the maximum and minimum values in a given list.",
        "answer_2": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "question_3": "Create a function in Python that takes four parameters and returns the highest value.",
        "answer_3": "def get_highest(val1, val2, val3, val4):\n return max([val1, val2, val3, val4])"
    },
    {
        "task_id": 220,
        "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "test_list": [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef replace_max_specialchar(text,n):",
        "question_1": "Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.",
        "answer_1": "import string\n\ndef tokenize(string):\n    tokens = string.split()\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ntokenized_str = tokenize('This sentence has commas, periods, and colons.')\nprint(tokenized_str)\n# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']",
        "question_2": "Build a Python script for replacing punctuation with spaces.",
        "answer_2": "def remove_punctuation(s):\n    punctuation = \"\"\"!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~\"\"\"\n    s_no_punct = \"\"\n    for ch in s:\n        if ch not in punctuation:\n            s_no_punct += ch\n        else:\n            s_no_punct += \" \"\n    return s_no_punct\n\ns = \"Hello, world!\"\ns_no_punct = remove_punctuation(s)\nprint(s_no_punct) # Output: \"Hello  world \"",
        "question_3": "Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.",
        "answer_3": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))"
    },
    {
        "task_id": 221,
        "text": "Write a python function to find the first even number in a given list of numbers.",
        "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "test_list": [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_even(nums):",
        "question_1": "Create an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers.",
        "answer_1": "def get_even_numbers(nums_list):\n  even_numbers = []\n  for num in nums_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nnums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = get_even_numbers(nums_list)\nprint(even_number)",
        "question_2": "Write a Python program that takes a list of numbers and creates a new list of even numbers only.",
        "answer_2": "def get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "question_3": "Generate a new Python List containing all of the even numbers from a given list.",
        "answer_3": "my_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\neven_list = [x for x in my_list if x % 2 == 0]\nprint(even_list)"
    },
    {
        "task_id": 222,
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_type(test_tuple):",
        "question_1": "Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.",
        "answer_1": "def infer_data_type(my_list):\n    output_list = []\n    for item in my_list:\n        if type(item) == int:\n            output_list.append('integer')\n        elif type(item) == float:\n            output_list.append('float')\n        else:\n            output_list.append('string')\n    return output_list",
        "question_2": "Compile a list of data types for Python",
        "answer_2": "In Python, there are various data types such as strings, numbers (integer, float, complex), booleans, lists, tuples, dictionaries and sets.",
        "question_3": "Write a Python function to check if a given list contains any duplicate elements.",
        "answer_3": "def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False"
    },
    {
        "task_id": 223,
        "text": "Write a function to check for majority element in the given sorted array.",
        "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_majority(arr, n, x):",
        "question_1": "Develop an algorithm in Python to identify the majority element in an unsorted array.",
        "answer_1": "def find_majority_element(array):\n    count = 0\n    majority_element = None\n\n    for element in array:\n        if count == 0:\n            majority_element = element\n\n        count += (1 if element == majority_element else -1)\n\n    return majority_element",
        "question_2": "Generate a Python algorithm that probes an array and attempts to select the majority element in the array.",
        "answer_2": "def find_majority_element(arr):\n    # Use Moore's voting algorithm\n    major_index = 0\n    count = 1\n\n    for i in range(len(arr)):\n        if arr[i] == arr[major_index]:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                major_index = i\n                count = 1\n\n    # Check majority element\n    return arr[major_index]",
        "question_3": "Write a Python function that takes an array of integers and returns the sorted array with the most common element in the middle.",
        "answer_3": "def medianMostCommon(arr):\n  # Count the number of occurences of every element\n  counts = {}\n  for element in arr:\n    if element in counts:\n      counts[element] += 1\n    else:\n      counts[element] = 1\n  \n  # Find the most common element\n  most_common_element = None\n  max_count = 0\n  for element, count in counts.items():\n    if count > max_count:\n      most_common_element = element\n      max_count = count\n\n  # Sort the array\n  sorted_arr = sorted(arr)\n\n  # Find the index of the most common element\n  index = sorted_arr.index(most_common_element)\n\n  # Swap the most common element and the middle element in the array\n  mid = len(sorted_arr) // 2\n  sorted_arr[index] = sorted_arr[mid]\n  sorted_arr[mid] = most_common_element\n\n  return sorted_arr\n\narr = [4, 5, 2, 5, 8, 5, 6, 5]\nresult = medianMostCommon(arr)\nprint(result) # [4, 5, 5, 5, 5, 6, 8, 2]"
    },
    {
        "task_id": 224,
        "text": "Write a python function to count set bits of a given number.",
        "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Set_Bits(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Generate a code to find the number of 1-bits in an integer",
        "answer_3": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))"
    },
    {
        "task_id": 225,
        "text": "Write a python function to find the minimum element in a sorted and rotated array.",
        "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "test_list": [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Min(arr,low,high):",
        "question_1": "Create a program in Python that takes an array and finds the minimum value stored in it.",
        "answer_1": "arr = [34, 48, 19, 61, 3] \n  \n# Finds the minimum element \nprint (\"The minimum element is \" + str(min(arr)))",
        "question_2": "Design a selection sort algorithm in Python.",
        "answer_2": "def selection_sort(arr): \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]",
        "question_3": "Design an optimized selection sort algorithm in Python.",
        "answer_3": "def selection_sort(arr): \n    n = len(arr) \n    # Traverse through all array elements \n    for i in range(n): \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
    },
    {
        "task_id": 226,
        "text": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_values_string(str):",
        "question_1": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_1": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_2": "Formulate a python code to remove the characters of odd index in a given string.",
        "answer_2": "def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe",
        "question_3": "Create a Python program to delete all characters at odd index in a given string.",
        "answer_3": "def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output"
    },
    {
        "task_id": 227,
        "text": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_of_three(a,b,c):",
        "question_1": "Design a function in Python to find the minimum of three numbers.",
        "answer_1": "def find_min(a, b, c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nmin = find_min(2, -6, 4)\nprint(min)",
        "question_2": "Write a Python function that finds the smallest number among three numbers",
        "answer_2": "def find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2",
        "question_3": "Design an algorithm in Python to find the minimum of three values.",
        "answer_3": "def find_min(a, b, c): \n    min_val = a \n    if b < min_val: \n        min_val = b \n    if c < min_val: \n        min_val = c \n    return min_val \n\nprint(find_min(3, 2, 1)) # Output: 1"
    },
    {
        "task_id": 228,
        "text": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):",
        "question_1": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_1": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "question_2": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_2": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits"
    },
    {
        "task_id": 229,
        "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_arrange_array(arr, n):",
        "question_1": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_1": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)",
        "question_2": "Develop a Python program for reversing the order of a given array.",
        "answer_2": "def reverse_array(arr):\n  start = 0\n  end = len(arr) - 1\n  while start < end:\n    arr[start], arr[end] = arr[end], arr[start]\n    start += 1\n    end -= 1\n  return arr",
        "question_3": "Modify the following Python code to reverse the order of the elements in an array",
        "answer_3": "arr = arr[::-1]  # Reverses the order of elements in the array."
    },
    {
        "task_id": 230,
        "text": "Write a function to replace blank spaces with any character in a string.",
        "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_blank(str1,char):",
        "question_1": "Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.",
        "answer_1": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))",
        "question_2": "Develop a python function which replaces all whitespaces in a given string with a different character.",
        "answer_2": "def replace_whitespaces(string, character):\n    return string.replace(\" \", character)",
        "question_3": "Create a program in Python to strip all white spaces from a given string.",
        "answer_3": "def strip_whitespace(string):\n  return string.replace(' ', '')"
    },
    {
        "task_id": 231,
        "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "test_list": [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(tri, n):",
        "question_1": "Improve the following Python program to reduce its time complexity.",
        "answer_1": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum",
        "question_2": "Create a function in Python that will take an array of integers and find the two numbers with the largest sum.",
        "answer_2": "def findMaxSum(input):\n    num1 = -float('inf')\n    num2 = -float('inf')\n    for num in input:\n        if num > num1:\n            num2 = num1\n            num1 = num\n        elif num > num2:\n            num2 = num\n    return num1 + num2",
        "question_3": "Refactor this piece of Python code to increase its readability.",
        "answer_3": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum"
    },
    {
        "task_id": 232,
        "text": "Write a function to get the n largest items from a dataset.",
        "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "test_list": [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef larg_nnum(list1,n):",
        "question_1": "Create a lambda expression in Python to return the largest number from a list of numbers.",
        "answer_1": "largestNum = lambda a: max(a)",
        "question_2": "Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.",
        "answer_2": "def getLargestNum(nums):\n    largestNum = nums[0]\n    \n    for num in nums[1:]:\n        if num > largestNum:\n            largestNum = num\n\n    return largestNum",
        "question_3": "Create a function in Python to get the largest element in a given list.",
        "answer_3": "def get_largest_element(nums):\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\n\n# Test the function\nnumbers = [4,8,2,9,10]\nprint(get_largest_element(numbers)) # Output: 10"
    },
    {
        "task_id": 233,
        "text": "Write a function to find the lateral surface area of a cylinder.",
        "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "test_list": [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsuface_cylinder(r,h):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Rewrite the code in Python to improve its readability.",
        "answer_3": "import math\n\ndef calculate_area(radius):\n    return math.pi * (radius ** 2)"
    },
    {
        "task_id": 234,
        "text": "Write a function to find the volume of a cube.",
        "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cube(l):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Create a python program to compute the volume of a cube given its edge length as an input.",
        "answer_2": "length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)",
        "question_3": "Optimize a Python program to calculate the volume of a cube.",
        "answer_3": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))"
    },
    {
        "task_id": 235,
        "text": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_set_number(n):",
        "question_1": "Design a program in Python that prints the even numbers from 0 to 100.",
        "answer_1": "for i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)",
        "question_2": "Write a script in python that outputs all even numbers between 0 and 10.",
        "answer_2": "for number in range(0,11):\n  if (number % 2 == 0):\n    print(number)",
        "question_3": "Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.",
        "answer_3": "def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 236,
        "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "test_list": [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def No_of_Triangle(N,K):",
        "question_1": "Create a Python program to identify the type of triangles given three sides.",
        "answer_1": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_2": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_2": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_3": "Create a Python program to implement the triangle numbers.",
        "answer_3": "def triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15"
    },
    {
        "task_id": 237,
        "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef check_occurences(test_list):",
        "question_1": "Optimize this Python function to improve its running time.",
        "answer_1": "def find_duplicates(a):\n    seen = set()\n    result = []\n    for num in a:\n        if num in seen:\n            result.append(num)\n        else:\n            seen.add(num)\n    return result",
        "question_2": "How can you reduce the complexity of the following Python code?",
        "answer_2": "def find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates",
        "question_3": "Suggest an improvement to the following python program.",
        "answer_3": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for elem in lst:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates"
    },
    {
        "task_id": 238,
        "text": "Write a python function to count number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def number_of_substrings(str):",
        "question_1": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.",
        "answer_1": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "question_2": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_2": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))",
        "question_3": "Generate an algorithm to count substrings in Python.",
        "answer_3": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)"
    },
    {
        "task_id": 239,
        "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_total_number_of_sequences(m,n):",
        "question_1": "Edit a Python program to sort an array of size n with m different types of numbers in ascending order.",
        "answer_1": "# Sort an array with m different types of elements\ndef sort_array(arr):\n    # Get the number of different types of elements \n    m = len(set(arr)) \n    n = len(arr) \n  \n    # Create an output array of size n\n    output = [0] * (n) \n   \n    # Store count of individual numbers in \n    # count array \n    count = [0] * (m) \n    for i in range(0, n): \n        count[arr[i]] += 1\n   \n    # finding cummulative count \n    for i in range(1, m): \n        count[i] += count[i - 1] \n  \n    # Inserting values in sorted array\n    for i in range(n - 1, -1, -1): \n        output[count[arr[i]] - 1] = arr[i] \n        count[arr[i]] -= 1\n   \n    return output \n\n# Driver Code \narr = [2, 1, 1, 3, 6, 4, 5, 5]\nsorted_arr = sort_array(arr) \n  \n# Printing the sorted array \nprint(*sorted_arr)",
        "question_2": "Write a python program to find the Longest Common Subsequence (LCS) of two sequences",
        "answer_2": "def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))",
        "question_3": "Create a function in Python that takes an integer route x as input and returns all possible subsequences of length x.",
        "answer_3": "def subsequences(x):\n subs = []\n for i in range(1<<x):\n sub = []\n for j in range(x):\n if (i & (1 << j)) > 0:\n sub.append(j)\n subs.append(sub)\n return subs"
    },
    {
        "task_id": 240,
        "text": "Write a function to replace the last element of the list with another list.",
        "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_list(list1,list2):",
        "question_1": "Design aPython program to replace the last element in a list with another list.",
        "answer_1": "def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1",
        "question_2": "Write a Python code snippet to remove the last element from a list.",
        "answer_2": "def remove_last_element(lst):\n    last_index = len(lst) - 1\n    del lst[last_index]\n\nexample_list = [3, 1, 5, 7, 4, 8, 2]\nremove_last_element(example_list)\nprint(example_list) \n# Output: [3, 1, 5, 7, 4, 8]",
        "question_3": "Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.",
        "answer_3": "def move_last_3(list):\n  last3 = list[-3:]\n  del list[-3:]\n  list = last3 + list\n  return list"
    },
    {
        "task_id": 241,
        "text": "Write a function to generate a 3d array having each element as '*'.",
        "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "test_list": [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def array_3d(m,n,o):",
        "question_1": "How would you create a 3D Array in python?",
        "answer_1": "A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:\n\narray_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],\n                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],\n                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])",
        "question_2": "Generate a 3D array of size 2 x 3 x 2 in Python.",
        "answer_2": "import numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x)",
        "question_3": "Write a Python program to create a 3x3x3 array (3D array) filled with zeros.",
        "answer_3": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)"
    },
    {
        "task_id": 242,
        "text": "Write a function to count total characters in a string.",
        "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_charac(str1):",
        "question_1": "Write a Python program to calculate the total number of characters in a given string.",
        "answer_1": "def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "question_2": "Generate a Python function to count and print the total number of characters in a string.",
        "answer_2": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    print(\"Total number of characters:\", count)",
        "question_3": "Given a string and a character, write a Python function to count the number of occurrences of the character in the string.",
        "answer_3": "def count_characters(string, char):\n    return sum([1 for x in string if x == char])"
    },
    {
        "task_id": 243,
        "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "test_list": [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_on_occurence(lst):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_2": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])",
        "question_3": "Write a python program to sort a given list of tuples based on its first element in increasing order.",
        "answer_3": "def sortTuplesByFirstElement(lst):\n    lst.sort(key = lambda x: x[0])\n    return lst\n\nsortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])\nprint(sortedList)"
    },
    {
        "task_id": 244,
        "text": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef next_Perfect_Square(N):",
        "question_1": "Design an algorithm in Python that checks whether a given number is a perfect square.",
        "answer_1": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n",
        "question_2": "Suggest a completion for a python function to find the square of a given number.",
        "answer_2": "def square(num):\n    return num**2",
        "question_3": "Design an algorithm to check if a number is a perfect square in Python.",
        "answer_3": "import math \n  \ndef isPerfectSquare(n): \n    # Find floating point value of \n    # square root of x. \n    sqr = math.sqrt(n) \n   \n    # If square root is an integer \n    return (sqr - math.floor(sqr) == 0) \n  \n# Driver program \nx = 25\nif(isPerfectSquare(x)): \n    print(x, \"is a perfect square\") \nelse: \n    print(x, \"is not a perfect square\")"
    },
    {
        "task_id": 245,
        "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum(arr, n):",
        "question_1": "Write a Python program to find the maximum sum of any continous subarray.",
        "answer_1": "def maxSubarrySum(arr):\n  cur_max = 0\n  global_max = 0\n  \n  for i in arr:\n    cur_max = max(cur_max + i, 0)\n    global_max = max(global_max, cur_max)\n    \n  return global_max\n  \n# test\narr = [1, -2, 3, 4, -5]\nprint(maxSubarrySum(arr))\n\n# output: 7",
        "question_2": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_2": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_3": "Generate a correct Python program to compute the maximum sub array sum",
        "answer_3": "def max_sub_array_sum(arr): \n    max_sum = 0\n    for i in range(len(arr)): \n        ans = 0\n        for j in range(i, len(arr)): \n            ans += arr[j]  \n            max_sum = max(max_sum, ans) \n    return max_sum"
    },
    {
        "task_id": 246,
        "text": "Write a function for computing square roots using the babylonian method.",
        "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def babylonian_squareroot(number):",
        "question_1": "Create a Python program to find the square root of a number without using the square root function.",
        "answer_1": "# A function to calculate the Square Root of a number using \n# the babylonian method \ndef sqrt(n): \n\t\n\t# We are using n itself as initial approximation \n\t# This can definitely be improved \n\tx = n \n\ty = 1\n\t\n\t# e decides the accuracy level \n\te = 0.000001\n\t\n\twhile(x - y > e): \n\t\tx = (x + y)/2\n\t\ty = n/x \n\n\treturn x \n\n# Driver Program \nnum = 25\nprint(sqrt(num))",
        "question_2": "Edit the following Python program to compute the square root of a given number.",
        "answer_2": "def square_root(number):\n    return number ** 0.5",
        "question_3": "Create a python program to implement an algorithm to find the square root of a given number",
        "answer_3": "def sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x/result) / 2\n    return result"
    },
    {
        "task_id": 247,
        "text": "Write a function to find the longest palindromic subsequence in the given string.",
        "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lps(str):",
        "question_1": "Write a Python program to find the longest palindromic subsequence of a given string.",
        "answer_1": "def longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]",
        "question_2": "Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome.",
        "answer_2": "def longest_palindrome(x):\n    longest = ''\n    for i in range(len(x)):\n        j = i + len(longest) + 1\n        while j <= len(x):\n            substring = x[i:j]\n            if substring == substring[::-1] and len(substring) > len(longest):\n                longest = substring\n            j = j + 1\n    return longest",
        "question_3": "Implement an algorithm in Python to find the longest palindromic substring from a given string.",
        "answer_3": "def longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)"
    },
    {
        "task_id": 248,
        "text": "Write a function to calculate the harmonic sum of n-1.",
        "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def harmonic_sum(n):",
        "question_1": "Develop a Python program that computes the sum of integers from 1 to n.",
        "answer_1": "def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))",
        "question_2": "Write a Python function to calculate the sum of the natural numbers up to n.",
        "answer_2": "def sum_natural_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_natural_numbers(n - 1)",
        "question_3": "Create a program in Python to calculate the sum of the first n positive integers, using recursion.",
        "answer_3": "def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)"
    },
    {
        "task_id": 249,
        "text": "Write a function to find the intersection of two arrays using lambda function.",
        "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_array(array_nums1,array_nums2):",
        "question_1": "Design an algorithm in Python to compute the intersection of two given arrays.",
        "answer_1": "def intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))",
        "question_2": "Generate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.",
        "answer_2": "def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 7]\n\nprint(intersection(list1, list2)) # [2, 4]",
        "question_3": "Write a Python code to get the intersection of two given arrays.",
        "answer_3": "def intersection_arr(arr1, arr2):\n    # create an empty list for storing the elements\n    result = []\n    \n    for element in arr1:\n        if element in arr2: \n            result.append(element)\n    \n    return result\n\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nintersect = intersection_arr(a, b)\nprint(intersect)"
    },
    {
        "task_id": 250,
        "text": "Write a python function to count the occcurences of an element in a tuple.",
        "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_X(tup, x):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_2": "def count_elements(arr): \n    return len(arr)",
        "question_3": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_3": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count"
    },
    {
        "task_id": 251,
        "text": "Write a function to insert an element before each element of a list.",
        "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def insert_element(list,element):",
        "question_1": "Write a Python program to insert an element at the beginning of a given list.",
        "answer_1": "def insert_at_beginning(list, element):\n    list.insert(0, element)\n    return list",
        "question_2": "Write a Python function to insert an element in a given list after a given index.",
        "answer_2": "def insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list",
        "question_3": "Write a Python function to insert a list of elements into a given list according to the given index.",
        "answer_3": "def insert_list(list, index, elements): \n    return (list[0:index] + elements + list[index:])"
    },
    {
        "task_id": 252,
        "text": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import cmath  \r\ndef convert(numbers):",
        "question_1": "Generate a Python program to convert an array from the cartesian to the polar coordinate system.",
        "answer_1": "def cartesian_to_polar(arr):\n    x = arr[0]\n    y = arr[1]\n \n    radius = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n \n    return [radius, theta]\n    \narr = [1, 2]\nresult = cartesian_to_polar(arr)\nprint(result)",
        "question_2": "Generate a Python function to convert radar data in polar coordinates into Cartesian coordinates.",
        "answer_2": "def polar_to_cartesian(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y",
        "question_3": "Create a class in Python to represent a complex number.",
        "answer_3": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary)"
    },
    {
        "task_id": 253,
        "text": "Write a python function to count integers from a given list.",
        "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_integer(list1):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Write a Python function to input a list of integers and a number and output the number of times that number appears in the list.",
        "answer_2": "def count_occurrences(numbers, n):\n count = 0\n for num in numbers:\n if num == n:\n count += 1\n return count",
        "question_3": "Rewrite a given Python program to be more efficient.",
        "answer_3": "my_list = [1,2,3,4,5,6]\n\n# Use the sum() function to get the sum of a given list\ncount = sum(my_list)\n\nprint(count)"
    },
    {
        "task_id": 254,
        "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "test_list": [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef words_ae(text):",
        "question_1": "Create a Python function to print out all the words in a given string with the letter e.",
        "answer_1": "def print_words_with_e(str): \n    words = str.split() \n    for word in words: \n        if 'e' in word: \n            print(word) \n\nprint_words_with_e(str)",
        "question_2": "Construct a Python function to filter out all the words from a list that contains the letter \"a\".",
        "answer_2": "def filter_words_with_a(words):\n return [word for word in words if \"a\" in word]",
        "question_3": "Develop a Python program to find all possible words from a set of characters",
        "answer_3": "def findWords(string):\n    results = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            results.append(string[i:j])\n    return results\n\nstring = \"abcd\"\nprint(findWords(string))"
    },
    {
        "task_id": 255,
        "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):",
        "question_1": "Write a Python program to generate all combinations of three given numbers.",
        "answer_1": "def combinations(lst, n):\n  # generate all the combinations\n  # we use the itertools library to do this\n  from itertools import combinations\n   \n  # generate all the combinations of length three\n  combinations = list(combinations(lst, n))\n\n  # loop through all the combinations and print them\n  for i in range(len(combinations)):\n    print(combinations[i])\n\n# call the function with the given list\ncombinations([1,2,3], 3)",
        "question_2": "Write a Python program to generate a random color palette of five colors.",
        "answer_2": "import random\n\n# List of ten random colors\ncolors = [\"#000000\", \"#FFFFFF\", \"#A52A2A\", \"#008080\", \"#DAA520\", \"#008000\", \"#FF00FF\", \"#808080\", \"#800000\", \"#808000\", \"#FFC0CB\"]\n\n# Function that randomly selects five colors from the list\ndef generate_colors():\n random.shuffle(colors)\n palette = colors[:5]\n return palette\n\n# Generates and prints random color palette\nprint (generate_colors())",
        "question_3": "Write a Python program to generate all possible combinations of a set of numbers.",
        "answer_3": "def combinations(nums):\n  \"\"\"\n Generate all possible combinations of a given set of numbers\n  \n  Args:\n    nums: a list of integers\n \n  Returns:\n    A list of list representing the possible combinations\n  \"\"\"\n  \n  # Base case\n  if len(nums) == 0:\n    return [[]]\n  \n  # Recursive step\n  ans = []\n  for comb in combinations(nums[1:]):\n    for i in range(len(comb)+1):\n      ans.append(comb[:i] + [nums[0]] + comb[i:])\n  return ans\n\n# Call the function with the given input\nprint(combinations(nums))"
    },
    {
        "task_id": 256,
        "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Primes_nums(n):",
        "question_1": "Create a python program that computes the sum of all the prime numbers lower than a given number",
        "answer_1": "def sum_prime_numbers(n):\n    if n <= 1:\n        return 0\n        \n    prime_sum = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_sum += i\n            \n    return prime_sum",
        "question_2": "Write a function in Python to find the number of prime numbers up to a given number.",
        "answer_2": "def countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)",
        "question_3": "Design a function  in Python to count the total number of prime numbers between the two given numbers (inclusive).",
        "answer_3": "def count_primes(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "task_id": 257,
        "text": "Write a function to swap two numbers.",
        "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_numbers(a,b):",
        "question_1": "Create a Python program to swap two numbers.",
        "answer_1": "# Function to swap two numbers \ndef swap_nums(num1, num2): \n    # Swapping the two numbers \n    num1, num2 = num2, num1 \n    return num1, num2 \n  \n# Main code \nnum1 = 5\nnum2 = 10\n  \n# Printing the values before swapping \nprint(\"Before swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2) \n  \n# Calling the swap function \nnum1, num2 = swap_nums(num1, num2) \n  \n# Printing the values after swapping \nprint(\"\\nAfter swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2)",
        "question_2": "Design a function in Python for swapping the values of two given integers.",
        "answer_2": "def swap_values(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n\nx, y = swap_values(3,5)\nprint(x, y)",
        "question_3": "Compose a Python Code to swap two numbers without using a temporary variable.",
        "answer_3": "# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)"
    },
    {
        "task_id": 258,
        "text": "Write a function to find number of odd elements in the given list using lambda function.",
        "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "test_list": [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_odd(array_nums):",
        "question_1": "Optimize the following code using functional programming in Python.",
        "answer_1": "def add_odds(list):\n  odd_list = filter(lambda num: num%2==1, list)\n  return list(odd_list)",
        "question_2": "Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list.",
        "answer_2": "def sum_odd_elements(int_list):\n    '''This function takes a list of integers and returns the sum of all the odd elements.'''\n    total = 0\n    for num in int_list:\n        if num % 2 != 0:\n            total += num\n    return total\n\nint_list = [2, 3, 4, 5, 6]\nsum = sum_odd_elements(int_list)\n\nprint(sum) # 8",
        "question_3": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_3": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]"
    },
    {
        "task_id": 259,
        "text": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximize_elements(test_tup1, test_tup2):",
        "question_1": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_1": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_2": "Design a function in Python which takes two integers and returns the maximum of the two.",
        "answer_2": "def get_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b",
        "question_3": "Create a function to compute the maximum of two numbers in Python.",
        "answer_3": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y"
    },
    {
        "task_id": 260,
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test_list": [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def newman_prime(n):",
        "question_1": "Construct a program in Python that finds the nth prime number.",
        "answer_1": "\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)",
        "question_2": "Write a python function that accepts a number n as input and outputs its nth prime number.",
        "answer_2": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "question_3": "Write a Python script which can print out all prime numbers between 0 and n.",
        "answer_3": "def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True"
    },
    {
        "task_id": 261,
        "text": "Write a function to perform mathematical division operation across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def division_elements(test_tup1, test_tup2):",
        "question_1": "Modify a given Python function to accept additional arguments.",
        "answer_1": "def divide(a, b, c=1, d=1):\n    return (a / b) / (c / d)",
        "question_2": "Write a Python function to multiply two given numbers.",
        "answer_2": "def multiply(num1, num2):\n    return num1 * num2",
        "question_3": "Generate a Python function to multiply two given positive integers without using the * operator.",
        "answer_3": "def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1))"
    },
    {
        "task_id": 262,
        "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def split_two_parts(list1, L):",
        "question_1": "Create a function in Python to split a list into sublists of given length x.",
        "answer_1": "def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]",
        "question_2": "Design a program in Python to split a list of strings into two halves.",
        "answer_2": "def split_list(string_list):\n    mid = len(string_list) // 2\n    return string_list[:mid], string_list[mid:]",
        "question_3": "Write a Python program to split a list into two halves.",
        "answer_3": "def split_list(lst):\n    half = len(lst) // 2\n    return lst[:half], lst[half:]\n\nleft, right = split_list([14, 8, 3, 7, 5])\nprint (\"Left list : \", left)\nprint (\"Right list : \", right)"
    },
    {
        "task_id": 263,
        "text": "Write a function to merge two dictionaries.",
        "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "test_list": [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def merge_dict(d1,d2):",
        "question_1": "Design a function in Python for merging two dictionaries.",
        "answer_1": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3",
        "question_2": "Write a code block to merge two given dictionaries into a single one.",
        "answer_2": "def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict",
        "question_3": "Suggest a completion for the following python code to merge two given dictionaries into one.",
        "answer_3": "def merge_dict(dict1, dict2):\n result = dict1.copy()\n result.update(dict2)\n return result"
    },
    {
        "task_id": 264,
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dog_age(h_age):",
        "question_1": "Write a Python function to convert days to years.",
        "answer_1": "def days_to_years(days):\n    years = days / 365\n    return years",
        "question_2": "Construct a Python program to calculate the age in years of a person given their birthdate.",
        "answer_2": "import datetime\n\ndef calculate_age(birthdate):\n\n    today = datetime.date.today()\n    current_year = today.year\n\n    age = current_year - birthdate.year\n\n    if ((birthdate.month, birthdate.day) > (today.month, today.day)):\n        age -= 1\n    \n    return age\n\nbirthdate = datetime.date(1996, 6, 11)\nage = calculate_age(birthdate)\nprint(age) # 24",
        "question_3": "Write a Python program to convert the ages listed in the input into their equivalent years.",
        "answer_3": "ages = [\"14 months\", \"2 years\", \"4 weeks\", \"6 days\"]\n\ndef convert_age(ages):\n  converted_ages = []\n  for age in ages:\n    age_split = age.split(\" \")\n    if age_split[1] == \"months\":\n        converted_age = int(age_split[0]) / 12\n    elif age_split[1] == \"years\":\n        converted_age = int(age_split[0])\n    elif age_split[1] == \"weeks\":\n        converted_age = int(age_split[0]) / 52\n    elif age_split[1] == \"days\":\n        converted_age = int(age_split[0]) / 365  \n    converted_ages.append(converted_age)\n  return converted_ages\n\nconverted_ages = convert_age(ages)\nprint(converted_ages)"
    },
    {
        "task_id": 265,
        "text": "Write a function to split a list for every nth element.",
        "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def list_split(S, step):",
        "question_1": "Create a function in Python to split a list into sublists of given length x.",
        "answer_1": "def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]",
        "question_2": "Write a Python program to split a list into two halves.",
        "answer_2": "def split_list(lst):\n    half = len(lst) // 2\n    return lst[:half], lst[half:]\n\nleft, right = split_list([14, 8, 3, 7, 5])\nprint (\"Left list : \", left)\nprint (\"Right list : \", right)",
        "question_3": "Create a Python program for splitting a given string by every nth character.",
        "answer_3": "#Function for splitting a given string by every nth character\ndef splitStringByN(string, n): \n    res = [string[i:i+n] for i in range(0, len(string), n)] \n    return res\n\n# Driver code\nstring = \"Hello World!\"\nn = 3\nsplitString = splitStringByN(string, n)\nprint(splitString)"
    },
    {
        "task_id": 266,
        "text": "Write a function to find the lateral surface area of a cube.",
        "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cube(l):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52"
    },
    {
        "task_id": 267,
        "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "question_1": "Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.",
        "answer_1": "def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_",
        "question_2": "Write a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence.",
        "answer_2": "def calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares)",
        "question_3": "Write a python program to calculate the sum of the squares of the odd numbers between the given two numbers.",
        "answer_3": "def sum_square_odd(n1, n2):\n    sum = 0\n    for i in range(n1, n2+1):\n        if i % 2 != 0:\n            sum += i*i\n    return sum\n\nsum = sum_square_odd(n1, n2)\nprint(sum)"
    },
    {
        "task_id": 268,
        "text": "Write a function to find the n'th star number.",
        "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_star_num(n):",
        "question_1": "Generate a Python function to print a pattern of stars",
        "answer_1": "def starPattern(n):\n    # outer loop to handle number of rows\n    for i in range(0, n):\n        # inner loop to handle number of columns\n        for j in range(0, i + 1):\n            # printing stars\n            print(\"* \", end=\"\")\n        # ending line after each row\n        print(\"\\r\")\n\n# Driver code\nn = 5\nstarPattern(n)",
        "question_2": "Generate a Python program that accepts an integer as an input and then outputs a string composed of stars",
        "answer_2": "# Get the number from the user\nnum = int(input(\"Enter a number: \"))\n\n# Generate a string of stars\nstar_string = '*' * num\n\nprint(star_string)",
        "question_3": "Rewrite the following algorithm using Python:",
        "answer_3": "def star_pattern(n):\n    # Outer loop to handle number of rows \n    # n in this case \n    for i in range(0, n): \n      \n        # Inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n          \n            # Printing stars \n            print(\"* \",end=\"\") \n       \n        # Ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 5\nstar_pattern(n)"
    },
    {
        "task_id": 269,
        "text": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ascii_value(k):",
        "question_1": "In Python, create a function that takes a character as input and returns its ASCII value.",
        "answer_1": "def getAsciiValue(char): \n    return ord(char)",
        "question_2": "Write a Python program that takes a user input of a number and prints out the corresponding character from the ASCII table.",
        "answer_2": "# Python program to get ASCII value of a character\n\nc = input('Enter a character: ')\n\n# ord() function to get the ASCII value \nprint('The ASCII value of ' + c + ' is', ord(c))",
        "question_3": "Develop a Python program to read a character from the user and print its ASCII value.",
        "answer_3": "# Get the character from user\nchar = input('Please enter a character: ')\n\n# Print the ASCII value\nprint(ord(char))"
    },
    {
        "task_id": 270,
        "text": "Write a python function to find the sum of even numbers at even positions.",
        "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_even_and_even_index(arr,n):",
        "question_1": "Write a Python function that calculates the sum of all even numbers within a given range",
        "answer_1": "def sum_even_in_range(start, end):\n    # Initialise the result\n    result = 0\n\n    # Loop over the Range\n    for i in range(start, end+1):\n        # Check if number is even \n        if i % 2 == 0:\n            result += i\n            \n    return result",
        "question_2": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_2": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum",
        "question_3": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_3": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12"
    },
    {
        "task_id": 271,
        "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_Power_Sum(n):",
        "question_1": "Create a Python script that prints out the sum of the first n even numbers.",
        "answer_1": "def sumOfEvenNumbers(n):\n    sum = 0\n    for i in range(1, (n * 2) + 1):\n        if i % 2 == 0:\n           sum += i\n    return sum\n\nprint(sumOfEvenNumbers(5))",
        "question_2": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_2": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "question_3": "Write a Python function that takes a list of numbers and returns the sum of all odd numbers in the list.",
        "answer_3": "def sum_odd_numbers(nums):\n    result = 0\n    for num in nums:\n        # check for odd number\n        if num % 2 != 0:\n            result += num\n    return result\n\nresult = sum_odd_numbers([1, 2, 3, 4, 5])\nprint(result)"
    },
    {
        "task_id": 272,
        "text": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rear_extract(test_list):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to complete a given list of operations on a given data set.",
        "answer_2": "def apply_operations(dataset, operations):\n result = []\n for item in dataset:\n   item[0] = str(int(item[0]) - 1).upper()\n   item[1] = str(int(item[1]) - 1).upper()\n   result.append(item)\n return result\n\ndataset = [['Car', 'Red'], ['Bike', 'Blue'], ['Van', 'Green']]\noperations = [\"subtract 1 from each element and transform it to upper case\"]\n\nresult = apply_operations(dataset, operations)\nprint(result)",
        "question_3": "Design an algorithm in Python to generate all permutations of a given list.",
        "answer_3": "def permute(nums):\n  res = [] \n  backtrack(nums, res, [])\n  return res\n\ndef backtrack(nums, res, temp):\n  if(len(temp) == len(nums)):\n    res.append(temp[:])\n  else:\n    for num in nums:\n      if num not in temp:\n        temp.append(num)\n        backtrack(nums, res, temp)\n        temp.pop()\n\n#print the result \nnums = [1, 2, 3]\nperms = permute(nums)\nprint(perms)"
    },
    {
        "task_id": 273,
        "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def substract_elements(test_tup1, test_tup2):",
        "question_1": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_1": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_2": "Modify the given function to sort a list of tuples based on the second index of each tuple in Python.",
        "answer_2": "def sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list",
        "question_3": "Can you design a function in Python to sort a list of tuples based on the second item in the tuple?",
        "answer_3": "def sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]"
    },
    {
        "task_id": 274,
        "text": "Write a python function to find sum of even index binomial coefficients.",
        "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math  \r\ndef even_binomial_Coeff_Sum( n):",
        "question_1": "Develop a python code to evaluate the sum of all the even numbers in a given sequence.",
        "answer_1": "def sum_even_numbers(sequence):\n    result = 0\n    for num in sequence:\n        if num % 2 == 0:\n            result += num\n    \n    return result",
        "question_2": "Create a Python program to find the sum of all the even elements in a given list.",
        "answer_2": "def sum_even_elements(list):\n  sum = 0 \n  for item in list:\n    if item % 2 == 0:\n      sum += item\n  return sum",
        "question_3": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_3": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12"
    },
    {
        "task_id": 275,
        "text": "Write a python function to find the position of the last removed element from the given array.",
        "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "test_list": [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math as mt \r\ndef get_Position(a,n,m):",
        "question_1": "Write a function in Python to remove the last element from a given array.",
        "answer_1": "def remove_last_element(arr):\n  return arr[:-1]",
        "question_2": "Develop an algorithm in Python for deletion of an element from an array.",
        "answer_2": "def deleteElement(arr, element):\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == element:\n            index = i\n            break\n    if index != -1:\n        arr.pop(index)\n        return arr\n    else:\n        return -1\n\narr = [1, 2, 3, 4]\nelement = 3\nnew_arr = deleteElement(arr, element)\nprint(new_arr)",
        "question_3": "Generate an algorithm in Python to remove an element from a given array at a given index.",
        "answer_3": "def remove(arr, index): \n  \n      # If the array is empty or index is not in array range \n      if len(arr) == 0 or index >= len(arr): \n          return arr \n  \n      # Remove the element from the array \n      tempArr = arr[:index] + arr[index+1:] \n              \n      return tempArr"
    },
    {
        "task_id": 276,
        "text": "Write a function to find the volume of a cylinder.",
        "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "test_list": [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cylinder(r,h):",
        "question_1": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_1": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_2": "Create a Python program to calculate the volume of a sphere.",
        "answer_2": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_3": "Design a function to calculate the volume of a cube in Python.",
        "answer_3": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume"
    },
    {
        "task_id": 277,
        "text": "Write a function to filter a dictionary based on values.",
        "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_filter(dict,n):",
        "question_1": "Write a Python program to filter a dictionary by the criteria mentioned in the input.",
        "answer_1": "def filter_by_criteria(dictionary, criteria):\n    filtered_dict = {}\n\n    for key, value in dictionary.items():\n        # Check if key is present in criteria\n        if key in criteria:\n            filtered_dict[key] = value\n \n    return filtered_dict\n\n# Main program\ndictionary = {\n\"a\" : 1,\n\"b\" : 2,\n\"c\" : 3,\n\"d\" : 4\n}\ncriteria = [\"a\", \"b\"]\n\nresult = filter_by_criteria(dictionary, criteria)\nprint(result)",
        "question_2": "Create a Python function to filter a dictionary that contains strings only.",
        "answer_2": "def filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result",
        "question_3": "Write a Python 3 code snippet to check for the presence of a specific value in a dictionary.",
        "answer_3": "def is_value_in_dict(key, my_dict):\n  return key in my_dict"
    },
    {
        "task_id": 278,
        "text": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_first_elements(test_tup):",
        "question_1": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_1": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_2": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_2": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_3": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_3": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "task_id": 279,
        "text": "Write a function to find the nth decagonal number.",
        "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_num_decagonal(n):",
        "question_1": "Design a Python program to print out the nth triangle number.",
        "answer_1": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)",
        "question_2": "Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the base-n number.",
        "answer_2": "def base_n(n, base):\n    result = \"\"\n    while n != 0:\n        result += str(n % base)\n        n //= base\n    return result[::-1]  # Reverse the string",
        "question_3": "Generate a program in Python that finds the nth number in the Fibonacci sequence",
        "answer_3": "def nth_fibo(n):\n    '''\n    This function finds the nth number in the Fibonacci sequence.\n    \n    Parameters\n    ----------\n    n : int\n        Desired position in the sequence\n    \n    Returns\n    -------\n    int\n        Nth number in the Fibonacci sequence.\n    '''\n    # Initialize variables\n    x = 0\n    y = 1\n    \n    # Iterate through the Fibonacci sequence\n    for _ in range(n-1):\n        x, y = y, x + y\n    \n    # Return the nth number in the Fibonacci sequence\n    return y"
    },
    {
        "task_id": 280,
        "text": "Write a function to search an element in the given array by using sequential search.",
        "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sequential_search(dlist, item):",
        "question_1": "Create a Python program that implements a search algorithm (e.g. binary search, linear search).",
        "answer_1": "def linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n\n return -1\n\narr = [1, 3, 4, 6, 8, 9, 11, 12, 14]\ntarget = 11\n\nresult = linear_search(arr, target)\nif result == -1:\n print('Element not found')\nelse:\n print(f'Element found at index {result}')\n\nOutput:\nElement found at index 6",
        "question_2": "Generate a Python code to search for an element in an array",
        "answer_2": "def linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1",
        "question_3": "Create a Python function that takes two parameters, an array and a search query and returns the indices of the array where the element matches with the search query.",
        "answer_3": "def searchIndex(arr, searchQuery): \n  indices = []\n  for i in range(len(arr)): \n    if arr[i] == searchQuery: \n      indices.append(i) \n      \n  return indices\n  \narr = [1, 2, 5, 3, 4]\nsearchQuery = 3\n\nresult = searchIndex(arr, searchQuery)\nprint(result)"
    },
    {
        "task_id": 281,
        "text": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def all_unique(test_list):",
        "question_1": "Write a Python program to check if all the elements in a given list are unique.",
        "answer_1": "def is_list_unique(list):\n    unique_list = list(dict.fromkeys(list))\n    return len(list) == len(unique_list)",
        "question_2": "Write a Python program to identify which elements in a list are unique",
        "answer_2": "def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "question_3": "Write a Python code to check if a given list contains all unique elements.",
        "answer_3": "def is_unique_list (numbers):\n    return len(numbers) == len(set(numbers))"
    },
    {
        "task_id": 282,
        "text": "Write a function to substaract two lists using map and lambda function.",
        "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sub_list(nums1,nums2):",
        "question_1": "Write a Python program to apply a function to all the elements of a given list and return the mapped list.",
        "answer_1": "def applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))",
        "question_2": "Rewrite the following list comprehension in a more pythonic way.",
        "answer_2": "values = list(map(lambda x: x*2, range(10)))",
        "question_3": "Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists.",
        "answer_3": "def list_sum(list1, list2):\n # initialize sum with 0\n total_sum = 0 \n \n # iterate over each element in list1\n for num in list1: \n     # add to sum\n     total_sum += num \n\n # iterate over each element in list2\n for num in list2: \n     # add to sum\n     total_sum += num \n\nreturn total_sum"
    },
    {
        "task_id": 283,
        "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def validate(n):",
        "question_1": "Create a function in Python to check whether an input character is a digit or not.",
        "answer_1": "def is_digit(x):\n  return x.isdigit()",
        "question_2": "Construct a program in Python to check if a string contains only digits.",
        "answer_2": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False",
        "question_3": "Write a Python function to count the number of digits in a given number.",
        "answer_3": "def count_digits(num):\n    return len(str(abs(num)))"
    },
    {
        "task_id": 284,
        "text": "Write a function to check whether all items of a list are equal to a given string.",
        "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_element(list,element):",
        "question_1": "Write a Python function that takes a list of strings and checks if all the strings have the same length.",
        "answer_1": "def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True",
        "question_2": "Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match.",
        "answer_2": "def search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False",
        "question_3": "Generate a Python program to check if a list contains a given value.",
        "answer_3": "def check_if_contains(lst, val):\n    return val in lst"
    },
    {
        "task_id": 285,
        "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_two_three(text):",
        "question_1": "Write a Python code to generate all possible strings of 3 characters using the characters a, b and c.",
        "answer_1": "def generate_strings(characters, length):\n    strings = []\n    if length == 0:\n        strings.append('')\n    else:\n        for c in characters:\n            for s in generate_strings(characters, length-1):\n                strings.append(c + s) \n    return strings\n\ncharacters = ['a', 'b', 'c']\nlength = 3\n\nprint(generate_strings(characters, length))",
        "question_2": "Generate a Python function that, given two strings, will return the number of matches between the strings.",
        "answer_2": "def string_matches(string1, string2): \n    matches = 0\n    for i in range(len(string1)): \n        if string1[i] == string2[i]: \n            matches += 1\n    return matches",
        "question_3": "Write a function in Python which takes an array of strings and returns a new array containing only the strings with length greater than 3.",
        "answer_3": "def filter_by_length(strings):\n    return [s for s in strings if len(s) > 3]"
    },
    {
        "task_id": 286,
        "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sub_array_sum_repeated(a, n, k):",
        "question_1": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_1": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_2": "Write a python program to submit the following operation",
        "answer_2": "def max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "question_3": "Develop a program to find the maximum sum subarray of size k in an array in Python.",
        "answer_3": "def max_sum_subarray(arr, k): \n    maxSum = float(\"-inf\") \n    windowSum = 0\n    windowStart = 0\n  \n    for windowEnd in range(len(arr)): \n        windowSum += arr[windowEnd] \n  \n        if windowEnd >= k - 1: \n            maxSum = max(maxSum, windowSum) \n            windowSum -= arr[windowStart] \n            windowStart += 1\n  \n    return maxSum\n\narr = [1, 2, 3, 4, 5] \nk = 3\n\nmax_sum = max_sum_subarray(arr, k) \nprint(\"Maximum Sum: \" + str(max_sum))"
    },
    {
        "task_id": 287,
        "text": "Write a python function to find the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def square_Sum(n):",
        "question_1": "Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.",
        "answer_1": "def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_",
        "question_2": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_2": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_3": "Write a Python program to calculate the sum of all even numbers less than or equal to n.",
        "answer_3": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result"
    },
    {
        "task_id": 288,
        "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def modular_inverse(arr, N, P):",
        "question_1": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_1": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_2": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_2": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_3": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_3": "def count_elements(arr): \n    return len(arr)"
    },
    {
        "task_id": 289,
        "text": "Write a python function to calculate the number of odd days in a given year.",
        "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "test_list": [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def odd_Days(N):",
        "question_1": "Write a Python function to convert days to years.",
        "answer_1": "def days_to_years(days):\n    years = days / 365\n    return years",
        "question_2": "Provide a Python program to generate the number of days in a given year.",
        "answer_2": "def days_in_year(year): \n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): \n        return 366 \n    else: \n        return 365",
        "question_3": "Write a Python program to convert a given number of days into years, months and days.",
        "answer_3": "def convert_days_wm(Days):\n    y = Days//365\n    m = (Days%365)//30\n    d = (Days%365)%30\n    return y, m, d"
    },
    {
        "task_id": 290,
        "text": "Write a function to find the list of lists with maximum length.",
        "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length(list1):",
        "question_1": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_1": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_2": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_2": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)",
        "question_3": "Create a Python program to search a list for the maximum value.",
        "answer_3": "def findMax(list): \n    max = list[0] \n    for i in range(1, len(list)): \n        if list[i] > max: \n            max = list[i] \n    return max\n\nlist = [1, 2, 3, 9, 8, 4] \nprint(\"The maximum element in the list is:\", findMax(list))"
    },
    {
        "task_id": 291,
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_no_of_ways(n, k):",
        "question_1": "Write a function in Python that takes two parameters \"n\" and \"k\" and returns the number of ways to jump \"k\" steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n.",
        "answer_1": "def steps(n, k):\n if k == 0 or n == k:\n  return 1\n if n > k:\n  return steps(n-1, k-1) + steps(n-2, k-1)\n else:\n  return 0",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Create a function in Python that takes an integer input and prints all combinations of the numbers.",
        "answer_3": "def permutations(n):\n for i in range(n+1):\n  for j in range(n+1):\n   for k in range(n+1):\n    for l in range(n+1):\n     print(i,j,k,l)\n\n# Calling the function\npermutations(4)"
    },
    {
        "task_id": 292,
        "text": "Write a python function to find quotient of two numbers.",
        "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "question_1": "Write a Python program to divide two numbers and print the quotient and the remainder.",
        "answer_1": "def divide(num1, num2):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    return quotient, remainder\n\nquotient, remainder = divide(15, 4)\nprint(\"Quotient :\", quotient)\nprint(\"Remainder :\", remainder)",
        "question_2": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_2": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b",
        "question_3": "Generate a function to find the GCD of two numbers in Python.",
        "answer_3": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b)"
    },
    {
        "task_id": 293,
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef otherside_rightangle(w,h):",
        "question_1": "Create a Python function to calculate the length of the hypotenuse of a right triangle.",
        "answer_1": "def hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0",
        "question_2": "Create a Python program to find the area of a triangle given 3 sides",
        "answer_2": "def findArea(a,b,c):\n    #calculate the semiperimeter \n    s = (a + b + c) / 2.0\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area",
        "question_3": "Write a Python program to calculate the hypotenuse of a right-angled triangle.",
        "answer_3": "import math\n\n# calculate the hypotenuse\ndef calc_hypotenuse(a, b):\n    hyp = math.sqrt(a**2 + b**2)\n    print(\"The length of the hypotenuse is\", hyp)\n\n# input lengths of triangle sides\na = 5\nb = 12\n\n# call the function\ncalc_hypotenuse(a, b)"
    },
    {
        "task_id": 294,
        "text": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_val(listval):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Edit the given Python code to return the maximum value from a list",
        "answer_2": "def max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]",
        "question_3": "Given a list of numbers, write a Python program to find the element in the list having the highest value.",
        "answer_3": "def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value"
    },
    {
        "task_id": 295,
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_div(number):",
        "question_1": "Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors",
        "answer_1": "def sum_of_divisors(n): \n    divisors = [i for i in range(1,n+1) if n%i == 0] \n    return sum(divisors) \n  \nn = 24\nprint(\"Sum of the positive divisors of 24 is:\",sum_of_divisors(n))",
        "question_2": "Write a Python script to find out the sum of all the divisors of a given number.",
        "answer_2": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result)",
        "question_3": "Create a Python program to find the sum of all divisors of an input number.",
        "answer_3": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))"
    },
    {
        "task_id": 296,
        "text": "Write a python function to count inversions in an array.",
        "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Inv_Count(arr,n):",
        "question_1": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_1": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_2": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_2": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count",
        "question_3": "Write an algorithm in Python to find the number of inversions in an array.",
        "answer_3": "def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count"
    },
    {
        "task_id": 297,
        "text": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def flatten_list(list1):",
        "question_1": "Create a function in Python that flattens a nested list.",
        "answer_1": "def flatten_list(lst):\n flattened = []\n for i in lst:\n  if type(i) == list:\n   flattened += flatten_list(i)\n  else:\n   flattened.append(i)\n return flattened",
        "question_2": "Create a function in Python for recursively flattening a nested list",
        "answer_2": "def flatten(lst):\n flat_list = []\n for x in lst:\n if type(x) == list:\n flat_list.extend(flatten(x))\n else:\n flat_list.append(x)\n return flat_list\n\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten(sample_list))\n\n# Output: [1, 2, 3, 4, 5]",
        "question_3": "How would you write a code to flatten a given nested list in Python?",
        "answer_3": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "task_id": 298,
        "text": "Write a function to find the nested list elements which are present in another list.",
        "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "test_list": [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def intersection_nested_lists(l1, l2):",
        "question_1": "Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second",
        "answer_1": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True",
        "question_2": "Write a Python function to flatten a nested list of lists into a single list containing all elements.",
        "answer_2": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]",
        "question_3": "Generate a Python program to flatten a given nested list.",
        "answer_3": "def flatten(lst):\n  #Empty list to add the flatten items\n  flat_list = []\n  #Loop through the list items\n  for item in lst:\n    #If the item is a list, then call the flatten function recursively\n    if type(item) is list:\n      flat_list.extend(flatten(item))\n    # Else append the item to the list\n    else:\n      flat_list.append(item)\n  #Return the list\n  return flat_list\n  \n# Sample \nnested_list = [[1,2,[3]],4]\nflat_list = flatten(nested_list)\nprint (flat_list)\n# Output: [1, 2, 3, 4]"
    },
    {
        "task_id": 299,
        "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):",
        "question_1": "Refactor this piece of Python code to increase its readability.",
        "answer_1": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum",
        "question_2": "Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.",
        "answer_2": "max_value = lambda num_list: max(num_list)",
        "question_3": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_3": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)"
    },
    {
        "task_id": 300,
        "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "test_list": [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_binary_seq(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a python program to count the total number of \"1\"s present in a binary string",
        "answer_2": "def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count",
        "question_3": "Design an algorithm in Python to print out binary numbers between 1 and N.",
        "answer_3": "def print_binary(n):\n if n == 0:\n  return\n \n print_binary(n-1)\n print(bin(n))\n \nprint_binary(3)\n \n# Output: \n# 0b1\n# 0b10\n# 0b11"
    },
    {
        "task_id": 301,
        "text": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dict_depth(d):",
        "question_1": "Create an algorithm in Python to find the maximum nested depth of a given dictionary.",
        "answer_1": "def max_nested_depth(dictionary):\n    max_depth = 0\n    stack = []\n    stack.append((dictionary, 1))\n\n    while len(stack) > 0:\n        item, depth = stack.pop()\n        if depth > max_depth:\n            max_depth = depth\n        if type(item) is dict:\n            for value in item.values():\n                stack.append((value, depth+1))\n    \n    return max_depth\n\nprint(max_nested_depth(dictionary))",
        "question_2": "Write a Python script to flatten a nested dictionary.",
        "answer_2": "def flatten_dictionary(d):\n result = {}\n \n def traverse(k, v):\n  if isinstance(v, dict):\n   for k1, v1 in v.items():\n    traverse(k+\".\"+k1, v1)\n  else:\n   result[k] = v\n \n traverse(\"\", d)\n \n return result",
        "question_3": "Write a Python function to access a given key from a given dictionary.",
        "answer_3": "def access_key(key, dictionary): \n    if key not in dictionary: \n        return -1\n    return dictionary[key]"
    },
    {
        "task_id": 302,
        "text": "Write a python function to find the most significant bit number which is also a set bit.",
        "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "test_list": [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_Bit_Number(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_3": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0"
    },
    {
        "task_id": 303,
        "text": "Write a python function to check whether the count of inversion of two types are same or not.",
        "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import sys \r\ndef solve(a,n):",
        "question_1": "Write an algorithm in Python to find the number of inversions in an array.",
        "answer_1": "def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count",
        "question_2": "Generate an algorithm in Python to count the number of inversions in an array.",
        "answer_2": "def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))",
        "question_3": "Design a Python algorithm to compute the total number of inversions in an array of integers.",
        "answer_3": "def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count"
    },
    {
        "task_id": 304,
        "text": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Element(arr,ranges,rotations,index) :",
        "question_1": "Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements.",
        "answer_1": "def rotate(arr, d):\n    for _ in range(d):\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nd = 2\n\nrotated_arr = rotate(arr, d)\nprint(rotated_arr) # [3, 4, 5, 1, 2]",
        "question_2": "Write a python program to rotate an array of size n by d elements",
        "answer_2": "def rotateArray(arr, d):\n    \n    result = []\n    for i in range(len(arr)-d, len(arr)): \n        result.append(arr[i])\n \n    for i in range(0, len(arr)-d):  \n        result.append(arr[i])\n \n    return result",
        "question_3": "How would you code a function in Python to rotate elements of an array?",
        "answer_3": "def rotate_array(array, n):\n    '''\n    This function takes in an array and an integer n and rotates the elements of the array by n positions.\n    '''\n    return array[n:] + array[:n]"
    },
    {
        "task_id": 305,
        "text": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef start_withp(words):",
        "question_1": "Generate a list in Python that contains all the words from a source string that start with a certain letter.",
        "answer_1": "def generate_list(source_string, letter):\n  words = source_string.split()\n  result = []\n  for word in words:\n    if word[0].lower() == letter:\n      result.append(word)\n  return result\n\nprint(generate_list(source_string, letter))",
        "question_2": "Write a Python program to extract all the words starting with a specific letter",
        "answer_2": "\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))",
        "question_3": "Generate a python program to extract all the words starting with a given letter",
        "answer_3": "def extract_words(word_list, given_letter):\n    extracted_words=[]\n    for word in word_list:\n        if word[0]==given_letter:\n            extracted_words.append(word)\n    return extracted_words"
    },
    {
        "task_id": 306,
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_increasing_subseq(a, n, index, k):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Generate a code in Python to find the maximum sum subarray of size k.",
        "answer_2": "def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k))",
        "question_3": "Write a Python program to find the longest increasing subsequence of a given array of integers",
        "answer_3": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n \n    # An array to store increasing subsequences\n    dp = [1]*n\n \n    # Compute optimal values in bottom up manner\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 :\n                dp[i] = dp[j]+1\n \n    # Pick maximum of dp[i]\n    # Initialize result\n    maximum = 0\n \n    # Pick maximum of all dp[i]\n    for i in range(n):\n        maximum = max(maximum , dp[i])\n \n    return maximum"
    },
    {
        "task_id": 307,
        "text": "Write a function to get a colon of a tuple.",
        "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "How can you return two values from a Python function?",
        "answer_3": "There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)"
    },
    {
        "task_id": 308,
        "text": "Write a function to find the specified number of largest products from two given lists.",
        "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def large_product(nums1, nums2, N):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_2": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))",
        "question_3": "Generate a correct python program to return the second biggest element in a given list.",
        "answer_3": "def second_biggest(lst):\n max1 = 0\n max2 = 0\n for num in lst:\n if num > max1:\n max1 = num\n elif num > max2:\n max2 = num\n return max2\n\nsecond_largest_num = second_biggest([1, 5, 9, 4, 16, 11])\nprint(second_largest_num)"
    },
    {
        "task_id": 309,
        "text": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def maximum(a,b):",
        "question_1": "Create a function to compute the maximum of two numbers in Python.",
        "answer_1": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
        "question_2": "Write a python function to find the maximum of two number without using a maximum function.",
        "answer_2": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_3": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_3": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "task_id": 310,
        "text": "Write a function to convert a given string to a tuple.",
        "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def string_to_tuple(str1):",
        "question_1": "Write a Python program to convert a list to a tuple",
        "answer_1": "def list_to_tuple(list):\n    return tuple(list)",
        "question_2": "Write a Python program to convert a list into a tuple.",
        "answer_2": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths"
    },
    {
        "task_id": 311,
        "text": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_left_most_unset_bit(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "answer_2": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "question_3": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_3": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits"
    },
    {
        "task_id": 312,
        "text": "Write a function to find the volume of a cone.",
        "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "test_list": [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef volume_cone(r,h):",
        "question_1": "Create a Python program to calculate the volume of a sphere.",
        "answer_1": "def vol_sphere(r):\n    '''Calculate the volume of a sphere with a given radius'''\n    return (4/3) * math.pi * r**3",
        "question_2": "Generate a python function to calculate the volume of a rectangular prism.",
        "answer_2": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;",
        "question_3": "Construct a function in Python to calculate the volume of a sphere.",
        "answer_3": "def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))"
    },
    {
        "task_id": 313,
        "text": "Write a python function to print positive numbers in a list.",
        "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "test_list": [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def pos_nos(list1):",
        "question_1": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_1": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_2": "Create a basic Python program to classify a list of positive and negative integer numbers.",
        "answer_2": "positive_numbers = []\nnegative_numbers = []\n\nfor num in numbers:\n if num > 0:\n  positive_numbers.append(num)\n else:\n  negative_numbers.append(num)\n\nprint('Positive numbers:', positive_numbers)\nprint('Negative numbers:', negative_numbers)",
        "question_3": "Compose a code in Python that counts the number of positive integers in a list.",
        "answer_3": "def count_positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 314,
        "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "test_list": [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_sum_rectangular_grid(grid, n) :",
        "question_1": "Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum.",
        "answer_1": "def find_largest_sum(lst):\n    largest_sum = 0\n    for i in range(len(lst) - 1):\n        current_sum = lst[i] + lst[i+1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum",
        "question_2": "Create a Python script that optimizes a 2D matrix for maximal sum.",
        "answer_2": "def find_max_sum(matrix):\n    row = len(matrix)\n    col = len(matrix[0])\n    max_sum = 0\n    max_row = 0\n    max_col = 0\n\n    for i in range(row):\n        for j in range(col):\n            # Iterating over top, bottom, left, right columns\n            top_val = 0\n            left_val = 0\n            if i > 0:\n                top_val = matrix[i - 1][j]\n            if j > 0:\n                left_val = matrix[i][j - 1]\n            cur_sum = matrix[i][j] + top_val + left_val\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                max_row = i\n                max_col = j\n\n    return max_sum\n\nresult = find_max_sum(\n    [[1, 2, 3], \n    [4, 5, 6], \n    [7, 8, 9]]\n)\nprint(result)",
        "question_3": "Design a Python program to compute the maximum sum of any subpolygon within a given array of N points",
        "answer_3": "def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')"
    },
    {
        "task_id": 315,
        "text": "Write a python function to find the first maximum length of even word.",
        "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "test_list": [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Max_Len_Even(str):",
        "question_1": "Write a function in Python to find out the longest word in a string",
        "answer_1": "def longestWord(str):\n    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in words:\n        if len(word) == max_len:\n            return word",
        "question_2": "Write a Python program that would take a string and return the length of its longest word.",
        "answer_2": "def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "question_3": "Create a Python function to find the longest word in a given sentence.",
        "answer_3": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word"
    },
    {
        "task_id": 316,
        "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "test_list": [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_last_occurrence(A, x):",
        "question_1": "Generate a Python program to return the index of the last occurrence of an item in a given list",
        "answer_1": "def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1",
        "question_2": "Generate a function in Python that returns the index of the first occurrence of a given number in an array.",
        "answer_2": "def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1",
        "question_3": "Generate a Python function to return the index of a given number in a sorted list.",
        "answer_3": "def index_of(number, lst): \n    hi = len(lst) \n    lo = 0\n    index = -1\n\n    while hi > lo: \n        mid = (hi + lo)//2\n        if lst[mid] < number: \n            lo = mid + 1\n        elif lst[mid] > number: \n            hi = mid \n        else: \n            index = mid \n            return index \n    return index"
    },
    {
        "task_id": 317,
        "text": "Write a function to reflect the modified run-length encoding from a list.",
        "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "test_list": [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from itertools import groupby\r\ndef modified_encode(alist):",
        "question_1": "Build a program in Python that compresses a given string using Run Length Encoding.",
        "answer_1": "def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string",
        "question_2": "Solve the following problem using python",
        "answer_2": "def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))",
        "question_3": "Create a Python program that can convert a list of strings into their corresponding encoded values.",
        "answer_3": "def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you']"
    },
    {
        "task_id": 318,
        "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "test_list": [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_volume (s):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52"
    },
    {
        "task_id": 319,
        "text": "Write a function to find all five characters long word in the given string by using regex.",
        "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "test_list": [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_long_word(text):",
        "question_1": "Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters.",
        "answer_1": "def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words",
        "question_2": "Create a Python lambda expression to return all strings that longer than 5 characters long.",
        "answer_2": "words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar']",
        "question_3": "Write a Python program to filter out the words of length greater than 5 from a given list of words",
        "answer_3": "def filter_long_words(words):\n  return [word for word in words if len(word) > 5]"
    },
    {
        "task_id": 320,
        "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_difference(n):",
        "question_1": "Create a function in Python to calculate the sum of squares of all numbers up to a given value n.",
        "answer_1": "def sumOfSquares(n):\n  sum = 0\n  for i in range(n + 1):\n    sum += (i ** 2)\n  return sum\n\nprint(sumOfSquares(10))",
        "question_2": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_2": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_3": "Design a Python script to calculate the sum of the squares of the first 100 natural numbers",
        "answer_3": "def sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 2\n    return total\n \nprint(sum_of_squares(100))"
    },
    {
        "task_id": 321,
        "text": "Write a function to find the demlo number for the given number.",
        "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "test_list": [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_demlo(s):",
        "question_1": "Create a python program to calculate the Mertens function over a given range.",
        "answer_1": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)",
        "question_2": "Create a function in Python that evaluates a given expression and returns the result. The function must be able to handle basic operations (e.g. +, -, /, *) and arbitrary number of input values.",
        "answer_2": "def arithmetic_eval(expression):\n return eval(expression)\n \n# Example\narithmetic_eval('2 + 3 * 5')\n# Output: 17",
        "question_3": "Create a python program to display the numbers divisible by 3 in the given range",
        "answer_3": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)"
    },
    {
        "task_id": 322,
        "text": "Write a function to find all index positions of the minimum values in a given list.",
        "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "test_list": [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def position_min(list1):",
        "question_1": "Generate a code in Python to find the index of the smallest element in a given list of numbers.",
        "answer_1": "def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index",
        "question_2": "Construct a Python script for finding the second smallest element in a given list.",
        "answer_2": "def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;",
        "question_3": "Optimize the following python program and reduce its runtime.",
        "answer_3": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]"
    },
    {
        "task_id": 323,
        "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "test_list": [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def right_rotate(arr, n, out_of_place, cur):",
        "question_1": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_1": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)",
        "question_2": "Develop a Python program for reversing the order of a given array.",
        "answer_2": "def reverse_array(arr):\n  start = 0\n  end = len(arr) - 1\n  while start < end:\n    arr[start], arr[end] = arr[end], arr[start]\n    start += 1\n    end -= 1\n  return arr",
        "question_3": "Write a function in Python that takes an array of integer values and reverses the order of the values.",
        "answer_3": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order"
    },
    {
        "task_id": 324,
        "text": "Write a function to extract the sum of alternate chains of tuples.",
        "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "test_list": [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_alternates(test_tuple):",
        "question_1": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_1": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]",
        "question_2": "Rewrite the following code using reduce() method in Python",
        "answer_2": "from functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10",
        "question_3": "Implement a function in Python that takes a 2-dimensional list of integers and returns a list with the same shape, containing the sums of previous elements from left to right.",
        "answer_3": "def accumulator_add(matrix):\n   output_matrix = []\n   #iterates over all sublists\n   for row in matrix:\n       #creates a new sublist to store the sums\n       output_sublist = []\n       sum = 0\n       #iterates over all elements in the sublist\n       for sublist_element in rows:\n           #adds the element to the total sum\n           sum +=sublist_element\n           #appends the updated total sum to the new sublist\n           output_sublist.append(sum)\n       #appends the new sublist to the new list\n       output_matrix.append(output_sublist)\n   #returns the new matrix\n   return output_matrix"
    },
    {
        "task_id": 325,
        "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "test_list": [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_Min_Squares(n):",
        "question_1": "Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.",
        "answer_1": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
        "question_2": "Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.",
        "answer_2": "def sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))",
        "question_3": "Create a function in Python that takes a list of numbers and returns the sum of all of the squared elements in the list.",
        "answer_3": "def sum_squares(nums): \n  total = 0\n  for num in nums:\n    total += num**2\n  return total\n\nprint(sum_squares([1, 2, 3, 4])) \n# Output: 30"
    },
    {
        "task_id": 326,
        "text": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "test_list": [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):",
        "question_1": "Design and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.",
        "answer_1": "def most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word",
        "question_2": "Generate a program in Python to count the most frequent words in a string.",
        "answer_2": "from collections import Counter\ndef frequent_words(string): \n    # Break the string into words  \n    words = string.split(\" \") \n  \n    # Count each word using Counter Method \n    cnt = Counter(words)  \n  \n    # Find the 5 most frequent words \n    frequent_words = cnt.most_common(5) \n  \n    print(\"The 5 most frequent words are : \") \n    for word, count in frequent_words: \n        print('%s : %d' % (word, count)) \n  \n# Driver Program  \nstring = \"This is a test string\"\nfrequent_words(string) \n\n# Output:\n# The 5 most frequent words are : \n# This : 1\n# is : 1\n# a : 1\n# test : 1\n# string : 1",
        "question_3": "Develop an algorithm in Python that finds the most frequent word in a string.",
        "answer_3": "def most_frequent(input_string): \n  \n    # split the string into words & get each word's frequency \n    splitted_string = input_string.split() \n    freq_table = {} \n    for words in splitted_string: \n        if words in freq_table: \n            freq_table[words] += 1\n        else: \n            freq_table[words] = 1\n\n \n    # find the most frequent word \n    most_freq_word = ''\n    most_freq_count = 0\n    for words in freq_table: \n        if freq_table[words] > most_freq_count: \n            most_freq_word = words \n            most_freq_count = freq_table[words]\n  \n    return most_freq_word \n  \n# Driver program \ninput_string = \"This is a sample string\"\nprint(most_frequent(input_string))"
    },
    {
        "task_id": 327,
        "text": "Write a function to print check if the triangle is isosceles or not.",
        "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_isosceles(x,y,z):",
        "question_1": "Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.",
        "answer_1": "a = 8\nb = 8\nc = 12\n\nif a == b and b == c:\n    print(\"Equilateral triangle\")\nelif a == b or b == c or a == c:\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Scalene triangle\")",
        "question_2": "Create a Python program to identify the type of triangles given three sides.",
        "answer_2": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_3": "Create a python program to classify the type of a triangle based on the side lengths.",
        "answer_3": "def get_triangle_type(a, b, c):\n    if a == b and b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\""
    },
    {
        "task_id": 328,
        "text": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "test_list": [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rotate_left(list1,m,n):",
        "question_1": "Write a Python function to rotate a list by n items to the left.",
        "answer_1": "def rotate(list, n): \n    return list[n:] + list[:n]",
        "question_2": "Create a python program to rotate a list of numbers by a given number.",
        "answer_2": "def rotate_list(nums, n):\n  return nums[n:] + nums[:n]",
        "question_3": "Make a Python program to rotate a list by n elements to the left.",
        "answer_3": "# Function to rotate a list by n elements to the left \ndef rotateList(input_list, n): \n    return input_list[n:] + input_list[:n]  \n\n# Driver Code \nif __name__ == \"__main__\": \n    input_list = [1, 2, 3, 4, 5, 6] \n    print(rotateList(input_list, 3))"
    },
    {
        "task_id": 329,
        "text": "Write a python function to count negative numbers in a list.",
        "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "test_list": [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_count(list):",
        "question_1": "Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.",
        "answer_1": "def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)",
        "question_2": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_2": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_3": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_3": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)"
    },
    {
        "task_id": 330,
        "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "test_list": [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_char(text):",
        "question_1": "Create a Python lambda expression to return all strings that longer than 5 characters long.",
        "answer_1": "words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar']",
        "question_2": "Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters.",
        "answer_2": "def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words",
        "question_3": "Create a Python program to filter out words containing five characters or less from a list of words.",
        "answer_3": "# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)"
    },
    {
        "task_id": 331,
        "text": "Write a python function to count unset bits of a given number.",
        "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "test_list": [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_unset_bits(n):",
        "question_1": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_1": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_2": "Write a Python program to calculate the total number of bits required to store an integer.",
        "answer_2": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "question_3": "Generate a code to find the number of 1-bits in an integer",
        "answer_3": "# Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num))"
    },
    {
        "task_id": 332,
        "text": "Write a function to count character frequency of a given string.",
        "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "test_list": [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def char_frequency(str1):",
        "question_1": "Generate a programming code with Python to count the frequency of each character in a given string.",
        "answer_1": "def count_frequency(text):\n  char_frequency = {}\n  for i in text:\n    if i in char_frequency:\n      char_frequency[i] += 1\n    else:\n      char_frequency[i] = 1\n  return char_frequency\n\nstr1 = 'hello'\nres = count_frequency(str1) \n\nprint (\"Per character frequency is : \\n\" +  str(res))",
        "question_2": "Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character.",
        "answer_2": "def char_freq(s):\n    freq = dict()\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\nstring = 'hello'\nresult = char_freq(string)\n\nprint(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}",
        "question_3": "Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character.",
        "answer_3": "def count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts"
    },
    {
        "task_id": 333,
        "text": "Write a python function to sort a list according to the second element in sublist.",
        "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "test_list": [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Sort(sub_li):",
        "question_1": "Write a function in Python to sort a given list according to the second element of the sublists.",
        "answer_1": "def sort_by_second_element(arr):\n    def get_second_element(item):\n        return item[1]\n    return sorted(arr, key = get_second_element)\n\narr = [[1,2], [2,3], [3,1]]\nresult = sort_by_second_element(arr)\nprint(result)",
        "question_2": "Write a function in Python to sort a given list according to the second element in the sublist",
        "answer_2": "def sort_by_second_element(list):\n    list.sort(key= lambda x : x[1])\n    return list\n\nlist = [['B', 'b'], ['A', 'a'], ['C', 'c']]\n\nprint(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]",
        "question_3": "Generate a python program to sort a list according to its second element",
        "answer_3": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst"
    },
    {
        "task_id": 334,
        "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "test_list": [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Validity(a,b,c):",
        "question_1": "Develop a Python program to check if a triangle is valid or not.",
        "answer_1": "# A function to check if the triangle is valid \ndef valid_triangle(side1, side2, side3): \n    # Check the sum of any two sides should be\n    # greater than the third one. \n    a = side1 + side2 \n    b = side1 + side3 \n    c = side2 + side3 \n       \n    if (a > side3) and (b > side2) and (c > side1): \n        return True\n    else: \n        return False\n\n# Driver Code \nside1 = 3 \nside2 = 4 \nside3 = 5  \nif valid_triangle(side1, side2, side3): \n    print(\"The triangle is valid\")\nelse: \n    print(\"The triangle is not valid\")",
        "question_2": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
        "answer_2": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
        "question_3": "Create a Python program that can identify a triangle using the 3 provided side lengths.",
        "answer_3": "\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))"
    },
    {
        "task_id": 335,
        "text": "Write a function to find the sum of arithmetic progression.",
        "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "test_list": [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ap_sum(a,n,d):",
        "question_1": "Create a function to calculate the sum of a sequence of integers.",
        "answer_1": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "question_2": "Optimize a function in Python that calculates the sum of numbers from 0 to n.",
        "answer_2": "def fast_sum(n):\n    return ((n+1)*n)/2",
        "question_3": "Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.",
        "answer_3": "import re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)"
    },
    {
        "task_id": 336,
        "text": "Write a function to check whether the given month name contains 28 days or not.",
        "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnum(monthname1):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a Python program to find the number of days in a month using a given year and month.",
        "answer_3": "import calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1]"
    },
    {
        "task_id": 337,
        "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "test_list": [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_word(text):",
        "question_1": "Create a Python program to format a string of text using basic punctuation rules.",
        "answer_1": "def punctuate(text):\n    text = text.strip()\n    if not text.endswith('.'):\n        text += '.'\n    if not text.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        text = text[0].upper() + text[1:]\n    for char in ['!', '?', ':', ';', ',', '\"']:\n        if char in text:\n            text = text[:-1] + char + ' '\n    return text\n\npunctuate('this is a string of text')\n# Output: 'This is a string of text.'",
        "question_2": "Write a Python function to determine if a string contains any punctuation characters",
        "answer_2": "def contains_punctuation(string):\n    for character in string:\n        if character in string.punctuation:\n            return True\n    return False\n\nresult = contains_punctuation('Hello world!')\nprint(result)",
        "question_3": "Generate Python code to tokenize the given text.",
        "answer_3": "import re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens"
    },
    {
        "task_id": 338,
        "text": "Write a python function to count the number of substrings with same first and last characters.",
        "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "test_list": [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Equality(s):",
        "question_1": "Generate an algorithm to count substrings in Python.",
        "answer_1": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "question_2": "Develop a Python script to count the number of strings where the string length is 2 or more and the first and last characters are the same.",
        "answer_2": "# Define a function to count the strings\ndef count_strings(lst):\n count = 0\n \n # Iterate through the list\n for s in lst:\n \n # Check if string length is greater than 2 and first and last character is same\n if len(s) >= 2 and s[0] == s[-1]:\n count += 1\n \n return count\n \n# Driver Code\nlst = ['abc', 'xyz', 'aba', '1221']\nprint(count_strings(lst))",
        "question_3": "Generate a program in Python to count the number of times a substring appears in a string?",
        "answer_3": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))"
    },
    {
        "task_id": 339,
        "text": "Write a python function to find the maximum occuring divisor in an interval.",
        "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "test_list": [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Divisor(x,y):",
        "question_1": "Create an optimization program in Python that is able to find the maximum number given its constraints.",
        "answer_1": "import numpy as np\n\n# original constraints \nx_constraints = (x <= 16, x % 2 == 0, x % 4 == 0)\n\n# objective function\nf = lambda x: x\n\n# initializing the variables \nx = np.arange(0, 16)\n\n# searching for maximum value \nmax_value = max(x[np.logical_and.reduce(x_constraints)])\n\nprint(\"The maximum value for the number is {}\".format(max_value))",
        "question_2": "Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers.",
        "answer_2": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\nresult = greatest_common_divisor(12, 24)\nprint(result)",
        "question_3": "Create a function in Python to find the greatest common divisor of two given numbers.",
        "answer_3": "def get_gcd(num1, num2):\n    for i in range(max(num1, num2), 0, -1):\n        if num1 % i == 0 and num2 % i == 0:\n            return i\n\nresult = get_gcd(7, 8)\nprint(result)\n# Output: 1"
    },
    {
        "task_id": 340,
        "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "test_list": [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_three_smallest_nums(lst):",
        "question_1": "Create a Python function that takes a list of integers and returns the summation of the largest and smallest numbers.",
        "answer_1": "def sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation",
        "question_2": "Optimize a function in Python which takes a list and returns the sum of all its elements.",
        "answer_2": "def sum_list_elements(lst):\n \u00a0 \u00a0sum = 0\n \u00a0 \u00a0for item in lst:\n \u00a0 \u00a0 \u00a0 \u00a0sum += item\n \u00a0 \u00a0return sum\n\nprint(sum_list_elements([1, 2, 3]))",
        "question_3": "Optimize the following Python function that returns the sum of all the elements in a given list.",
        "answer_3": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total"
    },
    {
        "task_id": 341,
        "text": "Write a function to convert the given set into ordered tuples.",
        "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "test_list": [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def set_to_tuple(s):",
        "question_1": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_1": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_2": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_2": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_3": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]"
    },
    {
        "task_id": 342,
        "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "test_list": [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):",
        "question_1": "Write a python program to find the smallest element in an array.",
        "answer_1": "def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest",
        "question_2": "Write a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.",
        "answer_2": "def find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item",
        "question_3": "Implement a Python function to find the smallest element in an array",
        "answer_3": "def findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1"
    },
    {
        "task_id": 343,
        "text": "Write a function to calculate the number of digits and letters in a string.",
        "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "test_list": [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def dig_let(s):",
        "question_1": "Write a Python function to calculate the sum of the digits in a given string of numbers and letters.",
        "answer_1": "def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum",
        "question_2": "Generate the Python code that calculates the numbers of characters in a given string.",
        "answer_2": "myString = \"Hello, World!\"\n\ncharCount = 0\nfor char in myString:\n    charCount += 1\n    \nprint(\"Number of characters:\", charCount)",
        "question_3": "Write a Python function to count the number of digits in a given number.",
        "answer_3": "def count_digits(num):\n    return len(str(abs(num)))"
    },
    {
        "task_id": 344,
        "text": "Write a python function to find number of elements with odd factors in a given range.",
        "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "test_list": [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Odd_Squares(n,m):",
        "question_1": "Create a function that computes an array of odd numbers within a given range",
        "answer_1": "# Python3 program to find odd numbers in a range  \n\ndef odd_numbers(n): \n    odd_numbers = [] \n      \n    # looping through each number \n    for i in range(1, n + 1): \n        if i % 2 != 0: \n            odd_numbers.append(i) \n    return odd_numbers",
        "question_2": "Rewrite a python function from a set of instructions using list comprehension.",
        "answer_2": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "question_3": "Modify the following line of code in Python to generate a list of odd numbers in the range [1,n].",
        "answer_3": "[i for i in range (1, 10) if i % 2 != 0]"
    },
    {
        "task_id": 345,
        "text": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diff_consecutivenums(nums):",
        "question_1": "Write Python code to get the difference between two lists.",
        "answer_1": "def difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list",
        "question_2": "Create a program in Python to find all pairs of elements in a list with the given difference.",
        "answer_2": "def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)",
        "question_3": "Generate a Python program to find the value of two positions in an array that have the greatest difference.",
        "answer_3": "def max_difference(arr):\n    # Initialize max_difference to a negative value\n    max_difference = -float(\"inf\")\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n\nresult = max_difference([7, 1, 3, 8, 25])\nprint(result)"
    },
    {
        "task_id": 346,
        "text": "Write a function to find entringer number e(n, k).",
        "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "test_list": [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def zigzag(n, k):",
        "question_1": "Create a Python function that takes in two parameters (n,k) and returns the value of n^k.",
        "answer_1": "def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result",
        "question_2": "Generate a Python program to calculate the average of the the numbers 1-k.",
        "answer_2": "def average(k):\n    sum = 0\n    for i in range(1, k+1):\n        sum += i\n\n    return sum / k",
        "question_3": "Write a function in Python that takes two parameters \"n\" and \"k\" and returns the number of ways to jump \"k\" steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n.",
        "answer_3": "def steps(n, k):\n if k == 0 or n == k:\n  return 1\n if n > k:\n  return steps(n-1, k-1) + steps(n-2, k-1)\n else:\n  return 0"
    },
    {
        "task_id": 347,
        "text": "Write a python function to count the number of squares in a rectangle.",
        "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Squares(m,n):",
        "question_1": "Create a function in Python that takes an array of integers and returns an array of their squares.",
        "answer_1": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)",
        "question_2": "Create a python function named 'square' that squares a given number.",
        "answer_2": "def square(x):\n return x * x",
        "question_3": "Develop a Python function that squares a given number.",
        "answer_3": "def square(number):\n \u00a0 \u00a0return number * number"
    },
    {
        "task_id": 348,
        "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "test_list": [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bin_coff(n, r):",
        "question_1": "Design a Python algorithm to perform a Prefix Sum operation on an array.",
        "answer_1": "def prefix_sum(arr):\nresult = []\ns = 0\nfor x in arr:\n    s += x\n    result.append(s)\nreturn result\n\narr = [1, 2, 3, 4]\nprefix_sum(arr)",
        "question_2": "Optimize this Python code to make it more efficient.",
        "answer_2": "def count_numbers(lst):\n    count = sum(map(str.isdigit, lst))\n    return count",
        "question_3": "Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.",
        "answer_3": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)"
    },
    {
        "task_id": 349,
        "text": "Write a python function to check whether the given string is a binary string or not.",
        "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "test_list": [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check(string) :",
        "question_1": "Create a Python function which takes an integer as input and prints it in binary.",
        "answer_1": "def int_to_binary(n):\n    if n == 0:\n        return '0'\n    bin_string = \"\"\n    while n > 0:\n        bin_string = str(n%2) + bin_string\n        n = n // 2\n    return bin_string",
        "question_2": "Generate a code in Python to convert a number into binary format.",
        "answer_2": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010",
        "question_3": "Design a function in Python that takes a decimal number and returns its binary equivalent.",
        "answer_3": "def dec_to_bin(number):\n  # Convert decimal to binary\n  binary = bin(number)\n  # Remove prefix \"0b\"\n  binary = binary[2:]\n  # Return binary\n  return binary\n  \ndecimal = 10\nbinary = dec_to_bin(decimal)\nprint(binary)"
    },
    {
        "task_id": 350,
        "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "test_list": [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum_Length(s) :",
        "question_1": "Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters.",
        "answer_1": "def min_length_index(arr):\n  min = float('infinity')\n  min_i = 0\n  for i in range(len(arr)):\n    if len(arr[i]) < min:\n      min = len(arr[i])\n      min_i = i\n  return min_i\n\nprint(min_length_index([\"Hello\", \"World\", \"Python\", \"is\", \"Fun\"])) # 3",
        "question_2": "Find the longest substring in the given input using Python.",
        "answer_2": "def longest_substring(s):\n    # create set\n    seen_characters = set()\n    # initialize variables\n    max_length = i = 0\n    # loop through string\n    while i < len(s):\n        # if character is not in seen_characters\n        if s[i] not in seen_characters:\n            # increment max_length and update seen_characters\n            seen_characters.add(s[i])\n            max_length = max(max_length, len(seen_characters))\n            i += 1\n        else:\n            # remove first character from seen_characters\n            seen_characters.remove(s[i-max_length])\n    # return max_length\n    return max_length\n\nstring = 'abcabcbb'\nresult = longest_substring(string)\nprint(result)",
        "question_3": "Create a Python program to find the shortest string in a given list of strings.",
        "answer_3": "def shortest_string(strings):\n    shortest_string = strings[0]\n   \n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    \n    return shortest_string"
    },
    {
        "task_id": 351,
        "text": "Write a python function to find the first element occurring k times in a given array.",
        "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "test_list": [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Element(arr,n,k):",
        "question_1": "Generate a function in Python that returns the index of the first occurrence of a given number in an array.",
        "answer_1": "def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1",
        "question_2": "Create an algorithm in Python to find the first index of an item in an array.",
        "answer_2": "def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "question_3": "Generate a code in Python to find the Kth smallest element in an array.",
        "answer_3": "def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]"
    },
    {
        "task_id": 352,
        "text": "Write a python function to check whether all the characters in a given string are unique.",
        "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "test_list": [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def unique_Characters(str):",
        "question_1": "Write a function in Python to check if a string contains all unique characters.",
        "answer_1": "def is_unique(string):\n  characters = set()\n  for char in string:\n    if char in characters:\n      return False\n    characters.add(char)\n  return True",
        "question_2": "Create a function in Python that takes in a string and returns true if all characters in the string are unique and false if there is at least one repeated character.",
        "answer_2": "def check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True",
        "question_3": "Write a Python program to identify strings with all unique characters",
        "answer_3": "def is_unique_string(s):\n    d = {} \n    for i in s:\n        if i in d:\n            return False\n        d[i] =1\n    return True"
    },
    {
        "task_id": 353,
        "text": "Write a function to remove a specified column from a given nested list.",
        "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "test_list": [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_column(list1, n):",
        "question_1": "Create a Python function to remove a given item from a list.",
        "answer_1": "def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))",
        "question_2": "Generate code in Python to remove a given element from a given list.",
        "answer_2": "list = [2, 3, 4, 5, 6]\n\nlist.remove(5)",
        "question_3": "Create a function in Python to remove the given element from any list if it is present.",
        "answer_3": "def remove_item(lst, item):\n    try:\n        lst.remove(item)\n        return lst\n\n    except ValueError:\n        return lst"
    },
    {
        "task_id": 354,
        "text": "Write a function to find t-nth term of arithemetic progression.",
        "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "test_list": [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tn_ap(a,n,d):",
        "question_1": "Write a Python function to generate the Fibonacci series up to the nth term.",
        "answer_1": "def fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib",
        "question_2": "Write a Python program to find the nth term of Fibonacci Series.",
        "answer_2": "def nth_term_fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b",
        "question_3": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_3": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum"
    },
    {
        "task_id": 355,
        "text": "Write a python function to count the number of rectangles in a circle of radius r.",
        "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Rectangles(radius):",
        "question_1": "Rewrite the code in Python to improve its readability.",
        "answer_1": "import math\n\ndef calculate_area(radius):\n    return math.pi * (radius ** 2)",
        "question_2": "Create a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle).",
        "answer_2": "import math\n\ndef calculate_area(shape, *args):\n if shape == 'circle':\n radius = args[0]\n return math.pi * radius * radius\n \n elif shape == 'square':\n side_length = args[0]\n return side_length * side_length\n \n elif shape == 'triangle':\n base, height = args\n return 0.5 * base * height\n \n elif shape == 'rectangle':\n length, width = args\n return length * width\n \nelse:\n return 'Invalid shape'\n\nif __name__ == '__main__':\n print(calculate_area('circle', 5))",
        "question_3": "Create a Python program to calculate the area of given shapes (triangle, square and rectangle).",
        "answer_3": "def calculate_area(shape, *args):\n if shape == 'triangle':\n base= args[0]\n height= args[1]\n return (0.5 * base * height)\n\n elif shape == 'square':\n side = args[0]\n return (side ** 2)\n\n elif shape == 'rectangle':\n length = args[0]\n breadth = args[1]\n return (length * breadth)\n\n elif shape == 'circle':\n radius = args[0]\n return (3.142 * radius * radius)\n\nelse:\n return \"Incorrect shape\""
    },
    {
        "task_id": 356,
        "text": "Write a function to find the third angle of a triangle using two angles.",
        "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "test_list": [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_angle(a,b):",
        "question_1": "Create a Python program to identify the type of triangles given three sides.",
        "answer_1": "def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'",
        "question_2": "Create a Python program to find the area of a triangle given 3 sides",
        "answer_2": "def findArea(a,b,c):\n    #calculate the semiperimeter \n    s = (a + b + c) / 2.0\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area",
        "question_3": "Can you create a function in Python to find the area of a triangle given the three sides?",
        "answer_3": "def area_triangle(a, b, c):\n\ts = (a + b + c)/2\n\n\tarea = math.sqrt(s*(s-a)*(s-b)*(s-c))\n\treturn area\n\narea = area_triangle(3, 4, 5)\nprint(\"The area of the triangle is: {}\".format(area))"
    },
    {
        "task_id": 357,
        "text": "Write a function to find the maximum element of all the given tuple records.",
        "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "test_list": [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_max(test_list):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Edit a Python program to output the maximum value",
        "answer_2": "def find_max(lst):\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max",
        "question_3": "Write a Python function that takes a list as an input and returns the largest element.",
        "answer_3": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)"
    },
    {
        "task_id": 358,
        "text": "Write a function to find modulo division of two lists using map and lambda function.",
        "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "test_list": [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def moddiv_list(nums1,nums2):",
        "question_1": "Write a Python function to create a new list filled with the divided result of a given list and a specific number.",
        "answer_1": "def divide_list(numbers, divisor):\n return [i/divisor for i in numbers]",
        "question_2": "Write a Python program to divide a list of numbers into two equal lists.",
        "answer_2": "list_a = [1,2,3,4,5]\nlist_b = [6,7,8,9,10]",
        "question_3": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_3": "def get_remainder(a, b):\n    return a % b"
    },
    {
        "task_id": 359,
        "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Check_Solution(a,b,c):",
        "question_1": "Create a Python program to find the root of a quadratic equation.",
        "answer_1": "def roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))/(2*a)\n    root2 = (-b - math.sqrt(disc))/(2*a)\n    return root1, root2",
        "question_2": "Develop a valid Python script which computes the root of a given quadratic equation",
        "answer_2": "import math\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) / (2*a)\n    x2 = (-b - math.sqrt(d)) / (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\"",
        "question_3": "Create a function in Python that calculates the roots of a quadratic equation?",
        "answer_3": "\"\"\"\nFunction to calculate the roots of a quadratic equation\n\"\"\"\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n \n    # calculate the two roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n \n    return (root1,root2)\n\nif __name__ == '__main__':\n    roots = quadratic_roots(1, 4, 4)\n    print('Roots are: {} and {}'.format(*roots))"
    },
    {
        "task_id": 360,
        "text": "Write a function to find the n\u2019th carol number.",
        "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "test_list": [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_carol(n):",
        "question_1": "Create a Python program to print the multiplication table of the given number n.",
        "answer_1": "def print_table(n):\n for i in range(1, n+1):\n for j in range(1, n+1):\n print(f'{i} x {j} = {i * j}')\n print()",
        "question_2": "Generate code in Python to find the factorial of a given number.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)",
        "question_3": "Using Python, create a function that calculates the factorial of any given number.",
        "answer_3": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "task_id": 361,
        "text": "Write a function to remove empty lists from a given list of lists.",
        "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "test_list": [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_empty(list1):",
        "question_1": "Create a Python script to remove all empty elements from a list.",
        "answer_1": "list = [\"a\", \"\", \"b\", \"\", \"c\", \"\"] \n\nresult = [element for element in list if len(element) > 0] \n\nprint(result)",
        "question_2": "Write a Python program to edit this list of lists and remove any empty lists from the beginning, middle and end of the list.",
        "answer_2": "def remove_empty_lists(lst):\n  new_lst = []\n  for li in lst:\n    if li:\n      new_lst.append(li)\n  return new_lst\n\n# call the function  \nmodified_list = remove_empty_lists([[], [2, 3], [], [4, 5], [], [6]])\n\nprint(modified_list)  \n# Output: [[2, 3], [4, 5], [6]]",
        "question_3": "Create a Python code snippet to remove all elements within a list with value 0.",
        "answer_3": "my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)"
    },
    {
        "task_id": 362,
        "text": "Write a python function to find the item with maximum occurrences in a given list.",
        "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "test_list": [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_occurrences(nums):",
        "question_1": "Design a python program which will return the maximum element of a given list.",
        "answer_1": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "question_2": "Create a Python code to find the most frequent item in a list",
        "answer_2": "def most_frequent_item(myList):\n    max_item = myList[0]\n    max_count = 1\n    for i in range(1, len(myList)):\n        count = 1\n        for j in range(i+1, len(myList)):\n            if(myList[i] == myList[j]):\n                count += 1\n                if(count > max_count):\n                    max_count = count\n                    max_item = myList[i]\n    \n    return (max_item)\n\nmyList = [1, 2, 3, 2, 4, 2]\nprint(most_frequent_item(myList))",
        "question_3": "Write a Python program to find the most frequent item in a given list of data.",
        "answer_3": "max_count = 0\nmax_element = None\nfor element in data:\n  count = data.count(element)\n  if count > max_count:\n    max_element = element\n    max_count = count\nprint(max_element)"
    },
    {
        "task_id": 363,
        "text": "Write a function to add the k elements to each element in the tuple.",
        "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "test_list": [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_K_element(test_list, K):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Convert a given list into a list of tuples using Python.",
        "answer_2": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))",
        "question_3": "Create a Python function to create a dictionary from a given list of tuples with the first elements of each tuple as the key.",
        "answer_3": "def create_dict(tuples): \n  dictionary = {} \n  \n  for item in tuples: \n    dictionary[item[0]] = item[1]\n  \n  return dictionary \n  \ntuples = [(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]\nprint(create_dict(tuples)) \n\n# Output\n{'a': 'b', 'c': 'd', 'e': 'f'}"
    },
    {
        "task_id": 364,
        "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "test_list": [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def make_flip(ch):",
        "question_1": "Write a Python program to generate all binary strings of a given length n.",
        "answer_1": "def generate_binary_str(n): \n    result = []\n    for i in range(2 ** n): \n        s = bin(i)[2:] \n        s = (n - len(s)) * \"0\" + s \n        result.append(s) \n    return result\n\nresult = generate_binary_str(3)\nprint(result)\n\n# Output: ['000', '001', '010', '011', '100', '101', '110', '111']",
        "question_2": "Generate a Python function that takes a string and reverses its order of characters.",
        "answer_2": "def reverse_string(my_string):\n  reversed_string = ''\n  for i in range(len(my_string) - 1, -1, -1):\n    reversed_string += my_string[i]\n\n  return reversed_string",
        "question_3": "Implement a recursive function in Python that takes a (string) as input and returns a reversed version of the input string.",
        "answer_3": "def rev_string(input_str):\n    if len(input_str) == 0:\n        return input_str\n    else:\n        return rev_string(input_str[1:]) + input_str[0]"
    },
    {
        "task_id": 365,
        "text": "Write a python function to count the number of digits of a given number.",
        "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "test_list": [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_Digit(n):",
        "question_1": "Write a Python function to count the number of digits in a given number.",
        "answer_1": "def count_digits(num):\n    return len(str(abs(num)))",
        "question_2": "Generate a Python function for counting the number of digits in a given number",
        "answer_2": "def count_digits(num):\n    \"\"\"\n    Counts the number of digits in a given number.\n    \"\"\"\n    count = 0\n    while num > 0:\n        num //= 10\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    num = int(input('Enter number: '))\n    print(count_digits(num))",
        "question_3": "Develop a Python function to count number of digits in a number.",
        "answer_3": "def count_digits(number):\n    count = 0\n    while (number > 0):\n        number = number // 10\n        count = count + 1\n    return count\n\nnum = 8594\nprint(\"Number of digits : \", count_digits(num))"
    },
    {
        "task_id": 366,
        "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "test_list": [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def adjacent_num_product(list_nums):",
        "question_1": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_1": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))",
        "question_2": "Generate a Python program that given a list of numbers, finds the largest pair sum.",
        "answer_2": "def max_pair_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum",
        "question_3": "Write a Python function to find the maximum product of three integers from a given list.",
        "answer_3": "def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n )"
    },
    {
        "task_id": 367,
        "text": "Write a function to check if a binary tree is balanced or not.",
        "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)",
        "challenge_test_list": [],
        "def_code": "class Node: \r\n\tdef __init__(self, data):",
        "question_1": "Generate a Python program to determine if a given binary tree is balanced",
        "answer_1": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))",
        "question_2": "Write a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.",
        "answer_2": "def rotateNodes(root): \n    # if node has a left child \n    if root.left is not None: \n        # we rotate clockwise \n        newRoot = root.left \n        root.left = newRoot.right \n        newRoot.right = root \n        root = newRoot \n  \n    # if node has a right child \n    if root.right is not None: \n        # we rotate counter clockwise \n        newRoot = root.right \n        root.right = newRoot.left  \n        newRoot.left = root \n        root = newRoot \n\n    return root",
        "question_3": "Design an algorithm in Python to detect if a given tree is a binary search tree.",
        "answer_3": "\"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv"
    },
    {
        "task_id": 368,
        "text": "Write a function to repeat the given tuple n times.",
        "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "test_list": [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def repeat_tuples(test_tup, N):",
        "question_1": "Write a function in Python that takes two arguments\u2014a string and a positive integer n\u2014and returns a list of size n containing the string repeated n times.",
        "answer_1": "def repeat_string(string, n):\n     return [string]*n\n     \n# example\nprint(repeat_string(\"Hello\", 4)) \n# Output: ['Hello', 'Hello', 'Hello', 'Hello']",
        "question_2": "Optimize this Python code to reduce run time complexity",
        "answer_2": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result",
        "question_3": "Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer.",
        "answer_3": "def repeat_string(s, n):\n    return s*n\n\nprint(repeat_string('Hello', 3))\n# Output: 'HelloHelloHello'"
    },
    {
        "task_id": 369,
        "text": "Write a function to find the lateral surface area of cuboid",
        "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "test_list": [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def lateralsurface_cuboid(l,w,h):",
        "question_1": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_1": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2"
    },
    {
        "task_id": 370,
        "text": "Write a function to sort a tuple by its float element.",
        "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "test_list": [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def float_sort(price):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_2": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_3": "Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.",
        "answer_3": "def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1])"
    },
    {
        "task_id": 371,
        "text": "Write a function to find the smallest missing element in a sorted array.",
        "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "test_list": [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def smallest_missing(A, left_element, right_element):",
        "question_1": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_1": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
        "question_2": "Write a function in Python to find the kth smallest element in an unsorted array.",
        "answer_2": "def kth_smallest(input_array, k):\n    input_array.sort()\n    return input_array[k-1]",
        "question_3": "Create a function in Python to find the smallest positive number which is not present in a given unsorted array.",
        "answer_3": "def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4"
    },
    {
        "task_id": 372,
        "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "test_list": [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_assending(nums):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Generate an efficient heap sort algorithm for a Python list containing random numbers.",
        "answer_2": "def heapify(arr, n, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]  # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0) \n  \n# Driver code to test above \narr = [2, 4, 5, 1, 7, 6, 0, 8] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),",
        "question_3": "Write a Python script to sort the given array using Heap sort algorithm",
        "answer_3": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1  \n    r = 2 * i + 2\n \n    if l < n and arr[i] < arr[l]:\n        largest = l\n \n    if r < n and arr[largest] < arr[r]:\n        largest = r\n \n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n        heapify(arr, n, largest)\n \ndef heapSort(arr):\n    n = len(arr) \n \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n \narr = [8, 5, 2, 1, 8]\nheapSort(arr)\nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"% d\" %arr[i]),"
    },
    {
        "task_id": 373,
        "text": "Write a function to find the volume of a cuboid.",
        "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "test_list": [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def volume_cuboid(l,w,h):",
        "question_1": "Design a function to calculate the volume of a cube in Python.",
        "answer_1": "def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume",
        "question_2": "Optimize a Python program to calculate the volume of a cube.",
        "answer_2": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))",
        "question_3": "Create a python program to compute the volume of a cube given its edge length as an input.",
        "answer_3": "length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)"
    },
    {
        "task_id": 374,
        "text": "Write a function to print all permutations of a given string including duplicates.",
        "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "test_list": [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permute_string(str):",
        "question_1": "Design an algorithm in Python to print all the permutations of a given string.",
        "answer_1": "def permutations(s):\n    result = []\n    if len(s) == 1:\n        result = [s]\n\n    else:\n        for i, letter in enumerate(s):\n            for perm in permutations(s[:i] + s[i+1:]):\n                result += [letter + perm]\n\n    return result",
        "question_2": "Develop a Python script to print all the permutations of a given string.",
        "answer_2": "def permutations(string):\n perms = []\n if len(string) == 1:\n perms.append(string)\n return perms\n \n for i in range(len(string)):  \n substring = string[:i] + string[i+1:]\n for permutation in permutations(substring):  \n perms.append(string[i] + permutation)\n return perms\n\npermutations('ABC')",
        "question_3": "Design a Python function to print out all permutations of a given string.",
        "answer_3": "def permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))"
    },
    {
        "task_id": 375,
        "text": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "test_list": [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_num(n,m):",
        "question_1": "Implement a method in Python to round off any given number to the nearest integer.",
        "answer_1": "def roundNum(num): \n    if (num - int(num)) >= 0.5: \n        return int(num) + 1\n    else: \n        return int(num) \n  \nnum = 5.66\nroundedNum = roundNum(num) \nprint(roundedNum)",
        "question_2": "Generate code for rounding a given number to the nearest integer in Python.",
        "answer_2": "def round_nearest_int(num):\n    return round(num)\n\nresult = round_nearest_int(2.6)\nprint(result)",
        "question_3": "Construct a Python program to round the number up to the nearest integer",
        "answer_3": "def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))"
    },
    {
        "task_id": 376,
        "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "test_list": [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_replica(test_tup):",
        "question_1": "Write a Python function that takes in a list of elements and removes all the duplicate elements.",
        "answer_1": "def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n  \nresult = remove_duplicates([1, 2, 2, 3, 3, 3])\nprint(result)",
        "question_2": "Produce a Python script to remove duplicate values from a list.",
        "answer_2": "def remove_duplicates(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return unique_lst",
        "question_3": "Create a function in Python that takes a list as an argument and removes any duplicate values in the list.",
        "answer_3": "def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list"
    },
    {
        "task_id": 377,
        "text": "Write a python function to remove all occurrences of a character in a given string.",
        "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "test_list": [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_Char(s,c) :",
        "question_1": "Write a Python code snippet to remove all occurrences of a character from a string.",
        "answer_1": "def remove_char(s, c):\n  return s.replace(c, '')",
        "question_2": "Write a function in Python to remove all occurrences of a specific character from a string.",
        "answer_2": "def remove_char_from_string(string, remove_char):\n    new_string = \"\"\n    for char in string:\n        if char != remove_char:\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n     string = \"computer science\"\n     remove_char = \"c\"\n     print(remove_char_from_string(string, remove_char))",
        "question_3": "Generate a Python program to remove all occurrences of the character 'x' from a list",
        "answer_3": "def remove_x(lst):\n    \"\"\"\n    Function to remove all occurrences of a character 'x' from a list.\n\n    Args:\n        lst (list): The list to process.\n\n    Returns:\n        A list with all occurrences of the character 'x' removed.\n    \"\"\"\n    \n    return [item for item in lst if item != 'x']"
    },
    {
        "task_id": 378,
        "text": "Write a python function to shift last element to first position in the given list.",
        "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "test_list": [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def move_first(test_list):",
        "question_1": "Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.",
        "answer_1": "def move_last_3(list):\n  last3 = list[-3:]\n  del list[-3:]\n  list = last3 + list\n  return list",
        "question_2": "Write a Python function to display the first and last elements of a list.",
        "answer_2": "def display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1])",
        "question_3": "Develop a function in Python to swap the first and last elements of a given input list.",
        "answer_3": "def swap(list):\n    # swapping first and last elements \n    temp = list[0] \n    list[0] = list[-1] \n    list[-1] = temp \n\nlist = [1, 2, 3, 4, 5]\nswap(list)\n\nprint(list)"
    },
    {
        "task_id": 379,
        "text": "Write a function to find the surface area of a cuboid.",
        "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cuboid(l,w,h):",
        "question_1": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_1": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2"
    },
    {
        "task_id": 380,
        "text": "Write a function to generate a two-dimensional array.",
        "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "test_list": [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multi_list(rownum,colnum):",
        "question_1": "Generate a two-dimensional array of ones using Python.",
        "answer_1": "import numpy as np \n\narr = np.ones((r,c))",
        "question_2": "Generate a 2-dimensional array with 7 columns and 5 rows in Python.",
        "answer_2": "import numpy as np \n  \n# creating 2-dimensional array \narr = np.array([[0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0]]) \n  \n# displaying the array \nprint (\"2-dimensional array is:: \", arr)",
        "question_3": "Create a Python function to generate a 2-dimensional array of random numbers between 0 and 1.",
        "answer_3": "def generate_random_array(m, n):\n    array = [[random.random() for i in range(m)] for j in range(n)]\n    return array"
    },
    {
        "task_id": 381,
        "text": "Write a function to sort a list of lists by a given index of the inner list.",
        "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "test_list": [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):",
        "question_1": "Generate a Python program to demonstrate a sorting algorithm.",
        "answer_1": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
        "question_2": "Create a Python program to sort a given list according to the second element",
        "answer_2": "def sortList(list):\n    list.sort(key=lambda x: x[1]) \n    return list\n\nlist = [[2,4], [3,2], [4,1], [1,3]]\nsorted_list = sortList(list)\n\nprint(sorted_list)\n\n# output\n[[4, 1], [3, 2], [1, 3], [2, 4]]",
        "question_3": "Generate a python program to sort a list according to its second element",
        "answer_3": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst"
    },
    {
        "task_id": 382,
        "text": "Write a function to find the number of rotations in a circularly sorted array.",
        "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "test_list": [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_rotation_count(A):",
        "question_1": "Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements.",
        "answer_1": "def rotate(arr, d):\n    for _ in range(d):\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nd = 2\n\nrotated_arr = rotate(arr, d)\nprint(rotated_arr) # [3, 4, 5, 1, 2]",
        "question_2": "Create an algorithm in Python to rotate an array of numbers by k elements.",
        "answer_2": "def rotate_array(arr, k):\n n = len(arr)\n \n for i in range(k):\n  temp = arr[n-1]\n  for i in range(n-1,0,-1):\n   arr[i] = arr[i-1]\n  arr[0] = temp\n  \n return arr\n \nprint(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]",
        "question_3": "Write a python program to rotate an array of size n by d elements",
        "answer_3": "def rotateArray(arr, d):\n    \n    result = []\n    for i in range(len(arr)-d, len(arr)): \n        result.append(arr[i])\n \n    for i in range(0, len(arr)-d):  \n        result.append(arr[i])\n \n    return result"
    },
    {
        "task_id": 383,
        "text": "Write a python function to toggle all odd bits of a given number.",
        "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "test_list": [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_bit_toggle_number(n) :",
        "question_1": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_1": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "question_2": "Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.",
        "answer_2": "def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "question_3": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_3": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\""
    },
    {
        "task_id": 384,
        "text": "Write a python function to find the frequency of the smallest value in a given array.",
        "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Smallest(n,arr):",
        "question_1": "Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.",
        "answer_1": "def find_smallest_number(array):\n    smallest = array[0]\n    for element in array:\n        if element < smallest:\n            smallest = element\n    return smallest",
        "question_2": "Create a function in Python to find the minimum value in a given array.",
        "answer_2": "def findMin(arr): \n   \n    # Initialize minimum element \n    min = arr[0] \n   \n    # Traverse array elements starting from \n    # 1st to the last \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i]\n   \n    return min\n\narr = [10, 11, 8, 9, 2] \nprint(findMin(arr))",
        "question_3": "Write a function in Python to return the kth smallest element in the given array.",
        "answer_3": "def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]"
    },
    {
        "task_id": 385,
        "text": "Write a function to find the n'th perrin number using recursion.",
        "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "test_list": [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_perrin(n):",
        "question_1": "Optimize and refactor an existing Python function.",
        "answer_1": "def factorial(n):\n if n == 0:\n return 1\n \n result = 1 \n while n > 0:\n result = result * n\n n = n - 1\n \n return result",
        "question_2": "Compute the factorial of a given number using a recursive function in Python.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "question_3": "Write a recursive Python function to calculate a factorial of positive integer",
        "answer_3": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)"
    },
    {
        "task_id": 386,
        "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "test_list": [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def swap_count(s):",
        "question_1": "Design a Python program to check if a given string has balanced parenthesis.",
        "answer_1": "def is_balanced(string): \n    stack = [] \n    for char in string: \n        if char == '(': \n            stack.append(char) \n        elif char == ')': \n            if len(stack)==0: \n                return False\n            stack.pop() \n  \n    if len(stack) == 0: \n        return True\n    else: \n        return False",
        "question_2": "Write a Python program to find the minimum number of swaps needed to sort the given array in ascending order.",
        "answer_2": "def min_swaps(nums):\n n = len(nums)\n count = 0\n for i in range(n):\n while nums[i] != i + 1:\n swap(nums, i, nums[i] - 1)\n count += 1\n return count\n\ndef swap(nums, i, j):\n nums[i], nums[j] = nums[j], nums[i]",
        "question_3": "Implement an algorithm in Python that evaluates an expression with multiple parentheses.",
        "answer_3": "def evaluateExpression(exp):\n  st = [] \n  exp = list(exp) \n\n  # Traverse the expression \n  for i in exp:\n    # If the current character in exp is a \n    # opening parenthesis, then push it  \n    # in stack \n    if i == \"(\": \n      st.append(i)\n\n    # If the current character in exp is a \n    # closing parenthesis, then pop from stack \n    elif i == \")\": \n      st.pop() \n      \n  # After complete traversal, if there \n  # is some starting parenthesis left in \n  # stack then \u201cnot balanced\u201d \n  if len(st) != 0:\n    return \"Not Balanced\"\n  else:\n    return \"Balanced\""
    },
    {
        "task_id": 387,
        "text": "Write a python function to check whether the hexadecimal number is even or odd.",
        "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "test_list": [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def even_or_odd(N):",
        "question_1": "Generate a function in Python which checks whether a number is even or odd.",
        "answer_1": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "question_2": "Create a Python script to check whether a given number is an even number or an odd number.",
        "answer_2": "def is_even(n):\n if n % 2 == 0:\n return True\n else:\n return False",
        "question_3": "Create a python script that takes in a number and tells whether it is odd or even.",
        "answer_3": "def evenOdd(number): \n    if (number % 2 == 0): \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n\nevenOdd(number)"
    },
    {
        "task_id": 388,
        "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def highest_Power_of_2(n):",
        "question_1": "Optimize the following python program such that it reaches an O(logN) complexity",
        "answer_1": "def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y",
        "question_2": "Write a function in Python that takes two integer numbers and returns the maximum of the two.",
        "answer_2": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
        "question_3": "Provide an algorithm in python to calculate the power of an integer.",
        "answer_3": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)"
    },
    {
        "task_id": 389,
        "text": "Write a function to find the n'th lucas number.",
        "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_lucas(n):",
        "question_1": "Generate a function in Python that takes a number as input and prints out the n-th Fibonacci number.",
        "answer_1": "def nthFibonacciNumber(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2)\n\nresult = nthFibonacciNumber(6)\nprint(result)",
        "question_2": "Create a Python program to find the n'th Fibonacci number.",
        "answer_2": "def fibonacci_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fibonacci_number(n-1) + fibonacci_number(n-2))\n\nn = int(input(\"Enter the n'th Fibonacci number: \"))\n\nprint(\"Fibonacci number at %d is: %d\" % (n,fibonacci_number(n)))",
        "question_3": "Create a Python program to find the nth Fibonacci number",
        "answer_3": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "task_id": 390,
        "text": "Write a function to insert a given string at the beginning of all items in a list.",
        "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_string(list,string):",
        "question_1": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_1": "# Insert the given string at the beginning of all list items \nnew_list = [\"prefix_\" + item for item in mylist]\n\n# Print the new list \nprint(new_list) # Output: [\"prefix_one\", \"prefix_two\", \"prefix_three\"]",
        "question_2": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_2": "def add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']",
        "question_3": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "answer_3": "my_list = [\"hello\", \"world\", \"python\"]\nprefix = \"Programming - \"\n\n# Insert the prefix to all items in the list\nnew_list = [prefix + item for item in my_list]\n\nprint(new_list)"
    },
    {
        "task_id": 391,
        "text": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def convert_list_dictionary(l1, l2, l3):",
        "question_1": "Write a function in Python to convert following input into a dictionary",
        "answer_1": "def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict",
        "question_2": "Can you create a function in python code to flatten a nested dictionary?",
        "answer_2": "def flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())",
        "question_3": "Write a Python program to flatten a dictionary of nested dictionaries.",
        "answer_3": "def flatten(d): \n  flatten_d = {} \n  for key, value in d.items():\n    if isinstance(value, dict):\n      value = flatten(value) \n      for sub_key, sub_value in value.items(): \n        flatten_d[key + '.' + sub_key] = sub_value \n    else: \n      flatten_d[key] = value \n  return flatten_d"
    },
    {
        "task_id": 392,
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_sum (n):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Write a Python code that finds the sum of the two largest numbers in a given list.",
        "answer_2": "def find_largest_sum(list):\n    largestNum = max(list)\n    list.remove(largestNum)\n    secondLargestNum = max(list)\n    return largestNum+secondLargestNum\n\nprint(find_largest_sum([1,2,3,4,5])) # 9",
        "question_3": "Modify the Python program to calculate the sum of an array so that it finds the largest number in the array.",
        "answer_3": "def array_sum(arr):\n largest = 0\n for num in arr:\n largest = max(largest, num)\n return largest\n\nprint(array_sum([1, 2, 3, 4, 5]))"
    },
    {
        "task_id": 393,
        "text": "Write a function to find the list with maximum length using lambda function.",
        "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_length_list(input_list):",
        "question_1": "Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.",
        "answer_1": "max_value = lambda num_list: max(num_list)",
        "question_2": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_2": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_3": "Create a lambda expression in Python to return the largest number from a list of numbers.",
        "answer_3": "largestNum = lambda a: max(a)"
    },
    {
        "task_id": 394,
        "text": "Write a function to check if given tuple is distinct or not.",
        "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_distinct(test_tup):",
        "question_1": "Generate a python function that takes an array as an argument and returns the distinct elements in the array.",
        "answer_1": "def distinct_values(arr):\n    distinct_arr = []\n    for element in arr:\n        if element not in distinct_arr:\n            distinct_arr.append(element)\n    return distinct_arr",
        "question_2": "Write a Python program to print out all the distinct elements of an array.",
        "answer_2": "def print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct)",
        "question_3": "Generate a function in Python that takes a list of integers and returns a boolean indicating whether or not there are any duplicates in the input list.",
        "answer_3": "def contains_duplicates(list):\n \n seen = set()\n \n for element in list:\n if element in seen:\n return True\n seen.add(element)\n \n return False"
    },
    {
        "task_id": 395,
        "text": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_non_repeating_character(str1):",
        "question_1": "Write a Python program to find the first non-repeated character of a given string.",
        "answer_1": "def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch",
        "question_2": "Code a generalized function in Python that takes a string as input and returns the first non-repeating character.",
        "answer_2": "def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1",
        "question_3": "Write a function in Python to find the first non-repeating character in a given string.",
        "answer_3": "def non_repeating_char(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    for c in s:\n        if char_freq[c] == 1:\n            return c\n\nif __name__ == '__main__':\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\"))"
    },
    {
        "task_id": 396,
        "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string):",
        "question_1": "Design a function in Python to check if a string starts with a certain substring.",
        "answer_1": "def starts_with(string, substring):\n  if string[:len(substring)] == substring:\n    return True\n  else:\n    return False",
        "question_2": "Create a Python program to check if a string ends with a given substring.",
        "answer_2": "def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True",
        "question_3": "How would you check if a string ends with a given substring in Python?",
        "answer_3": "if InputString.endswith(Substring):\n    print('The input string ends with the given substring.')\nelse:\n    print('The input string does not end with the given substring.')"
    },
    {
        "task_id": 397,
        "text": "Write a function to find the median of three specific numbers.",
        "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_numbers(a,b,c):",
        "question_1": "Develop a program in Python to compute the median of three numbers.",
        "answer_1": "def median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median",
        "question_2": "Write a Python program to determine the median of three numbers.",
        "answer_2": "def median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4)))",
        "question_3": "Can you generate a Python program for computing the median of three numbers?",
        "answer_3": "def median(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c\n\nmedian_value = median(6, 8, 7)\nprint(median_value)"
    },
    {
        "task_id": 398,
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_of_digits(nums):",
        "question_1": "Write a function in Python to calculate the sum of the digits in a given number.",
        "answer_1": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total",
        "question_2": "Generate a Python function to find the sum of the digits in a given number.",
        "answer_2": "def sum_of_digits(n):\n  result = 0\n  while (n > 0):\n    result += n % 10;\n    n //= 10;\n  return result",
        "question_3": "Write a Python program to calculate the sum of the digits of a given number.",
        "answer_3": "def sum_of_digits(n): \n  \n   sum = 0\n  \n   # Separate the digits of the number  \n   while n > 0: \n      digit = n % 10\n      sum += digit\n      n //= 10\n  \n   return sum"
    },
    {
        "task_id": 399,
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def bitwise_xor(test_tup1, test_tup2):",
        "question_1": "Generate an XOR function in Python that takes two integers as parameters and returns a boolean.",
        "answer_1": "def xor(a, b):\nreturn (a or b) and not (a and b)",
        "question_2": "Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set.",
        "answer_2": "# Define a function to print an int in binary format\ndef print_binary(n):\n    if n < 0:\n        print(\"Negative numbers are not supported.\")\n        return\n    if n == 0:\n        print(\"0b0\")\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n = n // 2\n\n        result.reverse()\n        print(\"0b\" + \"\".join(str(x) for x in result))\n        \n# Define a function to count the number of bits set\ndef bits_set(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            result += n % 2\n            n = n // 2\n        return result\n\n# Read an int\nn = int(input(\"Enter an int: \"))\n\n# Print the int in binary format\nprint_binary(n)\n\n# Print the number of bits set to 1\nbits_count = bits_set(n)\nprint(\"Number of bits set:\", bits_count)",
        "question_3": "Create a algorithm in Python to convert any given number to binary form.",
        "answer_3": "def toBinary(n): \n    if (n > 1): \n        toBinary(n//2) \n    print(n%2,end = '') \n \n# Driver Code \nnum = 8\ntoBinary(num)"
    },
    {
        "task_id": 400,
        "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_freq(test_list):",
        "question_1": "Write a python program to create a frequency table for the following list.",
        "answer_1": "from collections import Counter\n\ndata = [1, 8, 9, 11, 2, 10, 1, 5, 6, 8]\ncounter = Counter(data)\n\n# print the frequency table\nprint('Frequency Table:')\nfor item in counter.most_common():\n    print(item)",
        "question_2": "Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.",
        "answer_2": "def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]",
        "question_3": "Write a Python function to retrieve the frequency of elements in a given list.",
        "answer_3": "from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)"
    },
    {
        "task_id": 401,
        "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_nested_tuples(test_tup1, test_tup2):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_2": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]",
        "question_3": "Generate a function for vector addition in Python.",
        "answer_3": "def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)"
    },
    {
        "task_id": 402,
        "text": "Write a function to compute the value of ncr%p.",
        "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ncr_modp(n, r, p):",
        "question_1": "Create a python program to calculate the compound interest for a given principal amount and a given interest rate.",
        "answer_1": "# Python program to calculate the compound interest  \n  \ndef compound_interest(principal, rate, time): \n  \n    # Calculates compound interest  \n    CI = principal * (pow((1 + rate / 100), time)) \n    print(\"Compound interest is\", CI) \n  \n# Driver Code  \ncompound_interest(1000, 9, 2)",
        "question_2": "Write a Python function to calculate the compound interest given the principal amount, rate, and number of years.",
        "answer_2": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate)**time\n\nresult = compound_interest(1000, 0.03, 5)\nprint(result)",
        "question_3": "Generate a function in Python to calculate the future value of an investment.",
        "answer_3": "def calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years"
    },
    {
        "task_id": 403,
        "text": "Write a function to check if a url is valid or not using regex.",
        "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "test_list": [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef is_valid_URL(str):",
        "question_1": "Generate a method in Python that determines if a given string contains a URL.",
        "answer_1": "import re\n\ndef isUrl(string): \n    urlPattern = re.compile(r'https?://(www\\.)?(\\w+)(\\.\\w+)') \n    match = urlPattern.search(string) \n    return bool(match)",
        "question_2": "Write a python program to validate internet URLs.",
        "answer_2": "import re\n\ndef is_valid_url(url):\n regex = re.compile(\n r'^(?:http|ftp)s?://' # http:// or https://\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n r'localhost|' # localhost...\n r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n r'(?::\\d+)?' # optional port\n r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n \n return url is not None and regex.search(url)\n\nprint(is_valid_url('https://www.google.com')) # Output: True",
        "question_3": "Create a Python script to check a given URL and see if it is active or not.",
        "answer_3": "import requests \n  \ndef check_url(url): \n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return True\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "task_id": 404,
        "text": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def minimum(a,b):",
        "question_1": "Generate Python code for finding the minimum of two given numbers.",
        "answer_1": "def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5",
        "question_2": "In Python, create a function to return the minimum of two numbers.",
        "answer_2": "def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "question_3": "Find the minimum of two numbers using Python.",
        "answer_3": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3"
    },
    {
        "task_id": 405,
        "text": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_tuplex(tuplex,tuple1):",
        "question_1": "Write a Python function to check if an element exists in a list.",
        "answer_1": "def check_list(list_, element): \n    return element in list_",
        "question_2": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_2": "def element_exists(elem, list_int):\n  return elem in list_int",
        "question_3": "Write a Python program to check if an item exists in a given list.",
        "answer_3": "def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result)"
    },
    {
        "task_id": 406,
        "text": "Write a python function to find the parity of a given number.",
        "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "test_list": [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Parity(x):",
        "question_1": "Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.",
        "answer_1": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"",
        "question_2": "Write a Python program to classify a given set of integers depending on the parity of the remainder when they are divided by 2.",
        "answer_2": "def classifyIntegersByOddEven(arr):\n    evens = []\n    odds = []\n    \n    for num in arr:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    \n    return evens, odds\n\nevens, odds = classifyIntegersByOddEven([1, 8, 4, 120])\nprint('Evens: ', evens)\nprint('Odds: ', odds)",
        "question_3": "Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way.",
        "answer_3": "even_list = []\nodd_list = []\n\nfor num in input_list:\n if num % 2 == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list)"
    },
    {
        "task_id": 407,
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rearrange_bigger(n):",
        "question_1": "Develop a Python program to print the digits of a given integer in reverse order.",
        "answer_1": "\"\"\"\nPython script to print the digits of a given integer in reverse order\n\"\"\"\n\nnum = int(input('Enter an integer: '))\n\n# Initializing the variable to hold the reversed digits \nreverse = 0\n\nwhile (num > 0):\n    # Extracting the last digit\n    remainder = num % 10\n\n    # Multiplying the reverse variable by 10 and adding the remainder\n    reverse = (reverse * 10) + remainder\n\n    # Removing the last digit of the original number\n    num = num // 10\n\n# printing the reversed digits\nprint(reverse)",
        "question_2": "Develop a Python script that prints out the numbers from 0 to 9 in descending order?",
        "answer_2": "for n in reversed(range(0,10)):\n    print(n)",
        "question_3": "Write a python program to convert a number into a list of its digits",
        "answer_3": "def number_to_digits(number):\n  digits = []\n  while (number>0):\n    digits.append(number % 10)\n    number = number // 10\n  \n  digits.reverse()\n  return digits"
    },
    {
        "task_id": 408,
        "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):",
        "question_1": "Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.",
        "answer_1": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Develop an algorithm in Python for merging k sorted arrays.",
        "answer_3": "def mergeKArrays(arrays):\n    '''\n    This function will merge k sorted\n    arrays in to one sorted array.\n    '''\n    # initialize the resulting array\n    result = []\n\n    # loop through all the arrays\n    for array in arrays:\n       # merge this array with existing result\n       result = mergeTwoArrays(result, array)\n\n    # return the result array\n    return result\n\n\ndef mergeTwoArrays(arr1, arr2):\n    # define the resulting array\n    result = []\n    i, j = 0, 0\n\n    # loop through both the arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    # add the remaining elements from both arrays\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n\n    return result\n\n\narrays = [[1, 3, 5],\n          [2, 4, 6],\n          [7, 8, 9]]\n\nprint(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "task_id": 409,
        "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_product_tuple(list1):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Modify the below Python function to make it efficient.",
        "answer_2": "def min_product(a, b):\n    if a > b:\n        return a * b\n    else:\n        return a * b * (a - b)",
        "question_3": "Optimize the following python program and reduce its runtime.",
        "answer_3": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]"
    },
    {
        "task_id": 410,
        "text": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def min_val(listval):",
        "question_1": "Optimize the following python program and reduce its runtime.",
        "answer_1": "def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5]",
        "question_2": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_2": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_3": "Generate a Python code snippet to find the minimum value of a list of integers.",
        "answer_3": "def find_min(list):\n    min_value = list[0]\n\n    for value in list:\n        if value < min_value:\n            min_value = value\n\n    return min_value"
    },
    {
        "task_id": 411,
        "text": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef snake_to_camel(word):",
        "question_1": "Write a Python program to convert a string in camel case format to snake case format",
        "answer_1": "my_name_is_ryan",
        "question_2": "Convert the given string from Upper Camel Case notation to lower snake case notation in Python.",
        "answer_2": "lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",
        "question_3": "Generate a function in Python to transform a string from camelCase to snake_case.",
        "answer_3": "def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))"
    },
    {
        "task_id": 412,
        "text": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(l):",
        "question_1": "Create a python program to remove odd numbers from a list of numbers.",
        "answer_1": "def remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result",
        "question_2": "Write a Python program to print the given list after removing even numbers from it.",
        "answer_2": "list_odd = [] \nfor num in [3, 5, 7, 4, 8, 10]:\n    if num %2 != 0:\n        list_odd.append(num)\n        \nprint(list_odd)",
        "question_3": "Generate Python code to filter a given list of numbers such that only the odd numbers are removed.",
        "answer_3": "def filter_odd(list):\n    return [num for num in list if num % 2 == 0]"
    },
    {
        "task_id": 413,
        "text": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_nth_element(list1, n):",
        "question_1": "Generate a function in Python to get the nth element of a given list.",
        "answer_1": "def get_nth_item(lst, n):\n  \"\"\"\n  This function returns the nth item of a given list.\n  \"\"\"\n  return lst[n]",
        "question_2": "Write a Python program to extract the n-th element from the given list of lists.",
        "answer_2": "def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]",
        "question_3": "Design a python program to return the n-th element of a given list.",
        "answer_3": "def get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))"
    },
    {
        "task_id": 414,
        "text": "Write a python function to check whether the value exists in a sequence or not.",
        "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def overlapping(list1,list2):",
        "question_1": "Create a Python function to detect a specific sequence",
        "answer_1": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result",
        "question_2": "Write a python program to check whether two sequences are equal or not.",
        "answer_2": "def is_equal(seq_1, seq_2):\n  return sorted(seq_1) == sorted(seq_2)",
        "question_3": "Write a Python program to check if an element exists within a given list of integers.",
        "answer_3": "def element_exists(elem, list_int):\n  return elem in list_int"
    },
    {
        "task_id": 415,
        "text": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_Product(arr):",
        "question_1": "Implement a function in Python that takes in an array of integers and returns the pair of integers that have the greatest product.",
        "answer_1": "def calculate_greatest_product(array):\n    greatest_product = float('-inf')\n    first_pair = None\n    second_pair = None\n    \n    for i in range(0, len(array)-1):\n        for j in range(i+1, len(array)):\n            product = array[i] * array[j]\n            if product > greatest_product:\n                greatest_product = product\n                first_pair = array[i]\n                second_pair = array[j]\n    \n    return first_pair, second_pair\n\ngreatest_product = calculate_greatest_product(array)\nprint(greatest_product) # Output: (-10, 6)",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product.",
        "answer_3": "def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9]))"
    },
    {
        "task_id": 416,
        "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "test_list": [
            "assert breakSum(12) == 13",
            "assert breakSum(24) == 27",
            "assert breakSum(23) == 23"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "MAX = 1000000\r\ndef breakSum(n):",
        "question_1": "Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list.",
        "answer_1": "def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12)",
        "question_2": "Refactor this piece of Python code to increase its readability.",
        "answer_2": "def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum",
        "question_3": "Improve the following Python program to reduce its time complexity.",
        "answer_3": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum"
    },
    {
        "task_id": 417,
        "text": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def group_tuples(Input):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a python statement to extract the first element from a 3-item tuple.",
        "answer_2": "first_element = (3, 4, 5)[0]",
        "question_3": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_3": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list"
    },
    {
        "task_id": 418,
        "text": "Write a python function to find the sublist having maximum length.",
        "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Max(lst):",
        "question_1": "Code a function in Python that returns the length of the longest increasing subsequence in a given list of integers.",
        "answer_1": "def longestIncreasingSubsequence(list):\n n = len(list)\n maxLength = 0\n\n# Create a list to store the maximum length \n# of the increasing subsequence ending at 'i' \nlengthList = [1] * n\n\n# Compute optimized values in bottom up manner \nfor i in range(1, n):\n for j in range(0, i):\n  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):\n   lengthList[i] = lengthList[j] + 1\n\n# Pick maximum of all computed values \nmaxLength = max(lengthList)\n\nreturn maxLength",
        "question_2": "Given a list of strings, write a Python program to find the string which has the maximum length",
        "answer_2": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))",
        "question_3": "Given a list of strings, write a Python program to calculate the maximum length of a string.",
        "answer_3": "max_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length)"
    },
    {
        "task_id": 419,
        "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def round_and_sum(list1):",
        "question_1": "Can you develop a function in Python to iteratively sum all the numbers in a list of numbers?",
        "answer_1": "def sum_list(list): \n  total = 0\n  for num in list:\n    total += num  \n  return total\n\nprint(sum_list([4, 9, 13, 5])) # Output: 31",
        "question_2": "Transform the following algorithm description into a working python function.",
        "answer_2": "def sum_list(nums_list):\n    total = 0\n    for num in nums_list:\n        total += num\n    return total",
        "question_3": "Develop a program in Python that sums up all the numbers of a list.",
        "answer_3": "# define the list\nmy_list = [1, 2, 3, 4, 5]\n\n# compute the total\ntotal = 0\nfor num in my_list:\n total += num\n\n# print the result\nprint(\"The sum of all numbers in the list is: \" + str(total))"
    },
    {
        "task_id": 420,
        "text": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_Sum(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Develop a Python program to find the sum of first n even numbers.",
        "answer_2": "def find_sum(n):\n \u00a0 \u00a0sum = 0\n \u00a0 \u00a0for i in range(1, n+1):\n \u00a0 \u00a0 \u00a0 \u00a0if i % 2 == 0:\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sum += i\n \u00a0 \u00a0return sum\n\nn = 7\nprint(\"The sum of first n even numbers is:\", find_sum(n))",
        "question_3": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_3": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum"
    },
    {
        "task_id": 421,
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_tuple(test_tup):",
        "question_1": "Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.",
        "answer_1": "def concatenate_strings(strings, separator):\n return separator.join(strings)",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.",
        "answer_3": "def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3]"
    },
    {
        "task_id": 422,
        "text": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_Average_Of_Cube(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Write a Python program that outputs the average of 3 given numbers.",
        "answer_2": "def find_average(num1, num2, num3):\n return (num1 + num2 + num3) / 3",
        "question_3": "Write a Python function that computes the average of 3 numbers.",
        "answer_3": "def average(a, b, c):\n    return (a + b + c) / 3.0\n\nprint(average(1,2,3)) # Output: 2.0"
    },
    {
        "task_id": 423,
        "text": "Write a function to solve gold mine problem.",
        "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "test_list": [
            "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
            "assert get_maxgold([[10,20],[30,40]],2,2)==70",
            "assert get_maxgold([[4,9],[3,7]],2,2)==13"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_maxgold(gold, m, n):",
        "question_1": "Create a Python program to optimize a given function using the Nelder-Mead method.",
        "answer_1": "from scipy.optimize import minimize\ndef f(x):\n    return x[0]**2 + 4*x[1]**2\n\nres = minimize(f, [3, -2], method='nelder-mead')\n\nprint(res.x)",
        "question_2": "Create a python function that computes the Goldbach conjecture for a given positive even number n.",
        "answer_2": "def Goldbach_conjecture(n):\n    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n\t# list to hold all the prime pairs that add to n\n    prime_pairs = []\n    # find all prime numbers less than n\n    primes = [x for x in range(2, n+1) if isprime(x)]\n    # loop through all prime numbers\n    for prime_x in primes:\n        # check if prime_x added to any prime number less than prime_x \n        # equals n. If true, add that prime pair to the prime_pairs list\n        for prime_y in primes:\n            if prime_y < prime_x and prime_x + prime_y == n:\n                prime_pairs.append((prime_x, prime_y))\n    return prime_pairs\n\ndef isprime(n):\n    # check if n is prime\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "question_3": "Write a Python program to optimize a given set of equations using gradient descent.",
        "answer_3": "import numpy as np\n \n# define the function\ndef f(x):\n    return x**2 + 2*x + 5 + 2*x**2 + 4*x + 1\n \n# define the gradient\ndef grad_f(x):\n    return 2*x + 2 + 4*x + 4\n \n# define the learning rate (eta)\neta = 0.01\n \n# define the number of times we need to loop\nn_iterations = 15\n \n# define the initial value for x\nx = 0\n \n# loop and print\nfor i in range(n_iterations):\n    x_next = x - eta * grad_f(x)\n    x = x_next\n    print(x, f(x))"
    },
    {
        "task_id": 424,
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_rear(test_tuple):",
        "question_1": "Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.",
        "answer_1": "def search_string(lst, s):\n for i, item in enumerate(lst):\n if item == s:\n return i\n return -1",
        "question_2": "Implement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.",
        "answer_2": "def find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices",
        "question_3": "Create a Python program to search a string and print the index of all instances of a specific character.",
        "answer_3": "def search_character(string, character):\n indices = []\n for i in range(len(string)):\n  if string[i] == character:\n   indices.append(i)\n return indices\n\nprint(search_character(string, character)) # [3]"
    },
    {
        "task_id": 425,
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_element_in_list(list1, x):",
        "question_1": "Construct a python program to identify the number of times the given element is present in the given list.",
        "answer_1": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count",
        "question_2": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_2": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_3": "Generate a function in python that takes in an array argument and counts the number of elements in it.",
        "answer_3": "def count_elements(arr): \n    return len(arr)"
    },
    {
        "task_id": 426,
        "text": "Write a function to filter odd numbers using lambda function.",
        "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def filter_oddnumbers(nums):",
        "question_1": "Generate Python code to filter a given list of numbers such that only the odd numbers are removed.",
        "answer_1": "def filter_odd(list):\n    return [num for num in list if num % 2 == 0]",
        "question_2": "Design a Python program to filter out the odd numbers from a list.",
        "answer_2": "def filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]",
        "question_3": "Rewrite a Python program from imperative to functional style.",
        "answer_3": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)"
    },
    {
        "task_id": 427,
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef change_date_format(dt):",
        "question_1": "Write a Python function to recognize a date (in \u201cDD/MM/YYYY\u201d format) in a string",
        "answer_1": "def recognize_date(s):\n    '''This function recognizes a date (in DD/MM/YYYY format) in a string.'''\n    # Regex for DD/MM/YYYY format\n    format_regex = re.compile(r'\\d{2}/\\d{2}/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None",
        "question_2": "Transform string of format \u2018YYYY-MM-DD\u2019 to date type in Python",
        "answer_2": "import datetime\n\ndef date_string_to_datetime(date_str):\n  return datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date()",
        "question_3": "Write a function in Python to convert a given date in the format mm-dd-yyyy to the format dd-mm-yyyy.",
        "answer_3": "def convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat"
    },
    {
        "task_id": 428,
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def shell_sort(my_list):",
        "question_1": "Develop a Python Program to sort an array without using any built-in functions.",
        "answer_1": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array",
        "question_2": "Develop a function in Python to sort a given array of strings.",
        "answer_2": "def sort_strings(strings):\n  return sorted(strings)",
        "question_3": "Create a python script to sort the numbers in an array",
        "answer_3": "def sort_array(arr):\n    for i in range(0, len(arr)-1):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"
    },
    {
        "task_id": 429,
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def and_tuples(test_tup1, test_tup2):",
        "question_1": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_1": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)",
        "question_2": "Write a python program to transform input set of numbers into a list of tuples.",
        "answer_2": "[(1, 2), (3, 4), (5, None)]",
        "question_3": "Write a Python program to convert a list to a tuple",
        "answer_3": "def list_to_tuple(list):\n    return tuple(list)"
    },
    {
        "task_id": 430,
        "text": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def parabola_directrix(a, b, c):",
        "question_1": "Generate a graphical representation of a function using Python.",
        "answer_1": "import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show()",
        "question_2": "Create a numerical optimization algorithm using Python that minimizes the function f(x,y) = x^2 + 2y^2",
        "answer_2": "import numpy as np\n\n# Define the function to be optimized\ndef f(x, y):\n    return np.square(x) + 2 * np.square(y)\n\n# Initialize the parameters\nx = 0\ny = 0\nlearning_rate = 10\n\n# Gradient Descent Algorithm\nfor i in range(1000):\n    # Calculate the derivatives\n    grad_x = 2 * x\n    grad_y = 4 * y\n\n    # Calculate the new values\n    x -= learning_rate * grad_x\n    y -= learning_rate * grad_y\n\n# Print the minimum\nprint(\"The minimum is: {:.4f}\".format(f(x, y)))",
        "question_3": "Create an optimization problem in Python to optimize the function.",
        "answer_3": "import numpy as np\nfrom scipy.optimize import minimize\ndef f(x):\n    x, y = x\n    return x + y**2\n\nx0 = np.array([0,0])\nres = minimize(f, x0, method='nelder-mead')\nprint(res.x)"
    },
    {
        "task_id": 431,
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def common_element(list1, list2):",
        "question_1": "Given two lists of integers, write a python function that returns a list of all common elements shared between them.",
        "answer_1": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))",
        "question_2": "Compare two lists and extract the common elements of both the lists in Python.",
        "answer_2": "def commonElements(l1, l2):\n    return set(l1).intersection(l2)",
        "question_3": "Write a Python function to compare two given lists and return a list containing only the common elements.",
        "answer_3": "def common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)"
    },
    {
        "task_id": 432,
        "text": "Write a function to find the median of a trapezium.",
        "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def median_trapezium(base1,base2,height):",
        "question_1": "Generate a python script to calculate the median of a given data set.",
        "answer_1": "def median(data):\n    n = len(data)\n    if n % 2 == 0:\n        return (data[n//2] + data[(n//2)-1])/2\n    else:\n        return data[n//2]\n\ndata = [5, 6, 7, 8, 9]\nmedian = median(data)\nprint('Median:', median)",
        "question_2": "Given a set X, suggest a Python program to calculate the median of X",
        "answer_2": "def median(X): \n    sorted_X = sorted(X) \n    mid_index = (len(sorted_X) - 1) // 2 \n    if len(sorted_X) % 2 == 0: \n        return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2\n    else: \n        return sorted_X[mid_index]",
        "question_3": "Using the given data, write a Python function to calculate the median of the numbers.",
        "answer_3": "def calculate_median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        first_num = data[int(len(data) / 2) - 1]\n        second_num = data[int(len(data) / 2)]\n        median = (first_num + second_num) / 2\n    else:\n        median = data[int((len(data) - 1) / 2)]\n    return median\n\nresult = calculate_median(data)\nprint(result)"
    },
    {
        "task_id": 433,
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
            "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_greater(arr, number):",
        "question_1": "Create a python script that checks if all numbers in an array are greater than, equal to, or less than a given number.",
        "answer_1": "def checkNum(arr, num):\n    response = []\n    for element in arr: \n        if element > num: \n            response.append('greater than')\n        elif element < num:\n            response.append('less than')\n        else:\n            response.append('equal to')\n    return response\n\nnums = [3,5,7]\nout = checkNum(nums, 4)\nprint(out)",
        "question_2": "Write a code in Python to display a sorted array of the numbers in an array that are greater than the given value.",
        "answer_2": "def sort_greater_numbers(arr, num):\n    result = [x for x in arr if  x > num]\n    result.sort()\n    return result",
        "question_3": "Implement a Python function to check if all n numbers in an array are equal.",
        "answer_3": "def checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr)"
    },
    {
        "task_id": 434,
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "test_list": [
            "assert text_match_one(\"ac\")==('Not matched!')",
            "assert text_match_one(\"dc\")==('Not matched!')",
            "assert text_match_one(\"abba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_one(text):",
        "question_1": "Generate a Python function that, given two strings, will return the number of matches between the strings.",
        "answer_1": "def string_matches(string1, string2): \n    matches = 0\n    for i in range(len(string1)): \n        if string1[i] == string2[i]: \n            matches += 1\n    return matches",
        "question_2": "Write a Python program to create a FuzzyWuzzy string matching for the given two strings.",
        "answer_2": "from fuzzywuzzy import fuzz \ndef fuzzy_match(str1, str2): \n    return fuzz.ratio(str1, str2)",
        "question_3": "Create a function in Python to compare two strings and return true if the strings only differ by one character.",
        "answer_3": "def compare_strings(s1, s2):\n    mismatch_count = 0\n\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if mismatch_count > 0:\n                return False\n\n            mismatch_count += 1\n\n    return mismatch_count == 1\n\ncompare_strings('apple', 'acple')"
    },
    {
        "task_id": 435,
        "text": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n) :\r\n    return (n % 10) ",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def last_Digit(n) :",
        "question_1": "Write a Python function to extract the last digits of a given integer.",
        "answer_1": "def extract_last_digits(n):\n  return int(str(n)[-2:])\n\nresult = extract_last_digits(12345)\nprint(result)",
        "question_2": "Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits.",
        "answer_2": "def remove_last_two_digits(num):\n    num = str(num)\n    return [int(x) for x in num[:-2]]",
        "question_3": "Create a function in Python that takes two parameters: a list of numbers and a number called \u2018n\u2019 and returns the last n numbers in the list.",
        "answer_3": "def last_n_numbers(myList, n):\n  return myList[-n:]\n  \nres = last_n_numbers(myList, n)\nprint(res) \n\n# Output\n[8, 9, 10]"
    },
    {
        "task_id": 436,
        "text": "Write a python function to print negative numbers in a list.",
        "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == -1,-6",
            "assert neg_nos([-1,-2,3,4]) == -1,-2",
            "assert neg_nos([-7,-6,8,9]) == -7,-6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def neg_nos(list1):",
        "question_1": "Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.",
        "answer_1": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]",
        "question_2": "Create a function in Python to find all elements in a list that are negative, and print them.",
        "answer_2": "def find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9]",
        "question_3": "Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers",
        "answer_3": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list"
    },
    {
        "task_id": 437,
        "text": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_odd(str1):",
        "question_1": "Write a Python program to remove the characters which have odd index values of a given string.",
        "answer_1": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))",
        "question_2": "Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.",
        "answer_2": "def remove_odd_ascii_chars(str):\n    new_str = \"\"\n    for ch in str:\n        if ord(ch) % 2 == 0:\n            new_str += ch\n    return new_str\n\nstr = \"Hello world!\"\nnew_str = remove_odd_ascii_chars(str)\nprint(new_str)",
        "question_3": "Formulate a python code to remove the characters of odd index in a given string.",
        "answer_3": "def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe"
    },
    {
        "task_id": 438,
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def count_bidirectional(test_list):",
        "question_1": "Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.",
        "answer_1": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))",
        "question_2": "Generate a Python program to count the number of pairs with given sum x",
        "answer_2": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count",
        "question_3": "Create a python program for the following purpose:",
        "answer_3": "def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n"
    },
    {
        "task_id": 439,
        "text": "Write a function to convert a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def multiple_to_single(L):",
        "question_1": "Write a Python function to convert a list of multiple integers into a single integer.",
        "answer_1": "def convert_list_to_integer(my_list):\n    result = 0\n    multiplier = 1\n \n    for i in range(len(my_list)-1, -1, -1):\n        result += my_list[i]*multiplier\n        multiplier *= 10\n \n    return result\n \nprint(convert_list_to_integer(my_list))",
        "question_2": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "answer_2": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "question_3": "Write a function in Python to convert a given list of strings to a list of integers.",
        "answer_3": "def convert_to_integers(lst):\n    return [int(i) for i in lst]"
    },
    {
        "task_id": 440,
        "text": "Write a function to find all adverbs and their positions in a given sentence.",
        "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef find_adverb_position(text):",
        "question_1": "Define a function in Python that takes as input a sentence and returns a list of all noun phrases in the sentence.",
        "answer_1": "def get_noun_phrases(sentence):\n    noun_phrases = []\n    \n    words = word_tokenize(sentence)  \n    tagged_sentence = pos_tag(words)\n    chunks = ne_chunk(tagged_sentence)\n\n    for chunk in chunks:\n        if type(chunk) == Tree:\n            phrase = \" \".join([word[0] for word in chunk])\n            noun_phrases.append(phrase)\n    \n    return noun_phrases",
        "question_2": "Using Python, write a program to classify the input provided in the input field.",
        "answer_2": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\n# Create a function to classify the sentence\ndef classify_sentence(sentence):\n    # Create a list of words derived from the sentence\n    words = word_tokenize(sentence)\n\n    # Collect words and their corresponding part of speech tags\n    words_tags = nltk.pos_tag(words)\n    \n    # Create lists to contain nouns, verbs, adjectives and adverbs\n    nouns = []\n    verbs = []\n    adjectives = []\n    adverbs = []\n\n    # Iterate through each word and tag in the sentence\n    for word, tag in words_tags:\n        if tag in ['NN', 'NNS', 'NNP', 'NNPS']:\n            nouns.append(word)\n        elif tag in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']:\n            verbs.append(word)\n        elif tag in ['JJ', 'JJR', 'JJS']:\n            adjectives.append(word)\n        elif tag in ['RB', 'RBR', 'RBS']:\n            adverbs.append(word)\n\n    # Return a dictionary containing the detected words\n    return {\n        'nouns': nouns,\n        'verbs': verbs,\n        'adjectives': adjectives,\n        'adverbs': adverbs\n    }\n\nsentence = 'The dog barked at the cat.'\n\n# Classify the sentence\nclassified_sentence = classify_sentence(sentence)\n\n# Print the results\nprint(classified_sentence)\n\n# Output:\n# {'nouns': ['dog', 'cat'], 'verbs': ['barked'], 'adjectives': [], 'adverbs': []}",
        "question_3": "Develop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.",
        "answer_3": "def parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate"
    },
    {
        "task_id": 441,
        "text": "Write a function to find the surface area of a cube.",
        "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def surfacearea_cube(l):",
        "question_1": "Create a function in Python for calculating the surface area of a cube.",
        "answer_1": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_2": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_2": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2",
        "question_3": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "answer_3": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52"
    },
    {
        "task_id": 442,
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from array import array\r\ndef positive_count(nums):",
        "question_1": "Create a Python program that accepts two numbers as an input and prints out the ratio of the two numbers.",
        "answer_1": "def calculateRatio(number1, number2):\n    return number1/number2\n    \nnumber1 = 13\nnumber2 = 24\nratioOfNumbers = calculateRatio(number1, number2)\n\nprint(\"The ratio of the two numbers is: \" + str(ratioOfNumbers))",
        "question_2": "Write a Python program to optimize a given array of integers such that each element is greater than or equal to the previous element in the array.",
        "answer_2": "def optimize_array(array):\n    optimized_array = []\n    prev = -float(\"inf\")\n    for n in array:\n        if(n>=prev):\n            optimized_array.append(n)\n            prev = n\n    return optimized_array\n\narray = [7, 2, 5, 8, 4, 0]\nprint(optimize_array(array))\n# Output: [7, 5, 8, 4]",
        "question_3": "Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.",
        "answer_3": "def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result)"
    },
    {
        "task_id": 443,
        "text": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def largest_neg(list1):",
        "question_1": "Given a list of integers as input, write a Python code snippet to find the largest number.",
        "answer_1": "max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)",
        "question_2": "Optimize a Python program that reads a list of numbers and finds the largest and smallest number in the list.",
        "answer_2": "my_list = [1, -2, 9, 4, -7, 0]\n\n# Initialize variables\nlargest_number = my_list[0]\nsmallest_number = my_list[0]\n\n# Loop through list\nfor number in my_list:\n    # Update variables\n    if number > largest_number:\n        largest_number = number\n    if number < smallest_number:\n        smallest_number = number\n\nprint(\"Largest number:\", largest_number)\nprint(\"Smallest number:\", smallest_number)",
        "question_3": "Create a Python script that will automatically detect the largest number in a given list.",
        "answer_3": "def find_largest_number(list):\n largest = list[0]\n for number in list:\n if number > largest:\n largest = number\n return largest\n\nlist = [7, 2, -4, 5, 8, 1]\nprint(find_largest_number(list))\n# Output: 8"
    },
    {
        "task_id": 444,
        "text": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def trim_tuple(test_list, K):",
        "question_1": "Write a Python program to convert a list into a tuple.",
        "answer_1": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)",
        "question_2": "Design a program in Python to sort a list of tuples based on the value the tuples contain.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]",
        "question_3": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_3": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]"
    },
    {
        "task_id": 445,
        "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def index_multiplication(test_tup1, test_tup2):",
        "question_1": "Write a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two.",
        "answer_1": "def list_multiplication(nums):\n    output_list = []\n    for i in range(len(nums)):\n        output_list.append(nums[i] * 2)\n    return output_list",
        "question_2": "Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.",
        "answer_2": "def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))",
        "question_3": "Write a Python program to create a new list that contains all the elements of the given list multiplied by each other.",
        "answer_3": "def multiply(nums):\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result.append(nums[i] * nums[j]) \n    return result"
    },
    {
        "task_id": 446,
        "text": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst):",
        "question_1": "Generate a program in Python to count the occurrence of an element in a given list",
        "answer_1": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
        "question_2": "Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.",
        "answer_2": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count",
        "question_3": "Write a Python program to check how many times a given element occurs in a list.",
        "answer_3": "def count_element_occurrence(lst, target):\n count = 0\n for element in lst:\n     if element == target:\n         count += 1\n return count"
    },
    {
        "task_id": 447,
        "text": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cube_nums(nums):",
        "question_1": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_1": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum",
        "question_2": "Generate a list comprehension in Python that prints the cubes of the first 5 numbers.",
        "answer_2": "[x**3 for x in range(1, 6)]",
        "question_3": "Create a Python lambda expression that prints out the square of each item in an input list.",
        "answer_3": "square = lambda nums: [x*x for x in nums]\n\nsquares = square([1,2,3])\nprint(squares)"
    },
    {
        "task_id": 448,
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def cal_sum(n):",
        "question_1": "Generate an optimized version of the following Python program.",
        "answer_1": "def calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum)",
        "question_2": "Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors",
        "answer_2": "def sum_of_divisors(n): \n    divisors = [i for i in range(1,n+1) if n%i == 0] \n    return sum(divisors) \n  \nn = 24\nprint(\"Sum of the positive divisors of 24 is:\",sum_of_divisors(n))",
        "question_3": "Edit the following Python code to make it run without any errors",
        "answer_3": "def find_sum(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum"
    },
    {
        "task_id": 449,
        "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "test_list": [
            "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
            "assert check_Triangle(1,1,1,4,1,5) == 'No'",
            "assert check_Triangle(1,1,1,1,1,1) == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Triangle(x1,y1,x2,y2,x3,y3):",
        "question_1": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
        "answer_1": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
        "question_2": "Create a Python program that can identify a triangle using the 3 provided side lengths.",
        "answer_2": "\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))",
        "question_3": "Develop a Python program to check if a triangle is valid or not.",
        "answer_3": "# A function to check if the triangle is valid \ndef valid_triangle(side1, side2, side3): \n    # Check the sum of any two sides should be\n    # greater than the third one. \n    a = side1 + side2 \n    b = side1 + side3 \n    c = side2 + side3 \n       \n    if (a > side3) and (b > side2) and (c > side1): \n        return True\n    else: \n        return False\n\n# Driver Code \nside1 = 3 \nside2 = 4 \nside3 = 5  \nif valid_triangle(side1, side2, side3): \n    print(\"The triangle is valid\")\nelse: \n    print(\"The triangle is not valid\")"
    },
    {
        "task_id": 450,
        "text": "Write a function to extract specified size of strings from a give list of string values.",
        "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_string(str, l):",
        "question_1": "Generate a function in Python that takes a list of strings and a integer, and returns a new list with the strings that have length greater than or equal to the given integer.",
        "answer_1": "def filter_within_length(strings, length):\n    result = []\n    for string in strings:\n        if len(string) >= length:\n            result.append(string)\n    return result\n\nstrings = [\"Java\", \"C++\", \"Swift\", \"Python\", \"Kotlin\"]\nresult = filter_within_length(strings, 4)\nprint(result)",
        "question_2": "Create a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.",
        "answer_2": "def string_to_length(list_strings):\n    return [len(string) for string in list_strings]",
        "question_3": "Develop a python code to achieve the following goal",
        "answer_3": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths"
    },
    {
        "task_id": 451,
        "text": "Write a function to remove all whitespaces from the given string using regex.",
        "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_whitespaces(text1):",
        "question_1": "Create a Python program to remove all whitespaces from a string.",
        "answer_1": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")\n\nprint(remove_whitespace(\"This is a string with whitespaces\"))",
        "question_2": "Develop a function in Python to remove all the whitespaces from a given string.",
        "answer_2": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")",
        "question_3": "Generate a python program that removes all whitespace from a string.",
        "answer_3": "def remove_whitespace(x):\n   return x.replace(\" \", \"\")"
    },
    {
        "task_id": 452,
        "text": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def loss_amount(actual_cost,sale_amount):",
        "question_1": "Write a PYTHON program to find the profit or loss after selling a product.",
        "answer_1": "def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit",
        "question_2": "Modify this Python code to add an exception for invalid input.",
        "answer_2": "def calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a / b\n        return c\n    else:\n        raise ValueError",
        "question_3": "Translate the following pseudocode into Python:",
        "answer_3": "if number > 0:\n    print(\"positive\")\nelse:\n    print(\"negative\")"
    },
    {
        "task_id": 453,
        "text": "Write a python function to find the sum of even factors of a number.",
        "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math \r\ndef sumofFactors(n) :",
        "question_1": "Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number.",
        "answer_1": "def get_sum_even_factors(n):\n    sum = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n# Test \ninput_num = 50\nprint(get_sum_even_factors(input_num)) # returns 196",
        "question_2": "Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.",
        "answer_2": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12",
        "question_3": "In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.",
        "answer_3": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum"
    },
    {
        "task_id": 454,
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
            "assert text_match_wordz(\"xyz.\")==('Found a match!')",
            "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef text_match_wordz(text):",
        "question_1": "Write Python code to generate a random letter from A to Z.",
        "answer_1": "import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)",
        "question_2": "Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).",
        "answer_2": "import re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')",
        "question_3": "Formulate a regular expression in Python that matches words that starts with any two letters followed by two digits.",
        "answer_3": "regex = r\"^[a-zA-Z]{2}\\d{2}\""
    },
    {
        "task_id": 455,
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_monthnumb_number(monthnum2):",
        "question_1": "Create a Python program to print the number of days in a month.",
        "answer_1": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
        "question_2": "Write a Python program to determine the number of days in a month, given the month number as input.",
        "answer_2": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
        "question_3": "Write a python program that prints the number of days in a month.",
        "answer_3": "# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31"
    },
    {
        "task_id": 456,
        "text": "Write a function to reverse strings in a given list of string values.",
        "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def reverse_string_list(stringlist):",
        "question_1": "Create a program in Python that takes a list of strings and returns a new list with each string reversed.",
        "answer_1": "def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))",
        "question_2": "create a function in Python that takes an array of integers and returns a string of the array in reverse order.",
        "answer_2": "def reverse_list(arr):\n    rev_arr = []\n    for i in range(len(arr)-1,-1,-1):\n        rev_arr.append(arr[i])\n    return ''.join(map(str,rev_arr))\n\narr = [1, 3, 5, 7]\noutput_string = reverse_list(arr) \nprint(output_string)",
        "question_3": "Create a function in Python which takes a string and returns the reversed string",
        "answer_3": "def reverseString(string):\n    reversedString = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversedString += string[i]\n    return reversedString"
    },
    {
        "task_id": 457,
        "text": "Write a python function to find the sublist having minimum length.",
        "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Find_Min(lst):",
        "question_1": "Create a Python script to find the maximum and minimum values for each sublist in a list",
        "answer_1": "def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]",
        "question_2": "Write a Python script to find the maximum and the minimum value in a given list.",
        "answer_2": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val",
        "question_3": "Generate a python program to find the minimum element of a list.",
        "answer_3": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele"
    },
    {
        "task_id": 458,
        "text": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def rectangle_area(l,b):",
        "question_1": "Develop a Python function to calculate the area of a rectangle given its length and width.",
        "answer_1": "def calculate_rectangle_area(length, width):\n    return length * width",
        "question_2": "Write a Python class to represent a rectangle with length and width variables and a method to calculate the area.",
        "answer_2": "class Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width\n\n  def calculate_area(self):\n    return self.length * self.width\n\nrect = Rectangle(3, 4)\nprint(rect.calculate_area())",
        "question_3": "Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width.",
        "answer_3": "def area_rectangle(length, width):\n return length * width\n\nprint(area_rectangle(2, 3)) # Output: 6"
    },
    {
        "task_id": 459,
        "text": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_uppercase(str1):",
        "question_1": "Create a Python script to convert a given string into uppercase and lowercase.",
        "answer_1": "# Python program to convert string into\n# uppercase and lowercase\n \n# Function to convert the string \n# into uppercase and lowercase \ndef string_case(str): \n    upper_case = str.upper() # convert into uppercase \n    lower_case = str.lower() # convert into lowercase \n  \n    print(\"Original String: \", str) \n    print(\"Uppercase String: \", upper_case) \n    print(\"Lowercase String: \", lower_case) \n  \nstr = 'Hello, World!'\nstring_case(str)",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Create a Python program to edit the following string and make all characters in the string uppercase.",
        "answer_3": "def to_uppercase(input):\n    output = \"\"\n    for char in input:\n        output += char.upper()\n    return output"
    },
    {
        "task_id": 460,
        "text": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def Extract(lst):",
        "question_1": "Write a Python script that takes in a Python list and returns every other element as a sublist.",
        "answer_1": "def every_other_sublist(input_list):\n sublist = []\n for i in range(len(input_list)):\n if i % 2 == 0:\n sublist.append(input_list[i])\n return sublist",
        "question_2": "Generate a python program to print the first n elements of a given list.",
        "answer_2": "def print_n_elements(n, list):\n    for i in range(n):\n        print(list[i])",
        "question_3": "Develop a Python program to find and print all the sublists in a given list.",
        "answer_3": "def find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list)"
    },
    {
        "task_id": 461,
        "text": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def upper_ctr(str):",
        "question_1": "Create a Python program to count the number of upper case and lower case letters in a given string",
        "answer_1": "def countLetters(s): \n   uppercase, lowercase = 0, 0\n   for x in s: \n      if x.islower(): \n         lowercase+= 1\n      elif x.isupper(): \n         uppercase+= 1\n   print (\"No. of Upper case characters : \", uppercase) \n   print (\"No. of Lower case Characters : \", lowercase) \n\ncountLetters('Hello World')",
        "question_2": "Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.",
        "answer_2": "def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World'))",
        "question_3": "Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters.",
        "answer_3": "def count_uppercase_lowercase(s):\n  lowercase_count = 0\n  uppercase_count = 0\n  for c in s:\n    if c.isupper():\n      uppercase_count+=1\n    elif c.islower():\n      lowercase_count+=1\n  return uppercase_count, lowercase_count\n\nuppercase_count, lowercase_count =  count_uppercase_lowercase(\"This Is A Test String\")\nprint(\"Number of Uppercase letters : \", uppercase_count)\nprint(\"Number of Lowercase letters : \", lowercase_count)"
    },
    {
        "task_id": 462,
        "text": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def combinations_list(list1):",
        "question_1": "Generate a Python script to generate all combinations of a list.",
        "answer_1": "import itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')",
        "question_2": "Develop a function to generate all combinations of a given list in Python.",
        "answer_2": "def all_combinations(list_of_numbers): \n    if len(list_of_numbers) == 0: \n        return [] \n  \n    if len(list_of_numbers) == 1: \n        return [list_of_numbers] \n  \n    combinations = [] \n    for combination in all_combinations(list_of_numbers[1:]): \n        combinations.append(combination) \n        combinations.append([list_of_numbers[0]] + combination) \n  \n    return combinations",
        "question_3": "Create a Python script to generate all the combinations of a given list of integers.",
        "answer_3": "def generate_combinations(input_list):\n    import itertools\n    comb_list = []\n    # Get all possible combinations of the list\n    for subset in itertools.combinations(input_list,\n                                       len(input_list)):\n        comb_list.append(subset)\n    return comb_list"
    },
    {
        "task_id": 463,
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_subarray_product(arr):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Write a Python function to implement an algorithm.",
        "answer_3": "def largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len"
    },
    {
        "task_id": 464,
        "text": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_value(dict, n):",
        "question_1": "Generate a Python code snippet to check if all the values of a dictionary are True.",
        "answer_1": "all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.",
        "question_2": "Write a Python program to print all unique values in a dictionary.",
        "answer_2": "def printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)",
        "question_3": "Given a Python dictionary, print out the keys and values that are duplicated.",
        "answer_3": "for key, value in my_dict.items():\n    if my_dict.values().count(value) > 1:\n        print(key, value)"
    },
    {
        "task_id": 465,
        "text": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def drop_empty(dict1):",
        "question_1": "Create a function in Python to build an empty dictionary.",
        "answer_1": "def buildDictionary():\n  dictionary = dict()\n  return dictionary",
        "question_2": "Generate a Python code to create a class which creates an empty dictionary with the given keys.",
        "answer_2": "class EmptyDictionary:\n    def __init__(self, keys):\n        self.keys = [k.strip() for k in keys.split(\",\")]\n        self.dictionary = {k: None for k in self.keys}\n            \n    def get_dictionary(self):\n        return self.dictionary",
        "question_3": "Generate a valid Python code that will create an empty dictionary",
        "answer_3": "my_dict = {}"
    },
    {
        "task_id": 466,
        "text": "Write a function to find the peak element in the given array.",
        "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "test_list": [
            "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
            "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
            "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_peak_util(arr, low, high, n):",
        "question_1": "Optimize this program in Python to find the highest peak in a given array.",
        "answer_1": "def find_highest_peak(arr):\n  highest_peak = arr[0]\n  for i in range(1, len(arr)): \n    highest_peak = max(highest_peak, arr[i]) \n  return highest_peak",
        "question_2": "Utilizing the given data, write a Python program to identify the peak of maximum values in the data.",
        "answer_2": "def find_peaks(data):\n    max_val = None\n    max_idx = None\n    for i, val in enumerate(data):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_idx = i\n    return max_idx\n\ndata = [9, 2, 10, 5, 4, 8, 3, 7]\npeak_index = find_peaks(data)\nprint('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index]))",
        "question_3": "Can you create a loop in Python to find the highest value in an array?",
        "answer_3": "max_val = arr[0]\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val)"
    },
    {
        "task_id": 467,
        "text": "Write a python function to convert decimal number to octal number.",
        "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def decimal_to_Octal(deciNum):",
        "question_1": "Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.",
        "answer_1": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))",
        "question_2": "Create a function in Python to convert a binary string to a decimal number.",
        "answer_2": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal",
        "question_3": "Implement a Python function to convert a float to a string with two decimal places.",
        "answer_3": "def float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num)"
    },
    {
        "task_id": 468,
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
            "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_product(arr, n ):",
        "question_1": "Write a Python function to compute the maximum product of two elements in an array.",
        "answer_1": "def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2",
        "question_2": "Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer.",
        "answer_2": "def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num))",
        "question_3": "Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.",
        "answer_3": "def maxProduct(arr): \n    n = len(arr) \n    max_prod = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > 0 and arr[j] > 0: \n                max_prod = max(max_prod, arr[i] * arr[j]) \n  \n    return max_prod \n\n# Input\narray = [6, -3, -10, 0, 2]\n\n# Output\nresult = maxProduct(array)\nprint(result)"
    },
    {
        "task_id": 469,
        "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "test_list": [
            "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
            "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
            "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def max_profit(price, k):",
        "question_1": "Create an algorithm in Python to calculate the maximum profit that one can achieve from stock purchasing.",
        "answer_1": "def max_profit(prices):\n   max_profit = 0\n   for i in range(len(prices) - 1): \n      for j in range(i + 1, len(prices)): \n         if prices[j] - prices[i] > max_profit: \n            max_profit = prices[j] - prices[i]\n   return max_profit \n\nprices = [15, 12, 13, 10, 11, 16] \nprint(\"Maximum profit :\", max_profit(prices))",
        "question_2": "Write a Python program to calculate the maximum profit for a given stock over a given time period.",
        "answer_2": "def max_profit(stock):\n  current_max, max_profit = 0, 0\n  for i in range(1, len(stock)):\n    current_max = max(0, current_max + stock[i] - stock[i - 1])\n    max_profit = max(current_max, max_profit)\n  return max_profit\n\nprofit = max_profit([9, 11, 8, 12, 10, 15, 8])\nprint(f\"The maximum profit is: {profit}\")",
        "question_3": "Write a Python function to find the maximum profit when given a list of stock prices per day.",
        "answer_3": "def max_profit(stock_prices):\n    max_profit = 0\n    for i in range(len(stock_prices) - 1):\n        for j in range(i + 1, len(stock_prices)):\n            if stock_prices[j] - stock_prices[i] > max_profit:\n                max_profit = stock_prices[j] - stock_prices[i]\n    return max_profit\n\nif __name__ == \"__main__\":\n    stock_prices = [7, 1, 5, 3, 6, 4]\n    result = max_profit(stock_prices)\n    print(result)"
    },
    {
        "task_id": 470,
        "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_pairwise(test_tup):",
        "question_1": "Generate a Python program to add new elements to an existing tuple.",
        "answer_1": "# create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements",
        "question_2": "Generate a function for vector addition in Python.",
        "answer_2": "def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result)",
        "question_3": "Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.",
        "answer_3": "tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]"
    },
    {
        "task_id": 471,
        "text": "Write a python function to find remainder of array multiplication divided by n.",
        "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
            "assert find_remainder([1,1,1],3,1) == 0",
            "assert find_remainder([1,2,1],3,2) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find_remainder(arr, lens, n):",
        "question_1": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_1": "def get_remainder(a, b):\n    return a % b",
        "question_2": "Write a Python program to divide a given list into n equal lists.",
        "answer_2": "# Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]]",
        "question_3": "Compute with a Python program which elements of an array can be used as the divisor of other elements in the array.",
        "answer_3": "arr = [18, 30, 42, 45, 24]\n\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] != 0 and arr[j] % arr[i] == 0:\n            print(str(arr[i]) + ' divides ' + str(arr[j]))"
    },
    {
        "task_id": 472,
        "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def check_Consecutive(l):",
        "question_1": "Create a function in Python to identify consecutive numbers in a given list.",
        "answer_1": "def consecutive_numbers(lst):\n  count = 0\n  for i in range(len(lst)-1):\n    if lst[i+1] - lst[i] == 1:\n      count += 1\n    else:\n      count = 0\n  return count\n\n# Test Code\nlst = [1, 4, 6, 5, 2, 7, 9]\nresult = consecutive_numbers(lst)\nprint(result)\n\n# Output --> 2",
        "question_2": "Write a code to check how many consecutive elements are equal in a given Python list.",
        "answer_2": "def check_consecutive_equal(lst): \n    count = 1\n    max_count = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]: \n            count+=1\n        else:\n            if max_count < count:\n                max_count = count\n            count = 1\n  \n    return max(max_count, count)",
        "question_3": "Write a python code to find a set of consecutive numbers in a given list.",
        "answer_3": "def get_consecutive_numbers(numbers):\n  consecutive_numbers = []\n  for i in range(len(numbers)):\n    temp = [numbers[i]]\n    for j in range(i+1, len(numbers)):\n      if numbers[j] == numbers[i] + 1:\n        temp.append(numbers[j])\n        i += 1\n      else:\n        break\n    if len(temp) > 1:\n      consecutive_numbers.append(temp)\n\n  return consecutive_numbers\n\nif __name__ == '__main__':\n    print(get_consecutive_numbers([2, 3, 4, 5, 6, 7, 8, 10, 11, 12]))"
    },
    {
        "task_id": 473,
        "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def tuple_intersection(test_list1, test_list2):",
        "question_1": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_1": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "question_2": "Write a Python function to sort a list of tuples according to the second element of each tuple.",
        "answer_2": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list",
        "question_3": "Write a function to sort the given list of tuples in Python according to the second element of the tuple.",
        "answer_3": "def sort_by_second_elem(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1])"
    },
    {
        "task_id": 474,
        "text": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def replace_char(str1,ch,newch):",
        "question_1": "Create a Python function to replace a specific character in a string?",
        "answer_1": "def replace_char(string, character, replacement):\n   return string.replace(character, replacement)\n\nstring = \"Hello World\"\ncharacter = \"l\"\nreplacement = \"X\"\nprint(replace_char(string, character, replacement))",
        "question_2": "Generate a python function that takes in a string and replaces certain characters",
        "answer_2": "def replaceChar(s, charToReplace, replacementChar): \n    newStr = \"\"\n    for char in s:\n        if char == charToReplace:\n            newStr += replacementChar\n        else: \n            newStr += char\n    return newStr\n\nprint(replaceChar(\"hello world\", \"l\", \"a\")) # Output: \"heaaao worad\"",
        "question_3": "Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'.",
        "answer_3": "def replace_character(string, index):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i == index:\n            new_string += \"*\"\n        else:\n            new_string += string[i]\n    return new_string\n\nprint(replace_character(\"Hello world\", 3)) # Output: Hel*lo world"
    },
    {
        "task_id": 475,
        "text": "Write a function to sort counter by value.",
        "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "from collections import Counter\r\ndef sort_counter(dict1):",
        "question_1": "Generate a python script to sort a list of numbers.",
        "answer_1": "def sort_numbers(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums",
        "question_2": "Generate a script in Python that takes in a collection of numbers and returns a collection of the same numbers sorted in ascending order.",
        "answer_2": "def sortCollection(arr):\n    sortedArr = arr.sort()\n    return sortedArr",
        "question_3": "Generate a sort function to order a list of numbers by their frequency in Python.",
        "answer_3": "def sort_by_freq(nums):\n    \"\"\"\n    A sort function to order a list of numbers by their frequency.\n\n    Parameters\n    ----------\n    nums : List\n        A list of numbers\n\n    Returns\n    -------\n    List\n        The given list of numbers sorted by their frequency\n    \"\"\"\n    freq_map = {}\n    for num in nums:\n        if num not in freq_map:\n            freq_map[num] = 0\n        freq_map[num] += 1\n\n    sorted_nums = sorted(freq_map, key=freq_map.get, reverse=True)\n    return sorted_nums"
    },
    {
        "task_id": 476,
        "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def big_sum(nums):",
        "question_1": "Modify the Python program to calculate the sum of an array so that it finds the largest number in the array.",
        "answer_1": "def array_sum(arr):\n largest = 0\n for num in arr:\n largest = max(largest, num)\n return largest\n\nprint(array_sum([1, 2, 3, 4, 5]))",
        "question_2": "Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum.",
        "answer_2": "def find_largest_sum(lst):\n    largest_sum = 0\n    for i in range(len(lst) - 1):\n        current_sum = lst[i] + lst[i+1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum",
        "question_3": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.",
        "answer_3": "def findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum"
    },
    {
        "task_id": 477,
        "text": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(string):\r\n  return (string.lower())",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_lower(string):",
        "question_1": "Write a Python program to convert strings from upper case to lower case.",
        "answer_1": "def convert_lowercase(string):\n    return string.lower()",
        "question_2": "Create a Python program to convert a given string from lower to upper case.",
        "answer_2": "def convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string)",
        "question_3": "Write a python program to make all the characters of a string into lowercase.",
        "answer_3": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string"
    },
    {
        "task_id": 478,
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "question_1": "Write a python program to make all the characters of a string into lowercase.",
        "answer_1": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string",
        "question_2": "Write a Python program to convert strings from upper case to lower case.",
        "answer_2": "def convert_lowercase(string):\n    return string.lower()",
        "question_3": "Create a Python function that processes a string and returns the string in lowercase.",
        "answer_3": "def process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\""
    },
    {
        "task_id": 479,
        "text": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Digit(n) :",
        "question_1": "Create a basic function in Python to extract the first digit from a number.",
        "answer_1": "def firstDigit(num):\n\treturn int(str(num)[0])\n\nnum = 2458\nprint(firstDigit(num)) # 2",
        "question_2": "Design a function in Python that takes a positive integer and returns the sum of its digits.",
        "answer_2": "def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total",
        "question_3": "Write a Python list comprehension to extract the individual digits of a given number.",
        "answer_3": "[int(d) for d in str(num)]"
    },
    {
        "task_id": 480,
        "text": "Write a python function to find the maximum occurring character in a given string.",
        "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "test_list": [
            "assert get_max_occuring_char(\"data\") == \"a\"",
            "assert get_max_occuring_char(\"create\") == \"e\"",
            "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def get_max_occuring_char(str1):",
        "question_1": "Generate a python function that finds the maximum occurring character in a given string.",
        "answer_1": "\"\"\"\nA function that finds the maximum occurring character in a given string.\n\"\"\"\n\ndef maxCharFinder(string):\n    charDict = dict()\n\n    for char in string:\n        if char in charDict:\n            charDict[char] += 1\n        else:\n            charDict[char] = 1\n\n    maximumOccurChar = max(charDict, key=charDict.get)\n\n    return maximumOccurChar\n\nif __name__ == '__main__':\n    string = \"worldwide\"\n    print(maxCharFinder(string))",
        "question_2": "Develop a code to find out the maximum occurring character in a given String.",
        "answer_2": "my_string = \"Python is an interesting language\"\n\n# create an empty dictionary\ndi = {}\n\n# iterate through each character\nfor char in my_string:\n    # check if the character is already present in the dict\n    if char in di.keys():\n        # if present, increment the value of the character\n        di[char] += 1\n    else:\n        # if not present, set the value to 1\n        di[char] = 1\n\n# find the character with the maximum count\nmax_char = max(di, key=di.get)\n\n# display the maximum occurring character\nprint(f\"Maximum occurring character is: {max_char}\")",
        "question_3": "Design a program in Python to find the highest occurring character in a given string.",
        "answer_3": "def highest_occurring_char(str):\n    char_dict = {}\n    highest_count = 0\n    highest_char = \"\"\n    for char in str:\n        if char in char_dict:\n           char_dict[char] += 1 \n        else:\n            char_dict[char] = 1\n            \n        if char_dict[char] > highest_count:\n            highest_count = char_dict[char]\n            highest_char = char\n            \n    return highest_char\n\nmy_str = \"test string\"\nhighest_char = highest_occurring_char(my_str)\nprint(highest_char)"
    },
    {
        "task_id": 481,
        "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "test_list": [
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_subset_sum(set, n, sum):",
        "question_1": "Write a function to find all the possible subset sums of a given array.",
        "answer_1": "# Python program to find all possible subset sums\n\ndef find_subset_sums(arr):\n    sums = set()\n    for i in range(2**len(arr)):\n        csum = 0\n        for j in range(len(arr)):\n            if i & (1<<j):\n                csum += arr[j]\n        sums.add(csum)\n    return sums",
        "question_2": "Write a python program to check if a list contains a pair of elements that sum up to a given total.",
        "answer_2": "def is_sum_possible(nums, target_sum):\n    num_set = set(nums)\n\n    for num in num_set:\n        if (target_sum - num) in num_set:\n            return True\n    return False",
        "question_3": "Generate a python code for an algorithmic solution for the following problem:",
        "answer_3": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False"
    },
    {
        "task_id": 482,
        "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "test_list": [
            "assert match(\"Geeks\") == 'Yes'",
            "assert match(\"geeksforGeeks\") == 'Yes'",
            "assert match(\"geeks\") == 'No'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re \r\ndef match(text):",
        "question_1": "Create an algorithm in Python to convert a string to upper and lower case letters alternately.",
        "answer_1": "def alternatingCase(s): \n    result = \"\" \n    for i in range(len(s)):\n        if i % 2 == 0: \n            result = result + s[i].upper() \n        else: \n            result = result + s[i].lower() \n    return result \n\ns = \"Hello World\"\nprint(alternatingCase(s))",
        "question_2": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "answer_2": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "question_3": "Write a Python program to convert all the lower case letters in a string to upper case.",
        "answer_3": "print(''.join([i.upper() for i in \"hello World\"])) # HELLO WORLD"
    },
    {
        "task_id": 483,
        "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "test_list": [
            "assert first_Factorial_Divisible_Number(10) == 5",
            "assert first_Factorial_Divisible_Number(15) == 5",
            "assert first_Factorial_Divisible_Number(5) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def first_Factorial_Divisible_Number(x):",
        "question_1": "Design a Python function to compute the factorial of a given number.",
        "answer_1": "def factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "question_2": "Define a Python function to calculate the factorial of an integer number.",
        "answer_2": "def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)",
        "question_3": "Design a function in Python to compute the factorial of a given number.",
        "answer_3": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)"
    },
    {
        "task_id": 484,
        "text": "Write a function to remove the matching tuples from the given two tuples.",
        "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "test_list": [
            "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
            "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
            "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_matching_tuple(test_list1, test_list2):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.",
        "answer_2": "def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples))",
        "question_3": "Write a function in Python to remove duplicate entries from a list.",
        "answer_3": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))"
    },
    {
        "task_id": 485,
        "text": "Write a function to find the largest palindromic number in the given array.",
        "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "test_list": [
            "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
            "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
            "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def is_palindrome(n) :",
        "question_1": "Construct a Python algorithm to find the largest palindrome from the given array.",
        "answer_1": "def largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332]))",
        "question_2": "Write a Python program to find the largest palindrome number less than 4400.",
        "answer_2": "max_palindrome = 0\nfor i in range(4400, 0, -1): \n    if str(i) == str(i)[::-1]: \n        max_palindrome = i \n        break\nprint(max_palindrome) # Output: 4331",
        "question_3": "Develop a Python program to find the largest palindrome number in a given range.",
        "answer_3": "def get_largest_palindrome_in_range(min, max):\n    max_palindrome = 0\n    # Iterate over range\n    for x in range(min, max+1):\n        # Check if number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # If this palindrome is larger, update the maximum\n            if x > max_palindrome:\n                max_palindrome = x\n\n    return max_palindrome"
    },
    {
        "task_id": 486,
        "text": "Write a function to compute binomial probability for the given number.",
        "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def nCr(n, r):",
        "question_1": "Create a Python function to generate an array of random numbers that follows a binomial distribution.",
        "answer_1": "import numpy as np\n\ndef binomial(n, p):\n  return np.random.binomial(n, p)\n\ndist = binomial(n, p)",
        "question_2": "Create a Python function to find the probability of an event using the binomial distribution.",
        "answer_2": "from math import factorial\n\ndef binomial_probability(n, p, x):\n    \"\"\"Find the probability of an event using the binomial distribution.\n\n    Args:\n        n (int): The number of trials.\n        p (float): The probability of success of the event.\n        x (int): The number of successes.\n\n    Returns:\n        float: The probability of x successes in n trials.\n    \"\"\"\n    return factorial(n)/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)\n\nif __name__ == '__main__':\n    n = 10\n    p = 0.5\n    x = 6\n    result = binomial_probability(n, p, x)\n    print(result)",
        "question_3": "Write a Python function to calculate the probability of an event occurring.",
        "answer_3": "def probability(p): \n    return p \n  \nprint(f\"The probability of the event occurring is {probability(p)}\")"
    },
    {
        "task_id": 487,
        "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "test_list": [
            "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
            "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
            "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sort_tuple(tup):",
        "question_1": "Write a Python program to sort a list of tuples by increasing order of the second item of each tuple.",
        "answer_1": "def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples",
        "question_2": "Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.",
        "answer_2": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples(tuples))\n# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]",
        "question_3": "Write a Python function to sort the given list of tuples based on their second elements.",
        "answer_3": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order"
    },
    {
        "task_id": 488,
        "text": "Write a function to find the area of a pentagon.",
        "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "test_list": [
            "assert area_pentagon(5)==43.01193501472417",
            "assert area_pentagon(10)==172.0477400588967",
            "assert area_pentagon(15)==387.10741513251753"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef area_pentagon(a):",
        "question_1": "Write a Python program to calculate the area of a regular hexagon",
        "answer_1": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
        "question_2": "Extend a Python program to calculate the area of any regular polygon.",
        "answer_2": "def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)",
        "question_3": "Write a Python function to return the area of an equilateral triangle.",
        "answer_3": "def area_equilateral(side):\n    \"\"\"Calculate the area of an equilateral triangle from the side length.\"\"\"\n    return (math.sqrt(3)/4)*side**2;"
    },
    {
        "task_id": 489,
        "text": "Write a python function to find the frequency of the largest value in a given array.",
        "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "test_list": [
            "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
            "assert frequency_Of_Largest(3,[5,6,5]) == 1",
            "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def frequency_Of_Largest(n,arr):",
        "question_1": "Write a Python code to return the highest frequency element in a given array of integers.",
        "answer_1": "from collections import Counter\n\ndef highest_frequency(arr):\n    arr_counts = Counter(arr)\n    max_freq = 0\n    max_freq_num = 0\n    for num in arr_counts:\n        if arr_counts[num] > max_freq:\n            max_freq = arr_counts[num]\n            max_freq_num = num\n    return max_freq_num\n\nprint(highest_frequency(arr))",
        "question_2": "Write a Python script to take an array of integers and find the number with the highest frequency.",
        "answer_2": "def find_most_frequent(numbers):\n    frequency_dict = {}\n    for n in numbers:\n        if n in frequency_dict:\n            frequency_dict[n] += 1\n        else:\n            frequency_dict[n] = 1\n            \n    max_frequency = 0\n    most_frequent = 0\n    for k, v in frequency_dict.items():\n        if v > max_frequency:\n            max_frequency = v\n            most_frequent = k\n            \n    return most_frequent\n    \n# Usage\nnumbers = [1, 2, 3, 1, 2, 2]\nmost_frequent = find_most_frequent(numbers)\nprint(most_frequent) # Outputs 2",
        "question_3": "Make an algorithm in Python for printing the maximum frequency of an element in an array.",
        "answer_3": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2"
    },
    {
        "task_id": 490,
        "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "test_list": [
            "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
            "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
            "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def extract_symmetric(test_list):",
        "question_1": "Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.",
        "answer_1": "def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)",
        "question_2": "Write a Python program to convert a list to a tuple",
        "answer_2": "def list_to_tuple(list):\n    return tuple(list)",
        "question_3": "Generate a python code to create a list containing tuples of two elements each.",
        "answer_3": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)"
    },
    {
        "task_id": 491,
        "text": "Write a function to find the sum of geometric progression series.",
        "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "test_list": [
            "assert sum_gp(1,5,2)==31",
            "assert sum_gp(1,5,4)==341",
            "assert sum_gp(2,6,3)==728"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef sum_gp(a,n,r):",
        "question_1": "Generate a python code to find the sum of the n terms of a series given the first term and the common ratio",
        "answer_1": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum",
        "question_2": "Write a python function to calculate an exponential series",
        "answer_2": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "question_3": "Develop a program in Python to calculate the sum of the following series:",
        "answer_3": "def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))"
    },
    {
        "task_id": 492,
        "text": "Write a function to search an element in the given array by using binary search.",
        "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "test_list": [
            "assert binary_search([1,2,3,5,8], 6) == False",
            "assert binary_search([7, 8, 9, 10, 13], 10) == True",
            "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_search(item_list,item):",
        "question_1": "Create a function that implements a binary search algorithm in Python. The function should accept two parameters: an array of integers and a target value. The function should return the index of the target value within the array, or -1 if the value does not exist.",
        "answer_1": "def binary_search(arr, target):\n start = 0\n end = len(arr) - 1\n while start <= end:\n mid = (start + end) // 2\n if arr[mid] == target:\n return mid\n elif arr[mid] > target:\n end = mid - 1\n else:\n start = mid + 1\n return -1",
        "question_2": "Update the below Python script to perform binary search on a given array of integers.",
        "answer_2": "def binary_search(arr, x):\n n = len(arr)\n \n # Sort the given array in ascending order\n arr.sort()\n \n # print all elements\n for i in range(n):\n print(arr[i], end = \" \")\n \n #binary search\n start = 0\n end = n-1\n \n while start <= end:\n    mid = (start + end) // 2\n    if x == arr[mid]:\n return mid \n elif x > arr[mid]:\n start = mid + 1\n else:\n end = mid - 1\n \n return -1",
        "question_3": "Generate Python code to perform a binary search on a given array.",
        "answer_3": "def binary_search(arr, item):\n    start = 0\n    end = len(arr)-1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        guess = arr[mid]\n        if guess == item:\n            return mid\n        else:\n            if guess > item:\n                end = end - 1\n            else:\n                start = start + 1\n    return None"
    },
    {
        "task_id": 493,
        "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "test_list": [
            "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
            "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
            "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):",
        "question_1": "Write a Python script to generate a list of all possible 2D Point objects with coordinates between 1 and 10.",
        "answer_1": "points = []\n \nfor x in range(1, 11):\n    for y in range(1, 11):\n        points.append([x, y])\n \nprint(points)",
        "question_2": "Write a Python program to generate a list containing all the linear combinations of `x` and `y`, where `x` and `y` are given as input.",
        "answer_2": "x = [1, 2, 3]\ny = [4, 5, 6]\n\ncombinations = [[i, j] for i in x for j in y]\nprint(combinations)",
        "question_3": "Design a Python program to calculate the total number of possible routes between two points on a grid.",
        "answer_3": "def num_routes(grid_dim, start, end):\n    paths = 1\n    xdiff = end[0] - start[0]\n    ydiff = end[1] - start[1]\n    num_rows, num_cols = grid_dim\n    max_x = num_rows - 1 - xdiff\n    max_y = num_cols - 1 - ydiff\n    for x in range(0, max_x):\n        paths *= (x+ydiff+1)\n    for y in range(0, max_y):\n        paths *= (y+xdiff+1)\n    return int(paths/math.factorial(xdiff+ydiff))\n\nprint(num_routes([4,6], [0,0], [3,5])) // Output: 126"
    },
    {
        "task_id": 494,
        "text": "Write a function to convert the given binary tuple to integer.",
        "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "test_list": [
            "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
            "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
            "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def binary_to_integer(test_tup):",
        "question_1": "Create a function in Python to convert integer inputs to their binary representation.",
        "answer_1": "def int_to_binary(n):\n    \"\"\" Returns the binary representation of an integer. \"\"\"\n    return \"{0:b}\".format(n)",
        "question_2": "Write a python program to convert an integer to its binary form.",
        "answer_2": "def integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary",
        "question_3": "Construct a python code that can convert any given integer into its binary representation.",
        "answer_3": "def to_binary(n):\n    binary_rep = \"\"\n    while n > 0:\n        binary_rep = str(n%2) + binary_rep\n        n = int(n/2)\n    return binary_rep"
    },
    {
        "task_id": 495,
        "text": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "test_list": [
            "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
            "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
            "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import re\r\ndef remove_lowercase(str1):",
        "question_1": "Write a python program to make all the characters of a string into lowercase.",
        "answer_1": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string",
        "question_2": "Write a Python program to convert strings from upper case to lower case.",
        "answer_2": "def convert_lowercase(string):\n    return string.lower()",
        "question_3": "Create a regex pattern in Python to check if a given string contains only lowercase letters.",
        "answer_3": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 496,
        "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "test_list": [
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):",
        "question_1": "Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.",
        "answer_1": "def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest)",
        "question_2": "Develop a Python program that takes a list of integers as an input and sorts them in increasing order.",
        "answer_2": "def sortList(input_list):\n # Create an empty list to store the sorted elements\n sorted_list = []\n \n while len(input_list) > 0:\n # Take the first element of the input list\n min_element = input_list[0]\n \n # Get the index of the minimum element\n min_index = 0\n \n # Iterate over the list to find the index of the minimum element\n for i in range(1, len(input_list)):\n # Check if the current element is the smallest\n if input_list[i] < min_element:\n min_element = input_list[i]\n min_index = i\n \n # After finding the minimum element, append it to the sorted list\n sorted_list.append(min_element)\n \n # Remove the minimum element from the input list\n del input_list[min_index]\n \n # Return the sorted list\n return sorted_list\n \n# Test\ninput_list = [14, 2, 3, 12, 15, 8]\n\nsorted_list = sortList(input_list)\n\nprint(sorted_list)\n# Output: [2, 3, 8, 12, 14, 15]",
        "question_3": "Write a python program to search through a list of integers and find the smallest number.",
        "answer_3": "def find_smallest(int_list):\n    # set the minimum value to the first item in the list initially\n    min_val = int_list[0]\n    # loop over the list and compare each item to the minimum value\n    for num in int_list:\n        if num < min_val:\n            min_val = num\n    # return the minimum value\n    return min_val"
    },
    {
        "task_id": 497,
        "text": "Write a function to find the surface area of a cone.",
        "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "test_list": [
            "assert surfacearea_cone(5,12)==282.7433388230814",
            "assert surfacearea_cone(10,15)==880.5179353159282",
            "assert surfacearea_cone(19,17)==2655.923961165254"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "import math\r\ndef surfacearea_cone(r,h):",
        "question_1": "Create a Python program to calculate the surface area of a triangle with sides of length 3, 4, and 5.",
        "answer_1": "import math \n\ndef area(a, b, c): \n\ts = (a + b + c) / 2\n\treturn (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\na = 3\nb = 4\nc = 5\n\nprint('Surface Area of triangle is: {:.2f}'.format(area(a, b, c)))",
        "question_2": "Create a function in Python for calculating the surface area of a cube.",
        "answer_2": "def cube_area(side):\n return 6 * (side ** 2)",
        "question_3": "Develop a program in Python that calculates the total surface area of a cube.",
        "answer_3": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2"
    },
    {
        "task_id": 498,
        "text": "Write a python function to find gcd of two positive integers.",
        "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "test_list": [
            "assert gcd(12, 17) == 1",
            "assert gcd(4,6) == 2",
            "assert gcd(2,9) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def gcd(x, y):",
        "question_1": "Write a Python function to find the GCD of two numbers.",
        "answer_1": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "question_2": "Generate a function to find the GCD of two numbers in Python.",
        "answer_2": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b)",
        "question_3": "Develop a function to calculate the GCD of two given numbers in Python.",
        "answer_3": "def gcd(a, b): \n    if (b == 0): \n        return a \n    return gcd(b, a % b)"
    },
    {
        "task_id": 499,
        "text": "Write a function to find the diameter of a circle.",
        "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "test_list": [
            "assert diameter_circle(10)==20",
            "assert diameter_circle(40)==80",
            "assert diameter_circle(15)==30"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def diameter_circle(r):",
        "question_1": "Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.",
        "answer_1": "def circumference_of_circle(diameter):\n    circumference = 3.14 * diameter\n    return circumference",
        "question_2": "Write a Python script to calculate the circumference of a circle when the radius of the circle is given.",
        "answer_2": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)",
        "question_3": "Develop a function in Python to calculate the circumference of a circle.",
        "answer_3": "def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)"
    },
    {
        "task_id": 500,
        "text": "Write a function to concatenate all elements of the given list into a string.",
        "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "test_list": [
            "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
            "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
            "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def concatenate_elements(list):",
        "question_1": "Write a Python program to concatenate all the elements in a given list of strings.",
        "answer_1": "def concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result",
        "question_2": "Create a python program to take as input a list of strings and concatenate them into a single string.",
        "answer_2": "def concatenate_list(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result",
        "question_3": "Write a Python function to take the given list and return its elements joined into a single string.",
        "answer_3": "def join_list(lst):\n    return \" \".join(lst)"
    },
    {
        "task_id": 501,
        "text": "Write a python function to find common divisor between two numbers in a given pair.",
        "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
        "test_list": [
            "assert num_comm_div(2,4) == 2",
            "assert num_comm_div(2,8) == 2",
            "assert num_comm_div(12,24) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def ngcd(x,y):",
        "question_1": "Generate a function in Python which takes two parameters and determines the greatest common divisor between the two numbers.",
        "answer_1": "def find_gcd(a, b): \n    if a == 0: \n        return b \n    if b == 0: \n        return a \n    if a == b: \n        return a \n    if a > b: \n        return find_gcd(a-b, b) \n    return find_gcd(a, b-a)",
        "question_2": "Implement a function to find the greatest common divisor of two numbers in Python.",
        "answer_2": "def gcd(a, b): \n    if(a == 0): \n        return b \n    if(b == 0): \n        return a \n  \n    if(a == b): \n        return a \n  \n    if(a > b): \n        return gcd(a-b, b) \n    return gcd(a, b-a)",
        "question_3": "Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers.",
        "answer_3": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\nresult = greatest_common_divisor(12, 24)\nprint(result)"
    },
    {
        "task_id": 502,
        "text": "Write a python function to find remainder of two numbers.",
        "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)",
        "test_list": [
            "assert find(3,3) == 0",
            "assert find(10,3) == 1",
            "assert find(16,5) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def find(n,m):",
        "question_1": "Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.",
        "answer_1": "def get_remainder(a, b):\n    return a % b",
        "question_2": "Write a Python program to divide two numbers and print the quotient and the remainder.",
        "answer_2": "def divide(num1, num2):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    return quotient, remainder\n\nquotient, remainder = divide(15, 4)\nprint(\"Quotient :\", quotient)\nprint(\"Remainder :\", remainder)",
        "question_3": "Create a function called divide_numbers() in Python to divide two numbers and return the result.",
        "answer_3": "def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b"
    },
    {
        "task_id": 503,
        "text": "Write a function to add consecutive numbers of a given list.",
        "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "test_list": [
            "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
            "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
            "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def add_consecutive_nums(nums):",
        "question_1": "Create a function in Python to identify consecutive numbers in a given list.",
        "answer_1": "def consecutive_numbers(lst):\n  count = 0\n  for i in range(len(lst)-1):\n    if lst[i+1] - lst[i] == 1:\n      count += 1\n    else:\n      count = 0\n  return count\n\n# Test Code\nlst = [1, 4, 6, 5, 2, 7, 9]\nresult = consecutive_numbers(lst)\nprint(result)\n\n# Output --> 2",
        "question_2": "Given a list of integer values, write a Python program to find the number of consecutive values that are increasing.",
        "answer_2": "count = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count)",
        "question_3": "Create a python function that can receive a list of integers and return a list of tuples with consecutive numbers.",
        "answer_3": "def get_consecutive(arr):\n    result = []\n    i = 0\n    while i < len(arr):\n        s = i\n        while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1):\n            i += 1\n        result.append((arr[s], arr[i]))\n        i += 1\n    return result\n\n# Test \narr = [1, 2, 3, 7, 8, 9, 10]\nprint(get_consecutive(arr))\n# Output [(1, 3), (7, 10)]"
    },
    {
        "task_id": 504,
        "text": "Write a python function to find the cube sum of first n natural numbers.",
        "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
        "test_list": [
            "assert sum_Of_Series(5) == 225",
            "assert sum_Of_Series(2) == 9",
            "assert sum_Of_Series(3) == 36"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def sum_Of_Series(n):",
        "question_1": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "answer_1": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "question_2": "Create a function in Python that will take a list of elements and return the sum of their cube.",
        "answer_2": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum",
        "question_3": "Construct a program that computes the sum of the first n natural numbers in Python.",
        "answer_3": "def sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "task_id": 505,
        "text": "Write a function to move all zeroes to the end of the given array.",
        "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A",
        "test_list": [
            "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
            "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
            "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def re_order(A):",
        "question_1": "Compose a Python program to move zeros in a given list to the end.",
        "answer_1": "def move_zeroes(nums):\n    \"\"\"\n    Moves all the zeros in a given list to the end.\n    @param nums: List\n    @return: List\n    \"\"\"\n    i = 0\n    for num in nums:\n        if num != 0:\n            nums[i] = num\n            i += 1\n    while i < len(nums):\n        nums[i] = 0\n        i += 1\n    return nums",
        "question_2": "Craft an algorithm in Python to move all zeroes in a list to the end of the list.",
        "answer_2": "def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)",
        "question_3": "Write a Python program to create an array of N zeros.",
        "answer_3": "import numpy\n\ndef create_zeros_array(N):\n  return numpy.zeros(N)\n\nresult = create_zeros_array(N)\nprint(result)"
    },
    {
        "task_id": 506,
        "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
        "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def permutation_coefficient(n, k):",
        "question_1": "Create a function in Python that takes an integer input and prints all combinations of the numbers.",
        "answer_1": "def permutations(n):\n for i in range(n+1):\n  for j in range(n+1):\n   for k in range(n+1):\n    for l in range(n+1):\n     print(i,j,k,l)\n\n# Calling the function\npermutations(4)",
        "question_2": "Optimize the following code in Python to reduce its complexity.",
        "answer_2": "def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result",
        "question_3": "Generate a Python algorithm to generate permuations.",
        "answer_3": "def permute(nums):\n  res = []\n  generatePermutations(nums, 0, [], res)\n  return res\n\ndef generatePermutations(nums, index, current, result):\n  if index == len(nums):\n    result.append(current[:])\n  else:\n    for i in range(index, len(nums)):\n      current.append(nums[i])\n      generatePermutations(nums, index+1, current, result)\n      current.pop()"
    },
    {
        "task_id": 507,
        "text": "Write a function to remove specific words from a given list.",
        "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ",
        "test_list": [
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def remove_words(list1, removewords):",
        "question_1": "Create a function in Python to remove a specified element from a string of words.",
        "answer_1": "def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])",
        "question_2": "Write a Python function that takes a list of words and removes all words that are not equal to the given word.",
        "answer_2": "def remove_words(word, words):\n    return [w for w in words if w == word]",
        "question_3": "Create an algorithm to remove all occurrences of a word from an input string",
        "answer_3": "# Python 3 program to remove all occurrences \n# of a word from an input string\n  \n# Function to remove all occurrences of a word\n# from an input string\ndef remove_word(str, word): \n  \n    # split the string by spaces in a \n    lst = str.split()\n\n    # new list\n    lst2 = [] \n\n    # traverse in the list\n    for c in lst: \n  \n        if c != word: \n            lst2.append(c)\n\n    # join the words of list\n    return(\" \".join(lst2))\n\n# Driver code\nstr = \"This is a sample string with words to remove\"\nword = \"to\"\n\n# Function call\nresult = remove_word(str,word)\n\nprint(result)"
    },
    {
        "task_id": 508,
        "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
        "test_list": [
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
            "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def same_order(l1, l2):",
        "question_1": "Given two unsorted lists, create a Python program to identify the common elements between them.",
        "answer_1": "def common_elements(list1, list2):\n return [element for element in list1 if element in list2]\n\ncommon_elements(list1, list2) # Output: [2, 6]",
        "question_2": "Write a Python program to find the common elements between two given lists.",
        "answer_2": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common",
        "question_3": "Create a Python program to compare two given lists and return the common elements.",
        "answer_3": "def commonElements(listOne, listTwo):\n commonList = []\n for element in listOne:\n  if element in listTwo:\n   commonList.append(element)\n return commonList\n\nprint(commonElements(listOne, listTwo))"
    },
    {
        "task_id": 509,
        "text": "Write a python function to find the average of odd numbers till a given odd number.",
        "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
        "test_list": [
            "assert average_Odd(9) == 5",
            "assert average_Odd(5) == 3",
            "assert average_Odd(11) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def average_Odd(n) :",
        "question_1": "Create a python script to calculate the sum of even numbers and the average of odd numbers  in a given list.",
        "answer_1": "# Initializing sum and count variables\nsum_even = 0\ncount_odd = 0\n\n# Iterating through the list\nfor x in list:\n    # If number is even\n    if x % 2 == 0:\n        sum_even += x\n    # If number is odd\n    else:\n        count_odd += 1\n\n# Calculating average\nif count_odd > 0:\n    avg_odd = sum_even/count_odd\n\n# Printing results\nprint(\"Sum of even numbers:\", sum_even)\nprint(\"Average of odd numbers:\", avg_odd)",
        "question_2": "In Python, write a program to find the average of all the even numbers in a given list.",
        "answer_2": "def average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)/len(even_list)",
        "question_3": "Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list",
        "answer_3": "def odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result"
    },
    {
        "task_id": 510,
        "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
        "test_list": [
            "assert no_of_subsequences([1,2,3,4], 10) == 11",
            "assert no_of_subsequences([4,8,7,2], 50) == 9",
            "assert no_of_subsequences([5,6,7,8], 15) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "def_code": "def no_of_subsequences(arr, k):",
        "question_1": "Generate a function in Python that takes a list and returns a list of all possible subsequences.",
        "answer_1": "def get_subsequences(arr):\n    subsequences = [[]]\n    for num in arr:\n        new_subsequences = []\n        for sub in subsequences:\n            new_subsequences.append(sub + [num])\n        subsequences += new_subsequences\n    return subsequences\n\narr = [1, 2, 3]\nresult = get_subsequences(arr)\nprint(result)",
        "question_2": "Code a Python program that takes an array of integers and forms them into subarrays of length k.",
        "answer_2": "def form_subarrays(array, k):\n    subarrays = []\n    start = 0\n    end = k\n   \n    # loop until all of the elements are placed in \n    # subarrays\n    while start < len(array):\n        subarrays.append(array[start:end])\n        start += k\n        end += k\n    \n    return subarrays",
        "question_3": "Code a solution to this leetcode problem using Python.",
        "answer_3": "def subarraySum(nums, k):\n    count = 0\n    sums = [0]*(len(nums) + 1)\n    for i in range(1,len(nums) + 1):\n        sums[i] = sums[i-1] + nums[i-1]\n\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums) + 1):\n            if sums[j] - sums[i] == k:\n                count += 1\n    return count"
    }
]