2024-10-29 11:16:22 - INFO - __main__ - Initializing training script
2024-10-29 11:16:22 - INFO - __main__ - Loading dataset...
2024-10-29 11:16:22 - INFO - __main__ - Loading model and tokenizer...
Some weights of RobertaForSequenceClassificationWithAdapters were not initialized from the model checkpoint at roberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight', 'roberta.encoder.layer.0.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.0.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.0.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.0.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.0.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.0.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.0.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.0.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.1.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.1.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.1.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.1.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.1.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.1.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.1.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.1.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.10.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.10.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.10.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.10.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.10.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.10.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.10.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.10.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.11.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.11.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.11.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.11.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.11.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.11.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.11.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.11.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.2.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.2.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.2.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.2.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.2.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.2.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.2.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.2.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.3.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.3.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.3.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.3.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.3.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.3.output.adapter_before_ffn.down_project.weight', 'roberta.encoder.layer.3.output.adapter_before_ffn.up_project.bias', 'roberta.encoder.layer.3.output.adapter_before_ffn.up_project.weight', 'roberta.encoder.layer.4.output.adapter_after_ffn.down_project.bias', 'roberta.encoder.layer.4.output.adapter_after_ffn.down_project.weight', 'roberta.encoder.layer.4.output.adapter_after_ffn.up_project.bias', 'roberta.encoder.layer.4.output.adapter_after_ffn.up_project.weight', 'roberta.encoder.layer.4.output.adapter_before_ffn.down_project.bias', 'roberta.encoder.layer.4.output.adapter_before_ffn.down_project.weight', 'roberta.e
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Map: 100%|██████████████████████████████████████████████████████████████████████████| 3452/3452 [00:00<00:00, 15794.21 examples/s]
Map: 100%|██████████████████████████████████████████████████████████████████████████| 1120/1120 [00:00<00:00, 14716.86 examples/s]
/root/HW2/task3/train.py:103: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
2024-10-29 11:16:27 - INFO - __main__ - Starting training...
  0%|                                                                                                     | 0/324 [00:00<?, ?it/s]/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn(
 33%|██████████████████████████████▎                                                            | 108/324 [00:38<00:59,  3.64it/s]/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
{'loss': 1.0281, 'grad_norm': 1.1708216667175293, 'learning_rate': 4.845679012345679e-05, 'epoch': 0.09}
{'loss': 0.9669, 'grad_norm': 1.803255558013916, 'learning_rate': 4.691358024691358e-05, 'epoch': 0.19}
{'loss': 0.9726, 'grad_norm': 0.8239628672599792, 'learning_rate': 4.5370370370370374e-05, 'epoch': 0.28}
{'loss': 0.9703, 'grad_norm': 1.844795823097229, 'learning_rate': 4.3827160493827164e-05, 'epoch': 0.37}
{'loss': 0.9357, 'grad_norm': 1.0623584985733032, 'learning_rate': 4.2283950617283955e-05, 'epoch': 0.46}
{'loss': 0.9554, 'grad_norm': 1.0102022886276245, 'learning_rate': 4.074074074074074e-05, 'epoch': 0.56}
{'loss': 0.9611, 'grad_norm': 2.6213529109954834, 'learning_rate': 3.9197530864197535e-05, 'epoch': 0.65}
{'loss': 0.9451, 'grad_norm': 0.9978695511817932, 'learning_rate': 3.7654320987654326e-05, 'epoch': 0.74}
{'loss': 0.9917, 'grad_norm': 3.3897931575775146, 'learning_rate': 3.611111111111111e-05, 'epoch': 0.83}
{'loss': 0.9683, 'grad_norm': 0.723053514957428, 'learning_rate': 3.45679012345679e-05, 'epoch': 0.93}
  warnings.warn(                                                                                                                  
{'eval_loss': 0.8949678540229797, 'eval_accuracy': 0.65, 'eval_micro_f1': 0.65, 'eval_macro_f1': 0.2626262626262626, 'eval_runtime': 6.1395, 'eval_samples_per_second': 182.427, 'eval_steps_per_second': 5.701, 'epoch': 1.0}
 67%|████████████████████████████████████████████████████████████▋                              | 216/324 [01:15<00:30,  3.49it/s]/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
{'loss': 0.9535, 'grad_norm': 2.7288572788238525, 'learning_rate': 3.30246913580247e-05, 'epoch': 1.02}
{'loss': 0.9506, 'grad_norm': 1.4119410514831543, 'learning_rate': 3.148148148148148e-05, 'epoch': 1.11}
{'loss': 0.9119, 'grad_norm': 1.7872759103775024, 'learning_rate': 2.993827160493827e-05, 'epoch': 1.2}
{'loss': 0.94, 'grad_norm': 0.5861098766326904, 'learning_rate': 2.839506172839506e-05, 'epoch': 1.3}
{'loss': 1.016, 'grad_norm': 0.5337265133857727, 'learning_rate': 2.6851851851851855e-05, 'epoch': 1.39}
{'loss': 0.9572, 'grad_norm': 0.9624673128128052, 'learning_rate': 2.5308641975308646e-05, 'epoch': 1.48}
{'loss': 0.9355, 'grad_norm': 1.84381902217865, 'learning_rate': 2.3765432098765433e-05, 'epoch': 1.57}
{'loss': 0.9616, 'grad_norm': 1.0929934978485107, 'learning_rate': 2.2222222222222223e-05, 'epoch': 1.67}
{'loss': 0.9165, 'grad_norm': 1.5345802307128906, 'learning_rate': 2.0679012345679014e-05, 'epoch': 1.76}
{'loss': 0.9171, 'grad_norm': 1.0694730281829834, 'learning_rate': 1.91358024691358e-05, 'epoch': 1.85}
{'loss': 0.9442, 'grad_norm': 2.503450870513916, 'learning_rate': 1.7592592592592595e-05, 'epoch': 1.94}
  warnings.warn(                                                                                                                  
{'eval_loss': 0.8931643962860107, 'eval_accuracy': 0.65, 'eval_micro_f1': 0.65, 'eval_macro_f1': 0.2626262626262626, 'eval_runtime': 6.3068, 'eval_samples_per_second': 177.585, 'eval_steps_per_second': 5.55, 'epoch': 2.0}
100%|███████████████████████████████████████████████████████████████████████████████████████████| 324/324 [01:45<00:00,  3.56it/s]/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
{'loss': 0.9434, 'grad_norm': 1.0720713138580322, 'learning_rate': 1.604938271604938e-05, 'epoch': 2.04}
{'loss': 0.9441, 'grad_norm': 2.085113048553467, 'learning_rate': 1.4506172839506174e-05, 'epoch': 2.13}
{'loss': 0.9, 'grad_norm': 1.1033450365066528, 'learning_rate': 1.2962962962962962e-05, 'epoch': 2.22}
{'loss': 0.8615, 'grad_norm': 0.9791131019592285, 'learning_rate': 1.1419753086419753e-05, 'epoch': 2.31}
{'loss': 0.9655, 'grad_norm': 0.7432281970977783, 'learning_rate': 9.876543209876543e-06, 'epoch': 2.41}
{'loss': 0.9598, 'grad_norm': 1.8408950567245483, 'learning_rate': 8.333333333333334e-06, 'epoch': 2.5}
{'loss': 0.9135, 'grad_norm': 1.0151798725128174, 'learning_rate': 6.790123456790123e-06, 'epoch': 2.59}
{'loss': 0.9806, 'grad_norm': 3.0499696731567383, 'learning_rate': 5.246913580246914e-06, 'epoch': 2.69}
{'loss': 0.966, 'grad_norm': 1.248782753944397, 'learning_rate': 3.7037037037037037e-06, 'epoch': 2.78}
{'loss': 0.9525, 'grad_norm': 1.4511194229125977, 'learning_rate': 2.1604938271604937e-06, 'epoch': 2.87}
{'loss': 0.9182, 'grad_norm': 1.4036351442337036, 'learning_rate': 6.17283950617284e-07, 'epoch': 2.96}
  warnings.warn(
100%|███████████████████████████████████████████████████████████████████████████████████████████| 324/324 [01:52<00:00,  2.88it/s]
2024-10-29 11:18:20 - INFO - __main__ - Starting evaluation...                                                                    
{'eval_loss': 0.8884842395782471, 'eval_accuracy': 0.65, 'eval_micro_f1': 0.65, 'eval_macro_f1': 0.2626262626262626, 'eval_runtime': 5.8987, 'eval_samples_per_second': 189.871, 'eval_steps_per_second': 5.933, 'epoch': 3.0}
{'train_runtime': 112.5241, 'train_samples_per_second': 92.034, 'train_steps_per_second': 2.879, 'train_loss': 0.9500694193957765, 'epoch': 3.0}
/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn(
100%|█████████████████████████████████████████████████████████████████████████████████████████████| 35/35 [00:05<00:00,  6.16it/s]
2024-10-29 11:18:25 - INFO - __main__ - Evaluation results: {'eval_loss': 0.8884842395782471, 'eval_accuracy': 0.65, 'eval_micro_f1': 0.65, 'eval_macro_f1': 0.2626262626262626, 'eval_runtime': 5.8146, 'eval_samples_per_second': 192.618, 'eval_steps_per_second': 6.019, 'epoch': 3.0}
2024-10-29 11:18:25 - INFO - __main__ - Training complete.
