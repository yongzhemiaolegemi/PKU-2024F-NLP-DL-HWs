2024-10-29 10:04:54 - INFO - __main__ - Initializing training script
2024-10-29 10:04:54 - INFO - __main__ - Loading dataset...
2024-10-29 10:04:54 - INFO - __main__ - Loading model and tokenizer...
Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at roberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Map: 100%|██████████████████████████████████████████████████████████████████████████| 3452/3452 [00:00<00:00, 15543.41 examples/s]
Map: 100%|██████████████████████████████████████████████████████████████████████████| 1120/1120 [00:00<00:00, 13134.83 examples/s]
/root/HW2/task2/train.py:99: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.

2024-10-29 10:05:00 - INFO - __main__ - Starting training...
  0%|                                                                                                     | 0/324 [00:00<?, ?it/s]/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn(
 24%|██████████████████████▏                                                                     | 78/324 [00:15<00:45,  5.36it/s]Traceback (most recent call last):
{'loss': 0.9892, 'grad_norm': 2.5217244625091553, 'learning_rate': 4.845679012345679e-05, 'epoch': 0.09}
{'loss': 0.8001, 'grad_norm': 8.167370796203613, 'learning_rate': 4.691358024691358e-05, 'epoch': 0.19}
{'loss': 0.6816, 'grad_norm': 5.996285438537598, 'learning_rate': 4.5370370370370374e-05, 'epoch': 0.28}
{'loss': 0.6868, 'grad_norm': 27.93622589111328, 'learning_rate': 4.3827160493827164e-05, 'epoch': 0.37}
{'loss': 0.6536, 'grad_norm': 9.926047325134277, 'learning_rate': 4.2283950617283955e-05, 'epoch': 0.46}
{'loss': 0.6779, 'grad_norm': 21.3170166015625, 'learning_rate': 4.074074074074074e-05, 'epoch': 0.56}
{'loss': 0.579, 'grad_norm': 6.145299911499023, 'learning_rate': 3.9197530864197535e-05, 'epoch': 0.65}
  File "/root/HW2/task2/train.py", line 113, in <module>
    if training_args.do_train:
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/transformers/trainer.py", line 2122, in train
    return inner_training_loop(
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/transformers/trainer.py", line 2474, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/transformers/trainer.py", line 3572, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/transformers/trainer.py", line 3625, in compute_loss
    outputs = model(**inputs)
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 192, in forward
    replicas = self.replicate(self.module, self.device_ids[: len(inputs)])
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 199, in replicate
    return replicate(module, device_ids, not torch.is_grad_enabled())
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/parallel/replicate.py", line 160, in replicate
    replica = module._replicate_for_data_parallel()
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/modules/module.py", line 2980, in _replicate_for_data_parallel
    replica._modules = replica._modules.copy()
  File "/root/miniconda3/envs/pytorch/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1965, in __setattr__
    modules = self.__dict__.get("_modules")
KeyboardInterrupt
